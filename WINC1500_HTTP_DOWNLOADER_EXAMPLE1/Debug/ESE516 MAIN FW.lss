
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000190a4  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000298  20000000  0002b0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005348  20000298  0002b33c  00020298  2**2
                  ALLOC
  3 .stack        00002000  200055e0  00030684  00020298  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000cd684  00000000  00000000  00020319  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000114c1  00000000  00000000  000ed99d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00037cb8  00000000  00000000  000fee5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002ae0  00000000  00000000  00136b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003808  00000000  00000000  001395f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000285e6  00000000  00000000  0013cdfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0004ce98  00000000  00000000  001653e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000bc42f  00000000  00000000  001b227c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00008dc8  00000000  00000000  0026e6ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	e0 75 00 20 a9 f8 01 00 8d f8 01 00 8d f8 01 00     .u. ............
	...
   1202c:	75 65 01 00 00 00 00 00 00 00 00 00 51 66 01 00     ue..........Qf..
   1203c:	95 66 01 00 8d f8 01 00 8d f8 01 00 8d f8 01 00     .f..............
   1204c:	85 d9 01 00 05 d6 01 00 8d f8 01 00 8d f8 01 00     ................
   1205c:	8d f8 01 00 8d f8 01 00 ad dd 01 00 bd dd 01 00     ................
   1206c:	cd dd 01 00 dd dd 01 00 ed dd 01 00 fd dd 01 00     ................
   1207c:	5d f8 01 00 6d f8 01 00 7d f8 01 00 09 50 01 00     ]...m...}....P..
   1208c:	19 50 01 00 29 50 01 00 00 00 00 00 00 00 00 00     .P..)P..........
   1209c:	8d f8 01 00 8d f8 01 00 8d f8 01 00 8d f8 01 00     ................
   120ac:	8d f8 01 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000298 	.word	0x20000298
   120d4:	00000000 	.word	0x00000000
   120d8:	0002b0a4 	.word	0x0002b0a4

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	2000029c 	.word	0x2000029c
   12108:	0002b0a4 	.word	0x0002b0a4
   1210c:	0002b0a4 	.word	0x0002b0a4
   12110:	00000000 	.word	0x00000000

00012114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   12114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12116:	2207      	movs	r2, #7
   12118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1211a:	421a      	tst	r2, r3
   1211c:	d1fc      	bne.n	12118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
   1211e:	4770      	bx	lr

00012120 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   12120:	b570      	push	{r4, r5, r6, lr}
   12122:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12124:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12126:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12128:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
   1212a:	8b83      	ldrh	r3, [r0, #28]
   1212c:	1aed      	subs	r5, r5, r3
   1212e:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
   12130:	8b83      	ldrh	r3, [r0, #28]
   12132:	3b01      	subs	r3, #1
   12134:	b29b      	uxth	r3, r3
   12136:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
   12138:	0113      	lsls	r3, r2, #4
   1213a:	d51d      	bpl.n	12178 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
   1213c:	7ac3      	ldrb	r3, [r0, #11]
   1213e:	2b00      	cmp	r3, #0
   12140:	d003      	beq.n	1214a <_i2c_master_read+0x2a>
   12142:	8b83      	ldrh	r3, [r0, #28]
   12144:	b29b      	uxth	r3, r3
   12146:	2b01      	cmp	r3, #1
   12148:	d010      	beq.n	1216c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
   1214a:	8ba3      	ldrh	r3, [r4, #28]
   1214c:	b29b      	uxth	r3, r3
   1214e:	2b00      	cmp	r3, #0
   12150:	d102      	bne.n	12158 <_i2c_master_read+0x38>
		if (module->send_stop) {
   12152:	7aa3      	ldrb	r3, [r4, #10]
   12154:	2b00      	cmp	r3, #0
   12156:	d11c      	bne.n	12192 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   12158:	0020      	movs	r0, r4
   1215a:	4b12      	ldr	r3, [pc, #72]	; (121a4 <_i2c_master_read+0x84>)
   1215c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   1215e:	6a23      	ldr	r3, [r4, #32]
   12160:	195d      	adds	r5, r3, r5
   12162:	2328      	movs	r3, #40	; 0x28
   12164:	5cf3      	ldrb	r3, [r6, r3]
   12166:	b2db      	uxtb	r3, r3
   12168:	702b      	strb	r3, [r5, #0]
}
   1216a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1216c:	6872      	ldr	r2, [r6, #4]
   1216e:	2380      	movs	r3, #128	; 0x80
   12170:	02db      	lsls	r3, r3, #11
   12172:	4313      	orrs	r3, r2
   12174:	6073      	str	r3, [r6, #4]
   12176:	e7e8      	b.n	1214a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
   12178:	7ac3      	ldrb	r3, [r0, #11]
   1217a:	2b00      	cmp	r3, #0
   1217c:	d0e5      	beq.n	1214a <_i2c_master_read+0x2a>
   1217e:	8b83      	ldrh	r3, [r0, #28]
   12180:	b29b      	uxth	r3, r3
   12182:	2b00      	cmp	r3, #0
   12184:	d1e1      	bne.n	1214a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12186:	6872      	ldr	r2, [r6, #4]
   12188:	2380      	movs	r3, #128	; 0x80
   1218a:	02db      	lsls	r3, r3, #11
   1218c:	4313      	orrs	r3, r2
   1218e:	6073      	str	r3, [r6, #4]
   12190:	e7db      	b.n	1214a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
   12192:	0020      	movs	r0, r4
   12194:	4b03      	ldr	r3, [pc, #12]	; (121a4 <_i2c_master_read+0x84>)
   12196:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12198:	6872      	ldr	r2, [r6, #4]
   1219a:	23c0      	movs	r3, #192	; 0xc0
   1219c:	029b      	lsls	r3, r3, #10
   1219e:	4313      	orrs	r3, r2
   121a0:	6073      	str	r3, [r6, #4]
   121a2:	e7d9      	b.n	12158 <_i2c_master_read+0x38>
   121a4:	00012115 	.word	0x00012115

000121a8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   121a8:	b570      	push	{r4, r5, r6, lr}
   121aa:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   121ac:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   121ae:	8b6b      	ldrh	r3, [r5, #26]
   121b0:	075b      	lsls	r3, r3, #29
   121b2:	d503      	bpl.n	121bc <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   121b4:	221e      	movs	r2, #30
   121b6:	2325      	movs	r3, #37	; 0x25
   121b8:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
   121ba:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
   121bc:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
   121be:	8b83      	ldrh	r3, [r0, #28]
   121c0:	1af6      	subs	r6, r6, r3
   121c2:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
   121c4:	8b83      	ldrh	r3, [r0, #28]
   121c6:	3b01      	subs	r3, #1
   121c8:	b29b      	uxth	r3, r3
   121ca:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
   121cc:	4b04      	ldr	r3, [pc, #16]	; (121e0 <_i2c_master_write+0x38>)
   121ce:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   121d0:	6a23      	ldr	r3, [r4, #32]
   121d2:	199e      	adds	r6, r3, r6
   121d4:	7833      	ldrb	r3, [r6, #0]
   121d6:	b2db      	uxtb	r3, r3
   121d8:	2228      	movs	r2, #40	; 0x28
   121da:	54ab      	strb	r3, [r5, r2]
   121dc:	e7ed      	b.n	121ba <_i2c_master_write+0x12>
   121de:	46c0      	nop			; (mov r8, r8)
   121e0:	00012115 	.word	0x00012115

000121e4 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   121e4:	b570      	push	{r4, r5, r6, lr}
   121e6:	0005      	movs	r5, r0
   121e8:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   121ea:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   121ec:	7a4b      	ldrb	r3, [r1, #9]
   121ee:	2b00      	cmp	r3, #0
   121f0:	d11a      	bne.n	12228 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   121f2:	6873      	ldr	r3, [r6, #4]
   121f4:	4a13      	ldr	r2, [pc, #76]	; (12244 <_i2c_master_write_packet+0x60>)
   121f6:	4013      	ands	r3, r2
   121f8:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   121fa:	6863      	ldr	r3, [r4, #4]
   121fc:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
   121fe:	8863      	ldrh	r3, [r4, #2]
   12200:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12202:	2200      	movs	r2, #0
   12204:	2324      	movs	r3, #36	; 0x24
   12206:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
   12208:	3205      	adds	r2, #5
   1220a:	3301      	adds	r3, #1
   1220c:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   1220e:	3b22      	subs	r3, #34	; 0x22
   12210:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12212:	7a23      	ldrb	r3, [r4, #8]
   12214:	2b00      	cmp	r3, #0
   12216:	d10b      	bne.n	12230 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12218:	8823      	ldrh	r3, [r4, #0]
   1221a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   1221c:	7a62      	ldrb	r2, [r4, #9]
   1221e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12220:	4313      	orrs	r3, r2
   12222:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
   12224:	2000      	movs	r0, #0
   12226:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12228:	7a89      	ldrb	r1, [r1, #10]
   1222a:	4b07      	ldr	r3, [pc, #28]	; (12248 <_i2c_master_write_packet+0x64>)
   1222c:	4798      	blx	r3
   1222e:	e7e0      	b.n	121f2 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12230:	8823      	ldrh	r3, [r4, #0]
   12232:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12234:	7a62      	ldrb	r2, [r4, #9]
   12236:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12238:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1223a:	2280      	movs	r2, #128	; 0x80
   1223c:	0212      	lsls	r2, r2, #8
   1223e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12240:	6273      	str	r3, [r6, #36]	; 0x24
   12242:	e7ef      	b.n	12224 <_i2c_master_write_packet+0x40>
   12244:	fffbffff 	.word	0xfffbffff
   12248:	00014f85 	.word	0x00014f85

0001224c <_i2c_master_read_packet>:
{
   1224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1224e:	0005      	movs	r5, r0
   12250:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12252:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
   12254:	684b      	ldr	r3, [r1, #4]
   12256:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
   12258:	884b      	ldrh	r3, [r1, #2]
   1225a:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   1225c:	2201      	movs	r2, #1
   1225e:	2324      	movs	r3, #36	; 0x24
   12260:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
   12262:	3204      	adds	r2, #4
   12264:	3301      	adds	r3, #1
   12266:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12268:	6837      	ldr	r7, [r6, #0]
   1226a:	013f      	lsls	r7, r7, #4
   1226c:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
   1226e:	7a4b      	ldrb	r3, [r1, #9]
   12270:	2b00      	cmp	r3, #0
   12272:	d117      	bne.n	122a4 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
   12274:	2f00      	cmp	r7, #0
   12276:	d002      	beq.n	1227e <_i2c_master_read_packet+0x32>
   12278:	8863      	ldrh	r3, [r4, #2]
   1227a:	2b01      	cmp	r3, #1
   1227c:	d016      	beq.n	122ac <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   1227e:	6873      	ldr	r3, [r6, #4]
   12280:	4a20      	ldr	r2, [pc, #128]	; (12304 <_i2c_master_read_packet+0xb8>)
   12282:	4013      	ands	r3, r2
   12284:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
   12286:	7a23      	ldrb	r3, [r4, #8]
   12288:	2b00      	cmp	r3, #0
   1228a:	d115      	bne.n	122b8 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
   1228c:	2303      	movs	r3, #3
   1228e:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12290:	8823      	ldrh	r3, [r4, #0]
   12292:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12294:	7a62      	ldrb	r2, [r4, #9]
   12296:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12298:	4313      	orrs	r3, r2
   1229a:	2201      	movs	r2, #1
   1229c:	4313      	orrs	r3, r2
   1229e:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
   122a0:	2000      	movs	r0, #0
}
   122a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   122a4:	7a89      	ldrb	r1, [r1, #10]
   122a6:	4b18      	ldr	r3, [pc, #96]	; (12308 <_i2c_master_read_packet+0xbc>)
   122a8:	4798      	blx	r3
   122aa:	e7e3      	b.n	12274 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   122ac:	6872      	ldr	r2, [r6, #4]
   122ae:	2380      	movs	r3, #128	; 0x80
   122b0:	02db      	lsls	r3, r3, #11
   122b2:	4313      	orrs	r3, r2
   122b4:	6073      	str	r3, [r6, #4]
   122b6:	e7e6      	b.n	12286 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
   122b8:	8823      	ldrh	r3, [r4, #0]
   122ba:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   122bc:	7a62      	ldrb	r2, [r4, #9]
   122be:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   122c0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   122c2:	2280      	movs	r2, #128	; 0x80
   122c4:	0212      	lsls	r2, r2, #8
   122c6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
   122c8:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
   122ca:	0028      	movs	r0, r5
   122cc:	4b0f      	ldr	r3, [pc, #60]	; (1230c <_i2c_master_read_packet+0xc0>)
   122ce:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   122d0:	6873      	ldr	r3, [r6, #4]
   122d2:	4a0c      	ldr	r2, [pc, #48]	; (12304 <_i2c_master_read_packet+0xb8>)
   122d4:	4013      	ands	r3, r2
   122d6:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
   122d8:	2800      	cmp	r0, #0
   122da:	d1e2      	bne.n	122a2 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
   122dc:	0028      	movs	r0, r5
   122de:	4b0c      	ldr	r3, [pc, #48]	; (12310 <_i2c_master_read_packet+0xc4>)
   122e0:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
   122e2:	2800      	cmp	r0, #0
   122e4:	d1dd      	bne.n	122a2 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
   122e6:	2303      	movs	r3, #3
   122e8:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   122ea:	8823      	ldrh	r3, [r4, #0]
   122ec:	0a1b      	lsrs	r3, r3, #8
   122ee:	2278      	movs	r2, #120	; 0x78
   122f0:	4313      	orrs	r3, r2
   122f2:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   122f4:	7a62      	ldrb	r2, [r4, #9]
   122f6:	0392      	lsls	r2, r2, #14
   122f8:	2101      	movs	r1, #1
   122fa:	430a      	orrs	r2, r1
   122fc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   122fe:	6273      	str	r3, [r6, #36]	; 0x24
   12300:	e7cf      	b.n	122a2 <_i2c_master_read_packet+0x56>
   12302:	46c0      	nop			; (mov r8, r8)
   12304:	fffbffff 	.word	0xfffbffff
   12308:	00014f85 	.word	0x00014f85
   1230c:	00014f59 	.word	0x00014f59
   12310:	00014f29 	.word	0x00014f29

00012314 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
   12314:	1c93      	adds	r3, r2, #2
   12316:	009b      	lsls	r3, r3, #2
   12318:	18c3      	adds	r3, r0, r3
   1231a:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
   1231c:	7e03      	ldrb	r3, [r0, #24]
   1231e:	2101      	movs	r1, #1
   12320:	4091      	lsls	r1, r2
   12322:	430b      	orrs	r3, r1
   12324:	b2db      	uxtb	r3, r3
   12326:	7603      	strb	r3, [r0, #24]
}
   12328:	4770      	bx	lr
	...

0001232c <i2c_master_read_packet_job>:
{
   1232c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
   1232e:	8b83      	ldrh	r3, [r0, #28]
   12330:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
   12332:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
   12334:	2b00      	cmp	r3, #0
   12336:	d001      	beq.n	1233c <i2c_master_read_packet_job+0x10>
}
   12338:	0010      	movs	r0, r2
   1233a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
   1233c:	3301      	adds	r3, #1
   1233e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   12340:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
   12342:	4b02      	ldr	r3, [pc, #8]	; (1234c <i2c_master_read_packet_job+0x20>)
   12344:	4798      	blx	r3
   12346:	0002      	movs	r2, r0
   12348:	e7f6      	b.n	12338 <i2c_master_read_packet_job+0xc>
   1234a:	46c0      	nop			; (mov r8, r8)
   1234c:	0001224d 	.word	0x0001224d

00012350 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12350:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12352:	8b83      	ldrh	r3, [r0, #28]
   12354:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
   12356:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
   12358:	2b00      	cmp	r3, #0
   1235a:	d001      	beq.n	12360 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
   1235c:	0010      	movs	r0, r2
   1235e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
   12360:	3301      	adds	r3, #1
   12362:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
   12364:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
   12366:	4b02      	ldr	r3, [pc, #8]	; (12370 <i2c_master_write_packet_job+0x20>)
   12368:	4798      	blx	r3
   1236a:	0002      	movs	r2, r0
   1236c:	e7f6      	b.n	1235c <i2c_master_write_packet_job+0xc>
   1236e:	46c0      	nop			; (mov r8, r8)
   12370:	000121e5 	.word	0x000121e5

00012374 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12374:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
   12376:	0080      	lsls	r0, r0, #2
   12378:	4b75      	ldr	r3, [pc, #468]	; (12550 <_i2c_master_interrupt_handler+0x1dc>)
   1237a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1237c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1237e:	682b      	ldr	r3, [r5, #0]
   12380:	011b      	lsls	r3, r3, #4
   12382:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12384:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
   12386:	7e26      	ldrb	r6, [r4, #24]
   12388:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   1238a:	8b63      	ldrh	r3, [r4, #26]
   1238c:	b29b      	uxth	r3, r3
   1238e:	2b00      	cmp	r3, #0
   12390:	d103      	bne.n	1239a <_i2c_master_interrupt_handler+0x26>
   12392:	8ba3      	ldrh	r3, [r4, #28]
   12394:	b29b      	uxth	r3, r3
   12396:	2b00      	cmp	r3, #0
   12398:	d123      	bne.n	123e2 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   1239a:	8b63      	ldrh	r3, [r4, #26]
   1239c:	b29b      	uxth	r3, r3
   1239e:	2b00      	cmp	r3, #0
   123a0:	d008      	beq.n	123b4 <_i2c_master_interrupt_handler+0x40>
   123a2:	8ba3      	ldrh	r3, [r4, #28]
   123a4:	b29b      	uxth	r3, r3
   123a6:	2b00      	cmp	r3, #0
   123a8:	d104      	bne.n	123b4 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
   123aa:	3325      	adds	r3, #37	; 0x25
   123ac:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   123ae:	2b05      	cmp	r3, #5
   123b0:	d100      	bne.n	123b4 <_i2c_master_interrupt_handler+0x40>
   123b2:	e06d      	b.n	12490 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   123b4:	8b63      	ldrh	r3, [r4, #26]
   123b6:	b29b      	uxth	r3, r3
   123b8:	2b00      	cmp	r3, #0
   123ba:	d024      	beq.n	12406 <_i2c_master_interrupt_handler+0x92>
   123bc:	8ba3      	ldrh	r3, [r4, #28]
   123be:	b29b      	uxth	r3, r3
   123c0:	2b00      	cmp	r3, #0
   123c2:	d020      	beq.n	12406 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   123c4:	8b6b      	ldrh	r3, [r5, #26]
   123c6:	069b      	lsls	r3, r3, #26
   123c8:	d500      	bpl.n	123cc <_i2c_master_interrupt_handler+0x58>
   123ca:	e081      	b.n	124d0 <_i2c_master_interrupt_handler+0x15c>
   123cc:	2a00      	cmp	r2, #0
   123ce:	d004      	beq.n	123da <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   123d0:	8ba3      	ldrh	r3, [r4, #28]
   123d2:	b29b      	uxth	r3, r3
   123d4:	2b01      	cmp	r3, #1
   123d6:	d100      	bne.n	123da <_i2c_master_interrupt_handler+0x66>
   123d8:	e07a      	b.n	124d0 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
   123da:	2241      	movs	r2, #65	; 0x41
   123dc:	2325      	movs	r3, #37	; 0x25
   123de:	54e2      	strb	r2, [r4, r3]
   123e0:	e011      	b.n	12406 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   123e2:	7e2b      	ldrb	r3, [r5, #24]
   123e4:	07db      	lsls	r3, r3, #31
   123e6:	d507      	bpl.n	123f8 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   123e8:	2301      	movs	r3, #1
   123ea:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   123ec:	8b6b      	ldrh	r3, [r5, #26]
   123ee:	079b      	lsls	r3, r3, #30
   123f0:	d52e      	bpl.n	12450 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
   123f2:	2241      	movs	r2, #65	; 0x41
   123f4:	2325      	movs	r3, #37	; 0x25
   123f6:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
   123f8:	8ba3      	ldrh	r3, [r4, #28]
   123fa:	b29b      	uxth	r3, r3
   123fc:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
   123fe:	2325      	movs	r3, #37	; 0x25
   12400:	5ce3      	ldrb	r3, [r4, r3]
   12402:	2b05      	cmp	r3, #5
   12404:	d038      	beq.n	12478 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12406:	8b63      	ldrh	r3, [r4, #26]
   12408:	b29b      	uxth	r3, r3
   1240a:	2b00      	cmp	r3, #0
   1240c:	d007      	beq.n	1241e <_i2c_master_interrupt_handler+0xaa>
   1240e:	8ba3      	ldrh	r3, [r4, #28]
   12410:	b29b      	uxth	r3, r3
   12412:	2b00      	cmp	r3, #0
   12414:	d103      	bne.n	1241e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
   12416:	3325      	adds	r3, #37	; 0x25
   12418:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   1241a:	2b05      	cmp	r3, #5
   1241c:	d064      	beq.n	124e8 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   1241e:	2325      	movs	r3, #37	; 0x25
   12420:	5ce3      	ldrb	r3, [r4, r3]
   12422:	2b05      	cmp	r3, #5
   12424:	d013      	beq.n	1244e <_i2c_master_interrupt_handler+0xda>
   12426:	2325      	movs	r3, #37	; 0x25
   12428:	5ce3      	ldrb	r3, [r4, r3]
   1242a:	2b00      	cmp	r3, #0
   1242c:	d00f      	beq.n	1244e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   1242e:	2303      	movs	r3, #3
   12430:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12432:	2300      	movs	r3, #0
   12434:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
   12436:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12438:	3325      	adds	r3, #37	; 0x25
   1243a:	5ce3      	ldrb	r3, [r4, r3]
   1243c:	2b41      	cmp	r3, #65	; 0x41
   1243e:	d003      	beq.n	12448 <_i2c_master_interrupt_handler+0xd4>
   12440:	7aa3      	ldrb	r3, [r4, #10]
   12442:	2b00      	cmp	r3, #0
   12444:	d000      	beq.n	12448 <_i2c_master_interrupt_handler+0xd4>
   12446:	e075      	b.n	12534 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12448:	0773      	lsls	r3, r6, #29
   1244a:	d500      	bpl.n	1244e <_i2c_master_interrupt_handler+0xda>
   1244c:	e07b      	b.n	12546 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
   1244e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12450:	8b6b      	ldrh	r3, [r5, #26]
   12452:	075b      	lsls	r3, r3, #29
   12454:	d5d0      	bpl.n	123f8 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12456:	2218      	movs	r2, #24
   12458:	2325      	movs	r3, #37	; 0x25
   1245a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
   1245c:	2300      	movs	r3, #0
   1245e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
   12460:	7aa3      	ldrb	r3, [r4, #10]
   12462:	2b00      	cmp	r3, #0
   12464:	d0c8      	beq.n	123f8 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
   12466:	0020      	movs	r0, r4
   12468:	4b3a      	ldr	r3, [pc, #232]	; (12554 <_i2c_master_interrupt_handler+0x1e0>)
   1246a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1246c:	686a      	ldr	r2, [r5, #4]
   1246e:	23c0      	movs	r3, #192	; 0xc0
   12470:	029b      	lsls	r3, r3, #10
   12472:	4313      	orrs	r3, r2
   12474:	606b      	str	r3, [r5, #4]
   12476:	e7bf      	b.n	123f8 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12478:	331f      	adds	r3, #31
   1247a:	5ce3      	ldrb	r3, [r4, r3]
   1247c:	2b00      	cmp	r3, #0
   1247e:	d003      	beq.n	12488 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
   12480:	0020      	movs	r0, r4
   12482:	4b35      	ldr	r3, [pc, #212]	; (12558 <_i2c_master_interrupt_handler+0x1e4>)
   12484:	4798      	blx	r3
   12486:	e7be      	b.n	12406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
   12488:	0020      	movs	r0, r4
   1248a:	4b34      	ldr	r3, [pc, #208]	; (1255c <_i2c_master_interrupt_handler+0x1e8>)
   1248c:	4798      	blx	r3
   1248e:	e7ba      	b.n	12406 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12490:	331f      	adds	r3, #31
   12492:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
   12494:	2b00      	cmp	r3, #0
   12496:	d000      	beq.n	1249a <_i2c_master_interrupt_handler+0x126>
   12498:	e78c      	b.n	123b4 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
   1249a:	3303      	adds	r3, #3
   1249c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
   1249e:	2300      	movs	r3, #0
   124a0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
   124a2:	3325      	adds	r3, #37	; 0x25
   124a4:	2200      	movs	r2, #0
   124a6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
   124a8:	7aa3      	ldrb	r3, [r4, #10]
   124aa:	2b00      	cmp	r3, #0
   124ac:	d107      	bne.n	124be <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   124ae:	2301      	movs	r3, #1
   124b0:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   124b2:	07f3      	lsls	r3, r6, #31
   124b4:	d5a7      	bpl.n	12406 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   124b6:	68e3      	ldr	r3, [r4, #12]
   124b8:	0020      	movs	r0, r4
   124ba:	4798      	blx	r3
   124bc:	e7a3      	b.n	12406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
   124be:	0020      	movs	r0, r4
   124c0:	4b24      	ldr	r3, [pc, #144]	; (12554 <_i2c_master_interrupt_handler+0x1e0>)
   124c2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   124c4:	686a      	ldr	r2, [r5, #4]
   124c6:	23c0      	movs	r3, #192	; 0xc0
   124c8:	029b      	lsls	r3, r3, #10
   124ca:	4313      	orrs	r3, r2
   124cc:	606b      	str	r3, [r5, #4]
   124ce:	e7f0      	b.n	124b2 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   124d0:	2324      	movs	r3, #36	; 0x24
   124d2:	5ce3      	ldrb	r3, [r4, r3]
   124d4:	2b00      	cmp	r3, #0
   124d6:	d103      	bne.n	124e0 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
   124d8:	0020      	movs	r0, r4
   124da:	4b20      	ldr	r3, [pc, #128]	; (1255c <_i2c_master_interrupt_handler+0x1e8>)
   124dc:	4798      	blx	r3
   124de:	e792      	b.n	12406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
   124e0:	0020      	movs	r0, r4
   124e2:	4b1d      	ldr	r3, [pc, #116]	; (12558 <_i2c_master_interrupt_handler+0x1e4>)
   124e4:	4798      	blx	r3
   124e6:	e78e      	b.n	12406 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   124e8:	331f      	adds	r3, #31
   124ea:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
   124ec:	2b01      	cmp	r3, #1
   124ee:	d196      	bne.n	1241e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   124f0:	7e2b      	ldrb	r3, [r5, #24]
   124f2:	079b      	lsls	r3, r3, #30
   124f4:	d501      	bpl.n	124fa <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   124f6:	2302      	movs	r3, #2
   124f8:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
   124fa:	2303      	movs	r3, #3
   124fc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
   124fe:	2300      	movs	r3, #0
   12500:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
   12502:	3325      	adds	r3, #37	; 0x25
   12504:	2200      	movs	r2, #0
   12506:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12508:	07b3      	lsls	r3, r6, #30
   1250a:	d503      	bpl.n	12514 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   1250c:	2324      	movs	r3, #36	; 0x24
   1250e:	5ce3      	ldrb	r3, [r4, r3]
   12510:	2b01      	cmp	r3, #1
   12512:	d00b      	beq.n	1252c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12514:	07f3      	lsls	r3, r6, #31
   12516:	d400      	bmi.n	1251a <_i2c_master_interrupt_handler+0x1a6>
   12518:	e781      	b.n	1241e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1251a:	2324      	movs	r3, #36	; 0x24
   1251c:	5ce3      	ldrb	r3, [r4, r3]
   1251e:	2b00      	cmp	r3, #0
   12520:	d000      	beq.n	12524 <_i2c_master_interrupt_handler+0x1b0>
   12522:	e77c      	b.n	1241e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12524:	68e3      	ldr	r3, [r4, #12]
   12526:	0020      	movs	r0, r4
   12528:	4798      	blx	r3
   1252a:	e778      	b.n	1241e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   1252c:	6923      	ldr	r3, [r4, #16]
   1252e:	0020      	movs	r0, r4
   12530:	4798      	blx	r3
   12532:	e774      	b.n	1241e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
   12534:	0020      	movs	r0, r4
   12536:	4b07      	ldr	r3, [pc, #28]	; (12554 <_i2c_master_interrupt_handler+0x1e0>)
   12538:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   1253a:	686a      	ldr	r2, [r5, #4]
   1253c:	23e0      	movs	r3, #224	; 0xe0
   1253e:	02db      	lsls	r3, r3, #11
   12540:	4313      	orrs	r3, r2
   12542:	606b      	str	r3, [r5, #4]
   12544:	e780      	b.n	12448 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12546:	6963      	ldr	r3, [r4, #20]
   12548:	0020      	movs	r0, r4
   1254a:	4798      	blx	r3
}
   1254c:	e77f      	b.n	1244e <_i2c_master_interrupt_handler+0xda>
   1254e:	46c0      	nop			; (mov r8, r8)
   12550:	20005554 	.word	0x20005554
   12554:	00012115 	.word	0x00012115
   12558:	00012121 	.word	0x00012121
   1255c:	000121a9 	.word	0x000121a9

00012560 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12560:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12564:	4a02      	ldr	r2, [pc, #8]	; (12570 <CLI_ResetDevice+0x10>)
   12566:	4b03      	ldr	r3, [pc, #12]	; (12574 <CLI_ResetDevice+0x14>)
   12568:	60da      	str	r2, [r3, #12]
   1256a:	f3bf 8f4f 	dsb	sy
   1256e:	e7fe      	b.n	1256e <CLI_ResetDevice+0xe>
   12570:	05fa0004 	.word	0x05fa0004
   12574:	e000ed00 	.word	0xe000ed00

00012578 <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1257a:	0006      	movs	r6, r0
   1257c:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   1257e:	4d06      	ldr	r5, [pc, #24]	; (12598 <xCliClearTerminalScreen+0x20>)
   12580:	231b      	movs	r3, #27
   12582:	4a06      	ldr	r2, [pc, #24]	; (1259c <xCliClearTerminalScreen+0x24>)
   12584:	210f      	movs	r1, #15
   12586:	0028      	movs	r0, r5
   12588:	4c05      	ldr	r4, [pc, #20]	; (125a0 <xCliClearTerminalScreen+0x28>)
   1258a:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   1258c:	002a      	movs	r2, r5
   1258e:	0039      	movs	r1, r7
   12590:	0030      	movs	r0, r6
   12592:	47a0      	blx	r4
	return pdFALSE;
}
   12594:	2000      	movs	r0, #0
   12596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12598:	200002c0 	.word	0x200002c0
   1259c:	0002794c 	.word	0x0002794c
   125a0:	000264a5 	.word	0x000264a5

000125a4 <CLI_GetImuData>:
{
   125a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   125a6:	b087      	sub	sp, #28
   125a8:	0007      	movs	r7, r0
   125aa:	9102      	str	r1, [sp, #8]
lsm6ds3_xl_flag_data_ready_get(GetImuStruct(), &reg);
   125ac:	4b2c      	ldr	r3, [pc, #176]	; (12660 <CLI_GetImuData+0xbc>)
   125ae:	4798      	blx	r3
   125b0:	250f      	movs	r5, #15
   125b2:	ab02      	add	r3, sp, #8
   125b4:	469c      	mov	ip, r3
   125b6:	4465      	add	r5, ip
   125b8:	0029      	movs	r1, r5
   125ba:	4b2a      	ldr	r3, [pc, #168]	; (12664 <CLI_GetImuData+0xc0>)
   125bc:	4798      	blx	r3
if(reg){
   125be:	782b      	ldrb	r3, [r5, #0]
   125c0:	2b00      	cmp	r3, #0
   125c2:	d03d      	beq.n	12640 <CLI_GetImuData+0x9c>
	memset(data_raw_acceleration.u8bit, 0x00, 3 * sizeof(int16_t));
   125c4:	4d28      	ldr	r5, [pc, #160]	; (12668 <CLI_GetImuData+0xc4>)
   125c6:	2206      	movs	r2, #6
   125c8:	2100      	movs	r1, #0
   125ca:	0028      	movs	r0, r5
   125cc:	4b27      	ldr	r3, [pc, #156]	; (1266c <CLI_GetImuData+0xc8>)
   125ce:	4798      	blx	r3
	lsm6ds3_acceleration_raw_get(GetImuStruct(), data_raw_acceleration.u8bit);
   125d0:	4b23      	ldr	r3, [pc, #140]	; (12660 <CLI_GetImuData+0xbc>)
   125d2:	4798      	blx	r3
   125d4:	0029      	movs	r1, r5
   125d6:	4b26      	ldr	r3, [pc, #152]	; (12670 <CLI_GetImuData+0xcc>)
   125d8:	4798      	blx	r3
	lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[0]);
   125da:	2300      	movs	r3, #0
   125dc:	5ee8      	ldrsh	r0, [r5, r3]
   125de:	4e25      	ldr	r6, [pc, #148]	; (12674 <CLI_GetImuData+0xd0>)
   125e0:	47b0      	blx	r6
	acceleration_mg[0] =
   125e2:	4c25      	ldr	r4, [pc, #148]	; (12678 <CLI_GetImuData+0xd4>)
   125e4:	6020      	str	r0, [r4, #0]
	lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[1]);
   125e6:	2302      	movs	r3, #2
   125e8:	5ee8      	ldrsh	r0, [r5, r3]
   125ea:	47b0      	blx	r6
	acceleration_mg[1] =
   125ec:	6060      	str	r0, [r4, #4]
	lsm6ds3_from_fs2g_to_mg(data_raw_acceleration.i16bit[2]);
   125ee:	2304      	movs	r3, #4
   125f0:	5ee8      	ldrsh	r0, [r5, r3]
   125f2:	47b0      	blx	r6
   125f4:	1c05      	adds	r5, r0, #0
	acceleration_mg[2] =
   125f6:	60a0      	str	r0, [r4, #8]
snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\t%Z %d\r\n",
   125f8:	4e20      	ldr	r6, [pc, #128]	; (1267c <CLI_GetImuData+0xd8>)
   125fa:	6820      	ldr	r0, [r4, #0]
   125fc:	47b0      	blx	r6
   125fe:	9003      	str	r0, [sp, #12]
   12600:	1c28      	adds	r0, r5, #0
   12602:	47b0      	blx	r6
   12604:	9001      	str	r0, [sp, #4]
   12606:	6860      	ldr	r0, [r4, #4]
   12608:	47b0      	blx	r6
   1260a:	9000      	str	r0, [sp, #0]
   1260c:	9b03      	ldr	r3, [sp, #12]
   1260e:	4a1c      	ldr	r2, [pc, #112]	; (12680 <CLI_GetImuData+0xdc>)
   12610:	9902      	ldr	r1, [sp, #8]
   12612:	0038      	movs	r0, r7
   12614:	4c1b      	ldr	r4, [pc, #108]	; (12684 <CLI_GetImuData+0xe0>)
   12616:	47a0      	blx	r4
imuPacketTemp.xmg = (int16_t)acceleration_mg[0];
   12618:	ac04      	add	r4, sp, #16
   1261a:	4e17      	ldr	r6, [pc, #92]	; (12678 <CLI_GetImuData+0xd4>)
   1261c:	4d17      	ldr	r5, [pc, #92]	; (1267c <CLI_GetImuData+0xd8>)
   1261e:	6830      	ldr	r0, [r6, #0]
   12620:	47a8      	blx	r5
   12622:	8020      	strh	r0, [r4, #0]
imuPacketTemp.ymg = (int16_t)acceleration_mg[1];
   12624:	6870      	ldr	r0, [r6, #4]
   12626:	47a8      	blx	r5
   12628:	8060      	strh	r0, [r4, #2]
imuPacketTemp.zmg = (int16_t)acceleration_mg[2];
   1262a:	68b0      	ldr	r0, [r6, #8]
   1262c:	47a8      	blx	r5
   1262e:	80a0      	strh	r0, [r4, #4]
int error = WifiAddImuDataToQueue(&imuPacketTemp);
   12630:	0020      	movs	r0, r4
   12632:	4b15      	ldr	r3, [pc, #84]	; (12688 <CLI_GetImuData+0xe4>)
   12634:	4798      	blx	r3
if(error == pdTRUE)
   12636:	2801      	cmp	r0, #1
   12638:	d008      	beq.n	1264c <CLI_GetImuData+0xa8>
}
   1263a:	2000      	movs	r0, #0
   1263c:	b007      	add	sp, #28
   1263e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
   12640:	4a12      	ldr	r2, [pc, #72]	; (1268c <CLI_GetImuData+0xe8>)
   12642:	9902      	ldr	r1, [sp, #8]
   12644:	0038      	movs	r0, r7
   12646:	4b0f      	ldr	r3, [pc, #60]	; (12684 <CLI_GetImuData+0xe0>)
   12648:	4798      	blx	r3
   1264a:	e7e5      	b.n	12618 <CLI_GetImuData+0x74>
	strcat(pcWriteBuffer, "IMU Data MQTT Post\r\n");
   1264c:	0038      	movs	r0, r7
   1264e:	4b10      	ldr	r3, [pc, #64]	; (12690 <CLI_GetImuData+0xec>)
   12650:	4798      	blx	r3
   12652:	1838      	adds	r0, r7, r0
   12654:	2215      	movs	r2, #21
   12656:	490f      	ldr	r1, [pc, #60]	; (12694 <CLI_GetImuData+0xf0>)
   12658:	4b0f      	ldr	r3, [pc, #60]	; (12698 <CLI_GetImuData+0xf4>)
   1265a:	4798      	blx	r3
   1265c:	e7ed      	b.n	1263a <CLI_GetImuData+0x96>
   1265e:	46c0      	nop			; (mov r8, r8)
   12660:	000134e1 	.word	0x000134e1
   12664:	00013435 	.word	0x00013435
   12668:	200002d0 	.word	0x200002d0
   1266c:	0002624b 	.word	0x0002624b
   12670:	00013459 	.word	0x00013459
   12674:	000132d5 	.word	0x000132d5
   12678:	200002b4 	.word	0x200002b4
   1267c:	000247f1 	.word	0x000247f1
   12680:	00027670 	.word	0x00027670
   12684:	000264a5 	.word	0x000264a5
   12688:	00014b59 	.word	0x00014b59
   1268c:	00027694 	.word	0x00027694
   12690:	00026603 	.word	0x00026603
   12694:	000276a8 	.word	0x000276a8
   12698:	00026215 	.word	0x00026215

0001269c <CLI_OTAU>:



//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   1269c:	b510      	push	{r4, lr}
	WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   1269e:	2002      	movs	r0, #2
   126a0:	4b01      	ldr	r3, [pc, #4]	; (126a8 <CLI_OTAU+0xc>)
   126a2:	4798      	blx	r3

return pdFALSE;
}
   126a4:	2000      	movs	r0, #0
   126a6:	bd10      	pop	{r4, pc}
   126a8:	00014b2d 	.word	0x00014b2d

000126ac <CLI_NeotrellisSetLed>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   126ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   126ae:	b089      	sub	sp, #36	; 0x24
   126b0:	9002      	str	r0, [sp, #8]
   126b2:	9103      	str	r1, [sp, #12]
   126b4:	0015      	movs	r5, r2
	uint8_t p1, p2, p3, p4;
	BaseType_t xParameter1StringLength, xParameter2StringLength,
	xParameter3StringLength, xParameter4StringLength;
	
	//Obtain parameters
	pcParameter1 = FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameter1StringLength);
   126b6:	aa07      	add	r2, sp, #28
   126b8:	2101      	movs	r1, #1
   126ba:	0028      	movs	r0, r5
   126bc:	4c1e      	ldr	r4, [pc, #120]	; (12738 <CLI_NeotrellisSetLed+0x8c>)
   126be:	47a0      	blx	r4
   126c0:	0007      	movs	r7, r0
	pcParameter2 = FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameter2StringLength);
   126c2:	aa06      	add	r2, sp, #24
   126c4:	2102      	movs	r1, #2
   126c6:	0028      	movs	r0, r5
   126c8:	47a0      	blx	r4
   126ca:	0006      	movs	r6, r0
	pcParameter3 = FreeRTOS_CLIGetParameter(pcCommandString, 3, &xParameter3StringLength);
   126cc:	aa05      	add	r2, sp, #20
   126ce:	2103      	movs	r1, #3
   126d0:	9501      	str	r5, [sp, #4]
   126d2:	0028      	movs	r0, r5
   126d4:	47a0      	blx	r4
   126d6:	0005      	movs	r5, r0
	pcParameter4 = FreeRTOS_CLIGetParameter(pcCommandString, 4, &xParameter4StringLength);
   126d8:	aa04      	add	r2, sp, #16
   126da:	2104      	movs	r1, #4
   126dc:	9801      	ldr	r0, [sp, #4]
   126de:	47a0      	blx	r4
	
	//Terminate parameters
	pcParameter1[ xParameter1StringLength ] = 0x00;
   126e0:	2300      	movs	r3, #0
   126e2:	9a07      	ldr	r2, [sp, #28]
   126e4:	54bb      	strb	r3, [r7, r2]
	pcParameter2[ xParameter2StringLength ] = 0x00;
   126e6:	9a06      	ldr	r2, [sp, #24]
   126e8:	54b3      	strb	r3, [r6, r2]
	pcParameter3[ xParameter3StringLength ] = 0x00;
   126ea:	9a05      	ldr	r2, [sp, #20]
   126ec:	54ab      	strb	r3, [r5, r2]
	pcParameter4[ xParameter4StringLength ] = 0x00;
   126ee:	9001      	str	r0, [sp, #4]
   126f0:	9904      	ldr	r1, [sp, #16]
   126f2:	5443      	strb	r3, [r0, r1]
	
	//Convert to int
	p1 = atoi(pcParameter1);
   126f4:	0038      	movs	r0, r7
   126f6:	4f11      	ldr	r7, [pc, #68]	; (1273c <CLI_NeotrellisSetLed+0x90>)
   126f8:	47b8      	blx	r7
   126fa:	b2c4      	uxtb	r4, r0
	p2 = atoi(pcParameter2);
   126fc:	0030      	movs	r0, r6
   126fe:	47b8      	blx	r7
   12700:	0006      	movs	r6, r0
	p3 = atoi(pcParameter3);
   12702:	0028      	movs	r0, r5
   12704:	47b8      	blx	r7
   12706:	0005      	movs	r5, r0
	p4 = atoi(pcParameter4);
   12708:	9801      	ldr	r0, [sp, #4]
   1270a:	47b8      	blx	r7
	
	if (p1 < 0 || p1 > 15) {
   1270c:	2c0f      	cmp	r4, #15
   1270e:	d80d      	bhi.n	1272c <CLI_NeotrellisSetLed+0x80>
		snprintf( pcWriteBuffer, xWriteBufferLen, "Error - Keynum out of range!\r\n" );
		return pdFALSE;
		} else {
		*pcWriteBuffer = NULL;
   12710:	2300      	movs	r3, #0
   12712:	9a02      	ldr	r2, [sp, #8]
   12714:	7013      	strb	r3, [r2, #0]
		return pdFALSE;
		} else {
		*pcWriteBuffer = NULL;
	}
	
	int error = SeesawSetLed(p1, p2, p3, p4);
   12716:	b2c3      	uxtb	r3, r0
   12718:	b2ea      	uxtb	r2, r5
   1271a:	b2f1      	uxtb	r1, r6
   1271c:	0020      	movs	r0, r4
   1271e:	4c08      	ldr	r4, [pc, #32]	; (12740 <CLI_NeotrellisSetLed+0x94>)
   12720:	47a0      	blx	r4
	SeesawOrderLedUpdate();
   12722:	4b08      	ldr	r3, [pc, #32]	; (12744 <CLI_NeotrellisSetLed+0x98>)
   12724:	4798      	blx	r3
	
	return pdFALSE;
}
   12726:	2000      	movs	r0, #0
   12728:	b009      	add	sp, #36	; 0x24
   1272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintf( pcWriteBuffer, xWriteBufferLen, "Error - Keynum out of range!\r\n" );
   1272c:	4a06      	ldr	r2, [pc, #24]	; (12748 <CLI_NeotrellisSetLed+0x9c>)
   1272e:	9903      	ldr	r1, [sp, #12]
   12730:	9802      	ldr	r0, [sp, #8]
   12732:	4b06      	ldr	r3, [pc, #24]	; (1274c <CLI_NeotrellisSetLed+0xa0>)
   12734:	4798      	blx	r3
		return pdFALSE;
   12736:	e7f6      	b.n	12726 <CLI_NeotrellisSetLed+0x7a>
   12738:	000151cd 	.word	0x000151cd
   1273c:	00026199 	.word	0x00026199
   12740:	00013655 	.word	0x00013655
   12744:	0001368d 	.word	0x0001368d
   12748:	000276f4 	.word	0x000276f4
   1274c:	000264a5 	.word	0x000264a5

00012750 <CLI_NeotrellProcessButtonBuffer>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellProcessButtonBuffer( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12750:	b570      	push	{r4, r5, r6, lr}
   12752:	b090      	sub	sp, #64	; 0x40
   12754:	0004      	movs	r4, r0
   12756:	000d      	movs	r5, r1
	//snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
	//Print to pcWriteBuffer in order.
	//If the string is too long to print, print what you can.
	//The function you write will be useful in the future.
	uint8_t buffer[64];
	uint8_t count = SeesawGetKeypadCount();
   12758:	4b21      	ldr	r3, [pc, #132]	; (127e0 <CLI_NeotrellProcessButtonBuffer+0x90>)
   1275a:	4798      	blx	r3
		return pdTRUE;
	}
	else
	{
	pcWriteBuffer = 0;
		return pdFALSE;
   1275c:	2300      	movs	r3, #0
	if(count >= 1)
   1275e:	2800      	cmp	r0, #0
   12760:	d102      	bne.n	12768 <CLI_NeotrellProcessButtonBuffer+0x18>
	}
	

}
   12762:	0018      	movs	r0, r3
   12764:	b010      	add	sp, #64	; 0x40
   12766:	bd70      	pop	{r4, r5, r6, pc}
	int32_t res = SeesawReadKeypad(buffer,1);
   12768:	2101      	movs	r1, #1
   1276a:	4668      	mov	r0, sp
   1276c:	4b1d      	ldr	r3, [pc, #116]	; (127e4 <CLI_NeotrellProcessButtonBuffer+0x94>)
   1276e:	4798      	blx	r3
		return pdTRUE;
   12770:	2301      	movs	r3, #1
	if(res==0)
   12772:	2800      	cmp	r0, #0
   12774:	d1f5      	bne.n	12762 <CLI_NeotrellProcessButtonBuffer+0x12>
			press = buffer[0] & 0x3;
   12776:	466b      	mov	r3, sp
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2203      	movs	r2, #3
   1277c:	401a      	ands	r2, r3
			pos =  buffer[0]>>2;
   1277e:	089b      	lsrs	r3, r3, #2
			int num = NEO_TRELLIS_SEESAW_KEY(pos);
   12780:	08d8      	lsrs	r0, r3, #3
   12782:	0080      	lsls	r0, r0, #2
   12784:	2107      	movs	r1, #7
   12786:	400b      	ands	r3, r1
   12788:	18c0      	adds	r0, r0, r3
			if(press == 0x2){
   1278a:	2a02      	cmp	r2, #2
   1278c:	d015      	beq.n	127ba <CLI_NeotrellProcessButtonBuffer+0x6a>
		return pdTRUE;
   1278e:	2301      	movs	r3, #1
			else if(press == 0x3){
   12790:	2a03      	cmp	r2, #3
   12792:	d1e6      	bne.n	12762 <CLI_NeotrellProcessButtonBuffer+0x12>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   12794:	17c1      	asrs	r1, r0, #31
   12796:	3204      	adds	r2, #4
   12798:	0013      	movs	r3, r2
   1279a:	400b      	ands	r3, r1
   1279c:	181b      	adds	r3, r3, r0
   1279e:	10db      	asrs	r3, r3, #3
   127a0:	009b      	lsls	r3, r3, #2
   127a2:	0f49      	lsrs	r1, r1, #29
   127a4:	1840      	adds	r0, r0, r1
   127a6:	4010      	ands	r0, r2
   127a8:	1a40      	subs	r0, r0, r1
   127aa:	181b      	adds	r3, r3, r0
   127ac:	4a0e      	ldr	r2, [pc, #56]	; (127e8 <CLI_NeotrellProcessButtonBuffer+0x98>)
   127ae:	0029      	movs	r1, r5
   127b0:	0020      	movs	r0, r4
   127b2:	4c0e      	ldr	r4, [pc, #56]	; (127ec <CLI_NeotrellProcessButtonBuffer+0x9c>)
   127b4:	47a0      	blx	r4
		return pdTRUE;
   127b6:	2301      	movs	r3, #1
   127b8:	e7d3      	b.n	12762 <CLI_NeotrellProcessButtonBuffer+0x12>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   127ba:	17c6      	asrs	r6, r0, #31
   127bc:	000b      	movs	r3, r1
   127be:	4033      	ands	r3, r6
   127c0:	181b      	adds	r3, r3, r0
   127c2:	10db      	asrs	r3, r3, #3
   127c4:	009a      	lsls	r2, r3, #2
   127c6:	0f76      	lsrs	r6, r6, #29
   127c8:	1983      	adds	r3, r0, r6
   127ca:	400b      	ands	r3, r1
   127cc:	1b9b      	subs	r3, r3, r6
   127ce:	18d3      	adds	r3, r2, r3
   127d0:	4a07      	ldr	r2, [pc, #28]	; (127f0 <CLI_NeotrellProcessButtonBuffer+0xa0>)
   127d2:	0029      	movs	r1, r5
   127d4:	0020      	movs	r0, r4
   127d6:	4c05      	ldr	r4, [pc, #20]	; (127ec <CLI_NeotrellProcessButtonBuffer+0x9c>)
   127d8:	47a0      	blx	r4
		return pdTRUE;
   127da:	2301      	movs	r3, #1
   127dc:	e7c1      	b.n	12762 <CLI_NeotrellProcessButtonBuffer+0x12>
   127de:	46c0      	nop			; (mov r8, r8)
   127e0:	00013569 	.word	0x00013569
   127e4:	000135b9 	.word	0x000135b9
   127e8:	000276dc 	.word	0x000276dc
   127ec:	000264a5 	.word	0x000264a5
   127f0:	000276c0 	.word	0x000276c0

000127f4 <CLI_DistanceSensorGetDistance>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_DistanceSensorGetDistance( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   127f4:	b530      	push	{r4, r5, lr}
   127f6:	b083      	sub	sp, #12
   127f8:	0004      	movs	r4, r0
   127fa:	000d      	movs	r5, r1

	uint16_t distance = 0;
   127fc:	466b      	mov	r3, sp
   127fe:	1d98      	adds	r0, r3, #6
   12800:	2300      	movs	r3, #0
   12802:	8003      	strh	r3, [r0, #0]
	int error = DistanceSensorGetDistance(&distance, 100);
   12804:	2164      	movs	r1, #100	; 0x64
   12806:	4b12      	ldr	r3, [pc, #72]	; (12850 <CLI_DistanceSensorGetDistance+0x5c>)
   12808:	4798      	blx	r3
	if (0 != error )
   1280a:	2800      	cmp	r0, #0
   1280c:	d00e      	beq.n	1282c <CLI_DistanceSensorGetDistance+0x38>
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Sensor Error %d!\r\n", error);
   1280e:	0003      	movs	r3, r0
   12810:	4a10      	ldr	r2, [pc, #64]	; (12854 <CLI_DistanceSensorGetDistance+0x60>)
   12812:	0029      	movs	r1, r5
   12814:	0020      	movs	r0, r4
   12816:	4d10      	ldr	r5, [pc, #64]	; (12858 <CLI_DistanceSensorGetDistance+0x64>)
   12818:	47a8      	blx	r5
	else
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Distance: %d mm\r\n", distance);
	}

	error = WifiAddDistanceDataToQueue(&distance);
   1281a:	466b      	mov	r3, sp
   1281c:	1d98      	adds	r0, r3, #6
   1281e:	4b0f      	ldr	r3, [pc, #60]	; (1285c <CLI_DistanceSensorGetDistance+0x68>)
   12820:	4798      	blx	r3
	if(error == pdTRUE)
   12822:	2801      	cmp	r0, #1
   12824:	d00b      	beq.n	1283e <CLI_DistanceSensorGetDistance+0x4a>
	{
		strcat(pcWriteBuffer, "Distance Data MQTT Post\r\n");
	}
	return pdFALSE;
}
   12826:	2000      	movs	r0, #0
   12828:	b003      	add	sp, #12
   1282a:	bd30      	pop	{r4, r5, pc}
		snprintf(pcWriteBuffer,xWriteBufferLen, "Distance: %d mm\r\n", distance);
   1282c:	466b      	mov	r3, sp
   1282e:	3306      	adds	r3, #6
   12830:	881b      	ldrh	r3, [r3, #0]
   12832:	4a0b      	ldr	r2, [pc, #44]	; (12860 <CLI_DistanceSensorGetDistance+0x6c>)
   12834:	0029      	movs	r1, r5
   12836:	0020      	movs	r0, r4
   12838:	4d07      	ldr	r5, [pc, #28]	; (12858 <CLI_DistanceSensorGetDistance+0x64>)
   1283a:	47a8      	blx	r5
   1283c:	e7ed      	b.n	1281a <CLI_DistanceSensorGetDistance+0x26>
		strcat(pcWriteBuffer, "Distance Data MQTT Post\r\n");
   1283e:	0020      	movs	r0, r4
   12840:	4b08      	ldr	r3, [pc, #32]	; (12864 <CLI_DistanceSensorGetDistance+0x70>)
   12842:	4798      	blx	r3
   12844:	1820      	adds	r0, r4, r0
   12846:	221a      	movs	r2, #26
   12848:	4907      	ldr	r1, [pc, #28]	; (12868 <CLI_DistanceSensorGetDistance+0x74>)
   1284a:	4b08      	ldr	r3, [pc, #32]	; (1286c <CLI_DistanceSensorGetDistance+0x78>)
   1284c:	4798      	blx	r3
   1284e:	e7ea      	b.n	12826 <CLI_DistanceSensorGetDistance+0x32>
   12850:	00012dd1 	.word	0x00012dd1
   12854:	0002762c 	.word	0x0002762c
   12858:	000264a5 	.word	0x000264a5
   1285c:	00014b75 	.word	0x00014b75
   12860:	00027640 	.word	0x00027640
   12864:	00026603 	.word	0x00026603
   12868:	00027654 	.word	0x00027654
   1286c:	00026215 	.word	0x00026215

00012870 <CLI_SendDummyGameData>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_SendDummyGameData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12870:	b530      	push	{r4, r5, lr}
   12872:	b087      	sub	sp, #28
   12874:	0004      	movs	r4, r0
   12876:	000d      	movs	r5, r1
struct GameDataPacket gamevar;

gamevar.game[0] = 0;
   12878:	a801      	add	r0, sp, #4
   1287a:	2300      	movs	r3, #0
   1287c:	7003      	strb	r3, [r0, #0]
gamevar.game[1] = 1;
   1287e:	3301      	adds	r3, #1
   12880:	7043      	strb	r3, [r0, #1]
gamevar.game[2] = 2;
   12882:	3301      	adds	r3, #1
   12884:	7083      	strb	r3, [r0, #2]
gamevar.game[3] = 3;
   12886:	3301      	adds	r3, #1
   12888:	70c3      	strb	r3, [r0, #3]
gamevar.game[4] = 4;
   1288a:	3301      	adds	r3, #1
   1288c:	7103      	strb	r3, [r0, #4]
gamevar.game[5] = 5;
   1288e:	3301      	adds	r3, #1
   12890:	7143      	strb	r3, [r0, #5]
gamevar.game[6] = 6;
   12892:	3301      	adds	r3, #1
   12894:	7183      	strb	r3, [r0, #6]
gamevar.game[7] = 7;
   12896:	3301      	adds	r3, #1
   12898:	71c3      	strb	r3, [r0, #7]
gamevar.game[8] = 8;
   1289a:	3301      	adds	r3, #1
   1289c:	7203      	strb	r3, [r0, #8]
gamevar.game[9] = 9;
   1289e:	3301      	adds	r3, #1
   128a0:	7243      	strb	r3, [r0, #9]
gamevar.game[10] = 0xFF;
   128a2:	33f6      	adds	r3, #246	; 0xf6
   128a4:	7283      	strb	r3, [r0, #10]

	int error = WifiAddGameDataToQueue(&gamevar);
   128a6:	4b06      	ldr	r3, [pc, #24]	; (128c0 <CLI_SendDummyGameData+0x50>)
   128a8:	4798      	blx	r3
	if(error == pdTRUE)
   128aa:	2801      	cmp	r0, #1
   128ac:	d002      	beq.n	128b4 <CLI_SendDummyGameData+0x44>
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
	}
	return pdFALSE;
}
   128ae:	2000      	movs	r0, #0
   128b0:	b007      	add	sp, #28
   128b2:	bd30      	pop	{r4, r5, pc}
		snprintf(pcWriteBuffer,xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   128b4:	4a03      	ldr	r2, [pc, #12]	; (128c4 <CLI_SendDummyGameData+0x54>)
   128b6:	0029      	movs	r1, r5
   128b8:	0020      	movs	r0, r4
   128ba:	4b03      	ldr	r3, [pc, #12]	; (128c8 <CLI_SendDummyGameData+0x58>)
   128bc:	4798      	blx	r3
   128be:	e7f6      	b.n	128ae <CLI_SendDummyGameData+0x3e>
   128c0:	00014b91 	.word	0x00014b91
   128c4:	00027714 	.word	0x00027714
   128c8:	000264a5 	.word	0x000264a5

000128cc <vCommandConsoleTask>:
{
   128cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   128ce:	46c6      	mov	lr, r8
   128d0:	b500      	push	{lr}
   128d2:	b082      	sub	sp, #8
FreeRTOS_CLIRegisterCommand( &xOTAUCommand);
   128d4:	485a      	ldr	r0, [pc, #360]	; (12a40 <vCommandConsoleTask+0x174>)
   128d6:	4c5b      	ldr	r4, [pc, #364]	; (12a44 <vCommandConsoleTask+0x178>)
   128d8:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
   128da:	485b      	ldr	r0, [pc, #364]	; (12a48 <vCommandConsoleTask+0x17c>)
   128dc:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
   128de:	485b      	ldr	r0, [pc, #364]	; (12a4c <vCommandConsoleTask+0x180>)
   128e0:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
   128e2:	485b      	ldr	r0, [pc, #364]	; (12a50 <vCommandConsoleTask+0x184>)
   128e4:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
   128e6:	485b      	ldr	r0, [pc, #364]	; (12a54 <vCommandConsoleTask+0x188>)
   128e8:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisProcessButtonCommand );
   128ea:	485b      	ldr	r0, [pc, #364]	; (12a58 <vCommandConsoleTask+0x18c>)
   128ec:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xDistanceSensorGetDistance);
   128ee:	485b      	ldr	r0, [pc, #364]	; (12a5c <vCommandConsoleTask+0x190>)
   128f0:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xSendDummyGameData);
   128f2:	485b      	ldr	r0, [pc, #364]	; (12a60 <vCommandConsoleTask+0x194>)
   128f4:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
   128f6:	485b      	ldr	r0, [pc, #364]	; (12a64 <vCommandConsoleTask+0x198>)
   128f8:	4b5b      	ldr	r3, [pc, #364]	; (12a68 <vCommandConsoleTask+0x19c>)
   128fa:	4798      	blx	r3
uint8_t cRxedChar[2], cInputIndex = 0;
   128fc:	2400      	movs	r4, #0
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   128fe:	4f5b      	ldr	r7, [pc, #364]	; (12a6c <vCommandConsoleTask+0x1a0>)
            SerialConsoleWriteString("\r\n");
   12900:	4b59      	ldr	r3, [pc, #356]	; (12a68 <vCommandConsoleTask+0x19c>)
   12902:	4698      	mov	r8, r3
   12904:	e027      	b.n	12956 <vCommandConsoleTask+0x8a>
			vTaskDelay( CLI_TASK_DELAY);
   12906:	3097      	adds	r0, #151	; 0x97
   12908:	4b59      	ldr	r3, [pc, #356]	; (12a70 <vCommandConsoleTask+0x1a4>)
   1290a:	4798      	blx	r3
   1290c:	e023      	b.n	12956 <vCommandConsoleTask+0x8a>
            SerialConsoleWriteString("\r\n");
   1290e:	4859      	ldr	r0, [pc, #356]	; (12a74 <vCommandConsoleTask+0x1a8>)
   12910:	47c0      	blx	r8
			isEscapeCode = false; pcEscapeCodePos = 0;
   12912:	2400      	movs	r4, #0
   12914:	4b58      	ldr	r3, [pc, #352]	; (12a78 <vCommandConsoleTask+0x1ac>)
   12916:	701c      	strb	r4, [r3, #0]
   12918:	4b58      	ldr	r3, [pc, #352]	; (12a7c <vCommandConsoleTask+0x1b0>)
   1291a:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
   1291c:	4d58      	ldr	r5, [pc, #352]	; (12a80 <vCommandConsoleTask+0x1b4>)
   1291e:	2231      	movs	r2, #49	; 0x31
   12920:	4958      	ldr	r1, [pc, #352]	; (12a84 <vCommandConsoleTask+0x1b8>)
   12922:	0028      	movs	r0, r5
   12924:	4b58      	ldr	r3, [pc, #352]	; (12a88 <vCommandConsoleTask+0x1bc>)
   12926:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
   12928:	2331      	movs	r3, #49	; 0x31
   1292a:	54ec      	strb	r4, [r5, r3]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
   1292c:	4c57      	ldr	r4, [pc, #348]	; (12a8c <vCommandConsoleTask+0x1c0>)
   1292e:	4e58      	ldr	r6, [pc, #352]	; (12a90 <vCommandConsoleTask+0x1c4>)
   12930:	2282      	movs	r2, #130	; 0x82
   12932:	0021      	movs	r1, r4
   12934:	4853      	ldr	r0, [pc, #332]	; (12a84 <vCommandConsoleTask+0x1b8>)
   12936:	47b0      	blx	r6
   12938:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   1293a:	2200      	movs	r2, #0
   1293c:	2381      	movs	r3, #129	; 0x81
   1293e:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
   12940:	0020      	movs	r0, r4
   12942:	4b49      	ldr	r3, [pc, #292]	; (12a68 <vCommandConsoleTask+0x19c>)
   12944:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
   12946:	2d00      	cmp	r5, #0
   12948:	d1f2      	bne.n	12930 <vCommandConsoleTask+0x64>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   1294a:	2232      	movs	r2, #50	; 0x32
   1294c:	2100      	movs	r1, #0
   1294e:	484d      	ldr	r0, [pc, #308]	; (12a84 <vCommandConsoleTask+0x1b8>)
   12950:	4b50      	ldr	r3, [pc, #320]	; (12a94 <vCommandConsoleTask+0x1c8>)
   12952:	4798      	blx	r3
            cInputIndex = 0;
   12954:	2400      	movs	r4, #0
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   12956:	a801      	add	r0, sp, #4
   12958:	47b8      	blx	r7
		if(recv == -1) //If no characters in the buffer, thread goes to sleep for a while
   1295a:	1c43      	adds	r3, r0, #1
   1295c:	d0d3      	beq.n	12906 <vCommandConsoleTask+0x3a>
		}else if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
   1295e:	ab01      	add	r3, sp, #4
   12960:	781b      	ldrb	r3, [r3, #0]
   12962:	2b0a      	cmp	r3, #10
   12964:	d0d3      	beq.n	1290e <vCommandConsoleTask+0x42>
   12966:	2b0d      	cmp	r3, #13
   12968:	d0d1      	beq.n	1290e <vCommandConsoleTask+0x42>
			if (true == isEscapeCode) {
   1296a:	4a43      	ldr	r2, [pc, #268]	; (12a78 <vCommandConsoleTask+0x1ac>)
   1296c:	7812      	ldrb	r2, [r2, #0]
   1296e:	2a00      	cmp	r2, #0
   12970:	d03f      	beq.n	129f2 <vCommandConsoleTask+0x126>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12972:	4a42      	ldr	r2, [pc, #264]	; (12a7c <vCommandConsoleTask+0x1b0>)
   12974:	7812      	ldrb	r2, [r2, #0]
   12976:	2a03      	cmp	r2, #3
   12978:	d813      	bhi.n	129a2 <vCommandConsoleTask+0xd6>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   1297a:	1c51      	adds	r1, r2, #1
   1297c:	b2c9      	uxtb	r1, r1
   1297e:	483f      	ldr	r0, [pc, #252]	; (12a7c <vCommandConsoleTask+0x1b0>)
   12980:	7001      	strb	r1, [r0, #0]
   12982:	4845      	ldr	r0, [pc, #276]	; (12a98 <vCommandConsoleTask+0x1cc>)
   12984:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12986:	2901      	cmp	r1, #1
   12988:	d9e5      	bls.n	12956 <vCommandConsoleTask+0x8a>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
   1298a:	4944      	ldr	r1, [pc, #272]	; (12a9c <vCommandConsoleTask+0x1d0>)
   1298c:	4842      	ldr	r0, [pc, #264]	; (12a98 <vCommandConsoleTask+0x1cc>)
   1298e:	4b44      	ldr	r3, [pc, #272]	; (12aa0 <vCommandConsoleTask+0x1d4>)
   12990:	4798      	blx	r3
   12992:	2800      	cmp	r0, #0
   12994:	d10b      	bne.n	129ae <vCommandConsoleTask+0xe2>
					isEscapeCode = false; pcEscapeCodePos = 0;
   12996:	2300      	movs	r3, #0
   12998:	4a37      	ldr	r2, [pc, #220]	; (12a78 <vCommandConsoleTask+0x1ac>)
   1299a:	7013      	strb	r3, [r2, #0]
   1299c:	4a37      	ldr	r2, [pc, #220]	; (12a7c <vCommandConsoleTask+0x1b0>)
   1299e:	7013      	strb	r3, [r2, #0]
   129a0:	e7d9      	b.n	12956 <vCommandConsoleTask+0x8a>
					isEscapeCode = false; pcEscapeCodePos = 0;
   129a2:	2300      	movs	r3, #0
   129a4:	4a34      	ldr	r2, [pc, #208]	; (12a78 <vCommandConsoleTask+0x1ac>)
   129a6:	7013      	strb	r3, [r2, #0]
   129a8:	4a34      	ldr	r2, [pc, #208]	; (12a7c <vCommandConsoleTask+0x1b0>)
   129aa:	7013      	strb	r3, [r2, #0]
   129ac:	e7d3      	b.n	12956 <vCommandConsoleTask+0x8a>
                            sprintf(pcInputString, "%c[2K\r>", 27);
   129ae:	4c35      	ldr	r4, [pc, #212]	; (12a84 <vCommandConsoleTask+0x1b8>)
   129b0:	221b      	movs	r2, #27
   129b2:	493c      	ldr	r1, [pc, #240]	; (12aa4 <vCommandConsoleTask+0x1d8>)
   129b4:	0020      	movs	r0, r4
   129b6:	4b3c      	ldr	r3, [pc, #240]	; (12aa8 <vCommandConsoleTask+0x1dc>)
   129b8:	4798      	blx	r3
				            SerialConsoleWriteString(pcInputString);
   129ba:	0020      	movs	r0, r4
   129bc:	4b2a      	ldr	r3, [pc, #168]	; (12a68 <vCommandConsoleTask+0x19c>)
   129be:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   129c0:	2232      	movs	r2, #50	; 0x32
   129c2:	2100      	movs	r1, #0
   129c4:	0020      	movs	r0, r4
   129c6:	4b33      	ldr	r3, [pc, #204]	; (12a94 <vCommandConsoleTask+0x1c8>)
   129c8:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
   129ca:	2231      	movs	r2, #49	; 0x31
   129cc:	492c      	ldr	r1, [pc, #176]	; (12a80 <vCommandConsoleTask+0x1b4>)
   129ce:	0020      	movs	r0, r4
   129d0:	4b2d      	ldr	r3, [pc, #180]	; (12a88 <vCommandConsoleTask+0x1bc>)
   129d2:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   129d4:	0020      	movs	r0, r4
   129d6:	4b35      	ldr	r3, [pc, #212]	; (12aac <vCommandConsoleTask+0x1e0>)
   129d8:	4798      	blx	r3
   129da:	2431      	movs	r4, #49	; 0x31
   129dc:	2830      	cmp	r0, #48	; 0x30
   129de:	d803      	bhi.n	129e8 <vCommandConsoleTask+0x11c>
   129e0:	4827      	ldr	r0, [pc, #156]	; (12a80 <vCommandConsoleTask+0x1b4>)
   129e2:	4b32      	ldr	r3, [pc, #200]	; (12aac <vCommandConsoleTask+0x1e0>)
   129e4:	4798      	blx	r3
   129e6:	0004      	movs	r4, r0
   129e8:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
   129ea:	4826      	ldr	r0, [pc, #152]	; (12a84 <vCommandConsoleTask+0x1b8>)
   129ec:	4b1e      	ldr	r3, [pc, #120]	; (12a68 <vCommandConsoleTask+0x19c>)
   129ee:	4798      	blx	r3
   129f0:	e7d1      	b.n	12996 <vCommandConsoleTask+0xca>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
   129f2:	2b08      	cmp	r3, #8
   129f4:	d00f      	beq.n	12a16 <vCommandConsoleTask+0x14a>
   129f6:	2b7f      	cmp	r3, #127	; 0x7f
   129f8:	d00d      	beq.n	12a16 <vCommandConsoleTask+0x14a>
			else if( cRxedChar[0] == ASCII_ESC) {
   129fa:	2b1b      	cmp	r3, #27
   129fc:	d019      	beq.n	12a32 <vCommandConsoleTask+0x166>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
   129fe:	2c31      	cmp	r4, #49	; 0x31
   12a00:	d803      	bhi.n	12a0a <vCommandConsoleTask+0x13e>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
   12a02:	4a20      	ldr	r2, [pc, #128]	; (12a84 <vCommandConsoleTask+0x1b8>)
   12a04:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
   12a06:	3401      	adds	r4, #1
   12a08:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
   12a0a:	a801      	add	r0, sp, #4
   12a0c:	2300      	movs	r3, #0
   12a0e:	7043      	strb	r3, [r0, #1]
					SerialConsoleWriteString(&cRxedChar[0]);
   12a10:	4b15      	ldr	r3, [pc, #84]	; (12a68 <vCommandConsoleTask+0x19c>)
   12a12:	4798      	blx	r3
   12a14:	e79f      	b.n	12956 <vCommandConsoleTask+0x8a>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
   12a16:	4b26      	ldr	r3, [pc, #152]	; (12ab0 <vCommandConsoleTask+0x1e4>)
   12a18:	681b      	ldr	r3, [r3, #0]
   12a1a:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
   12a1c:	4668      	mov	r0, sp
   12a1e:	4b12      	ldr	r3, [pc, #72]	; (12a68 <vCommandConsoleTask+0x19c>)
   12a20:	4798      	blx	r3
                if( cInputIndex > 0 )
   12a22:	2c00      	cmp	r4, #0
   12a24:	d097      	beq.n	12956 <vCommandConsoleTask+0x8a>
                    cInputIndex--;
   12a26:	3c01      	subs	r4, #1
   12a28:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
   12a2a:	2200      	movs	r2, #0
   12a2c:	4b15      	ldr	r3, [pc, #84]	; (12a84 <vCommandConsoleTask+0x1b8>)
   12a2e:	551a      	strb	r2, [r3, r4]
            {
   12a30:	e791      	b.n	12956 <vCommandConsoleTask+0x8a>
				isEscapeCode = true; //Next characters will be code arguments
   12a32:	2201      	movs	r2, #1
   12a34:	4b10      	ldr	r3, [pc, #64]	; (12a78 <vCommandConsoleTask+0x1ac>)
   12a36:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
   12a38:	2200      	movs	r2, #0
   12a3a:	4b10      	ldr	r3, [pc, #64]	; (12a7c <vCommandConsoleTask+0x1b0>)
   12a3c:	701a      	strb	r2, [r3, #0]
   12a3e:	e78a      	b.n	12956 <vCommandConsoleTask+0x8a>
   12a40:	00027994 	.word	0x00027994
   12a44:	00015071 	.word	0x00015071
   12a48:	00027964 	.word	0x00027964
   12a4c:	0002793c 	.word	0x0002793c
   12a50:	000279a4 	.word	0x000279a4
   12a54:	00027984 	.word	0x00027984
   12a58:	00027974 	.word	0x00027974
   12a5c:	00027954 	.word	0x00027954
   12a60:	000279b4 	.word	0x000279b4
   12a64:	000278ec 	.word	0x000278ec
   12a68:	00018e8d 	.word	0x00018e8d
   12a6c:	00018f11 	.word	0x00018f11
   12a70:	00018045 	.word	0x00018045
   12a74:	0002ad9c 	.word	0x0002ad9c
   12a78:	200002d6 	.word	0x200002d6
   12a7c:	200002d7 	.word	0x200002d7
   12a80:	20000310 	.word	0x20000310
   12a84:	200002dc 	.word	0x200002dc
   12a88:	00026633 	.word	0x00026633
   12a8c:	20000344 	.word	0x20000344
   12a90:	000150b5 	.word	0x000150b5
   12a94:	0002624b 	.word	0x0002624b
   12a98:	200002d8 	.word	0x200002d8
   12a9c:	00027930 	.word	0x00027930
   12aa0:	0002654d 	.word	0x0002654d
   12aa4:	00027934 	.word	0x00027934
   12aa8:	00026509 	.word	0x00026509
   12aac:	00026603 	.word	0x00026603
   12ab0:	00027628 	.word	0x00027628

00012ab4 <vControlHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vControlHandlerTask( void *pvParameters )
{
   12ab4:	b580      	push	{r7, lr}
   12ab6:	b088      	sub	sp, #32
   12ab8:	af00      	add	r7, sp, #0
   12aba:	6078      	str	r0, [r7, #4]
SerialConsoleWriteString("ESE516 - Control Init Code\r\n");
   12abc:	4b42      	ldr	r3, [pc, #264]	; (12bc8 <vControlHandlerTask+0x114>)
   12abe:	0018      	movs	r0, r3
   12ac0:	4b42      	ldr	r3, [pc, #264]	; (12bcc <vControlHandlerTask+0x118>)
   12ac2:	4798      	blx	r3

//Initialize Queues
xQueueGameBufferIn = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   12ac4:	2200      	movs	r2, #0
   12ac6:	2114      	movs	r1, #20
   12ac8:	2002      	movs	r0, #2
   12aca:	4b41      	ldr	r3, [pc, #260]	; (12bd0 <vControlHandlerTask+0x11c>)
   12acc:	4798      	blx	r3
   12ace:	0002      	movs	r2, r0
   12ad0:	4b40      	ldr	r3, [pc, #256]	; (12bd4 <vControlHandlerTask+0x120>)
   12ad2:	601a      	str	r2, [r3, #0]
xQueueRgbColorBuffer = xQueueCreate( 2, sizeof( struct RgbColorPacket ) );
   12ad4:	2200      	movs	r2, #0
   12ad6:	2103      	movs	r1, #3
   12ad8:	2002      	movs	r0, #2
   12ada:	4b3d      	ldr	r3, [pc, #244]	; (12bd0 <vControlHandlerTask+0x11c>)
   12adc:	4798      	blx	r3
   12ade:	0002      	movs	r2, r0
   12ae0:	4b3d      	ldr	r3, [pc, #244]	; (12bd8 <vControlHandlerTask+0x124>)
   12ae2:	601a      	str	r2, [r3, #0]
static int8_t pcOutputString[ MAX_OUTPUT_LENGTH_CLI  ], pcInputString[ MAX_INPUT_LENGTH_CLI ];

if(xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL){
   12ae4:	4b3b      	ldr	r3, [pc, #236]	; (12bd4 <vControlHandlerTask+0x120>)
   12ae6:	681b      	ldr	r3, [r3, #0]
   12ae8:	2b00      	cmp	r3, #0
   12aea:	d003      	beq.n	12af4 <vControlHandlerTask+0x40>
   12aec:	4b3a      	ldr	r3, [pc, #232]	; (12bd8 <vControlHandlerTask+0x124>)
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	2b00      	cmp	r3, #0
   12af2:	d103      	bne.n	12afc <vControlHandlerTask+0x48>
	SerialConsoleWriteString("ERROR Initializing Control Data queues!\r\n");
   12af4:	4b39      	ldr	r3, [pc, #228]	; (12bdc <vControlHandlerTask+0x128>)
   12af6:	0018      	movs	r0, r3
   12af8:	4b34      	ldr	r3, [pc, #208]	; (12bcc <vControlHandlerTask+0x118>)
   12afa:	4798      	blx	r3
}
controlState = CONTROL_WAIT_FOR_GAME; //Initial state
   12afc:	4b38      	ldr	r3, [pc, #224]	; (12be0 <vControlHandlerTask+0x12c>)
   12afe:	2200      	movs	r2, #0
   12b00:	701a      	strb	r2, [r3, #0]

TickType_t startTime =  xTaskGetTickCount(); //Get current time
   12b02:	4b38      	ldr	r3, [pc, #224]	; (12be4 <vControlHandlerTask+0x130>)
   12b04:	4798      	blx	r3
   12b06:	0003      	movs	r3, r0
   12b08:	61fb      	str	r3, [r7, #28]

while(1)
{
	switch(controlState)
   12b0a:	4b35      	ldr	r3, [pc, #212]	; (12be0 <vControlHandlerTask+0x12c>)
   12b0c:	781b      	ldrb	r3, [r3, #0]
   12b0e:	2b01      	cmp	r3, #1
   12b10:	d01d      	beq.n	12b4e <vControlHandlerTask+0x9a>
   12b12:	2b02      	cmp	r3, #2
   12b14:	d035      	beq.n	12b82 <vControlHandlerTask+0xce>
   12b16:	2b00      	cmp	r3, #0
   12b18:	d12f      	bne.n	12b7a <vControlHandlerTask+0xc6>
	{
	case (CONTROL_WAIT_FOR_GAME):
	{	//Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
		struct GameDataPacket gamePacketIn;
		if(pdPASS == xQueueReceive( xQueueGameBufferIn , &gamePacketIn, 0 ))
   12b1a:	4b2e      	ldr	r3, [pc, #184]	; (12bd4 <vControlHandlerTask+0x120>)
   12b1c:	681b      	ldr	r3, [r3, #0]
   12b1e:	2208      	movs	r2, #8
   12b20:	18b9      	adds	r1, r7, r2
   12b22:	2200      	movs	r2, #0
   12b24:	0018      	movs	r0, r3
   12b26:	4b30      	ldr	r3, [pc, #192]	; (12be8 <vControlHandlerTask+0x134>)
   12b28:	4798      	blx	r3
   12b2a:	0003      	movs	r3, r0
   12b2c:	2b01      	cmp	r3, #1
   12b2e:	d12a      	bne.n	12b86 <vControlHandlerTask+0xd2>
		{
			LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   12b30:	4b2e      	ldr	r3, [pc, #184]	; (12bec <vControlHandlerTask+0x138>)
   12b32:	0019      	movs	r1, r3
   12b34:	2001      	movs	r0, #1
   12b36:	4b2e      	ldr	r3, [pc, #184]	; (12bf0 <vControlHandlerTask+0x13c>)
   12b38:	4798      	blx	r3
			UiOrderShowMoves(&gamePacketIn);
   12b3a:	2308      	movs	r3, #8
   12b3c:	18fb      	adds	r3, r7, r3
   12b3e:	0018      	movs	r0, r3
   12b40:	4b2c      	ldr	r3, [pc, #176]	; (12bf4 <vControlHandlerTask+0x140>)
   12b42:	4798      	blx	r3
			controlState = CONTROL_PLAYING_MOVE;
   12b44:	4b26      	ldr	r3, [pc, #152]	; (12be0 <vControlHandlerTask+0x12c>)
   12b46:	2201      	movs	r2, #1
   12b48:	701a      	strb	r2, [r3, #0]
		}
		
		break;
   12b4a:	46c0      	nop			; (mov r8, r8)
   12b4c:	e01b      	b.n	12b86 <vControlHandlerTask+0xd2>
	}

	case (CONTROL_PLAYING_MOVE):
	{	//Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
		//after posting the game to MQTT
		if(UiPlayIsDone() == true)
   12b4e:	4b2a      	ldr	r3, [pc, #168]	; (12bf8 <vControlHandlerTask+0x144>)
   12b50:	4798      	blx	r3
   12b52:	1e03      	subs	r3, r0, #0
   12b54:	d019      	beq.n	12b8a <vControlHandlerTask+0xd6>
		{
			//Send back local game packet
			if( pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut()))
   12b56:	4b29      	ldr	r3, [pc, #164]	; (12bfc <vControlHandlerTask+0x148>)
   12b58:	4798      	blx	r3
   12b5a:	0003      	movs	r3, r0
   12b5c:	0018      	movs	r0, r3
   12b5e:	4b28      	ldr	r3, [pc, #160]	; (12c00 <vControlHandlerTask+0x14c>)
   12b60:	4798      	blx	r3
   12b62:	0003      	movs	r3, r0
   12b64:	2b01      	cmp	r3, #1
   12b66:	d004      	beq.n	12b72 <vControlHandlerTask+0xbe>
			{
				LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   12b68:	4b26      	ldr	r3, [pc, #152]	; (12c04 <vControlHandlerTask+0x150>)
   12b6a:	0019      	movs	r1, r3
   12b6c:	2001      	movs	r0, #1
   12b6e:	4b20      	ldr	r3, [pc, #128]	; (12bf0 <vControlHandlerTask+0x13c>)
   12b70:	4798      	blx	r3
			}
			controlState = CONTROL_WAIT_FOR_GAME;
   12b72:	4b1b      	ldr	r3, [pc, #108]	; (12be0 <vControlHandlerTask+0x12c>)
   12b74:	2200      	movs	r2, #0
   12b76:	701a      	strb	r2, [r3, #0]
		}

		break;
   12b78:	e007      	b.n	12b8a <vControlHandlerTask+0xd6>
		break;
	}


	default:
		controlState = CONTROL_WAIT_FOR_GAME;
   12b7a:	4b19      	ldr	r3, [pc, #100]	; (12be0 <vControlHandlerTask+0x12c>)
   12b7c:	2200      	movs	r2, #0
   12b7e:	701a      	strb	r2, [r3, #0]
	break;
   12b80:	e004      	b.n	12b8c <vControlHandlerTask+0xd8>
		break;
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	e002      	b.n	12b8c <vControlHandlerTask+0xd8>
		break;
   12b86:	46c0      	nop			; (mov r8, r8)
   12b88:	e000      	b.n	12b8c <vControlHandlerTask+0xd8>
		break;
   12b8a:	46c0      	nop			; (mov r8, r8)



	}
	
	if(xTaskGetTickCount() - startTime > 300)
   12b8c:	4b15      	ldr	r3, [pc, #84]	; (12be4 <vControlHandlerTask+0x130>)
   12b8e:	4798      	blx	r3
   12b90:	0002      	movs	r2, r0
   12b92:	69fb      	ldr	r3, [r7, #28]
   12b94:	1ad2      	subs	r2, r2, r3
   12b96:	2396      	movs	r3, #150	; 0x96
   12b98:	005b      	lsls	r3, r3, #1
   12b9a:	429a      	cmp	r2, r3
   12b9c:	d90f      	bls.n	12bbe <vControlHandlerTask+0x10a>
	{
		startTime =  xTaskGetTickCount(); //Save ticktime for next round
   12b9e:	4b11      	ldr	r3, [pc, #68]	; (12be4 <vControlHandlerTask+0x130>)
   12ba0:	4798      	blx	r3
   12ba2:	0003      	movs	r3, r0
   12ba4:	61fb      	str	r3, [r7, #28]
		//Perform the function you want to happen only every delta T - Like updating the LED values to decay them!
		CLI_GetImuData(pcOutputString, MAX_OUTPUT_LENGTH_CLI,pcInputString );
   12ba6:	4a18      	ldr	r2, [pc, #96]	; (12c08 <vControlHandlerTask+0x154>)
   12ba8:	4b18      	ldr	r3, [pc, #96]	; (12c0c <vControlHandlerTask+0x158>)
   12baa:	2182      	movs	r1, #130	; 0x82
   12bac:	0018      	movs	r0, r3
   12bae:	4b18      	ldr	r3, [pc, #96]	; (12c10 <vControlHandlerTask+0x15c>)
   12bb0:	4798      	blx	r3
		CLI_DistanceSensorGetDistance(pcOutputString, MAX_OUTPUT_LENGTH_CLI,pcInputString );
   12bb2:	4a15      	ldr	r2, [pc, #84]	; (12c08 <vControlHandlerTask+0x154>)
   12bb4:	4b15      	ldr	r3, [pc, #84]	; (12c0c <vControlHandlerTask+0x158>)
   12bb6:	2182      	movs	r1, #130	; 0x82
   12bb8:	0018      	movs	r0, r3
   12bba:	4b16      	ldr	r3, [pc, #88]	; (12c14 <vControlHandlerTask+0x160>)
   12bbc:	4798      	blx	r3
	
	
	
	
	
vTaskDelay(40);
   12bbe:	2028      	movs	r0, #40	; 0x28
   12bc0:	4b15      	ldr	r3, [pc, #84]	; (12c18 <vControlHandlerTask+0x164>)
   12bc2:	4798      	blx	r3
	switch(controlState)
   12bc4:	e7a1      	b.n	12b0a <vControlHandlerTask+0x56>
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	000279c4 	.word	0x000279c4
   12bcc:	00018e8d 	.word	0x00018e8d
   12bd0:	00016a7d 	.word	0x00016a7d
   12bd4:	200003c8 	.word	0x200003c8
   12bd8:	200003cc 	.word	0x200003cc
   12bdc:	000279e4 	.word	0x000279e4
   12be0:	200041e0 	.word	0x200041e0
   12be4:	00017d81 	.word	0x00017d81
   12be8:	00017255 	.word	0x00017255
   12bec:	00027a10 	.word	0x00027a10
   12bf0:	00018f3d 	.word	0x00018f3d
   12bf4:	00013b15 	.word	0x00013b15
   12bf8:	00013b51 	.word	0x00013b51
   12bfc:	00013b65 	.word	0x00013b65
   12c00:	00014b91 	.word	0x00014b91
   12c04:	00027a38 	.word	0x00027a38
   12c08:	20000454 	.word	0x20000454
   12c0c:	200003d0 	.word	0x200003d0
   12c10:	000125a5 	.word	0x000125a5
   12c14:	000127f5 	.word	0x000127f5
   12c18:	00018045 	.word	0x00018045

00012c1c <ControlAddGameData>:
* @return		Returns pdTrue if data can be added to queue, 0 if queue is full
* @note         

*****************************************************************************/
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   12c1c:	b590      	push	{r4, r7, lr}
   12c1e:	b085      	sub	sp, #20
   12c20:	af00      	add	r7, sp, #0
   12c22:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueGameBufferIn , gameIn, ( TickType_t ) 10);
   12c24:	4b06      	ldr	r3, [pc, #24]	; (12c40 <ControlAddGameData+0x24>)
   12c26:	6818      	ldr	r0, [r3, #0]
   12c28:	6879      	ldr	r1, [r7, #4]
   12c2a:	2300      	movs	r3, #0
   12c2c:	220a      	movs	r2, #10
   12c2e:	4c05      	ldr	r4, [pc, #20]	; (12c44 <ControlAddGameData+0x28>)
   12c30:	47a0      	blx	r4
   12c32:	0003      	movs	r3, r0
   12c34:	60fb      	str	r3, [r7, #12]
	return error;
   12c36:	68fb      	ldr	r3, [r7, #12]
}
   12c38:	0018      	movs	r0, r3
   12c3a:	46bd      	mov	sp, r7
   12c3c:	b005      	add	sp, #20
   12c3e:	bd90      	pop	{r4, r7, pc}
   12c40:	200003c8 	.word	0x200003c8
   12c44:	00016bb9 	.word	0x00016bb9

00012c48 <distUsartWritecallback>:
/******************************************************************************
*  Callback Declaration
******************************************************************************/
//Callback for when we finish writing characters to UART
void distUsartWritecallback(struct usart_module *const usart_module)
{
   12c48:	b500      	push	{lr}
   12c4a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12c4c:	2300      	movs	r3, #0
   12c4e:	9301      	str	r3, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken );
   12c50:	4b06      	ldr	r3, [pc, #24]	; (12c6c <distUsartWritecallback+0x24>)
   12c52:	6818      	ldr	r0, [r3, #0]
   12c54:	a901      	add	r1, sp, #4
   12c56:	4b06      	ldr	r3, [pc, #24]	; (12c70 <distUsartWritecallback+0x28>)
   12c58:	4798      	blx	r3
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   12c5a:	9b01      	ldr	r3, [sp, #4]
   12c5c:	2b00      	cmp	r3, #0
   12c5e:	d003      	beq.n	12c68 <distUsartWritecallback+0x20>
   12c60:	2280      	movs	r2, #128	; 0x80
   12c62:	0552      	lsls	r2, r2, #21
   12c64:	4b03      	ldr	r3, [pc, #12]	; (12c74 <distUsartWritecallback+0x2c>)
   12c66:	601a      	str	r2, [r3, #0]
}
   12c68:	b003      	add	sp, #12
   12c6a:	bd00      	pop	{pc}
   12c6c:	200041e8 	.word	0x200041e8
   12c70:	00017245 	.word	0x00017245
   12c74:	e000ed04 	.word	0xe000ed04

00012c78 <distUsartReadcallback>:
	//Callback for when we finish writing characters to UART

void distUsartReadcallback(struct usart_module *const usart_module)
{
   12c78:	b500      	push	{lr}
   12c7a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12c7c:	2300      	movs	r3, #0
   12c7e:	9301      	str	r3, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken );
   12c80:	4b06      	ldr	r3, [pc, #24]	; (12c9c <distUsartReadcallback+0x24>)
   12c82:	6818      	ldr	r0, [r3, #0]
   12c84:	a901      	add	r1, sp, #4
   12c86:	4b06      	ldr	r3, [pc, #24]	; (12ca0 <distUsartReadcallback+0x28>)
   12c88:	4798      	blx	r3
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   12c8a:	9b01      	ldr	r3, [sp, #4]
   12c8c:	2b00      	cmp	r3, #0
   12c8e:	d003      	beq.n	12c98 <distUsartReadcallback+0x20>
   12c90:	2280      	movs	r2, #128	; 0x80
   12c92:	0552      	lsls	r2, r2, #21
   12c94:	4b03      	ldr	r3, [pc, #12]	; (12ca4 <distUsartReadcallback+0x2c>)
   12c96:	601a      	str	r2, [r3, #0]
}
   12c98:	b003      	add	sp, #12
   12c9a:	bd00      	pop	{pc}
   12c9c:	200041e8 	.word	0x200041e8
   12ca0:	00017245 	.word	0x00017245
   12ca4:	e000ed04 	.word	0xe000ed04

00012ca8 <InitializeDistanceSensor>:
*				asynchronous reads and writes.
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeDistanceSensor(void)
{
   12ca8:	b530      	push	{r4, r5, lr}
   12caa:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   12cac:	2380      	movs	r3, #128	; 0x80
   12cae:	05db      	lsls	r3, r3, #23
   12cb0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   12cb2:	2300      	movs	r3, #0
   12cb4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
   12cb6:	22ff      	movs	r2, #255	; 0xff
   12cb8:	4669      	mov	r1, sp
   12cba:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
   12cbc:	2200      	movs	r2, #0
   12cbe:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   12cc0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
   12cc2:	2196      	movs	r1, #150	; 0x96
   12cc4:	0189      	lsls	r1, r1, #6
   12cc6:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
   12cc8:	2101      	movs	r1, #1
   12cca:	2024      	movs	r0, #36	; 0x24
   12ccc:	466c      	mov	r4, sp
   12cce:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
   12cd0:	3001      	adds	r0, #1
   12cd2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
   12cd4:	3125      	adds	r1, #37	; 0x25
   12cd6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
   12cd8:	3101      	adds	r1, #1
   12cda:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
   12cdc:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   12cde:	3105      	adds	r1, #5
   12ce0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
   12ce2:	3101      	adds	r1, #1
   12ce4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   12ce6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   12ce8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   12cea:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   12cec:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   12cee:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   12cf0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
   12cf2:	2313      	movs	r3, #19
   12cf4:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   12cf6:	7762      	strb	r2, [r4, #29]
{
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   12cf8:	2380      	movs	r3, #128	; 0x80
   12cfa:	035b      	lsls	r3, r3, #13
   12cfc:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;
   12cfe:	4b24      	ldr	r3, [pc, #144]	; (12d90 <InitializeDistanceSensor+0xe8>)
   12d00:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;
   12d02:	4b24      	ldr	r3, [pc, #144]	; (12d94 <InitializeDistanceSensor+0xec>)
   12d04:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
   12d06:	2301      	movs	r3, #1
   12d08:	425b      	negs	r3, r3
   12d0a:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
   12d0c:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance_dist,	SERCOM5, &config_usart) != STATUS_OK)
   12d0e:	4d22      	ldr	r5, [pc, #136]	; (12d98 <InitializeDistanceSensor+0xf0>)
   12d10:	4c22      	ldr	r4, [pc, #136]	; (12d9c <InitializeDistanceSensor+0xf4>)
   12d12:	466a      	mov	r2, sp
   12d14:	4922      	ldr	r1, [pc, #136]	; (12da0 <InitializeDistanceSensor+0xf8>)
   12d16:	0028      	movs	r0, r5
   12d18:	47a0      	blx	r4
   12d1a:	2800      	cmp	r0, #0
   12d1c:	d1f9      	bne.n	12d12 <InitializeDistanceSensor+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   12d1e:	4d1e      	ldr	r5, [pc, #120]	; (12d98 <InitializeDistanceSensor+0xf0>)
   12d20:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   12d22:	0020      	movs	r0, r4
   12d24:	4b1f      	ldr	r3, [pc, #124]	; (12da4 <InitializeDistanceSensor+0xfc>)
   12d26:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12d28:	231f      	movs	r3, #31
   12d2a:	4018      	ands	r0, r3
   12d2c:	3b1e      	subs	r3, #30
   12d2e:	4083      	lsls	r3, r0
   12d30:	4a1d      	ldr	r2, [pc, #116]	; (12da8 <InitializeDistanceSensor+0x100>)
   12d32:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   12d34:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   12d36:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d1fc      	bne.n	12d36 <InitializeDistanceSensor+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   12d3c:	6823      	ldr	r3, [r4, #0]
   12d3e:	2202      	movs	r2, #2
   12d40:	4313      	orrs	r3, r2
   12d42:	6023      	str	r3, [r4, #0]
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
	usart_register_callback(&usart_instance_dist,distUsartWritecallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   12d44:	4c14      	ldr	r4, [pc, #80]	; (12d98 <InitializeDistanceSensor+0xf0>)
   12d46:	2200      	movs	r2, #0
   12d48:	4918      	ldr	r1, [pc, #96]	; (12dac <InitializeDistanceSensor+0x104>)
   12d4a:	0020      	movs	r0, r4
   12d4c:	4d18      	ldr	r5, [pc, #96]	; (12db0 <InitializeDistanceSensor+0x108>)
   12d4e:	47a8      	blx	r5
	usart_register_callback(&usart_instance_dist,distUsartReadcallback, USART_CALLBACK_BUFFER_RECEIVED);
   12d50:	2201      	movs	r2, #1
   12d52:	4918      	ldr	r1, [pc, #96]	; (12db4 <InitializeDistanceSensor+0x10c>)
   12d54:	0020      	movs	r0, r4
   12d56:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   12d58:	2231      	movs	r2, #49	; 0x31
   12d5a:	5ca3      	ldrb	r3, [r4, r2]
   12d5c:	2103      	movs	r1, #3
   12d5e:	430b      	orrs	r3, r1
   12d60:	54a3      	strb	r3, [r4, r2]
	sensorDistanceMutexHandle = xSemaphoreCreateMutex();
   12d62:	2001      	movs	r0, #1
   12d64:	4b14      	ldr	r3, [pc, #80]	; (12db8 <InitializeDistanceSensor+0x110>)
   12d66:	4798      	blx	r3
   12d68:	4c14      	ldr	r4, [pc, #80]	; (12dbc <InitializeDistanceSensor+0x114>)
   12d6a:	6020      	str	r0, [r4, #0]
	sensorDistanceSemaphoreHandle = xSemaphoreCreateBinary();
   12d6c:	2203      	movs	r2, #3
   12d6e:	2100      	movs	r1, #0
   12d70:	2001      	movs	r0, #1
   12d72:	4b13      	ldr	r3, [pc, #76]	; (12dc0 <InitializeDistanceSensor+0x118>)
   12d74:	4798      	blx	r3
   12d76:	4b13      	ldr	r3, [pc, #76]	; (12dc4 <InitializeDistanceSensor+0x11c>)
   12d78:	6018      	str	r0, [r3, #0]
	if(NULL == sensorDistanceMutexHandle || NULL == sensorDistanceSemaphoreHandle){
   12d7a:	6823      	ldr	r3, [r4, #0]
   12d7c:	2b00      	cmp	r3, #0
   12d7e:	d003      	beq.n	12d88 <InitializeDistanceSensor+0xe0>
   12d80:	2800      	cmp	r0, #0
   12d82:	d001      	beq.n	12d88 <InitializeDistanceSensor+0xe0>
}
   12d84:	b011      	add	sp, #68	; 0x44
   12d86:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Could not initialize Distance Sensor!");
   12d88:	480f      	ldr	r0, [pc, #60]	; (12dc8 <InitializeDistanceSensor+0x120>)
   12d8a:	4b10      	ldr	r3, [pc, #64]	; (12dcc <InitializeDistanceSensor+0x124>)
   12d8c:	4798      	blx	r3
}
   12d8e:	e7f9      	b.n	12d84 <InitializeDistanceSensor+0xdc>
   12d90:	00220003 	.word	0x00220003
   12d94:	00230003 	.word	0x00230003
   12d98:	200041f0 	.word	0x200041f0
   12d9c:	0001e501 	.word	0x0001e501
   12da0:	42001c00 	.word	0x42001c00
   12da4:	0001dd7d 	.word	0x0001dd7d
   12da8:	e000e100 	.word	0xe000e100
   12dac:	00012c49 	.word	0x00012c49
   12db0:	0001e8d1 	.word	0x0001e8d1
   12db4:	00012c79 	.word	0x00012c79
   12db8:	00016ee1 	.word	0x00016ee1
   12dbc:	200041ec 	.word	0x200041ec
   12dc0:	00016a7d 	.word	0x00016a7d
   12dc4:	200041e8 	.word	0x200041e8
   12dc8:	00027a68 	.word	0x00027a68
   12dcc:	00018e8d 	.word	0x00018e8d

00012dd0 <DistanceSensorGetDistance>:
{
   12dd0:	b570      	push	{r4, r5, r6, lr}
   12dd2:	0006      	movs	r6, r0
   12dd4:	000d      	movs	r5, r1
 * @note        
 *****************************************************************************/
static int32_t DistanceSensorGetMutex(TickType_t waitTime){
	
	int32_t error = ERROR_NONE;
	if(xSemaphoreTake( sensorDistanceMutexHandle, waitTime ) != pdTRUE)
   12dd6:	4b1f      	ldr	r3, [pc, #124]	; (12e54 <DistanceSensorGetDistance+0x84>)
   12dd8:	6818      	ldr	r0, [r3, #0]
   12dda:	2196      	movs	r1, #150	; 0x96
   12ddc:	0049      	lsls	r1, r1, #1
   12dde:	4b1e      	ldr	r3, [pc, #120]	; (12e58 <DistanceSensorGetDistance+0x88>)
   12de0:	4798      	blx	r3
   12de2:	2801      	cmp	r0, #1
   12de4:	d12d      	bne.n	12e42 <DistanceSensorGetDistance+0x72>
distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   12de6:	491d      	ldr	r1, [pc, #116]	; (12e5c <DistanceSensorGetDistance+0x8c>)
   12de8:	2355      	movs	r3, #85	; 0x55
   12dea:	700b      	strb	r3, [r1, #0]
if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t*) &distTx, 1))
   12dec:	2201      	movs	r2, #1
   12dee:	481c      	ldr	r0, [pc, #112]	; (12e60 <DistanceSensorGetDistance+0x90>)
   12df0:	4b1c      	ldr	r3, [pc, #112]	; (12e64 <DistanceSensorGetDistance+0x94>)
   12df2:	4798      	blx	r3
error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   12df4:	2400      	movs	r4, #0
if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t*) &distTx, 1))
   12df6:	2800      	cmp	r0, #0
   12df8:	d008      	beq.n	12e0c <DistanceSensorGetDistance+0x3c>
	if( xSemaphoreGive( sensorDistanceMutexHandle ) != pdTRUE ){
   12dfa:	4b16      	ldr	r3, [pc, #88]	; (12e54 <DistanceSensorGetDistance+0x84>)
   12dfc:	6818      	ldr	r0, [r3, #0]
   12dfe:	2300      	movs	r3, #0
   12e00:	2200      	movs	r2, #0
   12e02:	2100      	movs	r1, #0
   12e04:	4d18      	ldr	r5, [pc, #96]	; (12e68 <DistanceSensorGetDistance+0x98>)
   12e06:	47a8      	blx	r5
}
   12e08:	0020      	movs	r0, r4
   12e0a:	bd70      	pop	{r4, r5, r6, pc}
if( xSemaphoreTake( sensorDistanceSemaphoreHandle, xMaxBlockTime ) == pdTRUE ){
   12e0c:	4b17      	ldr	r3, [pc, #92]	; (12e6c <DistanceSensorGetDistance+0x9c>)
   12e0e:	6818      	ldr	r0, [r3, #0]
   12e10:	0029      	movs	r1, r5
   12e12:	4b11      	ldr	r3, [pc, #68]	; (12e58 <DistanceSensorGetDistance+0x88>)
   12e14:	4798      	blx	r3
   12e16:	2801      	cmp	r0, #1
   12e18:	d116      	bne.n	12e48 <DistanceSensorGetDistance+0x78>
usart_read_buffer_job(&usart_instance_dist, (uint8_t*) &latestRxDistance, 2);	//Kicks off constant reading of characters
   12e1a:	2202      	movs	r2, #2
   12e1c:	4914      	ldr	r1, [pc, #80]	; (12e70 <DistanceSensorGetDistance+0xa0>)
   12e1e:	4810      	ldr	r0, [pc, #64]	; (12e60 <DistanceSensorGetDistance+0x90>)
   12e20:	4b14      	ldr	r3, [pc, #80]	; (12e74 <DistanceSensorGetDistance+0xa4>)
   12e22:	4798      	blx	r3
if( xSemaphoreTake( sensorDistanceSemaphoreHandle, xMaxBlockTime ) == pdTRUE ){
   12e24:	4b11      	ldr	r3, [pc, #68]	; (12e6c <DistanceSensorGetDistance+0x9c>)
   12e26:	6818      	ldr	r0, [r3, #0]
   12e28:	0029      	movs	r1, r5
   12e2a:	4b0b      	ldr	r3, [pc, #44]	; (12e58 <DistanceSensorGetDistance+0x88>)
   12e2c:	4798      	blx	r3
   12e2e:	2801      	cmp	r0, #1
   12e30:	d10d      	bne.n	12e4e <DistanceSensorGetDistance+0x7e>
	*distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   12e32:	490f      	ldr	r1, [pc, #60]	; (12e70 <DistanceSensorGetDistance+0xa0>)
   12e34:	780a      	ldrb	r2, [r1, #0]
   12e36:	0212      	lsls	r2, r2, #8
   12e38:	784b      	ldrb	r3, [r1, #1]
   12e3a:	189b      	adds	r3, r3, r2
   12e3c:	8033      	strh	r3, [r6, #0]
error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   12e3e:	2400      	movs	r4, #0
   12e40:	e7db      	b.n	12dfa <DistanceSensorGetDistance+0x2a>
	{
		error = ERROR_NOT_READY;
   12e42:	241d      	movs	r4, #29
   12e44:	4264      	negs	r4, r4
   12e46:	e7d8      	b.n	12dfa <DistanceSensorGetDistance+0x2a>
	error = ERR_TIMEOUT;
   12e48:	2403      	movs	r4, #3
   12e4a:	4264      	negs	r4, r4
   12e4c:	e7d5      	b.n	12dfa <DistanceSensorGetDistance+0x2a>
	error = ERR_TIMEOUT;
   12e4e:	2403      	movs	r4, #3
   12e50:	4264      	negs	r4, r4
   12e52:	e7d2      	b.n	12dfa <DistanceSensorGetDistance+0x2a>
   12e54:	200041ec 	.word	0x200041ec
   12e58:	00017561 	.word	0x00017561
   12e5c:	200041e6 	.word	0x200041e6
   12e60:	200041f0 	.word	0x200041f0
   12e64:	0001e8e9 	.word	0x0001e8e9
   12e68:	00016bb9 	.word	0x00016bb9
   12e6c:	200041e8 	.word	0x200041e8
   12e70:	200041e4 	.word	0x200041e4
   12e74:	0001e909 	.word	0x0001e909

00012e78 <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
   12e78:	b510      	push	{r4, lr}
   12e7a:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;			
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12e7c:	2400      	movs	r4, #0
   12e7e:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   12e80:	4b07      	ldr	r3, [pc, #28]	; (12ea0 <I2cSensorsTxComplete+0x28>)
   12e82:	6818      	ldr	r0, [r3, #0]
   12e84:	a901      	add	r1, sp, #4
   12e86:	4b07      	ldr	r3, [pc, #28]	; (12ea4 <I2cSensorsTxComplete+0x2c>)
   12e88:	4798      	blx	r3
	sensorTransmitError = false;
   12e8a:	4b07      	ldr	r3, [pc, #28]	; (12ea8 <I2cSensorsTxComplete+0x30>)
   12e8c:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   12e8e:	9b01      	ldr	r3, [sp, #4]
   12e90:	2b00      	cmp	r3, #0
   12e92:	d003      	beq.n	12e9c <I2cSensorsTxComplete+0x24>
   12e94:	2280      	movs	r2, #128	; 0x80
   12e96:	0552      	lsls	r2, r2, #21
   12e98:	4b04      	ldr	r3, [pc, #16]	; (12eac <I2cSensorsTxComplete+0x34>)
   12e9a:	601a      	str	r2, [r3, #0]
}
   12e9c:	b002      	add	sp, #8
   12e9e:	bd10      	pop	{r4, pc}
   12ea0:	20004250 	.word	0x20004250
   12ea4:	00017245 	.word	0x00017245
   12ea8:	20000486 	.word	0x20000486
   12eac:	e000ed04 	.word	0xe000ed04

00012eb0 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
   12eb0:	b510      	push	{r4, lr}
   12eb2:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12eb4:	2400      	movs	r4, #0
   12eb6:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   12eb8:	4b07      	ldr	r3, [pc, #28]	; (12ed8 <I2cSensorsRxComplete+0x28>)
   12eba:	6818      	ldr	r0, [r3, #0]
   12ebc:	a901      	add	r1, sp, #4
   12ebe:	4b07      	ldr	r3, [pc, #28]	; (12edc <I2cSensorsRxComplete+0x2c>)
   12ec0:	4798      	blx	r3
	sensorTransmitError = false;
   12ec2:	4b07      	ldr	r3, [pc, #28]	; (12ee0 <I2cSensorsRxComplete+0x30>)
   12ec4:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   12ec6:	9b01      	ldr	r3, [sp, #4]
   12ec8:	2b00      	cmp	r3, #0
   12eca:	d003      	beq.n	12ed4 <I2cSensorsRxComplete+0x24>
   12ecc:	2280      	movs	r2, #128	; 0x80
   12ece:	0552      	lsls	r2, r2, #21
   12ed0:	4b04      	ldr	r3, [pc, #16]	; (12ee4 <I2cSensorsRxComplete+0x34>)
   12ed2:	601a      	str	r2, [r3, #0]
}
   12ed4:	b002      	add	sp, #8
   12ed6:	bd10      	pop	{r4, pc}
   12ed8:	20004250 	.word	0x20004250
   12edc:	00017245 	.word	0x00017245
   12ee0:	20000486 	.word	0x20000486
   12ee4:	e000ed04 	.word	0xe000ed04

00012ee8 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
   12ee8:	b510      	push	{r4, lr}
   12eea:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.txDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12eec:	2400      	movs	r4, #0
   12eee:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   12ef0:	4b07      	ldr	r3, [pc, #28]	; (12f10 <I2cSensorsError+0x28>)
   12ef2:	6818      	ldr	r0, [r3, #0]
   12ef4:	a901      	add	r1, sp, #4
   12ef6:	4b07      	ldr	r3, [pc, #28]	; (12f14 <I2cSensorsError+0x2c>)
   12ef8:	4798      	blx	r3
	sensorTransmitError = false;
   12efa:	4b07      	ldr	r3, [pc, #28]	; (12f18 <I2cSensorsError+0x30>)
   12efc:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   12efe:	9b01      	ldr	r3, [sp, #4]
   12f00:	2b00      	cmp	r3, #0
   12f02:	d003      	beq.n	12f0c <I2cSensorsError+0x24>
   12f04:	2280      	movs	r2, #128	; 0x80
   12f06:	0552      	lsls	r2, r2, #21
   12f08:	4b04      	ldr	r3, [pc, #16]	; (12f1c <I2cSensorsError+0x34>)
   12f0a:	601a      	str	r2, [r3, #0]
}
   12f0c:	b002      	add	sp, #8
   12f0e:	bd10      	pop	{r4, pc}
   12f10:	20004250 	.word	0x20004250
   12f14:	00017245 	.word	0x00017245
   12f18:	20000486 	.word	0x20000486
   12f1c:	e000ed04 	.word	0xe000ed04

00012f20 <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
   12f20:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   12f22:	4c0c      	ldr	r4, [pc, #48]	; (12f54 <I2cDriverRegisterSensorBusCallbacks+0x34>)
   12f24:	2200      	movs	r2, #0
   12f26:	490c      	ldr	r1, [pc, #48]	; (12f58 <I2cDriverRegisterSensorBusCallbacks+0x38>)
   12f28:	0020      	movs	r0, r4
   12f2a:	4d0c      	ldr	r5, [pc, #48]	; (12f5c <I2cDriverRegisterSensorBusCallbacks+0x3c>)
   12f2c:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   12f2e:	7e63      	ldrb	r3, [r4, #25]
   12f30:	2201      	movs	r2, #1
   12f32:	4313      	orrs	r3, r2
   12f34:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   12f36:	490a      	ldr	r1, [pc, #40]	; (12f60 <I2cDriverRegisterSensorBusCallbacks+0x40>)
   12f38:	0020      	movs	r0, r4
   12f3a:	47a8      	blx	r5
   12f3c:	7e63      	ldrb	r3, [r4, #25]
   12f3e:	2202      	movs	r2, #2
   12f40:	4313      	orrs	r3, r2
   12f42:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
   12f44:	4907      	ldr	r1, [pc, #28]	; (12f64 <I2cDriverRegisterSensorBusCallbacks+0x44>)
   12f46:	0020      	movs	r0, r4
   12f48:	47a8      	blx	r5
   12f4a:	7e63      	ldrb	r3, [r4, #25]
   12f4c:	2204      	movs	r2, #4
   12f4e:	4313      	orrs	r3, r2
   12f50:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
   12f52:	bd70      	pop	{r4, r5, r6, pc}
   12f54:	20004228 	.word	0x20004228
   12f58:	00012e79 	.word	0x00012e79
   12f5c:	00012315 	.word	0x00012315
   12f60:	00012eb1 	.word	0x00012eb1
   12f64:	00012ee9 	.word	0x00012ee9

00012f68 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
   12f68:	b570      	push	{r4, r5, r6, lr}
   12f6a:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   12f6c:	ab01      	add	r3, sp, #4
   12f6e:	2264      	movs	r2, #100	; 0x64
   12f70:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   12f72:	4a33      	ldr	r2, [pc, #204]	; (13040 <I2cInitializeDriver+0xd8>)
   12f74:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   12f76:	2200      	movs	r2, #0
   12f78:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   12f7a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   12f7c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   12f7e:	2180      	movs	r1, #128	; 0x80
   12f80:	0389      	lsls	r1, r1, #14
   12f82:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
   12f84:	2101      	movs	r1, #1
   12f86:	4249      	negs	r1, r1
   12f88:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
   12f8a:	3125      	adds	r1, #37	; 0x25
   12f8c:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   12f8e:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   12f90:	3108      	adds	r1, #8
   12f92:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   12f94:	3101      	adds	r1, #1
   12f96:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
   12f98:	3101      	adds	r1, #1
   12f9a:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   12f9c:	32d7      	adds	r2, #215	; 0xd7
   12f9e:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   12fa0:	4a28      	ldr	r2, [pc, #160]	; (13044 <I2cInitializeDriver+0xdc>)
   12fa2:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   12fa4:	4a28      	ldr	r2, [pc, #160]	; (13048 <I2cInitializeDriver+0xe0>)
   12fa6:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
   12fa8:	22fa      	movs	r2, #250	; 0xfa
   12faa:	0092      	lsls	r2, r2, #2
   12fac:	82da      	strh	r2, [r3, #22]
   12fae:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   12fb0:	4d26      	ldr	r5, [pc, #152]	; (1304c <I2cInitializeDriver+0xe4>)
   12fb2:	4e27      	ldr	r6, [pc, #156]	; (13050 <I2cInitializeDriver+0xe8>)
   12fb4:	aa01      	add	r2, sp, #4
   12fb6:	4927      	ldr	r1, [pc, #156]	; (13054 <I2cInitializeDriver+0xec>)
   12fb8:	0028      	movs	r0, r5
   12fba:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
   12fbc:	2800      	cmp	r0, #0
   12fbe:	d006      	beq.n	12fce <I2cInitializeDriver+0x66>
			i2c_master_reset(&i2cSensorBusInstance);
   12fc0:	4822      	ldr	r0, [pc, #136]	; (1304c <I2cInitializeDriver+0xe4>)
   12fc2:	4b25      	ldr	r3, [pc, #148]	; (13058 <I2cInitializeDriver+0xf0>)
   12fc4:	4798      	blx	r3
   12fc6:	3c01      	subs	r4, #1
   12fc8:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   12fca:	2c00      	cmp	r4, #0
   12fcc:	d1f2      	bne.n	12fb4 <I2cInitializeDriver+0x4c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12fce:	4b1f      	ldr	r3, [pc, #124]	; (1304c <I2cInitializeDriver+0xe4>)
   12fd0:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12fd2:	2207      	movs	r2, #7
   12fd4:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
   12fd6:	421a      	tst	r2, r3
   12fd8:	d1fc      	bne.n	12fd4 <I2cInitializeDriver+0x6c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   12fda:	6823      	ldr	r3, [r4, #0]
   12fdc:	2202      	movs	r2, #2
   12fde:	4313      	orrs	r3, r2
   12fe0:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   12fe2:	4d1a      	ldr	r5, [pc, #104]	; (1304c <I2cInitializeDriver+0xe4>)
   12fe4:	6828      	ldr	r0, [r5, #0]
   12fe6:	4b1d      	ldr	r3, [pc, #116]	; (1305c <I2cInitializeDriver+0xf4>)
   12fe8:	4798      	blx	r3
   12fea:	231f      	movs	r3, #31
   12fec:	4018      	ands	r0, r3
   12fee:	3b1e      	subs	r3, #30
   12ff0:	4083      	lsls	r3, r0
   12ff2:	4a1b      	ldr	r2, [pc, #108]	; (13060 <I2cInitializeDriver+0xf8>)
   12ff4:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   12ff6:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
   12ff8:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   12ffa:	2110      	movs	r1, #16
   12ffc:	8b62      	ldrh	r2, [r4, #26]
   12ffe:	420a      	tst	r2, r1
   13000:	d104      	bne.n	1300c <I2cInitializeDriver+0xa4>
		timeout_counter++;
   13002:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13004:	4283      	cmp	r3, r0
   13006:	d3f9      	bcc.n	12ffc <I2cInitializeDriver+0x94>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   13008:	2310      	movs	r3, #16
   1300a:	8363      	strh	r3, [r4, #26]


	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
   1300c:	4b15      	ldr	r3, [pc, #84]	; (13064 <I2cInitializeDriver+0xfc>)
   1300e:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13010:	2001      	movs	r0, #1
   13012:	4b15      	ldr	r3, [pc, #84]	; (13068 <I2cInitializeDriver+0x100>)
   13014:	4798      	blx	r3
   13016:	4c15      	ldr	r4, [pc, #84]	; (1306c <I2cInitializeDriver+0x104>)
   13018:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   1301a:	2203      	movs	r2, #3
   1301c:	2100      	movs	r1, #0
   1301e:	2001      	movs	r0, #1
   13020:	4b13      	ldr	r3, [pc, #76]	; (13070 <I2cInitializeDriver+0x108>)
   13022:	4798      	blx	r3
   13024:	4b13      	ldr	r3, [pc, #76]	; (13074 <I2cInitializeDriver+0x10c>)
   13026:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   13028:	6823      	ldr	r3, [r4, #0]
   1302a:	2b00      	cmp	r3, #0
   1302c:	d004      	beq.n	13038 <I2cInitializeDriver+0xd0>
	error = I2cDriverConfigureSensorBus();
   1302e:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   13030:	2800      	cmp	r0, #0
   13032:	d102      	bne.n	1303a <I2cInitializeDriver+0xd2>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
   13034:	3306      	adds	r3, #6
   13036:	e000      	b.n	1303a <I2cInitializeDriver+0xd2>
   13038:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
   1303a:	0018      	movs	r0, r3
   1303c:	b00e      	add	sp, #56	; 0x38
   1303e:	bd70      	pop	{r4, r5, r6, pc}
   13040:	00000d48 	.word	0x00000d48
   13044:	00080002 	.word	0x00080002
   13048:	00090002 	.word	0x00090002
   1304c:	20004228 	.word	0x20004228
   13050:	00014bb9 	.word	0x00014bb9
   13054:	42000800 	.word	0x42000800
   13058:	00014eb1 	.word	0x00014eb1
   1305c:	0001dd7d 	.word	0x0001dd7d
   13060:	e000e100 	.word	0xe000e100
   13064:	00012f21 	.word	0x00012f21
   13068:	00016ee1 	.word	0x00016ee1
   1306c:	20004224 	.word	0x20004224
   13070:	00016a7d 	.word	0x00016a7d
   13074:	20004250 	.word	0x20004250

00013078 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
   13078:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   1307a:	2800      	cmp	r0, #0
   1307c:	d012      	beq.n	130a4 <I2cWriteData+0x2c>
   1307e:	6843      	ldr	r3, [r0, #4]
   13080:	2b00      	cmp	r3, #0
   13082:	d012      	beq.n	130aa <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   13084:	490a      	ldr	r1, [pc, #40]	; (130b0 <I2cWriteData+0x38>)
   13086:	7802      	ldrb	r2, [r0, #0]
   13088:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   1308a:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
   1308c:	89c3      	ldrh	r3, [r0, #14]
   1308e:	804b      	strh	r3, [r1, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13090:	4808      	ldr	r0, [pc, #32]	; (130b4 <I2cWriteData+0x3c>)
   13092:	4b09      	ldr	r3, [pc, #36]	; (130b8 <I2cWriteData+0x40>)
   13094:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   13096:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
   13098:	2800      	cmp	r0, #0
   1309a:	d101      	bne.n	130a0 <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
   1309c:	0018      	movs	r0, r3
   1309e:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
   130a0:	3b06      	subs	r3, #6
   130a2:	e7fb      	b.n	1309c <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
   130a4:	2308      	movs	r3, #8
   130a6:	425b      	negs	r3, r3
   130a8:	e7f8      	b.n	1309c <I2cWriteData+0x24>
   130aa:	2308      	movs	r3, #8
   130ac:	425b      	negs	r3, r3
   130ae:	e7f5      	b.n	1309c <I2cWriteData+0x24>
   130b0:	20004254 	.word	0x20004254
   130b4:	20004228 	.word	0x20004228
   130b8:	00012351 	.word	0x00012351

000130bc <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
   130bc:	b510      	push	{r4, lr}
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   130be:	2800      	cmp	r0, #0
   130c0:	d013      	beq.n	130ea <I2cReadData+0x2e>
   130c2:	6843      	ldr	r3, [r0, #4]
   130c4:	2b00      	cmp	r3, #0
   130c6:	d013      	beq.n	130f0 <I2cReadData+0x34>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
   130c8:	490b      	ldr	r1, [pc, #44]	; (130f8 <I2cReadData+0x3c>)
   130ca:	7803      	ldrb	r3, [r0, #0]
   130cc:	800b      	strh	r3, [r1, #0]
	sensorPacketWrite.data = data->msgIn;
   130ce:	6883      	ldr	r3, [r0, #8]
   130d0:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenIn;
   130d2:	8983      	ldrh	r3, [r0, #12]
   130d4:	804b      	strh	r3, [r1, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   130d6:	4809      	ldr	r0, [pc, #36]	; (130fc <I2cReadData+0x40>)
   130d8:	4b09      	ldr	r3, [pc, #36]	; (13100 <I2cReadData+0x44>)
   130da:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   130dc:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
   130de:	2800      	cmp	r0, #0
   130e0:	d101      	bne.n	130e6 <I2cReadData+0x2a>
		goto exit;
	}
	
	exit:
	return error;
}
   130e2:	0018      	movs	r0, r3
   130e4:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
   130e6:	3b06      	subs	r3, #6
   130e8:	e7fb      	b.n	130e2 <I2cReadData+0x26>
		error = ERR_INVALID_ARG;
   130ea:	2308      	movs	r3, #8
   130ec:	425b      	negs	r3, r3
   130ee:	e7f8      	b.n	130e2 <I2cReadData+0x26>
   130f0:	2308      	movs	r3, #8
   130f2:	425b      	negs	r3, r3
   130f4:	e7f5      	b.n	130e2 <I2cReadData+0x26>
   130f6:	46c0      	nop			; (mov r8, r8)
   130f8:	20004254 	.word	0x20004254
   130fc:	20004228 	.word	0x20004228
   13100:	0001232d 	.word	0x0001232d

00013104 <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note        
 *****************************************************************************/
int32_t I2cFreeMutex(void){
   13104:	b510      	push	{r4, lr}
	
	int32_t error = ERROR_NONE;
	
	if( xSemaphoreGive( sensorI2cMutexHandle ) != pdTRUE ){
   13106:	4b07      	ldr	r3, [pc, #28]	; (13124 <I2cFreeMutex+0x20>)
   13108:	6818      	ldr	r0, [r3, #0]
   1310a:	2300      	movs	r3, #0
   1310c:	2200      	movs	r2, #0
   1310e:	2100      	movs	r1, #0
   13110:	4c05      	ldr	r4, [pc, #20]	; (13128 <I2cFreeMutex+0x24>)
   13112:	47a0      	blx	r4
	int32_t error = ERROR_NONE;
   13114:	2300      	movs	r3, #0
	if( xSemaphoreGive( sensorI2cMutexHandle ) != pdTRUE ){
   13116:	2801      	cmp	r0, #1
   13118:	d101      	bne.n	1311e <I2cFreeMutex+0x1a>
		error = ERROR_NOT_INITIALIZED;	//We could not return the mutex! We must not have it!
	}
	return error;
}
   1311a:	0018      	movs	r0, r3
   1311c:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_INITIALIZED;	//We could not return the mutex! We must not have it!
   1311e:	3b14      	subs	r3, #20
   13120:	e7fb      	b.n	1311a <I2cFreeMutex+0x16>
   13122:	46c0      	nop			; (mov r8, r8)
   13124:	20004224 	.word	0x20004224
   13128:	00016bb9 	.word	0x00016bb9

0001312c <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
   1312c:	b510      	push	{r4, lr}
   1312e:	0001      	movs	r1, r0
	
	int32_t error = ERROR_NONE;
	if(xSemaphoreTake( sensorI2cMutexHandle, waitTime ) != pdTRUE)
   13130:	4b05      	ldr	r3, [pc, #20]	; (13148 <I2cGetMutex+0x1c>)
   13132:	6818      	ldr	r0, [r3, #0]
   13134:	4b05      	ldr	r3, [pc, #20]	; (1314c <I2cGetMutex+0x20>)
   13136:	4798      	blx	r3
	int32_t error = ERROR_NONE;
   13138:	2300      	movs	r3, #0
	if(xSemaphoreTake( sensorI2cMutexHandle, waitTime ) != pdTRUE)
   1313a:	2801      	cmp	r0, #1
   1313c:	d101      	bne.n	13142 <I2cGetMutex+0x16>
	{
		error = ERROR_NOT_READY;
	}
	return error;
}
   1313e:	0018      	movs	r0, r3
   13140:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_READY;
   13142:	3b1d      	subs	r3, #29
   13144:	e7fb      	b.n	1313e <I2cGetMutex+0x12>
   13146:	46c0      	nop			; (mov r8, r8)
   13148:	20004224 	.word	0x20004224
   1314c:	00017561 	.word	0x00017561

00013150 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
   13150:	b570      	push	{r4, r5, r6, lr}
   13152:	0004      	movs	r4, r0
   13154:	000d      	movs	r5, r1
int32_t error = ERROR_NONE;
SemaphoreHandle_t semHandle = NULL;


//---0. Get Mutex
error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13156:	2096      	movs	r0, #150	; 0x96
   13158:	0040      	lsls	r0, r0, #1
   1315a:	4b10      	ldr	r3, [pc, #64]	; (1319c <I2cWriteDataWait+0x4c>)
   1315c:	4798      	blx	r3
if(ERROR_NONE != error) goto exit;
   1315e:	2800      	cmp	r0, #0
   13160:	d000      	beq.n	13164 <I2cWriteDataWait+0x14>
exitError0:
error = I2cFreeMutex();
//xSemaphoreGive(semHandle);
return error;

}
   13162:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
   13164:	4b0e      	ldr	r3, [pc, #56]	; (131a0 <I2cWriteDataWait+0x50>)
   13166:	681e      	ldr	r6, [r3, #0]
error = I2cWriteData(data);
   13168:	0020      	movs	r0, r4
   1316a:	4b0e      	ldr	r3, [pc, #56]	; (131a4 <I2cWriteDataWait+0x54>)
   1316c:	4798      	blx	r3
if (ERROR_NONE != error){
   1316e:	2800      	cmp	r0, #0
   13170:	d105      	bne.n	1317e <I2cWriteDataWait+0x2e>
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   13172:	0029      	movs	r1, r5
   13174:	0030      	movs	r0, r6
   13176:	4b0c      	ldr	r3, [pc, #48]	; (131a8 <I2cWriteDataWait+0x58>)
   13178:	4798      	blx	r3
   1317a:	2801      	cmp	r0, #1
   1317c:	d002      	beq.n	13184 <I2cWriteDataWait+0x34>
error = I2cFreeMutex();
   1317e:	4b0b      	ldr	r3, [pc, #44]	; (131ac <I2cWriteDataWait+0x5c>)
   13180:	4798      	blx	r3
return error;
   13182:	e7ee      	b.n	13162 <I2cWriteDataWait+0x12>
	 return sensorTransmitError;
   13184:	4b0a      	ldr	r3, [pc, #40]	; (131b0 <I2cWriteDataWait+0x60>)
	if(I2cGetTaskErrorStatus()){
   13186:	781b      	ldrb	r3, [r3, #0]
   13188:	2b00      	cmp	r3, #0
   1318a:	d003      	beq.n	13194 <I2cWriteDataWait+0x44>
	sensorTransmitError = value;
   1318c:	2200      	movs	r2, #0
   1318e:	4b08      	ldr	r3, [pc, #32]	; (131b0 <I2cWriteDataWait+0x60>)
   13190:	701a      	strb	r2, [r3, #0]
   13192:	e7f4      	b.n	1317e <I2cWriteDataWait+0x2e>
error |= I2cFreeMutex();
   13194:	4b05      	ldr	r3, [pc, #20]	; (131ac <I2cWriteDataWait+0x5c>)
   13196:	4798      	blx	r3
   13198:	e7e3      	b.n	13162 <I2cWriteDataWait+0x12>
   1319a:	46c0      	nop			; (mov r8, r8)
   1319c:	0001312d 	.word	0x0001312d
   131a0:	20004250 	.word	0x20004250
   131a4:	00013079 	.word	0x00013079
   131a8:	00017561 	.word	0x00017561
   131ac:	00013105 	.word	0x00013105
   131b0:	20000486 	.word	0x20000486

000131b4 <I2cReadDataWait>:
 * @param[in]   delay Delay that the I2C device needs to return the response. Can be 0 if the response is ready instantly. It can be the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   131b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131b6:	0004      	movs	r4, r0
   131b8:	000e      	movs	r6, r1
   131ba:	0015      	movs	r5, r2
	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;
	

	//---0. Get Mutex
	error = I2cGetMutex( WAIT_I2C_LINE_MS);
   131bc:	2096      	movs	r0, #150	; 0x96
   131be:	0040      	lsls	r0, r0, #1
   131c0:	4b1a      	ldr	r3, [pc, #104]	; (1322c <I2cReadDataWait+0x78>)
   131c2:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
   131c4:	2800      	cmp	r0, #0
   131c6:	d000      	beq.n	131ca <I2cReadDataWait+0x16>
	error = I2cFreeMutex();
	//xSemaphoreGive(semHandle);
	return error;

	
}
   131c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*handle = sensorI2cSemaphoreHandle;
   131ca:	4b19      	ldr	r3, [pc, #100]	; (13230 <I2cReadDataWait+0x7c>)
   131cc:	681f      	ldr	r7, [r3, #0]
	error = I2cWriteData(data);
   131ce:	0020      	movs	r0, r4
   131d0:	4b18      	ldr	r3, [pc, #96]	; (13234 <I2cReadDataWait+0x80>)
   131d2:	4798      	blx	r3
	if (ERROR_NONE != error){
   131d4:	2800      	cmp	r0, #0
   131d6:	d105      	bne.n	131e4 <I2cReadDataWait+0x30>
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   131d8:	0029      	movs	r1, r5
   131da:	0038      	movs	r0, r7
   131dc:	4b16      	ldr	r3, [pc, #88]	; (13238 <I2cReadDataWait+0x84>)
   131de:	4798      	blx	r3
   131e0:	2801      	cmp	r0, #1
   131e2:	d002      	beq.n	131ea <I2cReadDataWait+0x36>
	error = I2cFreeMutex();
   131e4:	4b15      	ldr	r3, [pc, #84]	; (1323c <I2cReadDataWait+0x88>)
   131e6:	4798      	blx	r3
	return error;
   131e8:	e7ee      	b.n	131c8 <I2cReadDataWait+0x14>
	 return sensorTransmitError;
   131ea:	4b15      	ldr	r3, [pc, #84]	; (13240 <I2cReadDataWait+0x8c>)
		if(I2cGetTaskErrorStatus()){
   131ec:	781b      	ldrb	r3, [r3, #0]
   131ee:	2b00      	cmp	r3, #0
   131f0:	d003      	beq.n	131fa <I2cReadDataWait+0x46>
	sensorTransmitError = value;
   131f2:	2200      	movs	r2, #0
   131f4:	4b12      	ldr	r3, [pc, #72]	; (13240 <I2cReadDataWait+0x8c>)
   131f6:	701a      	strb	r2, [r3, #0]
   131f8:	e7f4      	b.n	131e4 <I2cReadDataWait+0x30>
		vTaskDelay( delay );
   131fa:	0030      	movs	r0, r6
   131fc:	4b11      	ldr	r3, [pc, #68]	; (13244 <I2cReadDataWait+0x90>)
   131fe:	4798      	blx	r3
	error = I2cReadData(data);
   13200:	0020      	movs	r0, r4
   13202:	4b11      	ldr	r3, [pc, #68]	; (13248 <I2cReadDataWait+0x94>)
   13204:	4798      	blx	r3
	if (ERROR_NONE != error){
   13206:	2800      	cmp	r0, #0
   13208:	d1ec      	bne.n	131e4 <I2cReadDataWait+0x30>
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   1320a:	0029      	movs	r1, r5
   1320c:	0038      	movs	r0, r7
   1320e:	4b0a      	ldr	r3, [pc, #40]	; (13238 <I2cReadDataWait+0x84>)
   13210:	4798      	blx	r3
   13212:	2801      	cmp	r0, #1
   13214:	d1e6      	bne.n	131e4 <I2cReadDataWait+0x30>
	 return sensorTransmitError;
   13216:	4b0a      	ldr	r3, [pc, #40]	; (13240 <I2cReadDataWait+0x8c>)
		if(I2cGetTaskErrorStatus()){
   13218:	781b      	ldrb	r3, [r3, #0]
   1321a:	2b00      	cmp	r3, #0
   1321c:	d003      	beq.n	13226 <I2cReadDataWait+0x72>
	sensorTransmitError = value;
   1321e:	2200      	movs	r2, #0
   13220:	4b07      	ldr	r3, [pc, #28]	; (13240 <I2cReadDataWait+0x8c>)
   13222:	701a      	strb	r2, [r3, #0]
   13224:	e7de      	b.n	131e4 <I2cReadDataWait+0x30>
	error = I2cFreeMutex();
   13226:	4b05      	ldr	r3, [pc, #20]	; (1323c <I2cReadDataWait+0x88>)
   13228:	4798      	blx	r3
   1322a:	e7cd      	b.n	131c8 <I2cReadDataWait+0x14>
   1322c:	0001312d 	.word	0x0001312d
   13230:	20004250 	.word	0x20004250
   13234:	00013079 	.word	0x00013079
   13238:	00017561 	.word	0x00017561
   1323c:	00013105 	.word	0x00013105
   13240:	20000486 	.word	0x20000486
   13244:	00018045 	.word	0x00018045
   13248:	000130bd 	.word	0x000130bd

0001324c <platform_read>:
return I2cWriteDataWait(&imuData, 100);

}

static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   1324c:	b510      	push	{r4, lr}
   1324e:	b082      	sub	sp, #8
   13250:	4668      	mov	r0, sp
   13252:	1dc4      	adds	r4, r0, #7
   13254:	71c1      	strb	r1, [r0, #7]

imuData.address = (LSM6DS3_I2C_ADD_L>>1);
   13256:	4807      	ldr	r0, [pc, #28]	; (13274 <platform_read+0x28>)
   13258:	216a      	movs	r1, #106	; 0x6a
   1325a:	7001      	strb	r1, [r0, #0]
imuData.msgOut = &reg;
   1325c:	6044      	str	r4, [r0, #4]
imuData.msgIn = bufp;
   1325e:	6082      	str	r2, [r0, #8]
imuData.lenOut = 1;
   13260:	2201      	movs	r2, #1
   13262:	81c2      	strh	r2, [r0, #14]
imuData.lenIn = len;
   13264:	8183      	strh	r3, [r0, #12]
return I2cReadDataWait(&imuData,0, 100);
   13266:	3263      	adds	r2, #99	; 0x63
   13268:	2100      	movs	r1, #0
   1326a:	4b03      	ldr	r3, [pc, #12]	; (13278 <platform_read+0x2c>)
   1326c:	4798      	blx	r3


}
   1326e:	b002      	add	sp, #8
   13270:	bd10      	pop	{r4, pc}
   13272:	46c0      	nop			; (mov r8, r8)
   13274:	200042a0 	.word	0x200042a0
   13278:	000131b5 	.word	0x000131b5

0001327c <platform_write>:
{
   1327c:	b570      	push	{r4, r5, r6, lr}
   1327e:	000e      	movs	r6, r1
   13280:	0011      	movs	r1, r2
   13282:	001d      	movs	r5, r3
memcpy(&msgOutImu[1],bufp,len);
   13284:	4c09      	ldr	r4, [pc, #36]	; (132ac <platform_write+0x30>)
   13286:	001a      	movs	r2, r3
   13288:	0020      	movs	r0, r4
   1328a:	4b09      	ldr	r3, [pc, #36]	; (132b0 <platform_write+0x34>)
   1328c:	4798      	blx	r3
msgOutImu[0] = reg;
   1328e:	3c01      	subs	r4, #1
   13290:	7026      	strb	r6, [r4, #0]
imuData.address = (LSM6DS3_I2C_ADD_L>>1);
   13292:	4808      	ldr	r0, [pc, #32]	; (132b4 <platform_write+0x38>)
   13294:	236a      	movs	r3, #106	; 0x6a
   13296:	7003      	strb	r3, [r0, #0]
imuData.msgOut = &msgOutImu;
   13298:	6044      	str	r4, [r0, #4]
imuData.lenOut = len+1; //+1 because we are adding the REG address.
   1329a:	3501      	adds	r5, #1
   1329c:	81c5      	strh	r5, [r0, #14]
imuData.lenIn = 0;
   1329e:	2300      	movs	r3, #0
   132a0:	8183      	strh	r3, [r0, #12]
return I2cWriteDataWait(&imuData, 100);
   132a2:	2164      	movs	r1, #100	; 0x64
   132a4:	4b04      	ldr	r3, [pc, #16]	; (132b8 <platform_write+0x3c>)
   132a6:	4798      	blx	r3
}
   132a8:	bd70      	pop	{r4, r5, r6, pc}
   132aa:	46c0      	nop			; (mov r8, r8)
   132ac:	20004261 	.word	0x20004261
   132b0:	00026215 	.word	0x00026215
   132b4:	200042a0 	.word	0x200042a0
   132b8:	00013151 	.word	0x00013151

000132bc <lsm6ds3_read_reg>:
{
   132bc:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   132be:	6885      	ldr	r5, [r0, #8]
   132c0:	6844      	ldr	r4, [r0, #4]
   132c2:	0028      	movs	r0, r5
   132c4:	47a0      	blx	r4
}
   132c6:	bd70      	pop	{r4, r5, r6, pc}

000132c8 <lsm6ds3_write_reg>:
{
   132c8:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   132ca:	6885      	ldr	r5, [r0, #8]
   132cc:	6804      	ldr	r4, [r0, #0]
   132ce:	0028      	movs	r0, r5
   132d0:	47a0      	blx	r4
}
   132d2:	bd70      	pop	{r4, r5, r6, pc}

000132d4 <lsm6ds3_from_fs2g_to_mg>:
{
   132d4:	b510      	push	{r4, lr}
  return ((float_t)lsb * 61.0f / 1000.0f);
   132d6:	4b04      	ldr	r3, [pc, #16]	; (132e8 <lsm6ds3_from_fs2g_to_mg+0x14>)
   132d8:	4798      	blx	r3
   132da:	4904      	ldr	r1, [pc, #16]	; (132ec <lsm6ds3_from_fs2g_to_mg+0x18>)
   132dc:	4b04      	ldr	r3, [pc, #16]	; (132f0 <lsm6ds3_from_fs2g_to_mg+0x1c>)
   132de:	4798      	blx	r3
   132e0:	4904      	ldr	r1, [pc, #16]	; (132f4 <lsm6ds3_from_fs2g_to_mg+0x20>)
   132e2:	4b05      	ldr	r3, [pc, #20]	; (132f8 <lsm6ds3_from_fs2g_to_mg+0x24>)
   132e4:	4798      	blx	r3
}
   132e6:	bd10      	pop	{r4, pc}
   132e8:	00024831 	.word	0x00024831
   132ec:	42740000 	.word	0x42740000
   132f0:	000245b1 	.word	0x000245b1
   132f4:	447a0000 	.word	0x447a0000
   132f8:	00024321 	.word	0x00024321

000132fc <lsm6ds3_xl_full_scale_set>:
{
   132fc:	b570      	push	{r4, r5, r6, lr}
   132fe:	b082      	sub	sp, #8
   13300:	0004      	movs	r4, r0
   13302:	000d      	movs	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
   13304:	2301      	movs	r3, #1
   13306:	aa01      	add	r2, sp, #4
   13308:	2110      	movs	r1, #16
   1330a:	4e0a      	ldr	r6, [pc, #40]	; (13334 <lsm6ds3_xl_full_scale_set+0x38>)
   1330c:	47b0      	blx	r6
  if(ret == 0){
   1330e:	2800      	cmp	r0, #0
   13310:	d001      	beq.n	13316 <lsm6ds3_xl_full_scale_set+0x1a>
}
   13312:	b002      	add	sp, #8
   13314:	bd70      	pop	{r4, r5, r6, pc}
    ctrl1_xl.fs_xl = (uint8_t)val;
   13316:	aa01      	add	r2, sp, #4
   13318:	2103      	movs	r1, #3
   1331a:	4029      	ands	r1, r5
   1331c:	008b      	lsls	r3, r1, #2
   1331e:	7811      	ldrb	r1, [r2, #0]
   13320:	300c      	adds	r0, #12
   13322:	4381      	bics	r1, r0
   13324:	4319      	orrs	r1, r3
   13326:	7011      	strb	r1, [r2, #0]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
   13328:	2301      	movs	r3, #1
   1332a:	2110      	movs	r1, #16
   1332c:	0020      	movs	r0, r4
   1332e:	4c02      	ldr	r4, [pc, #8]	; (13338 <lsm6ds3_xl_full_scale_set+0x3c>)
   13330:	47a0      	blx	r4
  return ret;
   13332:	e7ee      	b.n	13312 <lsm6ds3_xl_full_scale_set+0x16>
   13334:	000132bd 	.word	0x000132bd
   13338:	000132c9 	.word	0x000132c9

0001333c <lsm6ds3_xl_data_rate_set>:
{
   1333c:	b570      	push	{r4, r5, r6, lr}
   1333e:	b082      	sub	sp, #8
   13340:	0004      	movs	r4, r0
   13342:	000d      	movs	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
   13344:	2301      	movs	r3, #1
   13346:	aa01      	add	r2, sp, #4
   13348:	2110      	movs	r1, #16
   1334a:	4e09      	ldr	r6, [pc, #36]	; (13370 <lsm6ds3_xl_data_rate_set+0x34>)
   1334c:	47b0      	blx	r6
  if(ret == 0){
   1334e:	2800      	cmp	r0, #0
   13350:	d001      	beq.n	13356 <lsm6ds3_xl_data_rate_set+0x1a>
}
   13352:	b002      	add	sp, #8
   13354:	bd70      	pop	{r4, r5, r6, pc}
    ctrl1_xl.odr_xl = (uint8_t)val;
   13356:	aa01      	add	r2, sp, #4
   13358:	012d      	lsls	r5, r5, #4
   1335a:	7813      	ldrb	r3, [r2, #0]
   1335c:	210f      	movs	r1, #15
   1335e:	4019      	ands	r1, r3
   13360:	4329      	orrs	r1, r5
   13362:	7011      	strb	r1, [r2, #0]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
   13364:	2301      	movs	r3, #1
   13366:	2110      	movs	r1, #16
   13368:	0020      	movs	r0, r4
   1336a:	4c02      	ldr	r4, [pc, #8]	; (13374 <lsm6ds3_xl_data_rate_set+0x38>)
   1336c:	47a0      	blx	r4
  return ret;
   1336e:	e7f0      	b.n	13352 <lsm6ds3_xl_data_rate_set+0x16>
   13370:	000132bd 	.word	0x000132bd
   13374:	000132c9 	.word	0x000132c9

00013378 <lsm6ds3_gy_full_scale_set>:
{
   13378:	b570      	push	{r4, r5, r6, lr}
   1337a:	b082      	sub	sp, #8
   1337c:	0004      	movs	r4, r0
   1337e:	000d      	movs	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
   13380:	2301      	movs	r3, #1
   13382:	aa01      	add	r2, sp, #4
   13384:	2111      	movs	r1, #17
   13386:	4e0a      	ldr	r6, [pc, #40]	; (133b0 <lsm6ds3_gy_full_scale_set+0x38>)
   13388:	47b0      	blx	r6
  if(ret == 0){
   1338a:	2800      	cmp	r0, #0
   1338c:	d001      	beq.n	13392 <lsm6ds3_gy_full_scale_set+0x1a>
}
   1338e:	b002      	add	sp, #8
   13390:	bd70      	pop	{r4, r5, r6, pc}
    ctrl2_g.fs_g = (uint8_t)val;
   13392:	aa01      	add	r2, sp, #4
   13394:	2107      	movs	r1, #7
   13396:	4029      	ands	r1, r5
   13398:	004b      	lsls	r3, r1, #1
   1339a:	7811      	ldrb	r1, [r2, #0]
   1339c:	300e      	adds	r0, #14
   1339e:	4381      	bics	r1, r0
   133a0:	4319      	orrs	r1, r3
   133a2:	7011      	strb	r1, [r2, #0]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
   133a4:	2301      	movs	r3, #1
   133a6:	2111      	movs	r1, #17
   133a8:	0020      	movs	r0, r4
   133aa:	4c02      	ldr	r4, [pc, #8]	; (133b4 <lsm6ds3_gy_full_scale_set+0x3c>)
   133ac:	47a0      	blx	r4
  return ret;
   133ae:	e7ee      	b.n	1338e <lsm6ds3_gy_full_scale_set+0x16>
   133b0:	000132bd 	.word	0x000132bd
   133b4:	000132c9 	.word	0x000132c9

000133b8 <lsm6ds3_gy_data_rate_set>:
{
   133b8:	b570      	push	{r4, r5, r6, lr}
   133ba:	b082      	sub	sp, #8
   133bc:	0004      	movs	r4, r0
   133be:	000d      	movs	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
   133c0:	2301      	movs	r3, #1
   133c2:	aa01      	add	r2, sp, #4
   133c4:	2111      	movs	r1, #17
   133c6:	4e09      	ldr	r6, [pc, #36]	; (133ec <lsm6ds3_gy_data_rate_set+0x34>)
   133c8:	47b0      	blx	r6
  if(ret == 0){
   133ca:	2800      	cmp	r0, #0
   133cc:	d001      	beq.n	133d2 <lsm6ds3_gy_data_rate_set+0x1a>
}
   133ce:	b002      	add	sp, #8
   133d0:	bd70      	pop	{r4, r5, r6, pc}
    ctrl2_g.odr_g = (uint8_t)val;
   133d2:	aa01      	add	r2, sp, #4
   133d4:	012d      	lsls	r5, r5, #4
   133d6:	7813      	ldrb	r3, [r2, #0]
   133d8:	210f      	movs	r1, #15
   133da:	4019      	ands	r1, r3
   133dc:	4329      	orrs	r1, r5
   133de:	7011      	strb	r1, [r2, #0]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
   133e0:	2301      	movs	r3, #1
   133e2:	2111      	movs	r1, #17
   133e4:	0020      	movs	r0, r4
   133e6:	4c02      	ldr	r4, [pc, #8]	; (133f0 <lsm6ds3_gy_data_rate_set+0x38>)
   133e8:	47a0      	blx	r4
  return ret;
   133ea:	e7f0      	b.n	133ce <lsm6ds3_gy_data_rate_set+0x16>
   133ec:	000132bd 	.word	0x000132bd
   133f0:	000132c9 	.word	0x000132c9

000133f4 <lsm6ds3_block_data_update_set>:
{
   133f4:	b570      	push	{r4, r5, r6, lr}
   133f6:	b082      	sub	sp, #8
   133f8:	0004      	movs	r4, r0
   133fa:	000d      	movs	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
   133fc:	2301      	movs	r3, #1
   133fe:	aa01      	add	r2, sp, #4
   13400:	2112      	movs	r1, #18
   13402:	4e0a      	ldr	r6, [pc, #40]	; (1342c <lsm6ds3_block_data_update_set+0x38>)
   13404:	47b0      	blx	r6
  if(ret == 0){
   13406:	2800      	cmp	r0, #0
   13408:	d001      	beq.n	1340e <lsm6ds3_block_data_update_set+0x1a>
}
   1340a:	b002      	add	sp, #8
   1340c:	bd70      	pop	{r4, r5, r6, pc}
    ctrl3_c.bdu = (uint8_t)val;
   1340e:	aa01      	add	r2, sp, #4
   13410:	2101      	movs	r1, #1
   13412:	4029      	ands	r1, r5
   13414:	018b      	lsls	r3, r1, #6
   13416:	7811      	ldrb	r1, [r2, #0]
   13418:	3040      	adds	r0, #64	; 0x40
   1341a:	4381      	bics	r1, r0
   1341c:	4319      	orrs	r1, r3
   1341e:	7011      	strb	r1, [r2, #0]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
   13420:	2301      	movs	r3, #1
   13422:	2112      	movs	r1, #18
   13424:	0020      	movs	r0, r4
   13426:	4c02      	ldr	r4, [pc, #8]	; (13430 <lsm6ds3_block_data_update_set+0x3c>)
   13428:	47a0      	blx	r4
  return ret;
   1342a:	e7ee      	b.n	1340a <lsm6ds3_block_data_update_set+0x16>
   1342c:	000132bd 	.word	0x000132bd
   13430:	000132c9 	.word	0x000132c9

00013434 <lsm6ds3_xl_flag_data_ready_get>:
{
   13434:	b570      	push	{r4, r5, r6, lr}
   13436:	b082      	sub	sp, #8
   13438:	000d      	movs	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_STATUS_REG, (uint8_t*)&status_reg, 1);
   1343a:	ac01      	add	r4, sp, #4
   1343c:	2301      	movs	r3, #1
   1343e:	0022      	movs	r2, r4
   13440:	211e      	movs	r1, #30
   13442:	4e04      	ldr	r6, [pc, #16]	; (13454 <lsm6ds3_xl_flag_data_ready_get+0x20>)
   13444:	47b0      	blx	r6
  *val = (uint8_t)status_reg.xlda;
   13446:	7823      	ldrb	r3, [r4, #0]
   13448:	07db      	lsls	r3, r3, #31
   1344a:	0fdb      	lsrs	r3, r3, #31
   1344c:	702b      	strb	r3, [r5, #0]
}
   1344e:	b002      	add	sp, #8
   13450:	bd70      	pop	{r4, r5, r6, pc}
   13452:	46c0      	nop			; (mov r8, r8)
   13454:	000132bd 	.word	0x000132bd

00013458 <lsm6ds3_acceleration_raw_get>:
{
   13458:	b510      	push	{r4, lr}
   1345a:	000a      	movs	r2, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_OUTX_L_XL, buff, 6);
   1345c:	2306      	movs	r3, #6
   1345e:	2128      	movs	r1, #40	; 0x28
   13460:	4c01      	ldr	r4, [pc, #4]	; (13468 <lsm6ds3_acceleration_raw_get+0x10>)
   13462:	47a0      	blx	r4
}
   13464:	bd10      	pop	{r4, pc}
   13466:	46c0      	nop			; (mov r8, r8)
   13468:	000132bd 	.word	0x000132bd

0001346c <lsm6ds3_device_id_get>:
{
   1346c:	b510      	push	{r4, lr}
   1346e:	000a      	movs	r2, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_WHO_AM_I, buff, 1);
   13470:	2301      	movs	r3, #1
   13472:	210f      	movs	r1, #15
   13474:	4c01      	ldr	r4, [pc, #4]	; (1347c <lsm6ds3_device_id_get+0x10>)
   13476:	47a0      	blx	r4
}
   13478:	bd10      	pop	{r4, pc}
   1347a:	46c0      	nop			; (mov r8, r8)
   1347c:	000132bd 	.word	0x000132bd

00013480 <lsm6ds3_reset_set>:
{
   13480:	b570      	push	{r4, r5, r6, lr}
   13482:	b082      	sub	sp, #8
   13484:	0004      	movs	r4, r0
   13486:	000e      	movs	r6, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
   13488:	2301      	movs	r3, #1
   1348a:	aa01      	add	r2, sp, #4
   1348c:	2112      	movs	r1, #18
   1348e:	4d09      	ldr	r5, [pc, #36]	; (134b4 <lsm6ds3_reset_set+0x34>)
   13490:	47a8      	blx	r5
  if(ret == 0){
   13492:	2800      	cmp	r0, #0
   13494:	d001      	beq.n	1349a <lsm6ds3_reset_set+0x1a>
}
   13496:	b002      	add	sp, #8
   13498:	bd70      	pop	{r4, r5, r6, pc}
    ctrl3_c.sw_reset = (uint8_t)val;
   1349a:	aa01      	add	r2, sp, #4
   1349c:	2101      	movs	r1, #1
   1349e:	400e      	ands	r6, r1
   134a0:	7811      	ldrb	r1, [r2, #0]
   134a2:	2301      	movs	r3, #1
   134a4:	4399      	bics	r1, r3
   134a6:	4331      	orrs	r1, r6
   134a8:	7011      	strb	r1, [r2, #0]
    ret = lsm6ds3_write_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
   134aa:	2112      	movs	r1, #18
   134ac:	0020      	movs	r0, r4
   134ae:	4c02      	ldr	r4, [pc, #8]	; (134b8 <lsm6ds3_reset_set+0x38>)
   134b0:	47a0      	blx	r4
  return ret;
   134b2:	e7f0      	b.n	13496 <lsm6ds3_reset_set+0x16>
   134b4:	000132bd 	.word	0x000132bd
   134b8:	000132c9 	.word	0x000132c9

000134bc <lsm6ds3_reset_get>:
{
   134bc:	b570      	push	{r4, r5, r6, lr}
   134be:	b082      	sub	sp, #8
   134c0:	000d      	movs	r5, r1
  ret = lsm6ds3_read_reg(ctx, LSM6DS3_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
   134c2:	ac01      	add	r4, sp, #4
   134c4:	2301      	movs	r3, #1
   134c6:	0022      	movs	r2, r4
   134c8:	2112      	movs	r1, #18
   134ca:	4e04      	ldr	r6, [pc, #16]	; (134dc <lsm6ds3_reset_get+0x20>)
   134cc:	47b0      	blx	r6
  *val = (uint8_t)ctrl3_c.sw_reset;
   134ce:	7823      	ldrb	r3, [r4, #0]
   134d0:	07db      	lsls	r3, r3, #31
   134d2:	0fdb      	lsrs	r3, r3, #31
   134d4:	702b      	strb	r3, [r5, #0]
}
   134d6:	b002      	add	sp, #8
   134d8:	bd70      	pop	{r4, r5, r6, pc}
   134da:	46c0      	nop			; (mov r8, r8)
   134dc:	000132bd 	.word	0x000132bd

000134e0 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
return &dev_ctx;
}
   134e0:	4800      	ldr	r0, [pc, #0]	; (134e4 <GetImuStruct+0x4>)
   134e2:	4770      	bx	lr
   134e4:	20000000 	.word	0x20000000

000134e8 <InitImu>:



int32_t InitImu(void)
{
   134e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   134ea:	b083      	sub	sp, #12
uint8_t rst;
int32_t error = 0;
/*
   * Restore default configuration
   */
  error = lsm6ds3_reset_set(&dev_ctx, PROPERTY_ENABLE);
   134ec:	2101      	movs	r1, #1
   134ee:	4816      	ldr	r0, [pc, #88]	; (13548 <InitImu+0x60>)
   134f0:	4b16      	ldr	r3, [pc, #88]	; (1354c <InitImu+0x64>)
   134f2:	4798      	blx	r3
   134f4:	0004      	movs	r4, r0
  do {
    error |= lsm6ds3_reset_get(&dev_ctx, &rst);
   134f6:	466b      	mov	r3, sp
   134f8:	1ddd      	adds	r5, r3, #7
   134fa:	4e13      	ldr	r6, [pc, #76]	; (13548 <InitImu+0x60>)
   134fc:	4f14      	ldr	r7, [pc, #80]	; (13550 <InitImu+0x68>)
   134fe:	0029      	movs	r1, r5
   13500:	0030      	movs	r0, r6
   13502:	47b8      	blx	r7
   13504:	4304      	orrs	r4, r0
  } while (rst);
   13506:	782b      	ldrb	r3, [r5, #0]
   13508:	2b00      	cmp	r3, #0
   1350a:	d1f8      	bne.n	134fe <InitImu+0x16>

  /*
   *  Enable Block Data Update
   */
  error |= lsm6ds3_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   1350c:	4d0e      	ldr	r5, [pc, #56]	; (13548 <InitImu+0x60>)
   1350e:	2101      	movs	r1, #1
   13510:	0028      	movs	r0, r5
   13512:	4b10      	ldr	r3, [pc, #64]	; (13554 <InitImu+0x6c>)
   13514:	4798      	blx	r3
   13516:	0006      	movs	r6, r0

  /*
   * Set full scale
   */ 
  error |= lsm6ds3_xl_full_scale_set(&dev_ctx, LSM6DS3_2g);
   13518:	2100      	movs	r1, #0
   1351a:	0028      	movs	r0, r5
   1351c:	4b0e      	ldr	r3, [pc, #56]	; (13558 <InitImu+0x70>)
   1351e:	4798      	blx	r3
   13520:	4334      	orrs	r4, r6
   13522:	4304      	orrs	r4, r0
  error |= lsm6ds3_gy_full_scale_set(&dev_ctx, LSM6DS3_2000dps);
   13524:	2106      	movs	r1, #6
   13526:	0028      	movs	r0, r5
   13528:	4b0c      	ldr	r3, [pc, #48]	; (1355c <InitImu+0x74>)
   1352a:	4798      	blx	r3
   1352c:	4304      	orrs	r4, r0
 
  /*
   * Set Output Data Rate for Acc and Gyro
   */
  error |= lsm6ds3_xl_data_rate_set(&dev_ctx, LSM6DS3_XL_ODR_12Hz5);
   1352e:	2101      	movs	r1, #1
   13530:	0028      	movs	r0, r5
   13532:	4b0b      	ldr	r3, [pc, #44]	; (13560 <InitImu+0x78>)
   13534:	4798      	blx	r3
   13536:	4304      	orrs	r4, r0
  error |= lsm6ds3_gy_data_rate_set(&dev_ctx, LSM6DS3_GY_ODR_12Hz5);
   13538:	2101      	movs	r1, #1
   1353a:	0028      	movs	r0, r5
   1353c:	4b09      	ldr	r3, [pc, #36]	; (13564 <InitImu+0x7c>)
   1353e:	4798      	blx	r3
   13540:	4320      	orrs	r0, r4

  return error;
}
   13542:	b003      	add	sp, #12
   13544:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13546:	46c0      	nop			; (mov r8, r8)
   13548:	20000000 	.word	0x20000000
   1354c:	00013481 	.word	0x00013481
   13550:	000134bd 	.word	0x000134bd
   13554:	000133f5 	.word	0x000133f5
   13558:	000132fd 	.word	0x000132fd
   1355c:	00013379 	.word	0x00013379
   13560:	0001333d 	.word	0x0001333d
   13564:	000133b9 	.word	0x000133b9

00013568 <SeesawGetKeypadCount>:
* @details 	Assumes Seesaw is already initialized
                				
* @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
* @note         
*****************************************************************************/
uint8_t SeesawGetKeypadCount(void) {
   13568:	b500      	push	{lr}
   1356a:	b083      	sub	sp, #12
	uint8_t count = 0;
   1356c:	466b      	mov	r3, sp
   1356e:	2200      	movs	r2, #0
   13570:	71da      	strb	r2, [r3, #7]
   13572:	3307      	adds	r3, #7
	seesawData.address = NEO_TRELLIS_ADDR;
   13574:	480b      	ldr	r0, [pc, #44]	; (135a4 <SeesawGetKeypadCount+0x3c>)
   13576:	322e      	adds	r2, #46	; 0x2e
   13578:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &msgKeypadGetCount;
   1357a:	4a0b      	ldr	r2, [pc, #44]	; (135a8 <SeesawGetKeypadCount+0x40>)
   1357c:	6042      	str	r2, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadGetCount);
   1357e:	2202      	movs	r2, #2
   13580:	81c2      	strh	r2, [r0, #14]
	seesawData.msgIn = &count;
   13582:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
   13584:	2301      	movs	r3, #1
   13586:	8183      	strh	r3, [r0, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
   13588:	3262      	adds	r2, #98	; 0x62
   1358a:	2100      	movs	r1, #0
   1358c:	4b07      	ldr	r3, [pc, #28]	; (135ac <SeesawGetKeypadCount+0x44>)
   1358e:	4798      	blx	r3

	if(ERROR_NONE != error)
   13590:	2800      	cmp	r0, #0
   13592:	d103      	bne.n	1359c <SeesawGetKeypadCount+0x34>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
	}
	return count;
   13594:	466b      	mov	r3, sp
   13596:	79d8      	ldrb	r0, [r3, #7]
}
   13598:	b003      	add	sp, #12
   1359a:	bd00      	pop	{pc}
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   1359c:	4804      	ldr	r0, [pc, #16]	; (135b0 <SeesawGetKeypadCount+0x48>)
   1359e:	4b05      	ldr	r3, [pc, #20]	; (135b4 <SeesawGetKeypadCount+0x4c>)
   135a0:	4798      	blx	r3
   135a2:	e7f7      	b.n	13594 <SeesawGetKeypadCount+0x2c>
   135a4:	200042b0 	.word	0x200042b0
   135a8:	00027ba8 	.word	0x00027ba8
   135ac:	000131b5 	.word	0x000131b5
   135b0:	00027b7c 	.word	0x00027b7c
   135b4:	00018e8d 	.word	0x00018e8d

000135b8 <SeesawReadKeypad>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*****************************************************************************/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
	{
   135b8:	b510      	push	{r4, lr}
   135ba:	b082      	sub	sp, #8
	if (count == 0) return ERROR_NONE;
   135bc:	2300      	movs	r3, #0
   135be:	2900      	cmp	r1, #0
   135c0:	d102      	bne.n	135c8 <SeesawReadKeypad+0x10>
	if(ERROR_NONE != error)
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
	}
	return error;
}
   135c2:	0018      	movs	r0, r3
   135c4:	b002      	add	sp, #8
   135c6:	bd10      	pop	{r4, pc}
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   135c8:	aa01      	add	r2, sp, #4
   135ca:	4b0c      	ldr	r3, [pc, #48]	; (135fc <SeesawReadKeypad+0x44>)
   135cc:	881b      	ldrh	r3, [r3, #0]
   135ce:	8013      	strh	r3, [r2, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
   135d0:	4b0b      	ldr	r3, [pc, #44]	; (13600 <SeesawReadKeypad+0x48>)
   135d2:	242e      	movs	r4, #46	; 0x2e
   135d4:	701c      	strb	r4, [r3, #0]
	seesawData.msgOut = &cmd;
   135d6:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
   135d8:	2202      	movs	r2, #2
   135da:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = buffer;
   135dc:	6098      	str	r0, [r3, #8]
	seesawData.lenIn = count;
   135de:	8199      	strh	r1, [r3, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
   135e0:	3262      	adds	r2, #98	; 0x62
   135e2:	2100      	movs	r1, #0
   135e4:	0018      	movs	r0, r3
   135e6:	4b07      	ldr	r3, [pc, #28]	; (13604 <SeesawReadKeypad+0x4c>)
   135e8:	4798      	blx	r3
   135ea:	0004      	movs	r4, r0
	return error;
   135ec:	1e03      	subs	r3, r0, #0
	if(ERROR_NONE != error)
   135ee:	d0e8      	beq.n	135c2 <SeesawReadKeypad+0xa>
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   135f0:	4805      	ldr	r0, [pc, #20]	; (13608 <SeesawReadKeypad+0x50>)
   135f2:	4b06      	ldr	r3, [pc, #24]	; (1360c <SeesawReadKeypad+0x54>)
   135f4:	4798      	blx	r3
	return error;
   135f6:	0023      	movs	r3, r4
   135f8:	e7e3      	b.n	135c2 <SeesawReadKeypad+0xa>
   135fa:	46c0      	nop			; (mov r8, r8)
   135fc:	00027a90 	.word	0x00027a90
   13600:	200042b0 	.word	0x200042b0
   13604:	000131b5 	.word	0x000131b5
   13608:	00027b7c 	.word	0x00027b7c
   1360c:	00018e8d 	.word	0x00018e8d

00013610 <SeesawActivateKey>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         
*****************************************************************************/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
	{
   13610:	b510      	push	{r4, lr}
   13612:	b082      	sub	sp, #8
	union keyState ks;
	ks.bit.STATE = enable;
   13614:	2401      	movs	r4, #1
	ks.bit.ACTIVE = (1 << edge);
   13616:	0023      	movs	r3, r4
   13618:	408b      	lsls	r3, r1
   1361a:	210f      	movs	r1, #15
   1361c:	4019      	ands	r1, r3
   1361e:	0049      	lsls	r1, r1, #1
   13620:	2301      	movs	r3, #1
   13622:	401a      	ands	r2, r3
   13624:	430a      	orrs	r2, r1
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   13626:	ab01      	add	r3, sp, #4
   13628:	2110      	movs	r1, #16
   1362a:	7019      	strb	r1, [r3, #0]
   1362c:	705c      	strb	r4, [r3, #1]
   1362e:	7098      	strb	r0, [r3, #2]
   13630:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
   13632:	4806      	ldr	r0, [pc, #24]	; (1364c <SeesawActivateKey+0x3c>)
   13634:	222e      	movs	r2, #46	; 0x2e
   13636:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &cmd;
   13638:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(cmd);
   1363a:	2304      	movs	r3, #4
   1363c:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
   1363e:	2300      	movs	r3, #0
   13640:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
   13642:	3154      	adds	r1, #84	; 0x54
   13644:	4b02      	ldr	r3, [pc, #8]	; (13650 <SeesawActivateKey+0x40>)
   13646:	4798      	blx	r3
	return error;
}
   13648:	b002      	add	sp, #8
   1364a:	bd10      	pop	{r4, pc}
   1364c:	200042b0 	.word	0x200042b0
   13650:	00013151 	.word	0x00013151

00013654 <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   13654:	b530      	push	{r4, r5, lr}
   13656:	b083      	sub	sp, #12
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green,red, blue};
   13658:	240e      	movs	r4, #14
   1365a:	466d      	mov	r5, sp
   1365c:	702c      	strb	r4, [r5, #0]
   1365e:	3c0a      	subs	r4, #10
   13660:	706c      	strb	r4, [r5, #1]
   13662:	712a      	strb	r2, [r5, #4]
   13664:	7169      	strb	r1, [r5, #5]
   13666:	71ab      	strb	r3, [r5, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};

	uint16_t offset = 3 * key; //RGB LED
   13668:	0043      	lsls	r3, r0, #1
   1366a:	18c0      	adds	r0, r0, r3
	write_buffer1[2] = (offset >> 8);
   1366c:	0a03      	lsrs	r3, r0, #8
   1366e:	70ab      	strb	r3, [r5, #2]
	write_buffer1[3] = (offset);
   13670:	70e8      	strb	r0, [r5, #3]

	seesawData.msgOut = &write_buffer1;
   13672:	4804      	ldr	r0, [pc, #16]	; (13684 <SeesawSetLed+0x30>)
   13674:	6045      	str	r5, [r0, #4]
	seesawData.lenOut = sizeof(write_buffer1);
   13676:	2307      	movs	r3, #7
   13678:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   1367a:	2164      	movs	r1, #100	; 0x64
   1367c:	4b02      	ldr	r3, [pc, #8]	; (13688 <SeesawSetLed+0x34>)
   1367e:	4798      	blx	r3
	return error;

}
   13680:	b003      	add	sp, #12
   13682:	bd30      	pop	{r4, r5, pc}
   13684:	200042b0 	.word	0x200042b0
   13688:	00013151 	.word	0x00013151

0001368c <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
   1368c:	b500      	push	{lr}
   1368e:	b083      	sub	sp, #12
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   13690:	ab01      	add	r3, sp, #4
   13692:	4a06      	ldr	r2, [pc, #24]	; (136ac <SeesawOrderLedUpdate+0x20>)
   13694:	8892      	ldrh	r2, [r2, #4]
   13696:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
   13698:	4805      	ldr	r0, [pc, #20]	; (136b0 <SeesawOrderLedUpdate+0x24>)
   1369a:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(orderBuffer);
   1369c:	2302      	movs	r3, #2
   1369e:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   136a0:	2164      	movs	r1, #100	; 0x64
   136a2:	4b04      	ldr	r3, [pc, #16]	; (136b4 <SeesawOrderLedUpdate+0x28>)
   136a4:	4798      	blx	r3
	return error;
}
   136a6:	b003      	add	sp, #12
   136a8:	bd00      	pop	{pc}
   136aa:	46c0      	nop			; (mov r8, r8)
   136ac:	00027a90 	.word	0x00027a90
   136b0:	200042b0 	.word	0x200042b0
   136b4:	00013151 	.word	0x00013151

000136b8 <InitializeSeesaw>:
{
   136b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   136ba:	46ce      	mov	lr, r9
   136bc:	b500      	push	{lr}
   136be:	b084      	sub	sp, #16
	seesawData.address = NEO_TRELLIS_ADDR;
   136c0:	484b      	ldr	r0, [pc, #300]	; (137f0 <InitializeSeesaw+0x138>)
   136c2:	232e      	movs	r3, #46	; 0x2e
   136c4:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgBaseGetHWID;
   136c6:	4b4b      	ldr	r3, [pc, #300]	; (137f4 <InitializeSeesaw+0x13c>)
   136c8:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
   136ca:	2302      	movs	r3, #2
   136cc:	81c3      	strh	r3, [r0, #14]
	seesawData.msgIn = &readData;
   136ce:	ab03      	add	r3, sp, #12
   136d0:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
   136d2:	2301      	movs	r3, #1
   136d4:	8183      	strh	r3, [r0, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
   136d6:	2264      	movs	r2, #100	; 0x64
   136d8:	2100      	movs	r1, #0
   136da:	4b47      	ldr	r3, [pc, #284]	; (137f8 <InitializeSeesaw+0x140>)
   136dc:	4798      	blx	r3
	if(ERROR_NONE != error)
   136de:	2800      	cmp	r0, #0
   136e0:	d149      	bne.n	13776 <InitializeSeesaw+0xbe>
		if(readData[0] != SEESAW_HW_ID_CODE )
   136e2:	ab03      	add	r3, sp, #12
   136e4:	781b      	ldrb	r3, [r3, #0]
   136e6:	2b55      	cmp	r3, #85	; 0x55
   136e8:	d049      	beq.n	1377e <InitializeSeesaw+0xc6>
			SerialConsoleWriteString("Error/r/n");
   136ea:	4844      	ldr	r0, [pc, #272]	; (137fc <InitializeSeesaw+0x144>)
   136ec:	4b44      	ldr	r3, [pc, #272]	; (13800 <InitializeSeesaw+0x148>)
   136ee:	4798      	blx	r3
	seesawData.msgOut = &msgNeopixelPin;
   136f0:	483f      	ldr	r0, [pc, #252]	; (137f0 <InitializeSeesaw+0x138>)
   136f2:	4b44      	ldr	r3, [pc, #272]	; (13804 <InitializeSeesaw+0x14c>)
   136f4:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
   136f6:	2303      	movs	r3, #3
   136f8:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   136fa:	2164      	movs	r1, #100	; 0x64
   136fc:	4b42      	ldr	r3, [pc, #264]	; (13808 <InitializeSeesaw+0x150>)
   136fe:	4798      	blx	r3
	if(ERROR_NONE != error)
   13700:	2800      	cmp	r0, #0
   13702:	d140      	bne.n	13786 <InitializeSeesaw+0xce>
	seesawData.msgOut = &msgNeopixelSpeed;
   13704:	483a      	ldr	r0, [pc, #232]	; (137f0 <InitializeSeesaw+0x138>)
   13706:	4b41      	ldr	r3, [pc, #260]	; (1380c <InitializeSeesaw+0x154>)
   13708:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
   1370a:	2303      	movs	r3, #3
   1370c:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   1370e:	2164      	movs	r1, #100	; 0x64
   13710:	4b3d      	ldr	r3, [pc, #244]	; (13808 <InitializeSeesaw+0x150>)
   13712:	4798      	blx	r3
	if(ERROR_NONE != error)
   13714:	2800      	cmp	r0, #0
   13716:	d13a      	bne.n	1378e <InitializeSeesaw+0xd6>
	seesawData.msgOut = &msgNeopixelBufLength;
   13718:	4835      	ldr	r0, [pc, #212]	; (137f0 <InitializeSeesaw+0x138>)
   1371a:	4b3d      	ldr	r3, [pc, #244]	; (13810 <InitializeSeesaw+0x158>)
   1371c:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
   1371e:	2304      	movs	r3, #4
   13720:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
   13722:	2164      	movs	r1, #100	; 0x64
   13724:	4b38      	ldr	r3, [pc, #224]	; (13808 <InitializeSeesaw+0x150>)
   13726:	4798      	blx	r3
   13728:	9001      	str	r0, [sp, #4]
	if(ERROR_NONE != error)
   1372a:	2800      	cmp	r0, #0
   1372c:	d133      	bne.n	13796 <InitializeSeesaw+0xde>
}


static void SeesawTurnOnLedTest(void)
{
	SeesawSetLed(15, 255, 255, 255);
   1372e:	23ff      	movs	r3, #255	; 0xff
   13730:	22ff      	movs	r2, #255	; 0xff
   13732:	21ff      	movs	r1, #255	; 0xff
   13734:	200f      	movs	r0, #15
   13736:	4e37      	ldr	r6, [pc, #220]	; (13814 <InitializeSeesaw+0x15c>)
   13738:	47b0      	blx	r6
	SeesawOrderLedUpdate();
   1373a:	4c37      	ldr	r4, [pc, #220]	; (13818 <InitializeSeesaw+0x160>)
   1373c:	47a0      	blx	r4
	vTaskDelay(400);
   1373e:	20c8      	movs	r0, #200	; 0xc8
   13740:	0040      	lsls	r0, r0, #1
   13742:	4b36      	ldr	r3, [pc, #216]	; (1381c <InitializeSeesaw+0x164>)
   13744:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
   13746:	2300      	movs	r3, #0
   13748:	2200      	movs	r2, #0
   1374a:	2100      	movs	r1, #0
   1374c:	200f      	movs	r0, #15
   1374e:	47b0      	blx	r6
	SeesawOrderLedUpdate();
   13750:	47a0      	blx	r4
	seesawData.address = NEO_TRELLIS_ADDR;
   13752:	4827      	ldr	r0, [pc, #156]	; (137f0 <InitializeSeesaw+0x138>)
   13754:	232e      	movs	r3, #46	; 0x2e
   13756:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
   13758:	4b31      	ldr	r3, [pc, #196]	; (13820 <InitializeSeesaw+0x168>)
   1375a:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
   1375c:	2303      	movs	r3, #3
   1375e:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
   13760:	2300      	movs	r3, #0
   13762:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
   13764:	2164      	movs	r1, #100	; 0x64
   13766:	4b28      	ldr	r3, [pc, #160]	; (13808 <InitializeSeesaw+0x150>)
   13768:	4798      	blx	r3
	if(ERROR_NONE != error)
   1376a:	2800      	cmp	r0, #0
   1376c:	d117      	bne.n	1379e <InitializeSeesaw+0xe6>
{
   1376e:	2600      	movs	r6, #0
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   13770:	2703      	movs	r7, #3
   13772:	4d2c      	ldr	r5, [pc, #176]	; (13824 <InitializeSeesaw+0x16c>)
   13774:	e01a      	b.n	137ac <InitializeSeesaw+0xf4>
		SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   13776:	482c      	ldr	r0, [pc, #176]	; (13828 <InitializeSeesaw+0x170>)
   13778:	4b21      	ldr	r3, [pc, #132]	; (13800 <InitializeSeesaw+0x148>)
   1377a:	4798      	blx	r3
   1377c:	e7b8      	b.n	136f0 <InitializeSeesaw+0x38>
		SerialConsoleWriteString("Found Seesaw!/r/n");
   1377e:	482b      	ldr	r0, [pc, #172]	; (1382c <InitializeSeesaw+0x174>)
   13780:	4b1f      	ldr	r3, [pc, #124]	; (13800 <InitializeSeesaw+0x148>)
   13782:	4798      	blx	r3
   13784:	e7b4      	b.n	136f0 <InitializeSeesaw+0x38>
		SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   13786:	482a      	ldr	r0, [pc, #168]	; (13830 <InitializeSeesaw+0x178>)
   13788:	4b1d      	ldr	r3, [pc, #116]	; (13800 <InitializeSeesaw+0x148>)
   1378a:	4798      	blx	r3
   1378c:	e7ba      	b.n	13704 <InitializeSeesaw+0x4c>
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   1378e:	4829      	ldr	r0, [pc, #164]	; (13834 <InitializeSeesaw+0x17c>)
   13790:	4b1b      	ldr	r3, [pc, #108]	; (13800 <InitializeSeesaw+0x148>)
   13792:	4798      	blx	r3
   13794:	e7c0      	b.n	13718 <InitializeSeesaw+0x60>
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   13796:	4828      	ldr	r0, [pc, #160]	; (13838 <InitializeSeesaw+0x180>)
   13798:	4b19      	ldr	r3, [pc, #100]	; (13800 <InitializeSeesaw+0x148>)
   1379a:	4798      	blx	r3
   1379c:	e7c7      	b.n	1372e <InitializeSeesaw+0x76>
		SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   1379e:	4827      	ldr	r0, [pc, #156]	; (1383c <InitializeSeesaw+0x184>)
   137a0:	4b17      	ldr	r3, [pc, #92]	; (13800 <InitializeSeesaw+0x148>)
   137a2:	4798      	blx	r3
   137a4:	e7e3      	b.n	1376e <InitializeSeesaw+0xb6>
	for(int i=0; i<16; i++){
   137a6:	3601      	adds	r6, #1
   137a8:	2e10      	cmp	r6, #16
   137aa:	d01b      	beq.n	137e4 <InitializeSeesaw+0x12c>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   137ac:	17f2      	asrs	r2, r6, #31
   137ae:	003c      	movs	r4, r7
   137b0:	4014      	ands	r4, r2
   137b2:	19a4      	adds	r4, r4, r6
   137b4:	10a4      	asrs	r4, r4, #2
   137b6:	00e4      	lsls	r4, r4, #3
   137b8:	0f92      	lsrs	r2, r2, #30
   137ba:	18b3      	adds	r3, r6, r2
   137bc:	403b      	ands	r3, r7
   137be:	1a9b      	subs	r3, r3, r2
   137c0:	18e4      	adds	r4, r4, r3
   137c2:	b2e4      	uxtb	r4, r4
   137c4:	2201      	movs	r2, #1
   137c6:	0039      	movs	r1, r7
   137c8:	0020      	movs	r0, r4
   137ca:	47a8      	blx	r5
   137cc:	4681      	mov	r9, r0
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   137ce:	2201      	movs	r2, #1
   137d0:	2102      	movs	r1, #2
   137d2:	0020      	movs	r0, r4
   137d4:	47a8      	blx	r5
   137d6:	464b      	mov	r3, r9
   137d8:	4303      	orrs	r3, r0
		if(ERROR_NONE != error)
   137da:	d0e4      	beq.n	137a6 <InitializeSeesaw+0xee>
			SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   137dc:	4817      	ldr	r0, [pc, #92]	; (1383c <InitializeSeesaw+0x184>)
   137de:	4b08      	ldr	r3, [pc, #32]	; (13800 <InitializeSeesaw+0x148>)
   137e0:	4798      	blx	r3
   137e2:	e7e0      	b.n	137a6 <InitializeSeesaw+0xee>
}
   137e4:	9801      	ldr	r0, [sp, #4]
   137e6:	b004      	add	sp, #16
   137e8:	bc04      	pop	{r2}
   137ea:	4691      	mov	r9, r2
   137ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   137ee:	46c0      	nop			; (mov r8, r8)
   137f0:	200042b0 	.word	0x200042b0
   137f4:	00027ba0 	.word	0x00027ba0
   137f8:	000131b5 	.word	0x000131b5
   137fc:	00027ab8 	.word	0x00027ab8
   13800:	00018e8d 	.word	0x00018e8d
   13804:	00027bb0 	.word	0x00027bb0
   13808:	00013151 	.word	0x00013151
   1380c:	00027bb4 	.word	0x00027bb4
   13810:	00027bac 	.word	0x00027bac
   13814:	00013655 	.word	0x00013655
   13818:	0001368d 	.word	0x0001368d
   1381c:	00018045 	.word	0x00018045
   13820:	00027ba4 	.word	0x00027ba4
   13824:	00013611 	.word	0x00013611
   13828:	00027a98 	.word	0x00027a98
   1382c:	00027ac4 	.word	0x00027ac4
   13830:	00027ad8 	.word	0x00027ad8
   13834:	00027af8 	.word	0x00027af8
   13838:	00027b24 	.word	0x00027b24
   1383c:	00027b58 	.word	0x00027b58

00013840 <vUiHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vUiHandlerTask( void *pvParameters )
{
   13840:	b590      	push	{r4, r7, lr}
   13842:	b087      	sub	sp, #28
   13844:	af00      	add	r7, sp, #0
   13846:	6078      	str	r0, [r7, #4]
//Do initialization code here
SerialConsoleWriteString("UI Task Started!");
   13848:	4b9e      	ldr	r3, [pc, #632]	; (13ac4 <vUiHandlerTask+0x284>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b9e      	ldr	r3, [pc, #632]	; (13ac8 <vUiHandlerTask+0x288>)
   1384e:	4798      	blx	r3
uiState = UI_STATE_IGNORE_PRESSES; //Initial state
   13850:	4b9e      	ldr	r3, [pc, #632]	; (13acc <vUiHandlerTask+0x28c>)
   13852:	2201      	movs	r2, #1
   13854:	701a      	strb	r2, [r3, #0]

//Here we start the loop for the UI State Machine
while(1)
{
	switch(uiState)
   13856:	4b9d      	ldr	r3, [pc, #628]	; (13acc <vUiHandlerTask+0x28c>)
   13858:	781b      	ldrb	r3, [r3, #0]
   1385a:	2b01      	cmp	r3, #1
   1385c:	d100      	bne.n	13860 <vUiHandlerTask+0x20>
   1385e:	e12a      	b.n	13ab6 <vUiHandlerTask+0x276>
   13860:	2b02      	cmp	r3, #2
   13862:	d003      	beq.n	1386c <vUiHandlerTask+0x2c>
   13864:	2b00      	cmp	r3, #0
   13866:	d100      	bne.n	1386a <vUiHandlerTask+0x2a>
   13868:	e08c      	b.n	13984 <vUiHandlerTask+0x144>
   1386a:	e120      	b.n	13aae <vUiHandlerTask+0x26e>
		}

		case(UI_STATE_SHOW_MOVES):
		{
			//Set initial state variable that will be used on the UI_STATE_Handle_Buttons and need to be initialized once
			pressedKeys = 0; //Set number of keys pressed by player to 0.
   1386c:	4b98      	ldr	r3, [pc, #608]	; (13ad0 <vUiHandlerTask+0x290>)
   1386e:	2200      	movs	r2, #0
   13870:	701a      	strb	r2, [r3, #0]
			keysToPress = 0;
   13872:	4b98      	ldr	r3, [pc, #608]	; (13ad4 <vUiHandlerTask+0x294>)
   13874:	2200      	movs	r2, #0
   13876:	701a      	strb	r2, [r3, #0]
			while (keysToPress<sizeof(gamePacketIn.game)&&gamePacketIn.game[keysToPress]<255) {
   13878:	e005      	b.n	13886 <vUiHandlerTask+0x46>
				keysToPress++; 
   1387a:	4b96      	ldr	r3, [pc, #600]	; (13ad4 <vUiHandlerTask+0x294>)
   1387c:	781b      	ldrb	r3, [r3, #0]
   1387e:	3301      	adds	r3, #1
   13880:	b2da      	uxtb	r2, r3
   13882:	4b94      	ldr	r3, [pc, #592]	; (13ad4 <vUiHandlerTask+0x294>)
   13884:	701a      	strb	r2, [r3, #0]
			while (keysToPress<sizeof(gamePacketIn.game)&&gamePacketIn.game[keysToPress]<255) {
   13886:	4b93      	ldr	r3, [pc, #588]	; (13ad4 <vUiHandlerTask+0x294>)
   13888:	781b      	ldrb	r3, [r3, #0]
   1388a:	2b13      	cmp	r3, #19
   1388c:	d806      	bhi.n	1389c <vUiHandlerTask+0x5c>
   1388e:	4b91      	ldr	r3, [pc, #580]	; (13ad4 <vUiHandlerTask+0x294>)
   13890:	781b      	ldrb	r3, [r3, #0]
   13892:	001a      	movs	r2, r3
   13894:	4b90      	ldr	r3, [pc, #576]	; (13ad8 <vUiHandlerTask+0x298>)
   13896:	5c9b      	ldrb	r3, [r3, r2]
   13898:	2bff      	cmp	r3, #255	; 0xff
   1389a:	d1ee      	bne.n	1387a <vUiHandlerTask+0x3a>
			}
			keysToPress++; //need to press one more button then the received packet
   1389c:	4b8d      	ldr	r3, [pc, #564]	; (13ad4 <vUiHandlerTask+0x294>)
   1389e:	781b      	ldrb	r3, [r3, #0]
   138a0:	3301      	adds	r3, #1
   138a2:	b2da      	uxtb	r2, r3
   138a4:	4b8b      	ldr	r3, [pc, #556]	; (13ad4 <vUiHandlerTask+0x294>)
   138a6:	701a      	strb	r2, [r3, #0]
			memset(gamePacketOut.game,0xff, sizeof(gamePacketOut.game)); //Erase gamePacketOut to an initial state
   138a8:	4b8c      	ldr	r3, [pc, #560]	; (13adc <vUiHandlerTask+0x29c>)
   138aa:	2214      	movs	r2, #20
   138ac:	21ff      	movs	r1, #255	; 0xff
   138ae:	0018      	movs	r0, r3
   138b0:	4b8b      	ldr	r3, [pc, #556]	; (13ae0 <vUiHandlerTask+0x2a0>)
   138b2:	4798      	blx	r3
			playIsDone = false; //Set play to false
   138b4:	4b8b      	ldr	r3, [pc, #556]	; (13ae4 <vUiHandlerTask+0x2a4>)
   138b6:	2200      	movs	r2, #0
   138b8:	701a      	strb	r2, [r3, #0]
			uint8_t presses = SeesawGetKeypadCount();
   138ba:	2317      	movs	r3, #23
   138bc:	18fc      	adds	r4, r7, r3
   138be:	4b8a      	ldr	r3, [pc, #552]	; (13ae8 <vUiHandlerTask+0x2a8>)
   138c0:	4798      	blx	r3
   138c2:	0003      	movs	r3, r0
   138c4:	7023      	strb	r3, [r4, #0]
			if(presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   138c6:	2317      	movs	r3, #23
   138c8:	18fb      	adds	r3, r7, r3
   138ca:	781b      	ldrb	r3, [r3, #0]
   138cc:	2b0f      	cmp	r3, #15
   138ce:	d903      	bls.n	138d8 <vUiHandlerTask+0x98>
   138d0:	2317      	movs	r3, #23
   138d2:	18fb      	adds	r3, r7, r3
   138d4:	2210      	movs	r2, #16
   138d6:	701a      	strb	r2, [r3, #0]
			if(presses != 0) SeesawReadKeypad(buttons,presses); //Empty Seesaw buffer just in case it has latent presses on it!
   138d8:	2317      	movs	r3, #23
   138da:	18fb      	adds	r3, r7, r3
   138dc:	781b      	ldrb	r3, [r3, #0]
   138de:	2b00      	cmp	r3, #0
   138e0:	d007      	beq.n	138f2 <vUiHandlerTask+0xb2>
   138e2:	2317      	movs	r3, #23
   138e4:	18fb      	adds	r3, r7, r3
   138e6:	781a      	ldrb	r2, [r3, #0]
   138e8:	4b80      	ldr	r3, [pc, #512]	; (13aec <vUiHandlerTask+0x2ac>)
   138ea:	0011      	movs	r1, r2
   138ec:	0018      	movs	r0, r3
   138ee:	4b80      	ldr	r3, [pc, #512]	; (13af0 <vUiHandlerTask+0x2b0>)
   138f0:	4798      	blx	r3
			memset(buttons, 0, BUTTON_PRESSES_MAX);
   138f2:	4b7e      	ldr	r3, [pc, #504]	; (13aec <vUiHandlerTask+0x2ac>)
   138f4:	2210      	movs	r2, #16
   138f6:	2100      	movs	r1, #0
   138f8:	0018      	movs	r0, r3
   138fa:	4b79      	ldr	r3, [pc, #484]	; (13ae0 <vUiHandlerTask+0x2a0>)
   138fc:	4798      	blx	r3
			//STUDENTS: Make this function show the moves of the gamePacketIn.
			//You can use a static delay to show each move but a quicker delay as the message gets longer might be more fun!
			//After you finish showing the move should go to state UI_STATE_HANDLE_BUTTONS
			uint8_t nthmove = 0;
   138fe:	2316      	movs	r3, #22
   13900:	18fb      	adds	r3, r7, r3
   13902:	2200      	movs	r2, #0
   13904:	701a      	strb	r2, [r3, #0]
			while (gamePacketIn.game[nthmove]<255) {
   13906:	e032      	b.n	1396e <vUiHandlerTask+0x12e>
				SerialConsoleWriteString("Showing Move!\r\n");
   13908:	4b7a      	ldr	r3, [pc, #488]	; (13af4 <vUiHandlerTask+0x2b4>)
   1390a:	0018      	movs	r0, r3
   1390c:	4b6e      	ldr	r3, [pc, #440]	; (13ac8 <vUiHandlerTask+0x288>)
   1390e:	4798      	blx	r3
				SeesawSetLed(gamePacketIn.game[nthmove], red, green, blue); //Turn button 1 on
   13910:	2316      	movs	r3, #22
   13912:	18fb      	adds	r3, r7, r3
   13914:	781b      	ldrb	r3, [r3, #0]
   13916:	4a70      	ldr	r2, [pc, #448]	; (13ad8 <vUiHandlerTask+0x298>)
   13918:	5cd0      	ldrb	r0, [r2, r3]
   1391a:	4b77      	ldr	r3, [pc, #476]	; (13af8 <vUiHandlerTask+0x2b8>)
   1391c:	781b      	ldrb	r3, [r3, #0]
   1391e:	b2d9      	uxtb	r1, r3
   13920:	4b76      	ldr	r3, [pc, #472]	; (13afc <vUiHandlerTask+0x2bc>)
   13922:	781b      	ldrb	r3, [r3, #0]
   13924:	b2da      	uxtb	r2, r3
   13926:	4b76      	ldr	r3, [pc, #472]	; (13b00 <vUiHandlerTask+0x2c0>)
   13928:	781b      	ldrb	r3, [r3, #0]
   1392a:	b2db      	uxtb	r3, r3
   1392c:	4c75      	ldr	r4, [pc, #468]	; (13b04 <vUiHandlerTask+0x2c4>)
   1392e:	47a0      	blx	r4
				SeesawOrderLedUpdate();
   13930:	4b75      	ldr	r3, [pc, #468]	; (13b08 <vUiHandlerTask+0x2c8>)
   13932:	4798      	blx	r3
				vTaskDelay(1000);
   13934:	23fa      	movs	r3, #250	; 0xfa
   13936:	009b      	lsls	r3, r3, #2
   13938:	0018      	movs	r0, r3
   1393a:	4b74      	ldr	r3, [pc, #464]	; (13b0c <vUiHandlerTask+0x2cc>)
   1393c:	4798      	blx	r3
				SeesawSetLed(gamePacketIn.game[nthmove], 0, 0, 0); //Turn button 1 on
   1393e:	2316      	movs	r3, #22
   13940:	18fb      	adds	r3, r7, r3
   13942:	781b      	ldrb	r3, [r3, #0]
   13944:	4a64      	ldr	r2, [pc, #400]	; (13ad8 <vUiHandlerTask+0x298>)
   13946:	5cd0      	ldrb	r0, [r2, r3]
   13948:	2300      	movs	r3, #0
   1394a:	2200      	movs	r2, #0
   1394c:	2100      	movs	r1, #0
   1394e:	4c6d      	ldr	r4, [pc, #436]	; (13b04 <vUiHandlerTask+0x2c4>)
   13950:	47a0      	blx	r4
				SeesawOrderLedUpdate();
   13952:	4b6d      	ldr	r3, [pc, #436]	; (13b08 <vUiHandlerTask+0x2c8>)
   13954:	4798      	blx	r3
				vTaskDelay(1000);
   13956:	23fa      	movs	r3, #250	; 0xfa
   13958:	009b      	lsls	r3, r3, #2
   1395a:	0018      	movs	r0, r3
   1395c:	4b6b      	ldr	r3, [pc, #428]	; (13b0c <vUiHandlerTask+0x2cc>)
   1395e:	4798      	blx	r3

				nthmove++;
   13960:	2316      	movs	r3, #22
   13962:	18fb      	adds	r3, r7, r3
   13964:	781a      	ldrb	r2, [r3, #0]
   13966:	2316      	movs	r3, #22
   13968:	18fb      	adds	r3, r7, r3
   1396a:	3201      	adds	r2, #1
   1396c:	701a      	strb	r2, [r3, #0]
			while (gamePacketIn.game[nthmove]<255) {
   1396e:	2316      	movs	r3, #22
   13970:	18fb      	adds	r3, r7, r3
   13972:	781b      	ldrb	r3, [r3, #0]
   13974:	4a58      	ldr	r2, [pc, #352]	; (13ad8 <vUiHandlerTask+0x298>)
   13976:	5cd3      	ldrb	r3, [r2, r3]
   13978:	2bff      	cmp	r3, #255	; 0xff
   1397a:	d1c5      	bne.n	13908 <vUiHandlerTask+0xc8>
			//SeesawOrderLedUpdate();
			//vTaskDelay(1000);
			//SeesawSetLed(15,0,0,0); //Turn button 15 off
			//SeesawOrderLedUpdate();
			//vTaskDelay(1000);
			uiState = UI_STATE_HANDLE_BUTTONS;
   1397c:	4b53      	ldr	r3, [pc, #332]	; (13acc <vUiHandlerTask+0x28c>)
   1397e:	2200      	movs	r2, #0
   13980:	701a      	strb	r2, [r3, #0]

			break;
   13982:	e09b      	b.n	13abc <vUiHandlerTask+0x27c>
		{
		//This state should accept (gamePacketIn length + 1) moves from the player (capped to maximum 19 + new move)
		//The moves by the player should be stored on "gamePacketOut". The keypresses that should count are when the player RELEASES the button.
		
		//In this example, we return after only one button press!
		uint8_t numPresses = SeesawGetKeypadCount();
   13984:	2315      	movs	r3, #21
   13986:	18fc      	adds	r4, r7, r3
   13988:	4b57      	ldr	r3, [pc, #348]	; (13ae8 <vUiHandlerTask+0x2a8>)
   1398a:	4798      	blx	r3
   1398c:	0003      	movs	r3, r0
   1398e:	7023      	strb	r3, [r4, #0]
		memset(buttons, 0, BUTTON_PRESSES_MAX);
   13990:	4b56      	ldr	r3, [pc, #344]	; (13aec <vUiHandlerTask+0x2ac>)
   13992:	2210      	movs	r2, #16
   13994:	2100      	movs	r1, #0
   13996:	0018      	movs	r0, r3
   13998:	4b51      	ldr	r3, [pc, #324]	; (13ae0 <vUiHandlerTask+0x2a0>)
   1399a:	4798      	blx	r3

		if(numPresses >= BUTTON_PRESSES_MAX )
   1399c:	2315      	movs	r3, #21
   1399e:	18fb      	adds	r3, r7, r3
   139a0:	781b      	ldrb	r3, [r3, #0]
   139a2:	2b0f      	cmp	r3, #15
   139a4:	d903      	bls.n	139ae <vUiHandlerTask+0x16e>
		{
			numPresses = BUTTON_PRESSES_MAX;
   139a6:	2315      	movs	r3, #21
   139a8:	18fb      	adds	r3, r7, r3
   139aa:	2210      	movs	r2, #16
   139ac:	701a      	strb	r2, [r3, #0]
		}
		if(numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses))
   139ae:	2315      	movs	r3, #21
   139b0:	18fb      	adds	r3, r7, r3
   139b2:	781b      	ldrb	r3, [r3, #0]
   139b4:	2b00      	cmp	r3, #0
   139b6:	d065      	beq.n	13a84 <vUiHandlerTask+0x244>
   139b8:	2315      	movs	r3, #21
   139ba:	18fb      	adds	r3, r7, r3
   139bc:	781a      	ldrb	r2, [r3, #0]
   139be:	4b4b      	ldr	r3, [pc, #300]	; (13aec <vUiHandlerTask+0x2ac>)
   139c0:	0011      	movs	r1, r2
   139c2:	0018      	movs	r0, r3
   139c4:	4b4a      	ldr	r3, [pc, #296]	; (13af0 <vUiHandlerTask+0x2b0>)
   139c6:	4798      	blx	r3
   139c8:	1e03      	subs	r3, r0, #0
   139ca:	d15b      	bne.n	13a84 <vUiHandlerTask+0x244>
		{
			//Process Buttons
			for (int iter = 0; iter < numPresses; iter++)
   139cc:	2300      	movs	r3, #0
   139ce:	613b      	str	r3, [r7, #16]
   139d0:	e050      	b.n	13a74 <vUiHandlerTask+0x234>
			{
				uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   139d2:	4a46      	ldr	r2, [pc, #280]	; (13aec <vUiHandlerTask+0x2ac>)
   139d4:	693b      	ldr	r3, [r7, #16]
   139d6:	18d3      	adds	r3, r2, r3
   139d8:	781b      	ldrb	r3, [r3, #0]
   139da:	089b      	lsrs	r3, r3, #2
   139dc:	b2db      	uxtb	r3, r3
   139de:	2b00      	cmp	r3, #0
   139e0:	da00      	bge.n	139e4 <vUiHandlerTask+0x1a4>
   139e2:	3307      	adds	r3, #7
   139e4:	10db      	asrs	r3, r3, #3
   139e6:	b2db      	uxtb	r3, r3
   139e8:	009b      	lsls	r3, r3, #2
   139ea:	b2d9      	uxtb	r1, r3
   139ec:	4a3f      	ldr	r2, [pc, #252]	; (13aec <vUiHandlerTask+0x2ac>)
   139ee:	693b      	ldr	r3, [r7, #16]
   139f0:	18d3      	adds	r3, r2, r3
   139f2:	781b      	ldrb	r3, [r3, #0]
   139f4:	089b      	lsrs	r3, r3, #2
   139f6:	b2db      	uxtb	r3, r3
   139f8:	2207      	movs	r2, #7
   139fa:	4013      	ands	r3, r2
   139fc:	b2da      	uxtb	r2, r3
   139fe:	230f      	movs	r3, #15
   13a00:	18fb      	adds	r3, r7, r3
   13a02:	188a      	adds	r2, r1, r2
   13a04:	701a      	strb	r2, [r3, #0]
				uint8_t actionButton = buttons[iter] & 0x03;
   13a06:	4a39      	ldr	r2, [pc, #228]	; (13aec <vUiHandlerTask+0x2ac>)
   13a08:	693b      	ldr	r3, [r7, #16]
   13a0a:	18d3      	adds	r3, r2, r3
   13a0c:	781a      	ldrb	r2, [r3, #0]
   13a0e:	230e      	movs	r3, #14
   13a10:	18fb      	adds	r3, r7, r3
   13a12:	2103      	movs	r1, #3
   13a14:	400a      	ands	r2, r1
   13a16:	701a      	strb	r2, [r3, #0]
				if(actionButton == 0x03) 
   13a18:	230e      	movs	r3, #14
   13a1a:	18fb      	adds	r3, r7, r3
   13a1c:	781b      	ldrb	r3, [r3, #0]
   13a1e:	2b03      	cmp	r3, #3
   13a20:	d10f      	bne.n	13a42 <vUiHandlerTask+0x202>
				{
					SeesawSetLed(keynum, red, green, blue);
   13a22:	4b35      	ldr	r3, [pc, #212]	; (13af8 <vUiHandlerTask+0x2b8>)
   13a24:	781b      	ldrb	r3, [r3, #0]
   13a26:	b2d9      	uxtb	r1, r3
   13a28:	4b34      	ldr	r3, [pc, #208]	; (13afc <vUiHandlerTask+0x2bc>)
   13a2a:	781b      	ldrb	r3, [r3, #0]
   13a2c:	b2da      	uxtb	r2, r3
   13a2e:	4b34      	ldr	r3, [pc, #208]	; (13b00 <vUiHandlerTask+0x2c0>)
   13a30:	781b      	ldrb	r3, [r3, #0]
   13a32:	b2dc      	uxtb	r4, r3
   13a34:	230f      	movs	r3, #15
   13a36:	18fb      	adds	r3, r7, r3
   13a38:	7818      	ldrb	r0, [r3, #0]
   13a3a:	0023      	movs	r3, r4
   13a3c:	4c31      	ldr	r4, [pc, #196]	; (13b04 <vUiHandlerTask+0x2c4>)
   13a3e:	47a0      	blx	r4
   13a40:	e015      	b.n	13a6e <vUiHandlerTask+0x22e>
				}
				else
				{
					SeesawSetLed(keynum, 0, 0, 0);
   13a42:	230f      	movs	r3, #15
   13a44:	18fb      	adds	r3, r7, r3
   13a46:	7818      	ldrb	r0, [r3, #0]
   13a48:	2300      	movs	r3, #0
   13a4a:	2200      	movs	r2, #0
   13a4c:	2100      	movs	r1, #0
   13a4e:	4c2d      	ldr	r4, [pc, #180]	; (13b04 <vUiHandlerTask+0x2c4>)
   13a50:	47a0      	blx	r4
					//Button released! Count this into the buttons pressed by user.
					gamePacketOut.game[pressedKeys] = keynum;
   13a52:	4b1f      	ldr	r3, [pc, #124]	; (13ad0 <vUiHandlerTask+0x290>)
   13a54:	781b      	ldrb	r3, [r3, #0]
   13a56:	0019      	movs	r1, r3
   13a58:	4b20      	ldr	r3, [pc, #128]	; (13adc <vUiHandlerTask+0x29c>)
   13a5a:	220f      	movs	r2, #15
   13a5c:	18ba      	adds	r2, r7, r2
   13a5e:	7812      	ldrb	r2, [r2, #0]
   13a60:	545a      	strb	r2, [r3, r1]
					pressedKeys++;
   13a62:	4b1b      	ldr	r3, [pc, #108]	; (13ad0 <vUiHandlerTask+0x290>)
   13a64:	781b      	ldrb	r3, [r3, #0]
   13a66:	3301      	adds	r3, #1
   13a68:	b2da      	uxtb	r2, r3
   13a6a:	4b19      	ldr	r3, [pc, #100]	; (13ad0 <vUiHandlerTask+0x290>)
   13a6c:	701a      	strb	r2, [r3, #0]
			for (int iter = 0; iter < numPresses; iter++)
   13a6e:	693b      	ldr	r3, [r7, #16]
   13a70:	3301      	adds	r3, #1
   13a72:	613b      	str	r3, [r7, #16]
   13a74:	2315      	movs	r3, #21
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	781a      	ldrb	r2, [r3, #0]
   13a7a:	693b      	ldr	r3, [r7, #16]
   13a7c:	429a      	cmp	r2, r3
   13a7e:	dca8      	bgt.n	139d2 <vUiHandlerTask+0x192>
				}
			}
			SeesawOrderLedUpdate();
   13a80:	4b21      	ldr	r3, [pc, #132]	; (13b08 <vUiHandlerTask+0x2c8>)
   13a82:	4798      	blx	r3
		}

		//Check if we are done!
		if(pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE)
   13a84:	4b12      	ldr	r3, [pc, #72]	; (13ad0 <vUiHandlerTask+0x290>)
   13a86:	781a      	ldrb	r2, [r3, #0]
   13a88:	4b12      	ldr	r3, [pc, #72]	; (13ad4 <vUiHandlerTask+0x294>)
   13a8a:	781b      	ldrb	r3, [r3, #0]
   13a8c:	429a      	cmp	r2, r3
   13a8e:	d203      	bcs.n	13a98 <vUiHandlerTask+0x258>
   13a90:	4b0f      	ldr	r3, [pc, #60]	; (13ad0 <vUiHandlerTask+0x290>)
   13a92:	781b      	ldrb	r3, [r3, #0]
   13a94:	2b13      	cmp	r3, #19
   13a96:	d910      	bls.n	13aba <vUiHandlerTask+0x27a>
		{
			//Tell control gamePacketOut is ready to be send out AND go back to UI_STATE_IGNORE_PRESSES
			SerialConsoleWriteString("Play is Done!\r\n");
   13a98:	4b1d      	ldr	r3, [pc, #116]	; (13b10 <vUiHandlerTask+0x2d0>)
   13a9a:	0018      	movs	r0, r3
   13a9c:	4b0a      	ldr	r3, [pc, #40]	; (13ac8 <vUiHandlerTask+0x288>)
   13a9e:	4798      	blx	r3
			playIsDone = true;
   13aa0:	4b10      	ldr	r3, [pc, #64]	; (13ae4 <vUiHandlerTask+0x2a4>)
   13aa2:	2201      	movs	r2, #1
   13aa4:	701a      	strb	r2, [r3, #0]
			uiState = UI_STATE_IGNORE_PRESSES;
   13aa6:	4b09      	ldr	r3, [pc, #36]	; (13acc <vUiHandlerTask+0x28c>)
   13aa8:	2201      	movs	r2, #1
   13aaa:	701a      	strb	r2, [r3, #0]
		}


		break;
   13aac:	e005      	b.n	13aba <vUiHandlerTask+0x27a>
		}



		default: //In case of unforseen error, it is always good to sent state machine to an initial state.
			uiState = UI_STATE_HANDLE_BUTTONS;
   13aae:	4b07      	ldr	r3, [pc, #28]	; (13acc <vUiHandlerTask+0x28c>)
   13ab0:	2200      	movs	r2, #0
   13ab2:	701a      	strb	r2, [r3, #0]
		break;
   13ab4:	e002      	b.n	13abc <vUiHandlerTask+0x27c>
			break;
   13ab6:	46c0      	nop			; (mov r8, r8)
   13ab8:	e000      	b.n	13abc <vUiHandlerTask+0x27c>
		break;
   13aba:	46c0      	nop			; (mov r8, r8)
	}

	//After execution, you can put a thread to sleep for some time.
	vTaskDelay(50);
   13abc:	2032      	movs	r0, #50	; 0x32
   13abe:	4b13      	ldr	r3, [pc, #76]	; (13b0c <vUiHandlerTask+0x2cc>)
   13ac0:	4798      	blx	r3
	switch(uiState)
   13ac2:	e6c8      	b.n	13856 <vUiHandlerTask+0x16>
   13ac4:	00027bb8 	.word	0x00027bb8
   13ac8:	00018e8d 	.word	0x00018e8d
   13acc:	200042f8 	.word	0x200042f8
   13ad0:	20000488 	.word	0x20000488
   13ad4:	20000489 	.word	0x20000489
   13ad8:	200042d4 	.word	0x200042d4
   13adc:	200042c0 	.word	0x200042c0
   13ae0:	0002624b 	.word	0x0002624b
   13ae4:	2000048a 	.word	0x2000048a
   13ae8:	00013569 	.word	0x00013569
   13aec:	200042e8 	.word	0x200042e8
   13af0:	000135b9 	.word	0x000135b9
   13af4:	00027bcc 	.word	0x00027bcc
   13af8:	20000487 	.word	0x20000487
   13afc:	2000000c 	.word	0x2000000c
   13b00:	2000000d 	.word	0x2000000d
   13b04:	00013655 	.word	0x00013655
   13b08:	0001368d 	.word	0x0001368d
   13b0c:	00018045 	.word	0x00018045
   13b10:	00027bdc 	.word	0x00027bdc

00013b14 <UiOrderShowMoves>:


/******************************************************************************
* Functions
******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn){
   13b14:	b580      	push	{r7, lr}
   13b16:	b082      	sub	sp, #8
   13b18:	af00      	add	r7, sp, #0
   13b1a:	6078      	str	r0, [r7, #4]
	memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   13b1c:	4a08      	ldr	r2, [pc, #32]	; (13b40 <UiOrderShowMoves+0x2c>)
   13b1e:	687b      	ldr	r3, [r7, #4]
   13b20:	0010      	movs	r0, r2
   13b22:	0019      	movs	r1, r3
   13b24:	2314      	movs	r3, #20
   13b26:	001a      	movs	r2, r3
   13b28:	4b06      	ldr	r3, [pc, #24]	; (13b44 <UiOrderShowMoves+0x30>)
   13b2a:	4798      	blx	r3
	uiState = UI_STATE_SHOW_MOVES;
   13b2c:	4b06      	ldr	r3, [pc, #24]	; (13b48 <UiOrderShowMoves+0x34>)
   13b2e:	2202      	movs	r2, #2
   13b30:	701a      	strb	r2, [r3, #0]
	playIsDone = false; //Set play to false
   13b32:	4b06      	ldr	r3, [pc, #24]	; (13b4c <UiOrderShowMoves+0x38>)
   13b34:	2200      	movs	r2, #0
   13b36:	701a      	strb	r2, [r3, #0]
}
   13b38:	46c0      	nop			; (mov r8, r8)
   13b3a:	46bd      	mov	sp, r7
   13b3c:	b002      	add	sp, #8
   13b3e:	bd80      	pop	{r7, pc}
   13b40:	200042d4 	.word	0x200042d4
   13b44:	00026215 	.word	0x00026215
   13b48:	200042f8 	.word	0x200042f8
   13b4c:	2000048a 	.word	0x2000048a

00013b50 <UiPlayIsDone>:


bool UiPlayIsDone(void)
{
   13b50:	b580      	push	{r7, lr}
   13b52:	af00      	add	r7, sp, #0
	return playIsDone;
   13b54:	4b02      	ldr	r3, [pc, #8]	; (13b60 <UiPlayIsDone+0x10>)
   13b56:	781b      	ldrb	r3, [r3, #0]
}
   13b58:	0018      	movs	r0, r3
   13b5a:	46bd      	mov	sp, r7
   13b5c:	bd80      	pop	{r7, pc}
   13b5e:	46c0      	nop			; (mov r8, r8)
   13b60:	2000048a 	.word	0x2000048a

00013b64 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   13b64:	b580      	push	{r7, lr}
   13b66:	af00      	add	r7, sp, #0
	return &gamePacketOut;
   13b68:	4b01      	ldr	r3, [pc, #4]	; (13b70 <UiGetGamePacketOut+0xc>)
}
   13b6a:	0018      	movs	r0, r3
   13b6c:	46bd      	mov	sp, r7
   13b6e:	bd80      	pop	{r7, pc}
   13b70:	200042c0 	.word	0x200042c0

00013b74 <UIChangeColors>:
* @return		
* @note         

*****************************************************************************/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   13b74:	b590      	push	{r4, r7, lr}
   13b76:	b083      	sub	sp, #12
   13b78:	af00      	add	r7, sp, #0
   13b7a:	0004      	movs	r4, r0
   13b7c:	0008      	movs	r0, r1
   13b7e:	0011      	movs	r1, r2
   13b80:	1dfb      	adds	r3, r7, #7
   13b82:	1c22      	adds	r2, r4, #0
   13b84:	701a      	strb	r2, [r3, #0]
   13b86:	1dbb      	adds	r3, r7, #6
   13b88:	1c02      	adds	r2, r0, #0
   13b8a:	701a      	strb	r2, [r3, #0]
   13b8c:	1d7b      	adds	r3, r7, #5
   13b8e:	1c0a      	adds	r2, r1, #0
   13b90:	701a      	strb	r2, [r3, #0]
	red = r;
   13b92:	4b08      	ldr	r3, [pc, #32]	; (13bb4 <UIChangeColors+0x40>)
   13b94:	1dfa      	adds	r2, r7, #7
   13b96:	7812      	ldrb	r2, [r2, #0]
   13b98:	701a      	strb	r2, [r3, #0]
	green = g;
   13b9a:	4b07      	ldr	r3, [pc, #28]	; (13bb8 <UIChangeColors+0x44>)
   13b9c:	1dba      	adds	r2, r7, #6
   13b9e:	7812      	ldrb	r2, [r2, #0]
   13ba0:	701a      	strb	r2, [r3, #0]
	blue = b;
   13ba2:	4b06      	ldr	r3, [pc, #24]	; (13bbc <UIChangeColors+0x48>)
   13ba4:	1d7a      	adds	r2, r7, #5
   13ba6:	7812      	ldrb	r2, [r2, #0]
   13ba8:	701a      	strb	r2, [r3, #0]
   13baa:	46c0      	nop			; (mov r8, r8)
   13bac:	46bd      	mov	sp, r7
   13bae:	b003      	add	sp, #12
   13bb0:	bd90      	pop	{r4, r7, pc}
   13bb2:	46c0      	nop			; (mov r8, r8)
   13bb4:	20000487 	.word	0x20000487
   13bb8:	2000000c 	.word	0x2000000c
   13bbc:	2000000d 	.word	0x2000000d

00013bc0 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   13bc0:	4b02      	ldr	r3, [pc, #8]	; (13bcc <add_state+0xc>)
   13bc2:	781a      	ldrb	r2, [r3, #0]
   13bc4:	4310      	orrs	r0, r2
   13bc6:	7018      	strb	r0, [r3, #0]
}
   13bc8:	4770      	bx	lr
   13bca:	46c0      	nop			; (mov r8, r8)
   13bcc:	2000048c 	.word	0x2000048c

00013bd0 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   13bd0:	4b06      	ldr	r3, [pc, #24]	; (13bec <extint_detection_callback+0x1c>)
   13bd2:	681a      	ldr	r2, [r3, #0]
   13bd4:	3201      	adds	r2, #1
   13bd6:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   13bd8:	681b      	ldr	r3, [r3, #0]
   13bda:	2b28      	cmp	r3, #40	; 0x28
   13bdc:	d902      	bls.n	13be4 <extint_detection_callback+0x14>
   13bde:	2201      	movs	r2, #1
   13be0:	4b02      	ldr	r3, [pc, #8]	; (13bec <extint_detection_callback+0x1c>)
   13be2:	601a      	str	r2, [r3, #0]
	//snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);imuDataVar
	isPressed = true;
   13be4:	2201      	movs	r2, #1
   13be6:	4b02      	ldr	r3, [pc, #8]	; (13bf0 <extint_detection_callback+0x20>)
   13be8:	701a      	strb	r2, [r3, #0]
	
}
   13bea:	4770      	bx	lr
   13bec:	20000094 	.word	0x20000094
   13bf0:	200006ec 	.word	0x200006ec

00013bf4 <SubscribeHandlerLedTopic>:
{
   13bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bf6:	b085      	sub	sp, #20
   13bf8:	0004      	movs	r4, r0
	uint8_t rgb[3] = {0,0,0};
   13bfa:	ab03      	add	r3, sp, #12
   13bfc:	2200      	movs	r2, #0
   13bfe:	701a      	strb	r2, [r3, #0]
   13c00:	705a      	strb	r2, [r3, #1]
   13c02:	709a      	strb	r2, [r3, #2]
	LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   13c04:	6842      	ldr	r2, [r0, #4]
   13c06:	6893      	ldr	r3, [r2, #8]
   13c08:	6852      	ldr	r2, [r2, #4]
   13c0a:	491b      	ldr	r1, [pc, #108]	; (13c78 <SubscribeHandlerLedTopic+0x84>)
   13c0c:	2001      	movs	r0, #1
   13c0e:	4d1b      	ldr	r5, [pc, #108]	; (13c7c <SubscribeHandlerLedTopic+0x88>)
   13c10:	47a8      	blx	r5
	if (strncmp(msgData->message->payload, "rgb(", 4)== 0)
   13c12:	6823      	ldr	r3, [r4, #0]
   13c14:	689c      	ldr	r4, [r3, #8]
   13c16:	2204      	movs	r2, #4
   13c18:	4919      	ldr	r1, [pc, #100]	; (13c80 <SubscribeHandlerLedTopic+0x8c>)
   13c1a:	0020      	movs	r0, r4
   13c1c:	4b19      	ldr	r3, [pc, #100]	; (13c84 <SubscribeHandlerLedTopic+0x90>)
   13c1e:	4798      	blx	r3
   13c20:	2800      	cmp	r0, #0
   13c22:	d127      	bne.n	13c74 <SubscribeHandlerLedTopic+0x80>
	char *p = &msgData->message->payload[4];
   13c24:	1d20      	adds	r0, r4, #4
   13c26:	9002      	str	r0, [sp, #8]
	while(nb <=2  && *p)
   13c28:	7923      	ldrb	r3, [r4, #4]
   13c2a:	2b00      	cmp	r3, #0
   13c2c:	d012      	beq.n	13c54 <SubscribeHandlerLedTopic+0x60>
   13c2e:	2400      	movs	r4, #0
		rgb[nb++] = strtol(p, &p, 10);
   13c30:	4e15      	ldr	r6, [pc, #84]	; (13c88 <SubscribeHandlerLedTopic+0x94>)
   13c32:	ad03      	add	r5, sp, #12
   13c34:	220a      	movs	r2, #10
   13c36:	a902      	add	r1, sp, #8
   13c38:	47b0      	blx	r6
   13c3a:	5560      	strb	r0, [r4, r5]
		if (*p != ',')
   13c3c:	9b02      	ldr	r3, [sp, #8]
   13c3e:	781a      	ldrb	r2, [r3, #0]
   13c40:	2a2c      	cmp	r2, #44	; 0x2c
   13c42:	d107      	bne.n	13c54 <SubscribeHandlerLedTopic+0x60>
		p++; /* skip, */
   13c44:	1c58      	adds	r0, r3, #1
   13c46:	9002      	str	r0, [sp, #8]
	while(nb <=2  && *p)
   13c48:	2c02      	cmp	r4, #2
   13c4a:	d003      	beq.n	13c54 <SubscribeHandlerLedTopic+0x60>
   13c4c:	3401      	adds	r4, #1
   13c4e:	785b      	ldrb	r3, [r3, #1]
   13c50:	2b00      	cmp	r3, #0
   13c52:	d1ef      	bne.n	13c34 <SubscribeHandlerLedTopic+0x40>
	LogMessage(LOG_DEBUG_LVL,"\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   13c54:	ab03      	add	r3, sp, #12
   13c56:	781c      	ldrb	r4, [r3, #0]
   13c58:	785d      	ldrb	r5, [r3, #1]
   13c5a:	789e      	ldrb	r6, [r3, #2]
   13c5c:	9600      	str	r6, [sp, #0]
   13c5e:	002b      	movs	r3, r5
   13c60:	0022      	movs	r2, r4
   13c62:	490a      	ldr	r1, [pc, #40]	; (13c8c <SubscribeHandlerLedTopic+0x98>)
   13c64:	2001      	movs	r0, #1
   13c66:	4f05      	ldr	r7, [pc, #20]	; (13c7c <SubscribeHandlerLedTopic+0x88>)
   13c68:	47b8      	blx	r7
	UIChangeColors(rgb[0],rgb[1], rgb[2]);
   13c6a:	0032      	movs	r2, r6
   13c6c:	0029      	movs	r1, r5
   13c6e:	0020      	movs	r0, r4
   13c70:	4b07      	ldr	r3, [pc, #28]	; (13c90 <SubscribeHandlerLedTopic+0x9c>)
   13c72:	4798      	blx	r3
}
   13c74:	b005      	add	sp, #20
   13c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c78:	00027c08 	.word	0x00027c08
   13c7c:	00018f3d 	.word	0x00018f3d
   13c80:	00027c10 	.word	0x00027c10
   13c84:	00026611 	.word	0x00026611
   13c88:	000267bd 	.word	0x000267bd
   13c8c:	00027c18 	.word	0x00027c18
   13c90:	00013b75 	.word	0x00013b75

00013c94 <SubscribeHandlerGameTopic>:
{
   13c94:	b510      	push	{r4, lr}
   13c96:	0004      	movs	r4, r0
	flagParseGameIn = true;
   13c98:	2201      	movs	r2, #1
   13c9a:	4b08      	ldr	r3, [pc, #32]	; (13cbc <SubscribeHandlerGameTopic+0x28>)
   13c9c:	701a      	strb	r2, [r3, #0]
	memcpy(mqtt_recv_msg,msgData->message->payload , msgData->message->payloadlen);
   13c9e:	6803      	ldr	r3, [r0, #0]
   13ca0:	6899      	ldr	r1, [r3, #8]
   13ca2:	68da      	ldr	r2, [r3, #12]
   13ca4:	4806      	ldr	r0, [pc, #24]	; (13cc0 <SubscribeHandlerGameTopic+0x2c>)
   13ca6:	4b07      	ldr	r3, [pc, #28]	; (13cc4 <SubscribeHandlerGameTopic+0x30>)
   13ca8:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   13caa:	6822      	ldr	r2, [r4, #0]
   13cac:	6893      	ldr	r3, [r2, #8]
   13cae:	68d2      	ldr	r2, [r2, #12]
   13cb0:	4905      	ldr	r1, [pc, #20]	; (13cc8 <SubscribeHandlerGameTopic+0x34>)
   13cb2:	2001      	movs	r0, #1
   13cb4:	4c05      	ldr	r4, [pc, #20]	; (13ccc <SubscribeHandlerGameTopic+0x38>)
   13cb6:	47a0      	blx	r4
}
   13cb8:	bd10      	pop	{r4, pc}
   13cba:	46c0      	nop			; (mov r8, r8)
   13cbc:	200006e4 	.word	0x200006e4
   13cc0:	20000928 	.word	0x20000928
   13cc4:	00026215 	.word	0x00026215
   13cc8:	00027c00 	.word	0x00027c00
   13ccc:	00018f3d 	.word	0x00018f3d

00013cd0 <resolve_cb>:
{
   13cd0:	b570      	push	{r4, r5, r6, lr}
   13cd2:	b084      	sub	sp, #16
   13cd4:	0005      	movs	r5, r0
   13cd6:	000c      	movs	r4, r1
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   13cd8:	22ff      	movs	r2, #255	; 0xff
   13cda:	0013      	movs	r3, r2
   13cdc:	400b      	ands	r3, r1
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   13cde:	0e09      	lsrs	r1, r1, #24
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   13ce0:	9102      	str	r1, [sp, #8]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   13ce2:	0c21      	lsrs	r1, r4, #16
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   13ce4:	4011      	ands	r1, r2
   13ce6:	9101      	str	r1, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   13ce8:	0a21      	lsrs	r1, r4, #8
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   13cea:	400a      	ands	r2, r1
   13cec:	9200      	str	r2, [sp, #0]
   13cee:	0002      	movs	r2, r0
   13cf0:	4904      	ldr	r1, [pc, #16]	; (13d04 <resolve_cb+0x34>)
   13cf2:	2001      	movs	r0, #1
   13cf4:	4e04      	ldr	r6, [pc, #16]	; (13d08 <resolve_cb+0x38>)
   13cf6:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   13cf8:	0021      	movs	r1, r4
   13cfa:	0028      	movs	r0, r5
   13cfc:	4b03      	ldr	r3, [pc, #12]	; (13d0c <resolve_cb+0x3c>)
   13cfe:	4798      	blx	r3
}
   13d00:	b004      	add	sp, #16
   13d02:	bd70      	pop	{r4, r5, r6, pc}
   13d04:	0002804c 	.word	0x0002804c
   13d08:	00018f3d 	.word	0x00018f3d
   13d0c:	00022d55 	.word	0x00022d55

00013d10 <socket_cb>:
{
   13d10:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   13d12:	4b01      	ldr	r3, [pc, #4]	; (13d18 <socket_cb+0x8>)
   13d14:	4798      	blx	r3
}
   13d16:	bd10      	pop	{r4, pc}
   13d18:	00023981 	.word	0x00023981

00013d1c <socket_resolve_handler>:
{
   13d1c:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   13d1e:	4b01      	ldr	r3, [pc, #4]	; (13d24 <socket_resolve_handler+0x8>)
   13d20:	4798      	blx	r3
}
   13d22:	bd10      	pop	{r4, pc}
   13d24:	00022161 	.word	0x00022161

00013d28 <socket_event_handler>:
{
   13d28:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   13d2a:	4b01      	ldr	r3, [pc, #4]	; (13d30 <socket_event_handler+0x8>)
   13d2c:	4798      	blx	r3
}
   13d2e:	bd10      	pop	{r4, pc}
   13d30:	00022155 	.word	0x00022155

00013d34 <configure_mqtt>:
{
   13d34:	b500      	push	{lr}
   13d36:	b087      	sub	sp, #28
	mqtt_get_config_defaults(&mqtt_conf);
   13d38:	4668      	mov	r0, sp
   13d3a:	4b13      	ldr	r3, [pc, #76]	; (13d88 <configure_mqtt+0x54>)
   13d3c:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   13d3e:	4b13      	ldr	r3, [pc, #76]	; (13d8c <configure_mqtt+0x58>)
   13d40:	9302      	str	r3, [sp, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   13d42:	2380      	movs	r3, #128	; 0x80
   13d44:	009b      	lsls	r3, r3, #2
   13d46:	9303      	str	r3, [sp, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   13d48:	4a11      	ldr	r2, [pc, #68]	; (13d90 <configure_mqtt+0x5c>)
   13d4a:	9204      	str	r2, [sp, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   13d4c:	9305      	str	r3, [sp, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   13d4e:	4b11      	ldr	r3, [pc, #68]	; (13d94 <configure_mqtt+0x60>)
   13d50:	466a      	mov	r2, sp
   13d52:	8013      	strh	r3, [r2, #0]
	mqtt_conf.keep_alive = 6000;
   13d54:	4b10      	ldr	r3, [pc, #64]	; (13d98 <configure_mqtt+0x64>)
   13d56:	8093      	strh	r3, [r2, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   13d58:	4669      	mov	r1, sp
   13d5a:	4810      	ldr	r0, [pc, #64]	; (13d9c <configure_mqtt+0x68>)
   13d5c:	4b10      	ldr	r3, [pc, #64]	; (13da0 <configure_mqtt+0x6c>)
   13d5e:	4798      	blx	r3
   13d60:	1e02      	subs	r2, r0, #0
	if (result < 0) {
   13d62:	db07      	blt.n	13d74 <configure_mqtt+0x40>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   13d64:	490f      	ldr	r1, [pc, #60]	; (13da4 <configure_mqtt+0x70>)
   13d66:	480d      	ldr	r0, [pc, #52]	; (13d9c <configure_mqtt+0x68>)
   13d68:	4b0f      	ldr	r3, [pc, #60]	; (13da8 <configure_mqtt+0x74>)
   13d6a:	4798      	blx	r3
   13d6c:	1e02      	subs	r2, r0, #0
	if (result < 0) {
   13d6e:	db06      	blt.n	13d7e <configure_mqtt+0x4a>
}
   13d70:	b007      	add	sp, #28
   13d72:	bd00      	pop	{pc}
		LogMessage(LOG_DEBUG_LVL,"MQTT initialization failed. Error code is (%d)\r\n", result);
   13d74:	490d      	ldr	r1, [pc, #52]	; (13dac <configure_mqtt+0x78>)
   13d76:	2001      	movs	r0, #1
   13d78:	4b0d      	ldr	r3, [pc, #52]	; (13db0 <configure_mqtt+0x7c>)
   13d7a:	4798      	blx	r3
   13d7c:	e7fe      	b.n	13d7c <configure_mqtt+0x48>
		LogMessage(LOG_DEBUG_LVL,"MQTT register callback failed. Error code is (%d)\r\n", result);
   13d7e:	490d      	ldr	r1, [pc, #52]	; (13db4 <configure_mqtt+0x80>)
   13d80:	2001      	movs	r0, #1
   13d82:	4b0b      	ldr	r3, [pc, #44]	; (13db0 <configure_mqtt+0x7c>)
   13d84:	4798      	blx	r3
   13d86:	e7fe      	b.n	13d86 <configure_mqtt+0x52>
   13d88:	00022129 	.word	0x00022129
   13d8c:	20000728 	.word	0x20000728
   13d90:	20000978 	.word	0x20000978
   13d94:	0000075b 	.word	0x0000075b
   13d98:	00001770 	.word	0x00001770
   13d9c:	200006f0 	.word	0x200006f0
   13da0:	00022071 	.word	0x00022071
   13da4:	00013db9 	.word	0x00013db9
   13da8:	00022145 	.word	0x00022145
   13dac:	00027cc4 	.word	0x00027cc4
   13db0:	00018f3d 	.word	0x00018f3d
   13db4:	00027cf8 	.word	0x00027cf8

00013db8 <mqtt_callback>:
{
   13db8:	b530      	push	{r4, r5, lr}
   13dba:	b087      	sub	sp, #28
   13dbc:	0004      	movs	r4, r0
	switch (type) {
   13dbe:	2901      	cmp	r1, #1
   13dc0:	d030      	beq.n	13e24 <mqtt_callback+0x6c>
   13dc2:	2905      	cmp	r1, #5
   13dc4:	d045      	beq.n	13e52 <mqtt_callback+0x9a>
   13dc6:	2900      	cmp	r1, #0
   13dc8:	d001      	beq.n	13dce <mqtt_callback+0x16>
}
   13dca:	b007      	add	sp, #28
   13dcc:	bd30      	pop	{r4, r5, pc}
		if (data->sock_connected.result >= 0) {
   13dce:	6813      	ldr	r3, [r2, #0]
   13dd0:	2b00      	cmp	r3, #0
   13dd2:	db1c      	blt.n	13e0e <mqtt_callback+0x56>
			LogMessage(LOG_DEBUG_LVL,"\r\nConnecting to Broker...");
   13dd4:	4921      	ldr	r1, [pc, #132]	; (13e5c <mqtt_callback+0xa4>)
   13dd6:	2001      	movs	r0, #1
   13dd8:	4b21      	ldr	r3, [pc, #132]	; (13e60 <mqtt_callback+0xa8>)
   13dda:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 1, 0))
   13ddc:	4a21      	ldr	r2, [pc, #132]	; (13e64 <mqtt_callback+0xac>)
   13dde:	2300      	movs	r3, #0
   13de0:	9305      	str	r3, [sp, #20]
   13de2:	2101      	movs	r1, #1
   13de4:	9104      	str	r1, [sp, #16]
   13de6:	9303      	str	r3, [sp, #12]
   13de8:	9302      	str	r3, [sp, #8]
   13dea:	9301      	str	r3, [sp, #4]
   13dec:	9200      	str	r2, [sp, #0]
   13dee:	4b1e      	ldr	r3, [pc, #120]	; (13e68 <mqtt_callback+0xb0>)
   13df0:	0020      	movs	r0, r4
   13df2:	4c1e      	ldr	r4, [pc, #120]	; (13e6c <mqtt_callback+0xb4>)
   13df4:	47a0      	blx	r4
   13df6:	2800      	cmp	r0, #0
   13df8:	d004      	beq.n	13e04 <mqtt_callback+0x4c>
				LogMessage(LOG_DEBUG_LVL,"MQTT  Error - NOT Connected to broker\r\n");
   13dfa:	491d      	ldr	r1, [pc, #116]	; (13e70 <mqtt_callback+0xb8>)
   13dfc:	2001      	movs	r0, #1
   13dfe:	4b18      	ldr	r3, [pc, #96]	; (13e60 <mqtt_callback+0xa8>)
   13e00:	4798      	blx	r3
   13e02:	e7e2      	b.n	13dca <mqtt_callback+0x12>
				LogMessage(LOG_DEBUG_LVL,"MQTT Connected to broker\r\n");
   13e04:	491b      	ldr	r1, [pc, #108]	; (13e74 <mqtt_callback+0xbc>)
   13e06:	2001      	movs	r0, #1
   13e08:	4b15      	ldr	r3, [pc, #84]	; (13e60 <mqtt_callback+0xa8>)
   13e0a:	4798      	blx	r3
   13e0c:	e7dd      	b.n	13dca <mqtt_callback+0x12>
			LogMessage(LOG_DEBUG_LVL,"Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   13e0e:	4d1a      	ldr	r5, [pc, #104]	; (13e78 <mqtt_callback+0xc0>)
   13e10:	002a      	movs	r2, r5
   13e12:	491a      	ldr	r1, [pc, #104]	; (13e7c <mqtt_callback+0xc4>)
   13e14:	2001      	movs	r0, #1
   13e16:	4b12      	ldr	r3, [pc, #72]	; (13e60 <mqtt_callback+0xa8>)
   13e18:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   13e1a:	0029      	movs	r1, r5
   13e1c:	0020      	movs	r0, r4
   13e1e:	4b18      	ldr	r3, [pc, #96]	; (13e80 <mqtt_callback+0xc8>)
   13e20:	4798      	blx	r3
   13e22:	e7d2      	b.n	13dca <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   13e24:	7812      	ldrb	r2, [r2, #0]
   13e26:	2a00      	cmp	r2, #0
   13e28:	d10e      	bne.n	13e48 <mqtt_callback+0x90>
			mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   13e2a:	4b16      	ldr	r3, [pc, #88]	; (13e84 <mqtt_callback+0xcc>)
   13e2c:	3202      	adds	r2, #2
   13e2e:	4916      	ldr	r1, [pc, #88]	; (13e88 <mqtt_callback+0xd0>)
   13e30:	4d16      	ldr	r5, [pc, #88]	; (13e8c <mqtt_callback+0xd4>)
   13e32:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   13e34:	4b16      	ldr	r3, [pc, #88]	; (13e90 <mqtt_callback+0xd8>)
   13e36:	2202      	movs	r2, #2
   13e38:	4916      	ldr	r1, [pc, #88]	; (13e94 <mqtt_callback+0xdc>)
   13e3a:	0020      	movs	r0, r4
   13e3c:	47a8      	blx	r5
			LogMessage(LOG_DEBUG_LVL,"MQTT Connected\r\n");
   13e3e:	4916      	ldr	r1, [pc, #88]	; (13e98 <mqtt_callback+0xe0>)
   13e40:	2001      	movs	r0, #1
   13e42:	4b07      	ldr	r3, [pc, #28]	; (13e60 <mqtt_callback+0xa8>)
   13e44:	4798      	blx	r3
   13e46:	e7c0      	b.n	13dca <mqtt_callback+0x12>
			LogMessage(LOG_DEBUG_LVL,"MQTT broker decline your access! error code %d\r\n", data->connected.result);
   13e48:	4914      	ldr	r1, [pc, #80]	; (13e9c <mqtt_callback+0xe4>)
   13e4a:	2001      	movs	r0, #1
   13e4c:	4b04      	ldr	r3, [pc, #16]	; (13e60 <mqtt_callback+0xa8>)
   13e4e:	4798      	blx	r3
   13e50:	e7bb      	b.n	13dca <mqtt_callback+0x12>
		LogMessage(LOG_DEBUG_LVL,"MQTT disconnected\r\n");
   13e52:	4913      	ldr	r1, [pc, #76]	; (13ea0 <mqtt_callback+0xe8>)
   13e54:	2001      	movs	r0, #1
   13e56:	4b02      	ldr	r3, [pc, #8]	; (13e60 <mqtt_callback+0xa8>)
   13e58:	4798      	blx	r3
}
   13e5a:	e7b6      	b.n	13dca <mqtt_callback+0x12>
   13e5c:	00027f1c 	.word	0x00027f1c
   13e60:	00018f3d 	.word	0x00018f3d
   13e64:	00027f44 	.word	0x00027f44
   13e68:	00027f38 	.word	0x00027f38
   13e6c:	00022199 	.word	0x00022199
   13e70:	00027f4c 	.word	0x00027f4c
   13e74:	00027f74 	.word	0x00027f74
   13e78:	00027f08 	.word	0x00027f08
   13e7c:	00027f90 	.word	0x00027f90
   13e80:	0002216d 	.word	0x0002216d
   13e84:	00013c95 	.word	0x00013c95
   13e88:	00027fc8 	.word	0x00027fc8
   13e8c:	0002229d 	.word	0x0002229d
   13e90:	00013bf5 	.word	0x00013bf5
   13e94:	00027fdc 	.word	0x00027fdc
   13e98:	00027ff0 	.word	0x00027ff0
   13e9c:	00028004 	.word	0x00028004
   13ea0:	00028038 	.word	0x00028038

00013ea4 <start_download>:
{
   13ea4:	b510      	push	{r4, lr}
   13ea6:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   13ea8:	4b15      	ldr	r3, [pc, #84]	; (13f00 <start_download+0x5c>)
   13eaa:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   13eac:	07da      	lsls	r2, r3, #31
   13eae:	d512      	bpl.n	13ed6 <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
   13eb0:	079a      	lsls	r2, r3, #30
   13eb2:	d515      	bpl.n	13ee0 <start_download+0x3c>
	if (is_state_set(GET_REQUESTED)) {
   13eb4:	075a      	lsls	r2, r3, #29
   13eb6:	d418      	bmi.n	13eea <start_download+0x46>
	if (is_state_set(DOWNLOADING)) {
   13eb8:	071b      	lsls	r3, r3, #28
   13eba:	d41b      	bmi.n	13ef4 <start_download+0x50>
	LogMessage(LOG_DEBUG_LVL,"start_download: sending HTTP request...\r\n");
   13ebc:	4911      	ldr	r1, [pc, #68]	; (13f04 <start_download+0x60>)
   13ebe:	2001      	movs	r0, #1
   13ec0:	4b11      	ldr	r3, [pc, #68]	; (13f08 <start_download+0x64>)
   13ec2:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   13ec4:	2300      	movs	r3, #0
   13ec6:	9300      	str	r3, [sp, #0]
   13ec8:	2201      	movs	r2, #1
   13eca:	4910      	ldr	r1, [pc, #64]	; (13f0c <start_download+0x68>)
   13ecc:	4810      	ldr	r0, [pc, #64]	; (13f10 <start_download+0x6c>)
   13ece:	4c11      	ldr	r4, [pc, #68]	; (13f14 <start_download+0x70>)
   13ed0:	47a0      	blx	r4
}
   13ed2:	b002      	add	sp, #8
   13ed4:	bd10      	pop	{r4, pc}
		LogMessage(LOG_DEBUG_LVL,"start_download: MMC storage not ready.\r\n");
   13ed6:	4910      	ldr	r1, [pc, #64]	; (13f18 <start_download+0x74>)
   13ed8:	2001      	movs	r0, #1
   13eda:	4b0b      	ldr	r3, [pc, #44]	; (13f08 <start_download+0x64>)
   13edc:	4798      	blx	r3
		return;
   13ede:	e7f8      	b.n	13ed2 <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: Wi-Fi is not connected.\r\n");
   13ee0:	490e      	ldr	r1, [pc, #56]	; (13f1c <start_download+0x78>)
   13ee2:	2001      	movs	r0, #1
   13ee4:	4b08      	ldr	r3, [pc, #32]	; (13f08 <start_download+0x64>)
   13ee6:	4798      	blx	r3
		return;
   13ee8:	e7f3      	b.n	13ed2 <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: request is sent already.\r\n");
   13eea:	490d      	ldr	r1, [pc, #52]	; (13f20 <start_download+0x7c>)
   13eec:	2001      	movs	r0, #1
   13eee:	4b06      	ldr	r3, [pc, #24]	; (13f08 <start_download+0x64>)
   13ef0:	4798      	blx	r3
		return;
   13ef2:	e7ee      	b.n	13ed2 <start_download+0x2e>
		LogMessage(LOG_DEBUG_LVL,"start_download: running download already.\r\n");
   13ef4:	490b      	ldr	r1, [pc, #44]	; (13f24 <start_download+0x80>)
   13ef6:	2001      	movs	r0, #1
   13ef8:	4b03      	ldr	r3, [pc, #12]	; (13f08 <start_download+0x64>)
   13efa:	4798      	blx	r3
		return;
   13efc:	e7e9      	b.n	13ed2 <start_download+0x2e>
   13efe:	46c0      	nop			; (mov r8, r8)
   13f00:	2000048c 	.word	0x2000048c
   13f04:	0002812c 	.word	0x0002812c
   13f08:	00018f3d 	.word	0x00018f3d
   13f0c:	00028158 	.word	0x00028158
   13f10:	20004354 	.word	0x20004354
   13f14:	00023285 	.word	0x00023285
   13f18:	0002807c 	.word	0x0002807c
   13f1c:	000280a8 	.word	0x000280a8
   13f20:	000280d4 	.word	0x000280d4
   13f24:	00028100 	.word	0x00028100

00013f28 <store_file_packet>:
{
   13f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f2a:	46d6      	mov	lr, sl
   13f2c:	b500      	push	{lr}
   13f2e:	b09a      	sub	sp, #104	; 0x68
   13f30:	9001      	str	r0, [sp, #4]
   13f32:	9102      	str	r1, [sp, #8]
	if ((data == NULL) || (length < 1)) {
   13f34:	2800      	cmp	r0, #0
   13f36:	d00d      	beq.n	13f54 <store_file_packet+0x2c>
   13f38:	2900      	cmp	r1, #0
   13f3a:	d00b      	beq.n	13f54 <store_file_packet+0x2c>
	return ((down_state & mask) != 0);
   13f3c:	4b87      	ldr	r3, [pc, #540]	; (1415c <store_file_packet+0x234>)
   13f3e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   13f40:	071b      	lsls	r3, r3, #28
   13f42:	d500      	bpl.n	13f46 <store_file_packet+0x1e>
   13f44:	e0c5      	b.n	140d2 <store_file_packet+0x1aa>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   13f46:	4b86      	ldr	r3, [pc, #536]	; (14160 <store_file_packet+0x238>)
   13f48:	2230      	movs	r2, #48	; 0x30
   13f4a:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   13f4c:	320a      	adds	r2, #10
   13f4e:	705a      	strb	r2, [r3, #1]
   13f50:	4c84      	ldr	r4, [pc, #528]	; (14164 <store_file_packet+0x23c>)
   13f52:	e008      	b.n	13f66 <store_file_packet+0x3e>
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: empty data.\r\n");
   13f54:	4984      	ldr	r1, [pc, #528]	; (14168 <store_file_packet+0x240>)
   13f56:	2001      	movs	r0, #1
   13f58:	4b84      	ldr	r3, [pc, #528]	; (1416c <store_file_packet+0x244>)
   13f5a:	4798      	blx	r3
}
   13f5c:	b01a      	add	sp, #104	; 0x68
   13f5e:	bc04      	pop	{r2}
   13f60:	4692      	mov	sl, r2
   13f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
   13f64:	0004      	movs	r4, r0
   13f66:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
   13f68:	7803      	ldrb	r3, [r0, #0]
   13f6a:	2b2f      	cmp	r3, #47	; 0x2f
   13f6c:	d1fa      	bne.n	13f64 <store_file_packet+0x3c>
		if (strlen(cp) > 1) {
   13f6e:	4b80      	ldr	r3, [pc, #512]	; (14170 <store_file_packet+0x248>)
   13f70:	4798      	blx	r3
   13f72:	2801      	cmp	r0, #1
   13f74:	d800      	bhi.n	13f78 <store_file_packet+0x50>
   13f76:	e0c1      	b.n	140fc <store_file_packet+0x1d4>
			strcpy(&save_file_name[2], cp);
   13f78:	4f79      	ldr	r7, [pc, #484]	; (14160 <store_file_packet+0x238>)
   13f7a:	1cb8      	adds	r0, r7, #2
   13f7c:	0021      	movs	r1, r4
   13f7e:	4b7d      	ldr	r3, [pc, #500]	; (14174 <store_file_packet+0x24c>)
   13f80:	4798      	blx	r3
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   13f82:	2241      	movs	r2, #65	; 0x41
   13f84:	2100      	movs	r1, #0
   13f86:	a809      	add	r0, sp, #36	; 0x24
   13f88:	4c7b      	ldr	r4, [pc, #492]	; (14178 <store_file_packet+0x250>)
   13f8a:	47a0      	blx	r4
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   13f8c:	2209      	movs	r2, #9
   13f8e:	2100      	movs	r1, #0
   13f90:	a806      	add	r0, sp, #24
   13f92:	47a0      	blx	r4
	char numbering[NUMBRING_MAX + 1] = {0};
   13f94:	2300      	movs	r3, #0
   13f96:	9305      	str	r3, [sp, #20]
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   13f98:	4c78      	ldr	r4, [pc, #480]	; (1417c <store_file_packet+0x254>)
   13f9a:	2200      	movs	r2, #0
   13f9c:	0039      	movs	r1, r7
   13f9e:	0020      	movs	r0, r4
   13fa0:	4b77      	ldr	r3, [pc, #476]	; (14180 <store_file_packet+0x258>)
   13fa2:	4798      	blx	r3
   13fa4:	0007      	movs	r7, r0
	f_close(&file_object);
   13fa6:	0020      	movs	r0, r4
   13fa8:	4b76      	ldr	r3, [pc, #472]	; (14184 <store_file_packet+0x25c>)
   13faa:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
   13fac:	2f00      	cmp	r7, #0
   13fae:	d17d      	bne.n	140ac <store_file_packet+0x184>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   13fb0:	486b      	ldr	r0, [pc, #428]	; (14160 <store_file_packet+0x238>)
   13fb2:	4b6f      	ldr	r3, [pc, #444]	; (14170 <store_file_packet+0x248>)
   13fb4:	4798      	blx	r3
   13fb6:	2840      	cmp	r0, #64	; 0x40
   13fb8:	d878      	bhi.n	140ac <store_file_packet+0x184>
	p = strrchr(file_path_name, '.');
   13fba:	212e      	movs	r1, #46	; 0x2e
   13fbc:	4868      	ldr	r0, [pc, #416]	; (14160 <store_file_packet+0x238>)
   13fbe:	4b72      	ldr	r3, [pc, #456]	; (14188 <store_file_packet+0x260>)
   13fc0:	4798      	blx	r3
   13fc2:	1e04      	subs	r4, r0, #0
	if (p != NULL) {
   13fc4:	d03b      	beq.n	1403e <store_file_packet+0x116>
		ext_len = strlen(p);
   13fc6:	4b6a      	ldr	r3, [pc, #424]	; (14170 <store_file_packet+0x248>)
   13fc8:	4798      	blx	r3
   13fca:	0007      	movs	r7, r0
   13fcc:	b286      	uxth	r6, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   13fce:	2e07      	cmp	r6, #7
   13fd0:	d821      	bhi.n	14016 <store_file_packet+0xee>
			strcpy(ext, p);
   13fd2:	0021      	movs	r1, r4
   13fd4:	a806      	add	r0, sp, #24
   13fd6:	4b67      	ldr	r3, [pc, #412]	; (14174 <store_file_packet+0x24c>)
   13fd8:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   13fda:	4861      	ldr	r0, [pc, #388]	; (14160 <store_file_packet+0x238>)
   13fdc:	4b64      	ldr	r3, [pc, #400]	; (14170 <store_file_packet+0x248>)
   13fde:	4798      	blx	r3
   13fe0:	043f      	lsls	r7, r7, #16
   13fe2:	0c3f      	lsrs	r7, r7, #16
   13fe4:	1bc7      	subs	r7, r0, r7
   13fe6:	2f3c      	cmp	r7, #60	; 0x3c
   13fe8:	d90a      	bls.n	14000 <store_file_packet+0xd8>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   13fea:	273c      	movs	r7, #60	; 0x3c
   13fec:	1bbf      	subs	r7, r7, r6
   13fee:	b2bf      	uxth	r7, r7
				strncpy(name, file_path_name, name_len);
   13ff0:	003a      	movs	r2, r7
   13ff2:	495b      	ldr	r1, [pc, #364]	; (14160 <store_file_packet+0x238>)
   13ff4:	a809      	add	r0, sp, #36	; 0x24
   13ff6:	4b65      	ldr	r3, [pc, #404]	; (1418c <store_file_packet+0x264>)
   13ff8:	4798      	blx	r3
			valid_ext = true;
   13ffa:	2301      	movs	r3, #1
   13ffc:	469a      	mov	sl, r3
   13ffe:	e012      	b.n	14026 <store_file_packet+0xfe>
				name_len = (p - file_path_name);
   14000:	4957      	ldr	r1, [pc, #348]	; (14160 <store_file_packet+0x238>)
   14002:	1a64      	subs	r4, r4, r1
   14004:	b2a7      	uxth	r7, r4
				strncpy(name, file_path_name, name_len);
   14006:	0424      	lsls	r4, r4, #16
   14008:	0c22      	lsrs	r2, r4, #16
   1400a:	a809      	add	r0, sp, #36	; 0x24
   1400c:	4b5f      	ldr	r3, [pc, #380]	; (1418c <store_file_packet+0x264>)
   1400e:	4798      	blx	r3
			valid_ext = true;
   14010:	2301      	movs	r3, #1
   14012:	469a      	mov	sl, r3
   14014:	e007      	b.n	14026 <store_file_packet+0xfe>
			strncpy(name, file_path_name, name_len);
   14016:	223c      	movs	r2, #60	; 0x3c
   14018:	4951      	ldr	r1, [pc, #324]	; (14160 <store_file_packet+0x238>)
   1401a:	a809      	add	r0, sp, #36	; 0x24
   1401c:	4b5b      	ldr	r3, [pc, #364]	; (1418c <store_file_packet+0x264>)
   1401e:	4798      	blx	r3
	bool valid_ext = false;
   14020:	2300      	movs	r3, #0
   14022:	469a      	mov	sl, r3
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   14024:	273c      	movs	r7, #60	; 0x3c
	name[name_len++] = '-';
   14026:	1c7c      	adds	r4, r7, #1
   14028:	b2a4      	uxth	r4, r4
   1402a:	222d      	movs	r2, #45	; 0x2d
   1402c:	ab09      	add	r3, sp, #36	; 0x24
   1402e:	55da      	strb	r2, [r3, r7]
   14030:	2601      	movs	r6, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   14032:	1ce3      	adds	r3, r4, #3
   14034:	aa09      	add	r2, sp, #36	; 0x24
   14036:	4694      	mov	ip, r2
   14038:	4463      	add	r3, ip
   1403a:	9303      	str	r3, [sp, #12]
   1403c:	e019      	b.n	14072 <store_file_packet+0x14a>
		strncpy(name, file_path_name, name_len);
   1403e:	223c      	movs	r2, #60	; 0x3c
   14040:	4947      	ldr	r1, [pc, #284]	; (14160 <store_file_packet+0x238>)
   14042:	a809      	add	r0, sp, #36	; 0x24
   14044:	4b51      	ldr	r3, [pc, #324]	; (1418c <store_file_packet+0x264>)
   14046:	4798      	blx	r3
	bool valid_ext = false;
   14048:	2300      	movs	r3, #0
   1404a:	469a      	mov	sl, r3
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1404c:	273c      	movs	r7, #60	; 0x3c
   1404e:	e7ea      	b.n	14026 <store_file_packet+0xfe>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   14050:	4f4a      	ldr	r7, [pc, #296]	; (1417c <store_file_packet+0x254>)
   14052:	2200      	movs	r2, #0
   14054:	a909      	add	r1, sp, #36	; 0x24
   14056:	0038      	movs	r0, r7
   14058:	4b49      	ldr	r3, [pc, #292]	; (14180 <store_file_packet+0x258>)
   1405a:	4798      	blx	r3
   1405c:	0005      	movs	r5, r0
	f_close(&file_object);
   1405e:	0038      	movs	r0, r7
   14060:	4b48      	ldr	r3, [pc, #288]	; (14184 <store_file_packet+0x25c>)
   14062:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
   14064:	2d00      	cmp	r5, #0
   14066:	d117      	bne.n	14098 <store_file_packet+0x170>
   14068:	3601      	adds	r6, #1
	for (i = 1; i < count; i++) {
   1406a:	4b49      	ldr	r3, [pc, #292]	; (14190 <store_file_packet+0x268>)
   1406c:	b2b2      	uxth	r2, r6
   1406e:	429a      	cmp	r2, r3
   14070:	d81c      	bhi.n	140ac <store_file_packet+0x184>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   14072:	0032      	movs	r2, r6
   14074:	4947      	ldr	r1, [pc, #284]	; (14194 <store_file_packet+0x26c>)
   14076:	a805      	add	r0, sp, #20
   14078:	4b47      	ldr	r3, [pc, #284]	; (14198 <store_file_packet+0x270>)
   1407a:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   1407c:	ab09      	add	r3, sp, #36	; 0x24
   1407e:	1918      	adds	r0, r3, r4
   14080:	2203      	movs	r2, #3
   14082:	a905      	add	r1, sp, #20
   14084:	4b41      	ldr	r3, [pc, #260]	; (1418c <store_file_packet+0x264>)
   14086:	4798      	blx	r3
		if (valid_ext) {
   14088:	4653      	mov	r3, sl
   1408a:	2b00      	cmp	r3, #0
   1408c:	d0e0      	beq.n	14050 <store_file_packet+0x128>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   1408e:	a906      	add	r1, sp, #24
   14090:	9803      	ldr	r0, [sp, #12]
   14092:	4b38      	ldr	r3, [pc, #224]	; (14174 <store_file_packet+0x24c>)
   14094:	4798      	blx	r3
   14096:	e7db      	b.n	14050 <store_file_packet+0x128>
			memset(file_path_name, 0, max_len);
   14098:	4c31      	ldr	r4, [pc, #196]	; (14160 <store_file_packet+0x238>)
   1409a:	2240      	movs	r2, #64	; 0x40
   1409c:	2100      	movs	r1, #0
   1409e:	0020      	movs	r0, r4
   140a0:	4b35      	ldr	r3, [pc, #212]	; (14178 <store_file_packet+0x250>)
   140a2:	4798      	blx	r3
			strcpy(file_path_name, name);
   140a4:	a909      	add	r1, sp, #36	; 0x24
   140a6:	0020      	movs	r0, r4
   140a8:	4b32      	ldr	r3, [pc, #200]	; (14174 <store_file_packet+0x24c>)
   140aa:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: creating file [%s]\r\n", save_file_name);
   140ac:	4c2c      	ldr	r4, [pc, #176]	; (14160 <store_file_packet+0x238>)
   140ae:	0022      	movs	r2, r4
   140b0:	493a      	ldr	r1, [pc, #232]	; (1419c <store_file_packet+0x274>)
   140b2:	2001      	movs	r0, #1
   140b4:	4b2d      	ldr	r3, [pc, #180]	; (1416c <store_file_packet+0x244>)
   140b6:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   140b8:	220a      	movs	r2, #10
   140ba:	0021      	movs	r1, r4
   140bc:	482f      	ldr	r0, [pc, #188]	; (1417c <store_file_packet+0x254>)
   140be:	4b30      	ldr	r3, [pc, #192]	; (14180 <store_file_packet+0x258>)
   140c0:	4798      	blx	r3
		if (ret != FR_OK) {
   140c2:	2800      	cmp	r0, #0
   140c4:	d122      	bne.n	1410c <store_file_packet+0x1e4>
		received_file_size = 0;
   140c6:	2200      	movs	r2, #0
   140c8:	4b35      	ldr	r3, [pc, #212]	; (141a0 <store_file_packet+0x278>)
   140ca:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   140cc:	2008      	movs	r0, #8
   140ce:	4b35      	ldr	r3, [pc, #212]	; (141a4 <store_file_packet+0x27c>)
   140d0:	4798      	blx	r3
		UINT wsize = 0;
   140d2:	2300      	movs	r3, #0
   140d4:	9309      	str	r3, [sp, #36]	; 0x24
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   140d6:	ab09      	add	r3, sp, #36	; 0x24
   140d8:	9a02      	ldr	r2, [sp, #8]
   140da:	9901      	ldr	r1, [sp, #4]
   140dc:	4827      	ldr	r0, [pc, #156]	; (1417c <store_file_packet+0x254>)
   140de:	4c32      	ldr	r4, [pc, #200]	; (141a8 <store_file_packet+0x280>)
   140e0:	47a0      	blx	r4
		if (ret != FR_OK) {
   140e2:	2800      	cmp	r0, #0
   140e4:	d018      	beq.n	14118 <store_file_packet+0x1f0>
			f_close(&file_object);
   140e6:	4825      	ldr	r0, [pc, #148]	; (1417c <store_file_packet+0x254>)
   140e8:	4b26      	ldr	r3, [pc, #152]	; (14184 <store_file_packet+0x25c>)
   140ea:	4798      	blx	r3
			add_state(CANCELED);
   140ec:	2020      	movs	r0, #32
   140ee:	4b2d      	ldr	r3, [pc, #180]	; (141a4 <store_file_packet+0x27c>)
   140f0:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file write error, download canceled.\r\n");
   140f2:	492e      	ldr	r1, [pc, #184]	; (141ac <store_file_packet+0x284>)
   140f4:	2001      	movs	r0, #1
   140f6:	4b1d      	ldr	r3, [pc, #116]	; (1416c <store_file_packet+0x244>)
   140f8:	4798      	blx	r3
			return;
   140fa:	e72f      	b.n	13f5c <store_file_packet+0x34>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file name is invalid. Download canceled.\r\n");
   140fc:	492c      	ldr	r1, [pc, #176]	; (141b0 <store_file_packet+0x288>)
   140fe:	2001      	movs	r0, #1
   14100:	4b1a      	ldr	r3, [pc, #104]	; (1416c <store_file_packet+0x244>)
   14102:	4798      	blx	r3
			add_state(CANCELED);
   14104:	2020      	movs	r0, #32
   14106:	4b27      	ldr	r3, [pc, #156]	; (141a4 <store_file_packet+0x27c>)
   14108:	4798      	blx	r3
			return;
   1410a:	e727      	b.n	13f5c <store_file_packet+0x34>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file creation error! ret:%d\r\n", ret);
   1410c:	0002      	movs	r2, r0
   1410e:	4929      	ldr	r1, [pc, #164]	; (141b4 <store_file_packet+0x28c>)
   14110:	2001      	movs	r0, #1
   14112:	4b16      	ldr	r3, [pc, #88]	; (1416c <store_file_packet+0x244>)
   14114:	4798      	blx	r3
			return;
   14116:	e721      	b.n	13f5c <store_file_packet+0x34>
		received_file_size += wsize;
   14118:	4c21      	ldr	r4, [pc, #132]	; (141a0 <store_file_packet+0x278>)
   1411a:	6823      	ldr	r3, [r4, #0]
   1411c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1411e:	468c      	mov	ip, r1
   14120:	4463      	add	r3, ip
   14122:	001a      	movs	r2, r3
   14124:	6023      	str	r3, [r4, #0]
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   14126:	4d24      	ldr	r5, [pc, #144]	; (141b8 <store_file_packet+0x290>)
   14128:	682b      	ldr	r3, [r5, #0]
   1412a:	4924      	ldr	r1, [pc, #144]	; (141bc <store_file_packet+0x294>)
   1412c:	2001      	movs	r0, #1
   1412e:	4e0f      	ldr	r6, [pc, #60]	; (1416c <store_file_packet+0x244>)
   14130:	47b0      	blx	r6
		if (received_file_size >= http_file_size) {
   14132:	6822      	ldr	r2, [r4, #0]
   14134:	682b      	ldr	r3, [r5, #0]
   14136:	429a      	cmp	r2, r3
   14138:	d200      	bcs.n	1413c <store_file_packet+0x214>
   1413a:	e70f      	b.n	13f5c <store_file_packet+0x34>
			f_close(&file_object);
   1413c:	480f      	ldr	r0, [pc, #60]	; (1417c <store_file_packet+0x254>)
   1413e:	4b11      	ldr	r3, [pc, #68]	; (14184 <store_file_packet+0x25c>)
   14140:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file downloaded successfully.\r\n");
   14142:	491f      	ldr	r1, [pc, #124]	; (141c0 <store_file_packet+0x298>)
   14144:	2001      	movs	r0, #1
   14146:	4b09      	ldr	r3, [pc, #36]	; (1416c <store_file_packet+0x244>)
   14148:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   1414a:	2280      	movs	r2, #128	; 0x80
   1414c:	0412      	lsls	r2, r2, #16
   1414e:	4b1d      	ldr	r3, [pc, #116]	; (141c4 <store_file_packet+0x29c>)
   14150:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   14152:	2010      	movs	r0, #16
   14154:	4b13      	ldr	r3, [pc, #76]	; (141a4 <store_file_packet+0x27c>)
   14156:	4798      	blx	r3
			return;
   14158:	e700      	b.n	13f5c <store_file_packet+0x34>
   1415a:	46c0      	nop			; (mov r8, r8)
   1415c:	2000048c 	.word	0x2000048c
   14160:	20000050 	.word	0x20000050
   14164:	00028179 	.word	0x00028179
   14168:	0002817c 	.word	0x0002817c
   1416c:	00018f3d 	.word	0x00018f3d
   14170:	00026603 	.word	0x00026603
   14174:	000265b7 	.word	0x000265b7
   14178:	0002624b 	.word	0x0002624b
   1417c:	200006c0 	.word	0x200006c0
   14180:	000210dd 	.word	0x000210dd
   14184:	00021529 	.word	0x00021529
   14188:	0002665d 	.word	0x0002665d
   1418c:	00026633 	.word	0x00026633
   14190:	000003e7 	.word	0x000003e7
   14194:	000281a0 	.word	0x000281a0
   14198:	00026509 	.word	0x00026509
   1419c:	000281a8 	.word	0x000281a8
   141a0:	20000b78 	.word	0x20000b78
   141a4:	00013bc1 	.word	0x00013bc1
   141a8:	00021265 	.word	0x00021265
   141ac:	00028244 	.word	0x00028244
   141b0:	000281d0 	.word	0x000281d0
   141b4:	00028210 	.word	0x00028210
   141b8:	200006e8 	.word	0x200006e8
   141bc:	00028280 	.word	0x00028280
   141c0:	000282b4 	.word	0x000282b4
   141c4:	41004400 	.word	0x41004400

000141c8 <http_client_callback>:
{
   141c8:	b570      	push	{r4, r5, r6, lr}
   141ca:	0014      	movs	r4, r2
	switch (type) {
   141cc:	2904      	cmp	r1, #4
   141ce:	d807      	bhi.n	141e0 <http_client_callback+0x18>
   141d0:	0089      	lsls	r1, r1, #2
   141d2:	4b2d      	ldr	r3, [pc, #180]	; (14288 <http_client_callback+0xc0>)
   141d4:	585b      	ldr	r3, [r3, r1]
   141d6:	469f      	mov	pc, r3
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: HTTP client socket connected.\r\n");
   141d8:	492c      	ldr	r1, [pc, #176]	; (1428c <http_client_callback+0xc4>)
   141da:	2001      	movs	r0, #1
   141dc:	4b2c      	ldr	r3, [pc, #176]	; (14290 <http_client_callback+0xc8>)
   141de:	4798      	blx	r3
}
   141e0:	bd70      	pop	{r4, r5, r6, pc}
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: request completed.\r\n");
   141e2:	492c      	ldr	r1, [pc, #176]	; (14294 <http_client_callback+0xcc>)
   141e4:	2001      	movs	r0, #1
   141e6:	4b2a      	ldr	r3, [pc, #168]	; (14290 <http_client_callback+0xc8>)
   141e8:	4798      	blx	r3
		add_state(GET_REQUESTED);
   141ea:	2004      	movs	r0, #4
   141ec:	4b2a      	ldr	r3, [pc, #168]	; (14298 <http_client_callback+0xd0>)
   141ee:	4798      	blx	r3
		break;
   141f0:	e7f6      	b.n	141e0 <http_client_callback+0x18>
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
   141f2:	8812      	ldrh	r2, [r2, #0]
   141f4:	6863      	ldr	r3, [r4, #4]
   141f6:	4929      	ldr	r1, [pc, #164]	; (1429c <http_client_callback+0xd4>)
   141f8:	2001      	movs	r0, #1
   141fa:	4d25      	ldr	r5, [pc, #148]	; (14290 <http_client_callback+0xc8>)
   141fc:	47a8      	blx	r5
		if ((unsigned int)data->recv_response.response_code == 200) {
   141fe:	8823      	ldrh	r3, [r4, #0]
   14200:	2bc8      	cmp	r3, #200	; 0xc8
   14202:	d110      	bne.n	14226 <http_client_callback+0x5e>
			http_file_size = data->recv_response.content_length;
   14204:	6861      	ldr	r1, [r4, #4]
   14206:	4b26      	ldr	r3, [pc, #152]	; (142a0 <http_client_callback+0xd8>)
   14208:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   1420a:	2200      	movs	r2, #0
   1420c:	4b25      	ldr	r3, [pc, #148]	; (142a4 <http_client_callback+0xdc>)
   1420e:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   14210:	2380      	movs	r3, #128	; 0x80
   14212:	009b      	lsls	r3, r3, #2
   14214:	4299      	cmp	r1, r3
   14216:	d8e3      	bhi.n	141e0 <http_client_callback+0x18>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   14218:	68a0      	ldr	r0, [r4, #8]
   1421a:	4b23      	ldr	r3, [pc, #140]	; (142a8 <http_client_callback+0xe0>)
   1421c:	4798      	blx	r3
			add_state(COMPLETED);
   1421e:	2010      	movs	r0, #16
   14220:	4b1d      	ldr	r3, [pc, #116]	; (14298 <http_client_callback+0xd0>)
   14222:	4798      	blx	r3
   14224:	e7dc      	b.n	141e0 <http_client_callback+0x18>
			add_state(CANCELED);
   14226:	2020      	movs	r0, #32
   14228:	4b1b      	ldr	r3, [pc, #108]	; (14298 <http_client_callback+0xd0>)
   1422a:	4798      	blx	r3
			return;
   1422c:	e7d8      	b.n	141e0 <http_client_callback+0x18>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   1422e:	6811      	ldr	r1, [r2, #0]
   14230:	6850      	ldr	r0, [r2, #4]
   14232:	4b1d      	ldr	r3, [pc, #116]	; (142a8 <http_client_callback+0xe0>)
   14234:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   14236:	7a23      	ldrb	r3, [r4, #8]
   14238:	2b00      	cmp	r3, #0
   1423a:	d0d1      	beq.n	141e0 <http_client_callback+0x18>
			add_state(COMPLETED);
   1423c:	2010      	movs	r0, #16
   1423e:	4b16      	ldr	r3, [pc, #88]	; (14298 <http_client_callback+0xd0>)
   14240:	4798      	blx	r3
   14242:	e7cd      	b.n	141e0 <http_client_callback+0x18>
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   14244:	6812      	ldr	r2, [r2, #0]
   14246:	4919      	ldr	r1, [pc, #100]	; (142ac <http_client_callback+0xe4>)
   14248:	2001      	movs	r0, #1
   1424a:	4b11      	ldr	r3, [pc, #68]	; (14290 <http_client_callback+0xc8>)
   1424c:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   1424e:	6823      	ldr	r3, [r4, #0]
   14250:	330b      	adds	r3, #11
   14252:	d1c5      	bne.n	141e0 <http_client_callback+0x18>
	return ((down_state & mask) != 0);
   14254:	4b16      	ldr	r3, [pc, #88]	; (142b0 <http_client_callback+0xe8>)
   14256:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   14258:	071b      	lsls	r3, r3, #28
   1425a:	d406      	bmi.n	1426a <http_client_callback+0xa2>
	return ((down_state & mask) != 0);
   1425c:	4b14      	ldr	r3, [pc, #80]	; (142b0 <http_client_callback+0xe8>)
   1425e:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   14260:	075a      	lsls	r2, r3, #29
   14262:	d40b      	bmi.n	1427c <http_client_callback+0xb4>
			start_download();
   14264:	4b13      	ldr	r3, [pc, #76]	; (142b4 <http_client_callback+0xec>)
   14266:	4798      	blx	r3
   14268:	e7ba      	b.n	141e0 <http_client_callback+0x18>
				f_close(&file_object);
   1426a:	4813      	ldr	r0, [pc, #76]	; (142b8 <http_client_callback+0xf0>)
   1426c:	4b13      	ldr	r3, [pc, #76]	; (142bc <http_client_callback+0xf4>)
   1426e:	4798      	blx	r3
	down_state &= ~mask;
   14270:	4a0f      	ldr	r2, [pc, #60]	; (142b0 <http_client_callback+0xe8>)
   14272:	7813      	ldrb	r3, [r2, #0]
   14274:	2108      	movs	r1, #8
   14276:	438b      	bics	r3, r1
   14278:	7013      	strb	r3, [r2, #0]
   1427a:	e7ef      	b.n	1425c <http_client_callback+0x94>
   1427c:	2204      	movs	r2, #4
   1427e:	4393      	bics	r3, r2
   14280:	4a0b      	ldr	r2, [pc, #44]	; (142b0 <http_client_callback+0xe8>)
   14282:	7013      	strb	r3, [r2, #0]
   14284:	e7ee      	b.n	14264 <http_client_callback+0x9c>
   14286:	46c0      	nop			; (mov r8, r8)
   14288:	00027bec 	.word	0x00027bec
   1428c:	00027d2c 	.word	0x00027d2c
   14290:	00018f3d 	.word	0x00018f3d
   14294:	00027d64 	.word	0x00027d64
   14298:	00013bc1 	.word	0x00013bc1
   1429c:	00027d90 	.word	0x00027d90
   142a0:	200006e8 	.word	0x200006e8
   142a4:	20000b78 	.word	0x20000b78
   142a8:	00013f29 	.word	0x00013f29
   142ac:	00027dcc 	.word	0x00027dcc
   142b0:	2000048c 	.word	0x2000048c
   142b4:	00013ea5 	.word	0x00013ea5
   142b8:	200006c0 	.word	0x200006c0
   142bc:	00021529 	.word	0x00021529

000142c0 <wifi_cb>:
{
   142c0:	b510      	push	{r4, lr}
   142c2:	b082      	sub	sp, #8
	switch (u8MsgType) {
   142c4:	282c      	cmp	r0, #44	; 0x2c
   142c6:	d003      	beq.n	142d0 <wifi_cb+0x10>
   142c8:	2832      	cmp	r0, #50	; 0x32
   142ca:	d037      	beq.n	1433c <wifi_cb+0x7c>
}
   142cc:	b002      	add	sp, #8
   142ce:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   142d0:	780b      	ldrb	r3, [r1, #0]
   142d2:	2b01      	cmp	r3, #1
   142d4:	d01d      	beq.n	14312 <wifi_cb+0x52>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   142d6:	2b00      	cmp	r3, #0
   142d8:	d1f8      	bne.n	142cc <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   142da:	4928      	ldr	r1, [pc, #160]	; (1437c <wifi_cb+0xbc>)
   142dc:	2001      	movs	r0, #1
   142de:	4b28      	ldr	r3, [pc, #160]	; (14380 <wifi_cb+0xc0>)
   142e0:	4798      	blx	r3
	down_state &= ~mask;
   142e2:	4a28      	ldr	r2, [pc, #160]	; (14384 <wifi_cb+0xc4>)
   142e4:	7813      	ldrb	r3, [r2, #0]
   142e6:	2102      	movs	r1, #2
   142e8:	438b      	bics	r3, r1
   142ea:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
   142ec:	071b      	lsls	r3, r3, #28
   142ee:	d417      	bmi.n	14320 <wifi_cb+0x60>
	return ((down_state & mask) != 0);
   142f0:	4b24      	ldr	r3, [pc, #144]	; (14384 <wifi_cb+0xc4>)
   142f2:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   142f4:	075a      	lsls	r2, r3, #29
   142f6:	d41c      	bmi.n	14332 <wifi_cb+0x72>
			mqtt_disconnect(&mqtt_inst, 1);
   142f8:	2101      	movs	r1, #1
   142fa:	4823      	ldr	r0, [pc, #140]	; (14388 <wifi_cb+0xc8>)
   142fc:	4b23      	ldr	r3, [pc, #140]	; (1438c <wifi_cb+0xcc>)
   142fe:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   14300:	23ff      	movs	r3, #255	; 0xff
   14302:	9300      	str	r3, [sp, #0]
   14304:	4b22      	ldr	r3, [pc, #136]	; (14390 <wifi_cb+0xd0>)
   14306:	2201      	movs	r2, #1
   14308:	210a      	movs	r1, #10
   1430a:	4822      	ldr	r0, [pc, #136]	; (14394 <wifi_cb+0xd4>)
   1430c:	4c22      	ldr	r4, [pc, #136]	; (14398 <wifi_cb+0xd8>)
   1430e:	47a0      	blx	r4
   14310:	e7dc      	b.n	142cc <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_CONNECTED\r\n");
   14312:	4922      	ldr	r1, [pc, #136]	; (1439c <wifi_cb+0xdc>)
   14314:	2001      	movs	r0, #1
   14316:	4b1a      	ldr	r3, [pc, #104]	; (14380 <wifi_cb+0xc0>)
   14318:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   1431a:	4b21      	ldr	r3, [pc, #132]	; (143a0 <wifi_cb+0xe0>)
   1431c:	4798      	blx	r3
   1431e:	e7d5      	b.n	142cc <wifi_cb+0xc>
				f_close(&file_object);
   14320:	4820      	ldr	r0, [pc, #128]	; (143a4 <wifi_cb+0xe4>)
   14322:	4b21      	ldr	r3, [pc, #132]	; (143a8 <wifi_cb+0xe8>)
   14324:	4798      	blx	r3
	down_state &= ~mask;
   14326:	4a17      	ldr	r2, [pc, #92]	; (14384 <wifi_cb+0xc4>)
   14328:	7813      	ldrb	r3, [r2, #0]
   1432a:	2108      	movs	r1, #8
   1432c:	438b      	bics	r3, r1
   1432e:	7013      	strb	r3, [r2, #0]
   14330:	e7de      	b.n	142f0 <wifi_cb+0x30>
   14332:	2204      	movs	r2, #4
   14334:	4393      	bics	r3, r2
   14336:	4a13      	ldr	r2, [pc, #76]	; (14384 <wifi_cb+0xc4>)
   14338:	7013      	strb	r3, [r2, #0]
   1433a:	e7dd      	b.n	142f8 <wifi_cb+0x38>
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   1433c:	784b      	ldrb	r3, [r1, #1]
   1433e:	780a      	ldrb	r2, [r1, #0]
   14340:	78c8      	ldrb	r0, [r1, #3]
   14342:	9001      	str	r0, [sp, #4]
   14344:	7889      	ldrb	r1, [r1, #2]
   14346:	9100      	str	r1, [sp, #0]
   14348:	4918      	ldr	r1, [pc, #96]	; (143ac <wifi_cb+0xec>)
   1434a:	2001      	movs	r0, #1
   1434c:	4c0c      	ldr	r4, [pc, #48]	; (14380 <wifi_cb+0xc0>)
   1434e:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   14350:	2002      	movs	r0, #2
   14352:	4b17      	ldr	r3, [pc, #92]	; (143b0 <wifi_cb+0xf0>)
   14354:	4798      	blx	r3
		if(do_download_flag == 1)
   14356:	4b17      	ldr	r3, [pc, #92]	; (143b4 <wifi_cb+0xf4>)
   14358:	781b      	ldrb	r3, [r3, #0]
   1435a:	2b01      	cmp	r3, #1
   1435c:	d00a      	beq.n	14374 <wifi_cb+0xb4>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   1435e:	4916      	ldr	r1, [pc, #88]	; (143b8 <wifi_cb+0xf8>)
   14360:	4809      	ldr	r0, [pc, #36]	; (14388 <wifi_cb+0xc8>)
   14362:	4b16      	ldr	r3, [pc, #88]	; (143bc <wifi_cb+0xfc>)
   14364:	4798      	blx	r3
   14366:	2800      	cmp	r0, #0
   14368:	d0b0      	beq.n	142cc <wifi_cb+0xc>
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   1436a:	4915      	ldr	r1, [pc, #84]	; (143c0 <wifi_cb+0x100>)
   1436c:	2001      	movs	r0, #1
   1436e:	4b04      	ldr	r3, [pc, #16]	; (14380 <wifi_cb+0xc0>)
   14370:	4798      	blx	r3
}
   14372:	e7ab      	b.n	142cc <wifi_cb+0xc>
			start_download();
   14374:	4b13      	ldr	r3, [pc, #76]	; (143c4 <wifi_cb+0x104>)
   14376:	4798      	blx	r3
   14378:	e7a8      	b.n	142cc <wifi_cb+0xc>
   1437a:	46c0      	nop			; (mov r8, r8)
   1437c:	000284f0 	.word	0x000284f0
   14380:	00018f3d 	.word	0x00018f3d
   14384:	2000048c 	.word	0x2000048c
   14388:	200006f0 	.word	0x200006f0
   1438c:	00022231 	.word	0x00022231
   14390:	00028078 	.word	0x00028078
   14394:	00028514 	.word	0x00028514
   14398:	0001b399 	.word	0x0001b399
   1439c:	000284d0 	.word	0x000284d0
   143a0:	0001b3b5 	.word	0x0001b3b5
   143a4:	200006c0 	.word	0x200006c0
   143a8:	00021529 	.word	0x00021529
   143ac:	00028520 	.word	0x00028520
   143b0:	00013bc1 	.word	0x00013bc1
   143b4:	2000048b 	.word	0x2000048b
   143b8:	00027f08 	.word	0x00027f08
   143bc:	0002216d 	.word	0x0002216d
   143c0:	00028548 	.word	0x00028548
   143c4:	00013ea5 	.word	0x00013ea5

000143c8 <init_storage>:
{
   143c8:	b570      	push	{r4, r5, r6, lr}
	sd_mmc_init();
   143ca:	4b1c      	ldr	r3, [pc, #112]	; (1443c <init_storage+0x74>)
   143cc:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"init_storage: please plug an SD/MMC card in slot...\r\n");
   143ce:	491c      	ldr	r1, [pc, #112]	; (14440 <init_storage+0x78>)
   143d0:	2001      	movs	r0, #1
   143d2:	4b1c      	ldr	r3, [pc, #112]	; (14444 <init_storage+0x7c>)
   143d4:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
   143d6:	4e1c      	ldr	r6, [pc, #112]	; (14448 <init_storage+0x80>)
				LogMessage(LOG_DEBUG_LVL,"init_storage: SD Card install failed.\r\n");
   143d8:	4c1a      	ldr	r4, [pc, #104]	; (14444 <init_storage+0x7c>)
   143da:	e009      	b.n	143f0 <init_storage+0x28>
   143dc:	491b      	ldr	r1, [pc, #108]	; (1444c <init_storage+0x84>)
   143de:	47a0      	blx	r4
				LogMessage(LOG_DEBUG_LVL,"init_storage: try unplug and re-plug the card.\r\n");
   143e0:	491b      	ldr	r1, [pc, #108]	; (14450 <init_storage+0x88>)
   143e2:	2001      	movs	r0, #1
   143e4:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   143e6:	4d1b      	ldr	r5, [pc, #108]	; (14454 <init_storage+0x8c>)
   143e8:	2000      	movs	r0, #0
   143ea:	47a8      	blx	r5
   143ec:	2802      	cmp	r0, #2
   143ee:	d1fb      	bne.n	143e8 <init_storage+0x20>
			status = sd_mmc_test_unit_ready(0);
   143f0:	2000      	movs	r0, #0
   143f2:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
   143f4:	2801      	cmp	r0, #1
   143f6:	d0f1      	beq.n	143dc <init_storage+0x14>
		} while (CTRL_GOOD != status);
   143f8:	2800      	cmp	r0, #0
   143fa:	d1f9      	bne.n	143f0 <init_storage+0x28>
		LogMessage(LOG_DEBUG_LVL,"init_storage: mounting SD card...\r\n");
   143fc:	4916      	ldr	r1, [pc, #88]	; (14458 <init_storage+0x90>)
   143fe:	3001      	adds	r0, #1
   14400:	4b10      	ldr	r3, [pc, #64]	; (14444 <init_storage+0x7c>)
   14402:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   14404:	4c15      	ldr	r4, [pc, #84]	; (1445c <init_storage+0x94>)
   14406:	228c      	movs	r2, #140	; 0x8c
   14408:	0092      	lsls	r2, r2, #2
   1440a:	2100      	movs	r1, #0
   1440c:	0020      	movs	r0, r4
   1440e:	4b14      	ldr	r3, [pc, #80]	; (14460 <init_storage+0x98>)
   14410:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   14412:	0021      	movs	r1, r4
   14414:	2000      	movs	r0, #0
   14416:	4b13      	ldr	r3, [pc, #76]	; (14464 <init_storage+0x9c>)
   14418:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   1441a:	280b      	cmp	r0, #11
   1441c:	d007      	beq.n	1442e <init_storage+0x66>
		LogMessage(LOG_DEBUG_LVL,"init_storage: SD card mount OK.\r\n");
   1441e:	4912      	ldr	r1, [pc, #72]	; (14468 <init_storage+0xa0>)
   14420:	2001      	movs	r0, #1
   14422:	4b08      	ldr	r3, [pc, #32]	; (14444 <init_storage+0x7c>)
   14424:	4798      	blx	r3
		add_state(STORAGE_READY);
   14426:	2001      	movs	r0, #1
   14428:	4b10      	ldr	r3, [pc, #64]	; (1446c <init_storage+0xa4>)
   1442a:	4798      	blx	r3
}
   1442c:	bd70      	pop	{r4, r5, r6, pc}
			LogMessage(LOG_DEBUG_LVL,"init_storage: SD card mount failed! (res %d)\r\n", res);
   1442e:	220b      	movs	r2, #11
   14430:	490f      	ldr	r1, [pc, #60]	; (14470 <init_storage+0xa8>)
   14432:	380a      	subs	r0, #10
   14434:	4b03      	ldr	r3, [pc, #12]	; (14444 <init_storage+0x7c>)
   14436:	4798      	blx	r3
			return;
   14438:	e7f8      	b.n	1442c <init_storage+0x64>
   1443a:	46c0      	nop			; (mov r8, r8)
   1443c:	000190b9 	.word	0x000190b9
   14440:	00027dfc 	.word	0x00027dfc
   14444:	00018f3d 	.word	0x00018f3d
   14448:	000197ed 	.word	0x000197ed
   1444c:	00027e34 	.word	0x00027e34
   14450:	00027e5c 	.word	0x00027e5c
   14454:	000190d9 	.word	0x000190d9
   14458:	00027e90 	.word	0x00027e90
   1445c:	20000490 	.word	0x20000490
   14460:	0002624b 	.word	0x0002624b
   14464:	000210ad 	.word	0x000210ad
   14468:	00027ee4 	.word	0x00027ee4
   1446c:	00013bc1 	.word	0x00013bc1
   14470:	00027eb4 	.word	0x00027eb4

00014474 <configure_extint_channel>:
{
   14474:	b510      	push	{r4, lr}
   14476:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
   14478:	ac01      	add	r4, sp, #4
   1447a:	0020      	movs	r0, r4
   1447c:	4b07      	ldr	r3, [pc, #28]	; (1449c <configure_extint_channel+0x28>)
   1447e:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   14480:	2337      	movs	r3, #55	; 0x37
   14482:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   14484:	2300      	movs	r3, #0
   14486:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   14488:	3301      	adds	r3, #1
   1448a:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1448c:	3301      	adds	r3, #1
   1448e:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   14490:	0021      	movs	r1, r4
   14492:	2007      	movs	r0, #7
   14494:	4b02      	ldr	r3, [pc, #8]	; (144a0 <configure_extint_channel+0x2c>)
   14496:	4798      	blx	r3
}
   14498:	b004      	add	sp, #16
   1449a:	bd10      	pop	{r4, pc}
   1449c:	0001d6dd 	.word	0x0001d6dd
   144a0:	0001d6f1 	.word	0x0001d6f1

000144a4 <configure_extint_callbacks>:
{
   144a4:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   144a6:	2200      	movs	r2, #0
   144a8:	2107      	movs	r1, #7
   144aa:	4804      	ldr	r0, [pc, #16]	; (144bc <configure_extint_callbacks+0x18>)
   144ac:	4b04      	ldr	r3, [pc, #16]	; (144c0 <configure_extint_callbacks+0x1c>)
   144ae:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   144b0:	2100      	movs	r1, #0
   144b2:	2007      	movs	r0, #7
   144b4:	4b03      	ldr	r3, [pc, #12]	; (144c4 <configure_extint_callbacks+0x20>)
   144b6:	4798      	blx	r3
}
   144b8:	bd10      	pop	{r4, pc}
   144ba:	46c0      	nop			; (mov r8, r8)
   144bc:	00013bd1 	.word	0x00013bd1
   144c0:	0001d599 	.word	0x0001d599
   144c4:	0001d5c5 	.word	0x0001d5c5

000144c8 <WifiGameParse>:
}



void WifiGameParse(void)
{
   144c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   144ca:	b087      	sub	sp, #28
struct GameDataPacket game;
memset(game.game, 0xff, sizeof(game.game));
   144cc:	2214      	movs	r2, #20
   144ce:	21ff      	movs	r1, #255	; 0xff
   144d0:	a801      	add	r0, sp, #4
   144d2:	4b28      	ldr	r3, [pc, #160]	; (14574 <WifiGameParse+0xac>)
   144d4:	4798      	blx	r3

//Parse input. The start string must be '{"game":['
if (strncmp(mqtt_recv_msg, "{\"game\":[", 9) == 0)
   144d6:	2209      	movs	r2, #9
   144d8:	4927      	ldr	r1, [pc, #156]	; (14578 <WifiGameParse+0xb0>)
   144da:	4828      	ldr	r0, [pc, #160]	; (1457c <WifiGameParse+0xb4>)
   144dc:	4b28      	ldr	r3, [pc, #160]	; (14580 <WifiGameParse+0xb8>)
   144de:	4798      	blx	r3
   144e0:	2800      	cmp	r0, #0
   144e2:	d13c      	bne.n	1455e <WifiGameParse+0x96>
	{
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received!\r\n");
   144e4:	4927      	ldr	r1, [pc, #156]	; (14584 <WifiGameParse+0xbc>)
   144e6:	3001      	adds	r0, #1
   144e8:	4d27      	ldr	r5, [pc, #156]	; (14588 <WifiGameParse+0xc0>)
   144ea:	47a8      	blx	r5
		LogMessage(LOG_DEBUG_LVL,"%s",mqtt_recv_msg);
   144ec:	4c23      	ldr	r4, [pc, #140]	; (1457c <WifiGameParse+0xb4>)
   144ee:	0022      	movs	r2, r4
   144f0:	4926      	ldr	r1, [pc, #152]	; (1458c <WifiGameParse+0xc4>)
   144f2:	2001      	movs	r0, #1
   144f4:	47a8      	blx	r5

		int nb = 0;
		char *p = &mqtt_recv_msg[9];
   144f6:	0023      	movs	r3, r4
   144f8:	3309      	adds	r3, #9
   144fa:	9300      	str	r3, [sp, #0]
		while (nb < GAME_SIZE && *p) {
   144fc:	7a63      	ldrb	r3, [r4, #9]
   144fe:	2b00      	cmp	r3, #0
   14500:	d015      	beq.n	1452e <WifiGameParse+0x66>
   14502:	ac01      	add	r4, sp, #4
   14504:	2517      	movs	r5, #23
   14506:	446d      	add	r5, sp
   14508:	481c      	ldr	r0, [pc, #112]	; (1457c <WifiGameParse+0xb4>)
   1450a:	3009      	adds	r0, #9
			game.game[nb++] = strtol(p, &p, 10);
   1450c:	4e20      	ldr	r6, [pc, #128]	; (14590 <WifiGameParse+0xc8>)
   1450e:	220a      	movs	r2, #10
   14510:	4669      	mov	r1, sp
   14512:	47b0      	blx	r6
   14514:	7020      	strb	r0, [r4, #0]
			if (*p != ',')
   14516:	9b00      	ldr	r3, [sp, #0]
   14518:	781a      	ldrb	r2, [r3, #0]
   1451a:	2a2c      	cmp	r2, #44	; 0x2c
   1451c:	d107      	bne.n	1452e <WifiGameParse+0x66>
			break;
			p++; /* skip, */
   1451e:	1c58      	adds	r0, r3, #1
   14520:	9000      	str	r0, [sp, #0]
		while (nb < GAME_SIZE && *p) {
   14522:	42ac      	cmp	r4, r5
   14524:	d003      	beq.n	1452e <WifiGameParse+0x66>
   14526:	3401      	adds	r4, #1
   14528:	785b      	ldrb	r3, [r3, #1]
   1452a:	2b00      	cmp	r3, #0
   1452c:	d1ef      	bne.n	1450e <WifiGameParse+0x46>
		}
		LogMessage(LOG_DEBUG_LVL,"\r\nParsed Command: ");
   1452e:	4919      	ldr	r1, [pc, #100]	; (14594 <WifiGameParse+0xcc>)
   14530:	2001      	movs	r0, #1
   14532:	4b15      	ldr	r3, [pc, #84]	; (14588 <WifiGameParse+0xc0>)
   14534:	4798      	blx	r3
   14536:	ac01      	add	r4, sp, #4
   14538:	af06      	add	r7, sp, #24
		for(int i = 0; i < GAME_SIZE; i++)
		{
			LogMessage(LOG_DEBUG_LVL,"%d,", game.game[i]);
   1453a:	4e17      	ldr	r6, [pc, #92]	; (14598 <WifiGameParse+0xd0>)
   1453c:	4d12      	ldr	r5, [pc, #72]	; (14588 <WifiGameParse+0xc0>)
   1453e:	7822      	ldrb	r2, [r4, #0]
   14540:	0031      	movs	r1, r6
   14542:	2001      	movs	r0, #1
   14544:	47a8      	blx	r5
   14546:	3401      	adds	r4, #1
		for(int i = 0; i < GAME_SIZE; i++)
   14548:	42a7      	cmp	r7, r4
   1454a:	d1f8      	bne.n	1453e <WifiGameParse+0x76>
		}

		if(pdTRUE == ControlAddGameData(&game))
   1454c:	a801      	add	r0, sp, #4
   1454e:	4b13      	ldr	r3, [pc, #76]	; (1459c <WifiGameParse+0xd4>)
   14550:	4798      	blx	r3
   14552:	2801      	cmp	r0, #1
   14554:	d10b      	bne.n	1456e <WifiGameParse+0xa6>
		{
			LogMessage(LOG_DEBUG_LVL,"\r\nSent play to control!\r\n");
   14556:	4912      	ldr	r1, [pc, #72]	; (145a0 <WifiGameParse+0xd8>)
   14558:	4b0b      	ldr	r3, [pc, #44]	; (14588 <WifiGameParse+0xc0>)
   1455a:	4798      	blx	r3
   1455c:	e007      	b.n	1456e <WifiGameParse+0xa6>
		}

	}else
	{
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received but not understood!\r\n");
   1455e:	4911      	ldr	r1, [pc, #68]	; (145a4 <WifiGameParse+0xdc>)
   14560:	2001      	movs	r0, #1
   14562:	4c09      	ldr	r4, [pc, #36]	; (14588 <WifiGameParse+0xc0>)
   14564:	47a0      	blx	r4
		LogMessage(LOG_DEBUG_LVL,"\r\n %s",mqtt_recv_msg);
   14566:	4a05      	ldr	r2, [pc, #20]	; (1457c <WifiGameParse+0xb4>)
   14568:	490f      	ldr	r1, [pc, #60]	; (145a8 <WifiGameParse+0xe0>)
   1456a:	2001      	movs	r0, #1
   1456c:	47a0      	blx	r4
	}




}
   1456e:	b007      	add	sp, #28
   14570:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14572:	46c0      	nop			; (mov r8, r8)
   14574:	0002624b 	.word	0x0002624b
   14578:	00027c2c 	.word	0x00027c2c
   1457c:	20000928 	.word	0x20000928
   14580:	00026611 	.word	0x00026611
   14584:	00027c38 	.word	0x00027c38
   14588:	00018f3d 	.word	0x00018f3d
   1458c:	00027c54 	.word	0x00027c54
   14590:	000267bd 	.word	0x000267bd
   14594:	00027c58 	.word	0x00027c58
   14598:	00027c6c 	.word	0x00027c6c
   1459c:	00012c1d 	.word	0x00012c1d
   145a0:	00027c70 	.word	0x00027c70
   145a4:	00027c8c 	.word	0x00027c8c
   145a8:	00027cbc 	.word	0x00027cbc

000145ac <vWifiTask>:
{
   145ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   145ae:	46c6      	mov	lr, r8
   145b0:	b500      	push	{lr}
   145b2:	b094      	sub	sp, #80	; 0x50
	vTaskDelay(100);
   145b4:	2064      	movs	r0, #100	; 0x64
   145b6:	4bc2      	ldr	r3, [pc, #776]	; (148c0 <vWifiTask+0x314>)
   145b8:	4798      	blx	r3
	down_state = NOT_READY;
   145ba:	2200      	movs	r2, #0
   145bc:	4bc1      	ldr	r3, [pc, #772]	; (148c4 <vWifiTask+0x318>)
   145be:	701a      	strb	r2, [r3, #0]
	xQueueWifiState = xQueueCreate( 5, sizeof( uint32_t ) );
   145c0:	2104      	movs	r1, #4
   145c2:	2005      	movs	r0, #5
   145c4:	4cc0      	ldr	r4, [pc, #768]	; (148c8 <vWifiTask+0x31c>)
   145c6:	47a0      	blx	r4
   145c8:	4dc0      	ldr	r5, [pc, #768]	; (148cc <vWifiTask+0x320>)
   145ca:	6028      	str	r0, [r5, #0]
	xQueueImuBuffer  = xQueueCreate( 5, sizeof( struct ImuDataPacket ) );
   145cc:	2200      	movs	r2, #0
   145ce:	2106      	movs	r1, #6
   145d0:	2005      	movs	r0, #5
   145d2:	47a0      	blx	r4
   145d4:	4bbe      	ldr	r3, [pc, #760]	; (148d0 <vWifiTask+0x324>)
   145d6:	6018      	str	r0, [r3, #0]
	xQueueGameBuffer = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   145d8:	2200      	movs	r2, #0
   145da:	2114      	movs	r1, #20
   145dc:	2002      	movs	r0, #2
   145de:	47a0      	blx	r4
   145e0:	4bbc      	ldr	r3, [pc, #752]	; (148d4 <vWifiTask+0x328>)
   145e2:	6018      	str	r0, [r3, #0]
	xQueueDistanceBuffer = xQueueCreate ( 5, sizeof( uint16_t ) );
   145e4:	2200      	movs	r2, #0
   145e6:	2102      	movs	r1, #2
   145e8:	2005      	movs	r0, #5
   145ea:	47a0      	blx	r4
   145ec:	4bba      	ldr	r3, [pc, #744]	; (148d8 <vWifiTask+0x32c>)
   145ee:	6018      	str	r0, [r3, #0]
	if(xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL)
   145f0:	682b      	ldr	r3, [r5, #0]
   145f2:	2b00      	cmp	r3, #0
   145f4:	d043      	beq.n	1467e <vWifiTask+0xd2>
   145f6:	4bb6      	ldr	r3, [pc, #728]	; (148d0 <vWifiTask+0x324>)
   145f8:	681b      	ldr	r3, [r3, #0]
   145fa:	2b00      	cmp	r3, #0
   145fc:	d03f      	beq.n	1467e <vWifiTask+0xd2>
   145fe:	4bb5      	ldr	r3, [pc, #724]	; (148d4 <vWifiTask+0x328>)
   14600:	681b      	ldr	r3, [r3, #0]
   14602:	2b00      	cmp	r3, #0
   14604:	d03b      	beq.n	1467e <vWifiTask+0xd2>
   14606:	2800      	cmp	r0, #0
   14608:	d039      	beq.n	1467e <vWifiTask+0xd2>
	SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1460a:	48b4      	ldr	r0, [pc, #720]	; (148dc <vWifiTask+0x330>)
   1460c:	4bb4      	ldr	r3, [pc, #720]	; (148e0 <vWifiTask+0x334>)
   1460e:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
   14610:	a807      	add	r0, sp, #28
   14612:	4bb4      	ldr	r3, [pc, #720]	; (148e4 <vWifiTask+0x338>)
   14614:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   14616:	4cb4      	ldr	r4, [pc, #720]	; (148e8 <vWifiTask+0x33c>)
   14618:	a907      	add	r1, sp, #28
   1461a:	0020      	movs	r0, r4
   1461c:	4bb3      	ldr	r3, [pc, #716]	; (148ec <vWifiTask+0x340>)
   1461e:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   14620:	0020      	movs	r0, r4
   14622:	4bb3      	ldr	r3, [pc, #716]	; (148f0 <vWifiTask+0x344>)
   14624:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   14626:	a807      	add	r0, sp, #28
   14628:	4bb2      	ldr	r3, [pc, #712]	; (148f4 <vWifiTask+0x348>)
   1462a:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1462c:	2380      	movs	r3, #128	; 0x80
   1462e:	009b      	lsls	r3, r3, #2
   14630:	930b      	str	r3, [sp, #44]	; 0x2c
	httpc_conf.timer_inst = &swt_module_inst;
   14632:	9408      	str	r4, [sp, #32]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   14634:	a907      	add	r1, sp, #28
   14636:	48b0      	ldr	r0, [pc, #704]	; (148f8 <vWifiTask+0x34c>)
   14638:	4bb0      	ldr	r3, [pc, #704]	; (148fc <vWifiTask+0x350>)
   1463a:	4798      	blx	r3
   1463c:	1e02      	subs	r2, r0, #0
	if (ret < 0) {
   1463e:	db22      	blt.n	14686 <vWifiTask+0xda>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   14640:	49af      	ldr	r1, [pc, #700]	; (14900 <vWifiTask+0x354>)
   14642:	48ad      	ldr	r0, [pc, #692]	; (148f8 <vWifiTask+0x34c>)
   14644:	4baf      	ldr	r3, [pc, #700]	; (14904 <vWifiTask+0x358>)
   14646:	4798      	blx	r3
	configure_mqtt();
   14648:	4baf      	ldr	r3, [pc, #700]	; (14908 <vWifiTask+0x35c>)
   1464a:	4798      	blx	r3
	init_storage();
   1464c:	4baf      	ldr	r3, [pc, #700]	; (1490c <vWifiTask+0x360>)
   1464e:	4798      	blx	r3
	configure_extint_channel();
   14650:	4baf      	ldr	r3, [pc, #700]	; (14910 <vWifiTask+0x364>)
   14652:	4798      	blx	r3
	configure_extint_callbacks();
   14654:	4baf      	ldr	r3, [pc, #700]	; (14914 <vWifiTask+0x368>)
   14656:	4798      	blx	r3
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   14658:	2218      	movs	r2, #24
   1465a:	2100      	movs	r1, #0
   1465c:	a80e      	add	r0, sp, #56	; 0x38
   1465e:	4bae      	ldr	r3, [pc, #696]	; (14918 <vWifiTask+0x36c>)
   14660:	4798      	blx	r3
	nm_bsp_init();
   14662:	4bae      	ldr	r3, [pc, #696]	; (1491c <vWifiTask+0x370>)
   14664:	4798      	blx	r3
	param.pfAppWifiCb = wifi_cb;
   14666:	4bae      	ldr	r3, [pc, #696]	; (14920 <vWifiTask+0x374>)
   14668:	930e      	str	r3, [sp, #56]	; 0x38
	ret = m2m_wifi_init(&param);
   1466a:	a80e      	add	r0, sp, #56	; 0x38
   1466c:	4bad      	ldr	r3, [pc, #692]	; (14924 <vWifiTask+0x378>)
   1466e:	4798      	blx	r3
   14670:	1e02      	subs	r2, r0, #0
	if (M2M_SUCCESS != ret) {
   14672:	d00d      	beq.n	14690 <vWifiTask+0xe4>
		LogMessage(LOG_DEBUG_LVL,"main: m2m_wifi_init call error! (res %d)\r\n", ret);
   14674:	49ac      	ldr	r1, [pc, #688]	; (14928 <vWifiTask+0x37c>)
   14676:	2001      	movs	r0, #1
   14678:	4bac      	ldr	r3, [pc, #688]	; (1492c <vWifiTask+0x380>)
   1467a:	4798      	blx	r3
   1467c:	e7fe      	b.n	1467c <vWifiTask+0xd0>
		SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   1467e:	48ac      	ldr	r0, [pc, #688]	; (14930 <vWifiTask+0x384>)
   14680:	4b97      	ldr	r3, [pc, #604]	; (148e0 <vWifiTask+0x334>)
   14682:	4798      	blx	r3
   14684:	e7c1      	b.n	1460a <vWifiTask+0x5e>
		LogMessage(LOG_DEBUG_LVL,"configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   14686:	49ab      	ldr	r1, [pc, #684]	; (14934 <vWifiTask+0x388>)
   14688:	2001      	movs	r0, #1
   1468a:	4ba8      	ldr	r3, [pc, #672]	; (1492c <vWifiTask+0x380>)
   1468c:	4798      	blx	r3
   1468e:	e7fe      	b.n	1468e <vWifiTask+0xe2>
	LogMessage(LOG_DEBUG_LVL,"main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   14690:	4ca9      	ldr	r4, [pc, #676]	; (14938 <vWifiTask+0x38c>)
   14692:	0022      	movs	r2, r4
   14694:	49a9      	ldr	r1, [pc, #676]	; (1493c <vWifiTask+0x390>)
   14696:	2001      	movs	r0, #1
   14698:	4ba4      	ldr	r3, [pc, #656]	; (1492c <vWifiTask+0x380>)
   1469a:	4798      	blx	r3
	socketInit();
   1469c:	4ba8      	ldr	r3, [pc, #672]	; (14940 <vWifiTask+0x394>)
   1469e:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   146a0:	49a8      	ldr	r1, [pc, #672]	; (14944 <vWifiTask+0x398>)
   146a2:	48a9      	ldr	r0, [pc, #676]	; (14948 <vWifiTask+0x39c>)
   146a4:	4ba9      	ldr	r3, [pc, #676]	; (1494c <vWifiTask+0x3a0>)
   146a6:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   146a8:	23ff      	movs	r3, #255	; 0xff
   146aa:	9300      	str	r3, [sp, #0]
   146ac:	4ba8      	ldr	r3, [pc, #672]	; (14950 <vWifiTask+0x3a4>)
   146ae:	2201      	movs	r2, #1
   146b0:	210a      	movs	r1, #10
   146b2:	0020      	movs	r0, r4
   146b4:	4ca7      	ldr	r4, [pc, #668]	; (14954 <vWifiTask+0x3a8>)
   146b6:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   146b8:	4b82      	ldr	r3, [pc, #520]	; (148c4 <vWifiTask+0x318>)
   146ba:	781b      	ldrb	r3, [r3, #0]
	while (!(is_state_set(WIFI_CONNECTED)))
   146bc:	079b      	lsls	r3, r3, #30
   146be:	d40a      	bmi.n	146d6 <vWifiTask+0x12a>
		m2m_wifi_handle_events(NULL);
   146c0:	4ea5      	ldr	r6, [pc, #660]	; (14958 <vWifiTask+0x3ac>)
		sw_timer_task(&swt_module_inst);
   146c2:	4d89      	ldr	r5, [pc, #548]	; (148e8 <vWifiTask+0x33c>)
   146c4:	4ca5      	ldr	r4, [pc, #660]	; (1495c <vWifiTask+0x3b0>)
		m2m_wifi_handle_events(NULL);
   146c6:	2000      	movs	r0, #0
   146c8:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   146ca:	0028      	movs	r0, r5
   146cc:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   146ce:	4b7d      	ldr	r3, [pc, #500]	; (148c4 <vWifiTask+0x318>)
   146d0:	781b      	ldrb	r3, [r3, #0]
	while (!(is_state_set(WIFI_CONNECTED)))
   146d2:	079b      	lsls	r3, r3, #30
   146d4:	d5f7      	bpl.n	146c6 <vWifiTask+0x11a>
	vTaskDelay(1000);
   146d6:	20fa      	movs	r0, #250	; 0xfa
   146d8:	0080      	lsls	r0, r0, #2
   146da:	4b79      	ldr	r3, [pc, #484]	; (148c0 <vWifiTask+0x314>)
   146dc:	4798      	blx	r3
	wifiStateMachine = WIFI_MQTT_HANDLE;
   146de:	2201      	movs	r2, #1
   146e0:	4b9f      	ldr	r3, [pc, #636]	; (14960 <vWifiTask+0x3b4>)
   146e2:	701a      	strb	r2, [r3, #0]
	switch(wifiStateMachine)
   146e4:	001e      	movs	r6, r3
			m2m_wifi_handle_events(NULL);
   146e6:	4b9c      	ldr	r3, [pc, #624]	; (14958 <vWifiTask+0x3ac>)
   146e8:	4698      	mov	r8, r3
   146ea:	e032      	b.n	14752 <vWifiTask+0x1a6>
	switch(wifiStateMachine)
   146ec:	2b00      	cmp	r3, #0
   146ee:	d000      	beq.n	146f2 <vWifiTask+0x146>
   146f0:	e1d8      	b.n	14aa4 <vWifiTask+0x4f8>
				socketDeinit();
   146f2:	4b9c      	ldr	r3, [pc, #624]	; (14964 <vWifiTask+0x3b8>)
   146f4:	4798      	blx	r3
				configure_mqtt();
   146f6:	4b84      	ldr	r3, [pc, #528]	; (14908 <vWifiTask+0x35c>)
   146f8:	4798      	blx	r3
				registerSocketCallback(socket_event_handler, socket_resolve_handler);
   146fa:	4992      	ldr	r1, [pc, #584]	; (14944 <vWifiTask+0x398>)
   146fc:	4892      	ldr	r0, [pc, #584]	; (14948 <vWifiTask+0x39c>)
   146fe:	4b93      	ldr	r3, [pc, #588]	; (1494c <vWifiTask+0x3a0>)
   14700:	4798      	blx	r3
				socketInit();
   14702:	4b8f      	ldr	r3, [pc, #572]	; (14940 <vWifiTask+0x394>)
   14704:	4798      	blx	r3
				if(!(mqtt_inst.isConnected))
   14706:	2334      	movs	r3, #52	; 0x34
   14708:	4a97      	ldr	r2, [pc, #604]	; (14968 <vWifiTask+0x3bc>)
   1470a:	5cd3      	ldrb	r3, [r2, r3]
   1470c:	2b00      	cmp	r3, #0
   1470e:	d004      	beq.n	1471a <vWifiTask+0x16e>
					LogMessage(LOG_DEBUG_LVL,"Connected to MQTT Broker!\r\n");
   14710:	4996      	ldr	r1, [pc, #600]	; (1496c <vWifiTask+0x3c0>)
   14712:	2001      	movs	r0, #1
   14714:	4b85      	ldr	r3, [pc, #532]	; (1492c <vWifiTask+0x380>)
   14716:	4798      	blx	r3
   14718:	e00a      	b.n	14730 <vWifiTask+0x184>
				if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   1471a:	4995      	ldr	r1, [pc, #596]	; (14970 <vWifiTask+0x3c4>)
   1471c:	0010      	movs	r0, r2
   1471e:	4b95      	ldr	r3, [pc, #596]	; (14974 <vWifiTask+0x3c8>)
   14720:	4798      	blx	r3
   14722:	2800      	cmp	r0, #0
   14724:	d157      	bne.n	147d6 <vWifiTask+0x22a>
				if(mqtt_inst.isConnected)
   14726:	2334      	movs	r3, #52	; 0x34
   14728:	4a8f      	ldr	r2, [pc, #572]	; (14968 <vWifiTask+0x3bc>)
   1472a:	5cd3      	ldrb	r3, [r2, r3]
   1472c:	2b00      	cmp	r3, #0
   1472e:	d1ef      	bne.n	14710 <vWifiTask+0x164>
				wifiStateMachine = WIFI_MQTT_HANDLE;
   14730:	2201      	movs	r2, #1
   14732:	4b8b      	ldr	r3, [pc, #556]	; (14960 <vWifiTask+0x3b4>)
   14734:	701a      	strb	r2, [r3, #0]
	uint8_t DataToReceive = 0;
   14736:	a907      	add	r1, sp, #28
   14738:	2300      	movs	r3, #0
   1473a:	700b      	strb	r3, [r1, #0]
	if (pdPASS == xQueueReceive( xQueueWifiState, &DataToReceive, 0 ))
   1473c:	4b63      	ldr	r3, [pc, #396]	; (148cc <vWifiTask+0x320>)
   1473e:	6818      	ldr	r0, [r3, #0]
   14740:	2200      	movs	r2, #0
   14742:	4b8d      	ldr	r3, [pc, #564]	; (14978 <vWifiTask+0x3cc>)
   14744:	4798      	blx	r3
   14746:	2801      	cmp	r0, #1
   14748:	d100      	bne.n	1474c <vWifiTask+0x1a0>
   1474a:	e1af      	b.n	14aac <vWifiTask+0x500>
	vTaskDelay(100);	
   1474c:	2064      	movs	r0, #100	; 0x64
   1474e:	4b5c      	ldr	r3, [pc, #368]	; (148c0 <vWifiTask+0x314>)
   14750:	4798      	blx	r3
	switch(wifiStateMachine)
   14752:	7833      	ldrb	r3, [r6, #0]
   14754:	2b01      	cmp	r3, #1
   14756:	d043      	beq.n	147e0 <vWifiTask+0x234>
   14758:	b25a      	sxtb	r2, r3
   1475a:	2a01      	cmp	r2, #1
   1475c:	ddc6      	ble.n	146ec <vWifiTask+0x140>
   1475e:	2b02      	cmp	r3, #2
   14760:	d100      	bne.n	14764 <vWifiTask+0x1b8>
   14762:	e172      	b.n	14a4a <vWifiTask+0x49e>
   14764:	2b03      	cmp	r3, #3
   14766:	d000      	beq.n	1476a <vWifiTask+0x1be>
   14768:	e19c      	b.n	14aa4 <vWifiTask+0x4f8>
	return ((down_state & mask) != 0);
   1476a:	4b56      	ldr	r3, [pc, #344]	; (148c4 <vWifiTask+0x318>)
			while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1476c:	781b      	ldrb	r3, [r3, #0]
   1476e:	2230      	movs	r2, #48	; 0x30
   14770:	421a      	tst	r2, r3
   14772:	d10b      	bne.n	1478c <vWifiTask+0x1e0>
				m2m_wifi_handle_events(NULL);
   14774:	4d78      	ldr	r5, [pc, #480]	; (14958 <vWifiTask+0x3ac>)
				sw_timer_task(&swt_module_inst);
   14776:	4c5c      	ldr	r4, [pc, #368]	; (148e8 <vWifiTask+0x33c>)
   14778:	4f78      	ldr	r7, [pc, #480]	; (1495c <vWifiTask+0x3b0>)
				m2m_wifi_handle_events(NULL);
   1477a:	2000      	movs	r0, #0
   1477c:	47a8      	blx	r5
				sw_timer_task(&swt_module_inst);
   1477e:	0020      	movs	r0, r4
   14780:	47b8      	blx	r7
	return ((down_state & mask) != 0);
   14782:	4b50      	ldr	r3, [pc, #320]	; (148c4 <vWifiTask+0x318>)
			while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   14784:	781b      	ldrb	r3, [r3, #0]
   14786:	2230      	movs	r2, #48	; 0x30
   14788:	421a      	tst	r2, r3
   1478a:	d0f6      	beq.n	1477a <vWifiTask+0x1ce>
			LogMessage(LOG_DEBUG_LVL,"main: please unplug the SD/MMC card.\r\n");
   1478c:	497b      	ldr	r1, [pc, #492]	; (1497c <vWifiTask+0x3d0>)
   1478e:	2001      	movs	r0, #1
   14790:	4c66      	ldr	r4, [pc, #408]	; (1492c <vWifiTask+0x380>)
   14792:	47a0      	blx	r4
			LogMessage(LOG_DEBUG_LVL,"main: done.\r\n");
   14794:	497a      	ldr	r1, [pc, #488]	; (14980 <vWifiTask+0x3d4>)
   14796:	2001      	movs	r0, #1
   14798:	47a0      	blx	r4
			socketDeinit();
   1479a:	4b72      	ldr	r3, [pc, #456]	; (14964 <vWifiTask+0x3b8>)
   1479c:	4798      	blx	r3
			vTaskDelay(1000);
   1479e:	20fa      	movs	r0, #250	; 0xfa
   147a0:	0080      	lsls	r0, r0, #2
   147a2:	4b47      	ldr	r3, [pc, #284]	; (148c0 <vWifiTask+0x314>)
   147a4:	4798      	blx	r3
			do_download_flag = false;
   147a6:	2200      	movs	r2, #0
   147a8:	4b76      	ldr	r3, [pc, #472]	; (14984 <vWifiTask+0x3d8>)
   147aa:	701a      	strb	r2, [r3, #0]
			char test_file_name[] = "0:FlagA.txt";
   147ac:	a907      	add	r1, sp, #28
   147ae:	4b76      	ldr	r3, [pc, #472]	; (14988 <vWifiTask+0x3dc>)
   147b0:	000a      	movs	r2, r1
   147b2:	cb31      	ldmia	r3!, {r0, r4, r5}
   147b4:	c231      	stmia	r2!, {r0, r4, r5}
			FRESULT res = f_open(&file_object,
   147b6:	220a      	movs	r2, #10
   147b8:	4874      	ldr	r0, [pc, #464]	; (1498c <vWifiTask+0x3e0>)
   147ba:	4b75      	ldr	r3, [pc, #468]	; (14990 <vWifiTask+0x3e4>)
   147bc:	4798      	blx	r3
			if (res != FR_OK)
   147be:	2800      	cmp	r0, #0
   147c0:	d100      	bne.n	147c4 <vWifiTask+0x218>
   147c2:	e16b      	b.n	14a9c <vWifiTask+0x4f0>
				LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
   147c4:	0002      	movs	r2, r0
   147c6:	4973      	ldr	r1, [pc, #460]	; (14994 <vWifiTask+0x3e8>)
   147c8:	2000      	movs	r0, #0
   147ca:	4b58      	ldr	r3, [pc, #352]	; (1492c <vWifiTask+0x380>)
   147cc:	4798      	blx	r3
			wifiStateMachine = WIFI_MQTT_INIT;
   147ce:	2200      	movs	r2, #0
   147d0:	4b63      	ldr	r3, [pc, #396]	; (14960 <vWifiTask+0x3b4>)
   147d2:	701a      	strb	r2, [r3, #0]
   147d4:	e7af      	b.n	14736 <vWifiTask+0x18a>
						LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   147d6:	4970      	ldr	r1, [pc, #448]	; (14998 <vWifiTask+0x3ec>)
   147d8:	2001      	movs	r0, #1
   147da:	4b54      	ldr	r3, [pc, #336]	; (1492c <vWifiTask+0x380>)
   147dc:	4798      	blx	r3
   147de:	e7a2      	b.n	14726 <vWifiTask+0x17a>
			m2m_wifi_handle_events(NULL);
   147e0:	2000      	movs	r0, #0
   147e2:	47c0      	blx	r8
			sw_timer_task(&swt_module_inst);
   147e4:	4840      	ldr	r0, [pc, #256]	; (148e8 <vWifiTask+0x33c>)
   147e6:	4b5d      	ldr	r3, [pc, #372]	; (1495c <vWifiTask+0x3b0>)
   147e8:	4798      	blx	r3
			if (pdPASS == xQueueReceive( xQueueImuBuffer , &imuDataVar, 0 ))
   147ea:	4b39      	ldr	r3, [pc, #228]	; (148d0 <vWifiTask+0x324>)
   147ec:	6818      	ldr	r0, [r3, #0]
   147ee:	2200      	movs	r2, #0
   147f0:	a905      	add	r1, sp, #20
   147f2:	4b61      	ldr	r3, [pc, #388]	; (14978 <vWifiTask+0x3cc>)
   147f4:	4798      	blx	r3
   147f6:	2801      	cmp	r0, #1
   147f8:	d020      	beq.n	1483c <vWifiTask+0x290>
			} if (pdPASS == xQueueReceive( xQueueDistanceBuffer , &distBuffer, 0 ))
   147fa:	4b37      	ldr	r3, [pc, #220]	; (148d8 <vWifiTask+0x32c>)
   147fc:	6818      	ldr	r0, [r3, #0]
   147fe:	2200      	movs	r2, #0
   14800:	210a      	movs	r1, #10
   14802:	4469      	add	r1, sp
   14804:	4b5c      	ldr	r3, [pc, #368]	; (14978 <vWifiTask+0x3cc>)
   14806:	4798      	blx	r3
   14808:	2801      	cmp	r0, #1
   1480a:	d034      	beq.n	14876 <vWifiTask+0x2ca>
			} if  (pdPASS == xQueueReceive( xQueueGameBuffer , &gamePacket, 0 ))
   1480c:	4b31      	ldr	r3, [pc, #196]	; (148d4 <vWifiTask+0x328>)
   1480e:	6818      	ldr	r0, [r3, #0]
   14810:	2200      	movs	r2, #0
   14812:	a907      	add	r1, sp, #28
   14814:	4b58      	ldr	r3, [pc, #352]	; (14978 <vWifiTask+0x3cc>)
   14816:	4798      	blx	r3
   14818:	2801      	cmp	r0, #1
   1481a:	d043      	beq.n	148a4 <vWifiTask+0x2f8>
			if(mqtt_inst.isConnected)
   1481c:	2334      	movs	r3, #52	; 0x34
   1481e:	4a52      	ldr	r2, [pc, #328]	; (14968 <vWifiTask+0x3bc>)
   14820:	5cd3      	ldrb	r3, [r2, r3]
   14822:	2b00      	cmp	r3, #0
   14824:	d000      	beq.n	14828 <vWifiTask+0x27c>
   14826:	e10b      	b.n	14a40 <vWifiTask+0x494>
			if(	flagParseGameIn == true)
   14828:	4b5c      	ldr	r3, [pc, #368]	; (1499c <vWifiTask+0x3f0>)
   1482a:	781b      	ldrb	r3, [r3, #0]
   1482c:	2b00      	cmp	r3, #0
   1482e:	d082      	beq.n	14736 <vWifiTask+0x18a>
					flagParseGameIn = false;
   14830:	2200      	movs	r2, #0
   14832:	4b5a      	ldr	r3, [pc, #360]	; (1499c <vWifiTask+0x3f0>)
   14834:	701a      	strb	r2, [r3, #0]
					WifiGameParse();
   14836:	4b5a      	ldr	r3, [pc, #360]	; (149a0 <vWifiTask+0x3f4>)
   14838:	4798      	blx	r3
   1483a:	e77c      	b.n	14736 <vWifiTask+0x18a>
				snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   1483c:	aa05      	add	r2, sp, #20
   1483e:	2100      	movs	r1, #0
   14840:	5e53      	ldrsh	r3, [r2, r1]
   14842:	4c58      	ldr	r4, [pc, #352]	; (149a4 <vWifiTask+0x3f8>)
   14844:	2004      	movs	r0, #4
   14846:	5e11      	ldrsh	r1, [r2, r0]
   14848:	9101      	str	r1, [sp, #4]
   1484a:	2102      	movs	r1, #2
   1484c:	5e52      	ldrsh	r2, [r2, r1]
   1484e:	9200      	str	r2, [sp, #0]
   14850:	4a55      	ldr	r2, [pc, #340]	; (149a8 <vWifiTask+0x3fc>)
   14852:	213f      	movs	r1, #63	; 0x3f
   14854:	0020      	movs	r0, r4
   14856:	4f55      	ldr	r7, [pc, #340]	; (149ac <vWifiTask+0x400>)
   14858:	47b8      	blx	r7
				mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1485a:	0020      	movs	r0, r4
   1485c:	4b54      	ldr	r3, [pc, #336]	; (149b0 <vWifiTask+0x404>)
   1485e:	4798      	blx	r3
   14860:	0003      	movs	r3, r0
   14862:	2200      	movs	r2, #0
   14864:	9201      	str	r2, [sp, #4]
   14866:	3201      	adds	r2, #1
   14868:	9200      	str	r2, [sp, #0]
   1486a:	0022      	movs	r2, r4
   1486c:	4951      	ldr	r1, [pc, #324]	; (149b4 <vWifiTask+0x408>)
   1486e:	483e      	ldr	r0, [pc, #248]	; (14968 <vWifiTask+0x3bc>)
   14870:	4c51      	ldr	r4, [pc, #324]	; (149b8 <vWifiTask+0x40c>)
   14872:	47a0      	blx	r4
   14874:	e7c1      	b.n	147fa <vWifiTask+0x24e>
				snprintf(mqtt_msg, 63, "{\"distance\":%u}", distBuffer);
   14876:	230a      	movs	r3, #10
   14878:	446b      	add	r3, sp
   1487a:	881b      	ldrh	r3, [r3, #0]
   1487c:	4c49      	ldr	r4, [pc, #292]	; (149a4 <vWifiTask+0x3f8>)
   1487e:	4a4f      	ldr	r2, [pc, #316]	; (149bc <vWifiTask+0x410>)
   14880:	213f      	movs	r1, #63	; 0x3f
   14882:	0020      	movs	r0, r4
   14884:	4f49      	ldr	r7, [pc, #292]	; (149ac <vWifiTask+0x400>)
   14886:	47b8      	blx	r7
				mqtt_publish(&mqtt_inst, DISTANCE_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14888:	0020      	movs	r0, r4
   1488a:	4b49      	ldr	r3, [pc, #292]	; (149b0 <vWifiTask+0x404>)
   1488c:	4798      	blx	r3
   1488e:	0003      	movs	r3, r0
   14890:	2200      	movs	r2, #0
   14892:	9201      	str	r2, [sp, #4]
   14894:	3201      	adds	r2, #1
   14896:	9200      	str	r2, [sp, #0]
   14898:	0022      	movs	r2, r4
   1489a:	4949      	ldr	r1, [pc, #292]	; (149c0 <vWifiTask+0x414>)
   1489c:	4832      	ldr	r0, [pc, #200]	; (14968 <vWifiTask+0x3bc>)
   1489e:	4c46      	ldr	r4, [pc, #280]	; (149b8 <vWifiTask+0x40c>)
   148a0:	47a0      	blx	r4
   148a2:	e7b3      	b.n	1480c <vWifiTask+0x260>
				snprintf(mqtt_msg, 63, "{\"game\":[");
   148a4:	4a3f      	ldr	r2, [pc, #252]	; (149a4 <vWifiTask+0x3f8>)
   148a6:	4b47      	ldr	r3, [pc, #284]	; (149c4 <vWifiTask+0x418>)
   148a8:	cb03      	ldmia	r3!, {r0, r1}
   148aa:	c203      	stmia	r2!, {r0, r1}
   148ac:	881b      	ldrh	r3, [r3, #0]
   148ae:	8013      	strh	r3, [r2, #0]
					if(gamePacket.game[iter] != 0xFF)
   148b0:	ab07      	add	r3, sp, #28
   148b2:	781f      	ldrb	r7, [r3, #0]
   148b4:	2fff      	cmp	r7, #255	; 0xff
   148b6:	d100      	bne.n	148ba <vWifiTask+0x30e>
   148b8:	e09c      	b.n	149f4 <vWifiTask+0x448>
   148ba:	2400      	movs	r4, #0
						snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   148bc:	4d3b      	ldr	r5, [pc, #236]	; (149ac <vWifiTask+0x400>)
   148be:	e089      	b.n	149d4 <vWifiTask+0x428>
   148c0:	00018045 	.word	0x00018045
   148c4:	2000048c 	.word	0x2000048c
   148c8:	00016a7d 	.word	0x00016a7d
   148cc:	20000b8c 	.word	0x20000b8c
   148d0:	20000b88 	.word	0x20000b88
   148d4:	20000b84 	.word	0x20000b84
   148d8:	20000b80 	.word	0x20000b80
   148dc:	00028310 	.word	0x00028310
   148e0:	00018e8d 	.word	0x00018e8d
   148e4:	00023bc9 	.word	0x00023bc9
   148e8:	200042fc 	.word	0x200042fc
   148ec:	00023bd5 	.word	0x00023bd5
   148f0:	00023c81 	.word	0x00023c81
   148f4:	00022be1 	.word	0x00022be1
   148f8:	20004354 	.word	0x20004354
   148fc:	00022c09 	.word	0x00022c09
   14900:	000141c9 	.word	0x000141c9
   14904:	00022cbd 	.word	0x00022cbd
   14908:	00013d35 	.word	0x00013d35
   1490c:	000143c9 	.word	0x000143c9
   14910:	00014475 	.word	0x00014475
   14914:	000144a5 	.word	0x000144a5
   14918:	0002624b 	.word	0x0002624b
   1491c:	0001a0d1 	.word	0x0001a0d1
   14920:	000142c1 	.word	0x000142c1
   14924:	0001aff5 	.word	0x0001aff5
   14928:	00028374 	.word	0x00028374
   1492c:	00018f3d 	.word	0x00018f3d
   14930:	000282e8 	.word	0x000282e8
   14934:	0002832c 	.word	0x0002832c
   14938:	00028514 	.word	0x00028514
   1493c:	000283a0 	.word	0x000283a0
   14940:	0001ce65 	.word	0x0001ce65
   14944:	00013d1d 	.word	0x00013d1d
   14948:	00013d29 	.word	0x00013d29
   1494c:	0001cee5 	.word	0x0001cee5
   14950:	00028078 	.word	0x00028078
   14954:	0001b399 	.word	0x0001b399
   14958:	0001b121 	.word	0x0001b121
   1495c:	00023d09 	.word	0x00023d09
   14960:	20000b7c 	.word	0x20000b7c
   14964:	0001cea9 	.word	0x0001cea9
   14968:	200006f0 	.word	0x200006f0
   1496c:	000283c4 	.word	0x000283c4
   14970:	00027f08 	.word	0x00027f08
   14974:	0002216d 	.word	0x0002216d
   14978:	00017255 	.word	0x00017255
   1497c:	00028468 	.word	0x00028468
   14980:	00028490 	.word	0x00028490
   14984:	2000048b 	.word	0x2000048b
   14988:	000284c4 	.word	0x000284c4
   1498c:	200006c0 	.word	0x200006c0
   14990:	000210dd 	.word	0x000210dd
   14994:	000284a0 	.word	0x000284a0
   14998:	00028548 	.word	0x00028548
   1499c:	200006e4 	.word	0x200006e4
   149a0:	000144c9 	.word	0x000144c9
   149a4:	20000010 	.word	0x20000010
   149a8:	000283e0 	.word	0x000283e0
   149ac:	000264a5 	.word	0x000264a5
   149b0:	00026603 	.word	0x00026603
   149b4:	00028404 	.word	0x00028404
   149b8:	00022261 	.word	0x00022261
   149bc:	00028418 	.word	0x00028418
   149c0:	00028428 	.word	0x00028428
   149c4:	00027c2c 	.word	0x00027c2c
							snprintf(numGame, 5, ",");
   149c8:	a903      	add	r1, sp, #12
   149ca:	232c      	movs	r3, #44	; 0x2c
   149cc:	800b      	strh	r3, [r1, #0]
							strcat(mqtt_msg, numGame);
   149ce:	483a      	ldr	r0, [pc, #232]	; (14ab8 <vWifiTask+0x50c>)
   149d0:	4b3a      	ldr	r3, [pc, #232]	; (14abc <vWifiTask+0x510>)
   149d2:	4798      	blx	r3
						snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   149d4:	003b      	movs	r3, r7
   149d6:	4a3a      	ldr	r2, [pc, #232]	; (14ac0 <vWifiTask+0x514>)
   149d8:	2103      	movs	r1, #3
   149da:	a803      	add	r0, sp, #12
   149dc:	47a8      	blx	r5
						strcat(mqtt_msg, numGame);
   149de:	a903      	add	r1, sp, #12
   149e0:	4835      	ldr	r0, [pc, #212]	; (14ab8 <vWifiTask+0x50c>)
   149e2:	4b36      	ldr	r3, [pc, #216]	; (14abc <vWifiTask+0x510>)
   149e4:	4798      	blx	r3
						if(gamePacket.game[iter+1] != 0xFF && iter+1 <GAME_SIZE)
   149e6:	3401      	adds	r4, #1
   149e8:	ab07      	add	r3, sp, #28
   149ea:	5ce7      	ldrb	r7, [r4, r3]
   149ec:	2fff      	cmp	r7, #255	; 0xff
   149ee:	d001      	beq.n	149f4 <vWifiTask+0x448>
   149f0:	2c14      	cmp	r4, #20
   149f2:	d1e9      	bne.n	149c8 <vWifiTask+0x41c>
				strcat(mqtt_msg, "]}");
   149f4:	4c30      	ldr	r4, [pc, #192]	; (14ab8 <vWifiTask+0x50c>)
   149f6:	0020      	movs	r0, r4
   149f8:	4d32      	ldr	r5, [pc, #200]	; (14ac4 <vWifiTask+0x518>)
   149fa:	47a8      	blx	r5
   149fc:	1820      	adds	r0, r4, r0
   149fe:	2203      	movs	r2, #3
   14a00:	4931      	ldr	r1, [pc, #196]	; (14ac8 <vWifiTask+0x51c>)
   14a02:	4b32      	ldr	r3, [pc, #200]	; (14acc <vWifiTask+0x520>)
   14a04:	4798      	blx	r3
				LogMessage(LOG_DEBUG_LVL,mqtt_msg);LogMessage(LOG_DEBUG_LVL,"\r\n");
   14a06:	0021      	movs	r1, r4
   14a08:	2001      	movs	r0, #1
   14a0a:	4f31      	ldr	r7, [pc, #196]	; (14ad0 <vWifiTask+0x524>)
   14a0c:	47b8      	blx	r7
   14a0e:	4931      	ldr	r1, [pc, #196]	; (14ad4 <vWifiTask+0x528>)
   14a10:	2001      	movs	r0, #1
   14a12:	47b8      	blx	r7
				vTaskSuspendAll( );
   14a14:	4b30      	ldr	r3, [pc, #192]	; (14ad8 <vWifiTask+0x52c>)
   14a16:	4798      	blx	r3
				int rc = mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   14a18:	0020      	movs	r0, r4
   14a1a:	47a8      	blx	r5
   14a1c:	0003      	movs	r3, r0
   14a1e:	2200      	movs	r2, #0
   14a20:	9201      	str	r2, [sp, #4]
   14a22:	3201      	adds	r2, #1
   14a24:	9200      	str	r2, [sp, #0]
   14a26:	0022      	movs	r2, r4
   14a28:	492c      	ldr	r1, [pc, #176]	; (14adc <vWifiTask+0x530>)
   14a2a:	482d      	ldr	r0, [pc, #180]	; (14ae0 <vWifiTask+0x534>)
   14a2c:	4c2d      	ldr	r4, [pc, #180]	; (14ae4 <vWifiTask+0x538>)
   14a2e:	47a0      	blx	r4
   14a30:	0004      	movs	r4, r0
				xTaskResumeAll();
   14a32:	4b2d      	ldr	r3, [pc, #180]	; (14ae8 <vWifiTask+0x53c>)
   14a34:	4798      	blx	r3
				LogMessage(LOG_DEBUG_LVL,"rc = %d\r\n", rc);
   14a36:	0022      	movs	r2, r4
   14a38:	492c      	ldr	r1, [pc, #176]	; (14aec <vWifiTask+0x540>)
   14a3a:	2001      	movs	r0, #1
   14a3c:	47b8      	blx	r7
   14a3e:	e6ed      	b.n	1481c <vWifiTask+0x270>
				mqtt_yield(&mqtt_inst, 100);
   14a40:	2164      	movs	r1, #100	; 0x64
   14a42:	0010      	movs	r0, r2
   14a44:	4b2a      	ldr	r3, [pc, #168]	; (14af0 <vWifiTask+0x544>)
   14a46:	4798      	blx	r3
   14a48:	e6ee      	b.n	14828 <vWifiTask+0x27c>
				if(mqtt_disconnect(&mqtt_inst, main_mqtt_broker))
   14a4a:	492a      	ldr	r1, [pc, #168]	; (14af4 <vWifiTask+0x548>)
   14a4c:	4824      	ldr	r0, [pc, #144]	; (14ae0 <vWifiTask+0x534>)
   14a4e:	4b2a      	ldr	r3, [pc, #168]	; (14af8 <vWifiTask+0x54c>)
   14a50:	4798      	blx	r3
   14a52:	2800      	cmp	r0, #0
   14a54:	d11d      	bne.n	14a92 <vWifiTask+0x4e6>
				while((mqtt_inst.isConnected))
   14a56:	2334      	movs	r3, #52	; 0x34
   14a58:	4a21      	ldr	r2, [pc, #132]	; (14ae0 <vWifiTask+0x534>)
   14a5a:	5cd3      	ldrb	r3, [r2, r3]
   14a5c:	2b00      	cmp	r3, #0
   14a5e:	d007      	beq.n	14a70 <vWifiTask+0x4c4>
				m2m_wifi_handle_events(NULL);
   14a60:	4d26      	ldr	r5, [pc, #152]	; (14afc <vWifiTask+0x550>)
				while((mqtt_inst.isConnected))
   14a62:	0017      	movs	r7, r2
   14a64:	2434      	movs	r4, #52	; 0x34
				m2m_wifi_handle_events(NULL);
   14a66:	2000      	movs	r0, #0
   14a68:	47a8      	blx	r5
				while((mqtt_inst.isConnected))
   14a6a:	5d3b      	ldrb	r3, [r7, r4]
   14a6c:	2b00      	cmp	r3, #0
   14a6e:	d1fa      	bne.n	14a66 <vWifiTask+0x4ba>
				socketDeinit();
   14a70:	4b23      	ldr	r3, [pc, #140]	; (14b00 <vWifiTask+0x554>)
   14a72:	4798      	blx	r3
				do_download_flag = true;
   14a74:	2201      	movs	r2, #1
   14a76:	4b23      	ldr	r3, [pc, #140]	; (14b04 <vWifiTask+0x558>)
   14a78:	701a      	strb	r2, [r3, #0]
				registerSocketCallback(socket_cb, resolve_cb);
   14a7a:	4923      	ldr	r1, [pc, #140]	; (14b08 <vWifiTask+0x55c>)
   14a7c:	4823      	ldr	r0, [pc, #140]	; (14b0c <vWifiTask+0x560>)
   14a7e:	4b24      	ldr	r3, [pc, #144]	; (14b10 <vWifiTask+0x564>)
   14a80:	4798      	blx	r3
				socketInit();
   14a82:	4b24      	ldr	r3, [pc, #144]	; (14b14 <vWifiTask+0x568>)
   14a84:	4798      	blx	r3
				start_download();
   14a86:	4b24      	ldr	r3, [pc, #144]	; (14b18 <vWifiTask+0x56c>)
   14a88:	4798      	blx	r3
				wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   14a8a:	2203      	movs	r2, #3
   14a8c:	4b23      	ldr	r3, [pc, #140]	; (14b1c <vWifiTask+0x570>)
   14a8e:	701a      	strb	r2, [r3, #0]
				break;
   14a90:	e651      	b.n	14736 <vWifiTask+0x18a>
					LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   14a92:	4923      	ldr	r1, [pc, #140]	; (14b20 <vWifiTask+0x574>)
   14a94:	2001      	movs	r0, #1
   14a96:	4b0e      	ldr	r3, [pc, #56]	; (14ad0 <vWifiTask+0x524>)
   14a98:	4798      	blx	r3
   14a9a:	e7dc      	b.n	14a56 <vWifiTask+0x4aa>
				SerialConsoleWriteString("FlagB.txt added!\r\n");
   14a9c:	4821      	ldr	r0, [pc, #132]	; (14b24 <vWifiTask+0x578>)
   14a9e:	4b22      	ldr	r3, [pc, #136]	; (14b28 <vWifiTask+0x57c>)
   14aa0:	4798      	blx	r3
   14aa2:	e694      	b.n	147ce <vWifiTask+0x222>
		wifiStateMachine = WIFI_MQTT_INIT;
   14aa4:	2200      	movs	r2, #0
   14aa6:	4b1d      	ldr	r3, [pc, #116]	; (14b1c <vWifiTask+0x570>)
   14aa8:	701a      	strb	r2, [r3, #0]
		break;
   14aaa:	e644      	b.n	14736 <vWifiTask+0x18a>
		wifiStateMachine = DataToReceive; // Update new state
   14aac:	ab07      	add	r3, sp, #28
   14aae:	781a      	ldrb	r2, [r3, #0]
   14ab0:	4b1a      	ldr	r3, [pc, #104]	; (14b1c <vWifiTask+0x570>)
   14ab2:	701a      	strb	r2, [r3, #0]
   14ab4:	e64a      	b.n	1474c <vWifiTask+0x1a0>
   14ab6:	46c0      	nop			; (mov r8, r8)
   14ab8:	20000010 	.word	0x20000010
   14abc:	00026589 	.word	0x00026589
   14ac0:	00028440 	.word	0x00028440
   14ac4:	00026603 	.word	0x00026603
   14ac8:	00028444 	.word	0x00028444
   14acc:	00026215 	.word	0x00026215
   14ad0:	00018f3d 	.word	0x00018f3d
   14ad4:	0002ad9c 	.word	0x0002ad9c
   14ad8:	00017d71 	.word	0x00017d71
   14adc:	00028448 	.word	0x00028448
   14ae0:	200006f0 	.word	0x200006f0
   14ae4:	00022261 	.word	0x00022261
   14ae8:	00017f19 	.word	0x00017f19
   14aec:	0002845c 	.word	0x0002845c
   14af0:	000222c1 	.word	0x000222c1
   14af4:	00027f08 	.word	0x00027f08
   14af8:	00022231 	.word	0x00022231
   14afc:	0001b121 	.word	0x0001b121
   14b00:	0001cea9 	.word	0x0001cea9
   14b04:	2000048b 	.word	0x2000048b
   14b08:	00013cd1 	.word	0x00013cd1
   14b0c:	00013d11 	.word	0x00013d11
   14b10:	0001cee5 	.word	0x0001cee5
   14b14:	0001ce65 	.word	0x0001ce65
   14b18:	00013ea5 	.word	0x00013ea5
   14b1c:	20000b7c 	.word	0x20000b7c
   14b20:	00028548 	.word	0x00028548
   14b24:	000284b0 	.word	0x000284b0
   14b28:	00018e8d 	.word	0x00018e8d

00014b2c <WifiHandlerSetState>:




void WifiHandlerSetState(uint8_t state)
{
   14b2c:	b510      	push	{r4, lr}
   14b2e:	b082      	sub	sp, #8
   14b30:	466b      	mov	r3, sp
   14b32:	71d8      	strb	r0, [r3, #7]
if( state <= WIFI_DOWNLOAD_HANDLE){
   14b34:	2803      	cmp	r0, #3
   14b36:	d901      	bls.n	14b3c <WifiHandlerSetState+0x10>
	xQueueSend( xQueueWifiState, &state, ( TickType_t ) 10 );
}
}
   14b38:	b002      	add	sp, #8
   14b3a:	bd10      	pop	{r4, pc}
	xQueueSend( xQueueWifiState, &state, ( TickType_t ) 10 );
   14b3c:	4b04      	ldr	r3, [pc, #16]	; (14b50 <WifiHandlerSetState+0x24>)
   14b3e:	6818      	ldr	r0, [r3, #0]
   14b40:	2300      	movs	r3, #0
   14b42:	220a      	movs	r2, #10
   14b44:	4669      	mov	r1, sp
   14b46:	3107      	adds	r1, #7
   14b48:	4c02      	ldr	r4, [pc, #8]	; (14b54 <WifiHandlerSetState+0x28>)
   14b4a:	47a0      	blx	r4
}
   14b4c:	e7f4      	b.n	14b38 <WifiHandlerSetState+0xc>
   14b4e:	46c0      	nop			; (mov r8, r8)
   14b50:	20000b8c 	.word	0x20000b8c
   14b54:	00016bb9 	.word	0x00016bb9

00014b58 <WifiAddImuDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddImuDataToQueue(struct ImuDataPacket* imuPacket)
{
   14b58:	b510      	push	{r4, lr}
   14b5a:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueImuBuffer , imuPacket, ( TickType_t ) 10);
   14b5c:	4b03      	ldr	r3, [pc, #12]	; (14b6c <WifiAddImuDataToQueue+0x14>)
   14b5e:	6818      	ldr	r0, [r3, #0]
   14b60:	2300      	movs	r3, #0
   14b62:	220a      	movs	r2, #10
   14b64:	4c02      	ldr	r4, [pc, #8]	; (14b70 <WifiAddImuDataToQueue+0x18>)
   14b66:	47a0      	blx	r4
	return error;
}
   14b68:	bd10      	pop	{r4, pc}
   14b6a:	46c0      	nop			; (mov r8, r8)
   14b6c:	20000b88 	.word	0x20000b88
   14b70:	00016bb9 	.word	0x00016bb9

00014b74 <WifiAddDistanceDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   14b74:	b510      	push	{r4, lr}
   14b76:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueDistanceBuffer  , distance, ( TickType_t ) 10);
   14b78:	4b03      	ldr	r3, [pc, #12]	; (14b88 <WifiAddDistanceDataToQueue+0x14>)
   14b7a:	6818      	ldr	r0, [r3, #0]
   14b7c:	2300      	movs	r3, #0
   14b7e:	220a      	movs	r2, #10
   14b80:	4c02      	ldr	r4, [pc, #8]	; (14b8c <WifiAddDistanceDataToQueue+0x18>)
   14b82:	47a0      	blx	r4
	return error;
}
   14b84:	bd10      	pop	{r4, pc}
   14b86:	46c0      	nop			; (mov r8, r8)
   14b88:	20000b80 	.word	0x20000b80
   14b8c:	00016bb9 	.word	0x00016bb9

00014b90 <WifiAddGameDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   14b90:	b510      	push	{r4, lr}
   14b92:	0001      	movs	r1, r0
	int error = xQueueSend(xQueueGameBuffer , game, ( TickType_t ) 10);
   14b94:	4b03      	ldr	r3, [pc, #12]	; (14ba4 <WifiAddGameDataToQueue+0x14>)
   14b96:	6818      	ldr	r0, [r3, #0]
   14b98:	2300      	movs	r3, #0
   14b9a:	220a      	movs	r2, #10
   14b9c:	4c02      	ldr	r4, [pc, #8]	; (14ba8 <WifiAddGameDataToQueue+0x18>)
   14b9e:	47a0      	blx	r4
	return error;
   14ba0:	bd10      	pop	{r4, pc}
   14ba2:	46c0      	nop			; (mov r8, r8)
   14ba4:	20000b84 	.word	0x20000b84
   14ba8:	00016bb9 	.word	0x00016bb9

00014bac <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   14bac:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14bae:	2207      	movs	r2, #7
   14bb0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
   14bb2:	421a      	tst	r2, r3
   14bb4:	d1fc      	bne.n	14bb0 <_i2c_master_wait_for_sync+0x4>
}
   14bb6:	4770      	bx	lr

00014bb8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   14bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bba:	46d6      	mov	lr, sl
   14bbc:	464f      	mov	r7, r9
   14bbe:	4646      	mov	r6, r8
   14bc0:	b5c0      	push	{r6, r7, lr}
   14bc2:	b08a      	sub	sp, #40	; 0x28
   14bc4:	0006      	movs	r6, r0
   14bc6:	000f      	movs	r7, r1
   14bc8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   14bca:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14bcc:	0008      	movs	r0, r1
   14bce:	4ba0      	ldr	r3, [pc, #640]	; (14e50 <i2c_master_init+0x298>)
   14bd0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   14bd2:	4aa0      	ldr	r2, [pc, #640]	; (14e54 <i2c_master_init+0x29c>)
   14bd4:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   14bd6:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   14bd8:	2301      	movs	r3, #1
   14bda:	40ab      	lsls	r3, r5
   14bdc:	430b      	orrs	r3, r1
   14bde:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
   14be0:	a909      	add	r1, sp, #36	; 0x24
   14be2:	7b23      	ldrb	r3, [r4, #12]
   14be4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14be6:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   14be8:	b2c5      	uxtb	r5, r0
   14bea:	0028      	movs	r0, r5
   14bec:	4b9a      	ldr	r3, [pc, #616]	; (14e58 <i2c_master_init+0x2a0>)
   14bee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   14bf0:	0028      	movs	r0, r5
   14bf2:	4b9a      	ldr	r3, [pc, #616]	; (14e5c <i2c_master_init+0x2a4>)
   14bf4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   14bf6:	7b20      	ldrb	r0, [r4, #12]
   14bf8:	2100      	movs	r1, #0
   14bfa:	4b99      	ldr	r3, [pc, #612]	; (14e60 <i2c_master_init+0x2a8>)
   14bfc:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   14bfe:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
   14c00:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   14c02:	079b      	lsls	r3, r3, #30
   14c04:	d505      	bpl.n	14c12 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
   14c06:	b00a      	add	sp, #40	; 0x28
   14c08:	bc1c      	pop	{r2, r3, r4}
   14c0a:	4690      	mov	r8, r2
   14c0c:	4699      	mov	r9, r3
   14c0e:	46a2      	mov	sl, r4
   14c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   14c12:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
   14c14:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   14c16:	07db      	lsls	r3, r3, #31
   14c18:	d4f5      	bmi.n	14c06 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   14c1a:	6830      	ldr	r0, [r6, #0]
   14c1c:	4b8c      	ldr	r3, [pc, #560]	; (14e50 <i2c_master_init+0x298>)
   14c1e:	4699      	mov	r9, r3
   14c20:	4798      	blx	r3
   14c22:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   14c24:	498f      	ldr	r1, [pc, #572]	; (14e64 <i2c_master_init+0x2ac>)
   14c26:	4b90      	ldr	r3, [pc, #576]	; (14e68 <i2c_master_init+0x2b0>)
   14c28:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   14c2a:	00ad      	lsls	r5, r5, #2
   14c2c:	4b8f      	ldr	r3, [pc, #572]	; (14e6c <i2c_master_init+0x2b4>)
   14c2e:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
   14c30:	2300      	movs	r3, #0
   14c32:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
   14c34:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
   14c36:	2500      	movs	r5, #0
   14c38:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
   14c3a:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
   14c3c:	2225      	movs	r2, #37	; 0x25
   14c3e:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
   14c40:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   14c42:	3314      	adds	r3, #20
   14c44:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14c46:	6833      	ldr	r3, [r6, #0]
   14c48:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   14c4a:	0018      	movs	r0, r3
   14c4c:	47c8      	blx	r9
   14c4e:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   14c50:	2380      	movs	r3, #128	; 0x80
   14c52:	aa08      	add	r2, sp, #32
   14c54:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14c56:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14c58:	2301      	movs	r3, #1
   14c5a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
   14c5c:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
   14c5e:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
   14c60:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
   14c62:	2800      	cmp	r0, #0
   14c64:	d100      	bne.n	14c68 <i2c_master_init+0xb0>
   14c66:	e0af      	b.n	14dc8 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
   14c68:	ab08      	add	r3, sp, #32
   14c6a:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   14c6c:	2302      	movs	r3, #2
   14c6e:	aa08      	add	r2, sp, #32
   14c70:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   14c72:	0c00      	lsrs	r0, r0, #16
   14c74:	b2c0      	uxtb	r0, r0
   14c76:	0011      	movs	r1, r2
   14c78:	4b7d      	ldr	r3, [pc, #500]	; (14e70 <i2c_master_init+0x2b8>)
   14c7a:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
   14c7c:	2f00      	cmp	r7, #0
   14c7e:	d100      	bne.n	14c82 <i2c_master_init+0xca>
   14c80:	e0a7      	b.n	14dd2 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
   14c82:	ab08      	add	r3, sp, #32
   14c84:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   14c86:	2302      	movs	r3, #2
   14c88:	aa08      	add	r2, sp, #32
   14c8a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   14c8c:	0c3f      	lsrs	r7, r7, #16
   14c8e:	b2f8      	uxtb	r0, r7
   14c90:	0011      	movs	r1, r2
   14c92:	4b77      	ldr	r3, [pc, #476]	; (14e70 <i2c_master_init+0x2b8>)
   14c94:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   14c96:	8aa3      	ldrh	r3, [r4, #20]
   14c98:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
   14c9a:	8ae3      	ldrh	r3, [r4, #22]
   14c9c:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
   14c9e:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   14ca0:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
   14ca2:	2b00      	cmp	r3, #0
   14ca4:	d104      	bne.n	14cb0 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   14ca6:	4b73      	ldr	r3, [pc, #460]	; (14e74 <i2c_master_init+0x2bc>)
   14ca8:	789b      	ldrb	r3, [r3, #2]
   14caa:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   14cac:	0fdb      	lsrs	r3, r3, #31
   14cae:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
   14cb0:	68a1      	ldr	r1, [r4, #8]
   14cb2:	6923      	ldr	r3, [r4, #16]
   14cb4:	430b      	orrs	r3, r1
   14cb6:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
   14cb8:	2224      	movs	r2, #36	; 0x24
   14cba:	5ca2      	ldrb	r2, [r4, r2]
   14cbc:	2a00      	cmp	r2, #0
   14cbe:	d002      	beq.n	14cc6 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   14cc0:	2280      	movs	r2, #128	; 0x80
   14cc2:	05d2      	lsls	r2, r2, #23
   14cc4:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
   14cc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14cc8:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   14cca:	222c      	movs	r2, #44	; 0x2c
   14ccc:	5ca2      	ldrb	r2, [r4, r2]
   14cce:	2a00      	cmp	r2, #0
   14cd0:	d103      	bne.n	14cda <i2c_master_init+0x122>
   14cd2:	2280      	movs	r2, #128	; 0x80
   14cd4:	0492      	lsls	r2, r2, #18
   14cd6:	4291      	cmp	r1, r2
   14cd8:	d102      	bne.n	14ce0 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   14cda:	2280      	movs	r2, #128	; 0x80
   14cdc:	0512      	lsls	r2, r2, #20
   14cde:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
   14ce0:	222d      	movs	r2, #45	; 0x2d
   14ce2:	5ca2      	ldrb	r2, [r4, r2]
   14ce4:	2a00      	cmp	r2, #0
   14ce6:	d002      	beq.n	14cee <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   14ce8:	2280      	movs	r2, #128	; 0x80
   14cea:	0412      	lsls	r2, r2, #16
   14cec:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
   14cee:	222e      	movs	r2, #46	; 0x2e
   14cf0:	5ca2      	ldrb	r2, [r4, r2]
   14cf2:	2a00      	cmp	r2, #0
   14cf4:	d002      	beq.n	14cfc <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   14cf6:	2280      	movs	r2, #128	; 0x80
   14cf8:	03d2      	lsls	r2, r2, #15
   14cfa:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
   14cfc:	4642      	mov	r2, r8
   14cfe:	6812      	ldr	r2, [r2, #0]
   14d00:	4313      	orrs	r3, r2
   14d02:	4642      	mov	r2, r8
   14d04:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   14d06:	2380      	movs	r3, #128	; 0x80
   14d08:	005b      	lsls	r3, r3, #1
   14d0a:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   14d0c:	4648      	mov	r0, r9
   14d0e:	3014      	adds	r0, #20
   14d10:	b2c0      	uxtb	r0, r0
   14d12:	4b59      	ldr	r3, [pc, #356]	; (14e78 <i2c_master_init+0x2c0>)
   14d14:	4798      	blx	r3
   14d16:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
   14d18:	23fa      	movs	r3, #250	; 0xfa
   14d1a:	009b      	lsls	r3, r3, #2
   14d1c:	6822      	ldr	r2, [r4, #0]
   14d1e:	435a      	muls	r2, r3
   14d20:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   14d22:	6863      	ldr	r3, [r4, #4]
   14d24:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
   14d26:	4d55      	ldr	r5, [pc, #340]	; (14e7c <i2c_master_init+0x2c4>)
   14d28:	47a8      	blx	r5
   14d2a:	9000      	str	r0, [sp, #0]
   14d2c:	9101      	str	r1, [sp, #4]
   14d2e:	464b      	mov	r3, r9
   14d30:	0058      	lsls	r0, r3, #1
   14d32:	47a8      	blx	r5
   14d34:	9002      	str	r0, [sp, #8]
   14d36:	9103      	str	r1, [sp, #12]
   14d38:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   14d3a:	47a8      	blx	r5
   14d3c:	9004      	str	r0, [sp, #16]
   14d3e:	9105      	str	r1, [sp, #20]
   14d40:	4f4f      	ldr	r7, [pc, #316]	; (14e80 <i2c_master_init+0x2c8>)
   14d42:	4a50      	ldr	r2, [pc, #320]	; (14e84 <i2c_master_init+0x2cc>)
   14d44:	4b50      	ldr	r3, [pc, #320]	; (14e88 <i2c_master_init+0x2d0>)
   14d46:	9800      	ldr	r0, [sp, #0]
   14d48:	9901      	ldr	r1, [sp, #4]
   14d4a:	47b8      	blx	r7
   14d4c:	0002      	movs	r2, r0
   14d4e:	000b      	movs	r3, r1
   14d50:	9804      	ldr	r0, [sp, #16]
   14d52:	9905      	ldr	r1, [sp, #20]
   14d54:	47b8      	blx	r7
   14d56:	4e4d      	ldr	r6, [pc, #308]	; (14e8c <i2c_master_init+0x2d4>)
   14d58:	2200      	movs	r2, #0
   14d5a:	4b4d      	ldr	r3, [pc, #308]	; (14e90 <i2c_master_init+0x2d8>)
   14d5c:	47b0      	blx	r6
   14d5e:	9004      	str	r0, [sp, #16]
   14d60:	9105      	str	r1, [sp, #20]
   14d62:	4648      	mov	r0, r9
   14d64:	47a8      	blx	r5
   14d66:	0002      	movs	r2, r0
   14d68:	000b      	movs	r3, r1
   14d6a:	9804      	ldr	r0, [sp, #16]
   14d6c:	9905      	ldr	r1, [sp, #20]
   14d6e:	47b8      	blx	r7
   14d70:	0002      	movs	r2, r0
   14d72:	000b      	movs	r3, r1
   14d74:	4d47      	ldr	r5, [pc, #284]	; (14e94 <i2c_master_init+0x2dc>)
   14d76:	9800      	ldr	r0, [sp, #0]
   14d78:	9901      	ldr	r1, [sp, #4]
   14d7a:	47a8      	blx	r5
   14d7c:	9a02      	ldr	r2, [sp, #8]
   14d7e:	9b03      	ldr	r3, [sp, #12]
   14d80:	47b0      	blx	r6
   14d82:	2200      	movs	r2, #0
   14d84:	4b44      	ldr	r3, [pc, #272]	; (14e98 <i2c_master_init+0x2e0>)
   14d86:	47a8      	blx	r5
   14d88:	9a02      	ldr	r2, [sp, #8]
   14d8a:	9b03      	ldr	r3, [sp, #12]
   14d8c:	4d43      	ldr	r5, [pc, #268]	; (14e9c <i2c_master_init+0x2e4>)
   14d8e:	47a8      	blx	r5
   14d90:	4b43      	ldr	r3, [pc, #268]	; (14ea0 <i2c_master_init+0x2e8>)
   14d92:	4798      	blx	r3
   14d94:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   14d96:	2380      	movs	r3, #128	; 0x80
   14d98:	049b      	lsls	r3, r3, #18
   14d9a:	68a2      	ldr	r2, [r4, #8]
   14d9c:	429a      	cmp	r2, r3
   14d9e:	d01e      	beq.n	14dde <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   14da0:	0003      	movs	r3, r0
   14da2:	2040      	movs	r0, #64	; 0x40
   14da4:	2dff      	cmp	r5, #255	; 0xff
   14da6:	d900      	bls.n	14daa <i2c_master_init+0x1f2>
   14da8:	e72d      	b.n	14c06 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
   14daa:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
   14dac:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14dae:	25ff      	movs	r5, #255	; 0xff
   14db0:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   14db2:	0624      	lsls	r4, r4, #24
   14db4:	4325      	orrs	r5, r4
   14db6:	0400      	lsls	r0, r0, #16
   14db8:	23ff      	movs	r3, #255	; 0xff
   14dba:	041b      	lsls	r3, r3, #16
   14dbc:	4018      	ands	r0, r3
   14dbe:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14dc0:	4643      	mov	r3, r8
   14dc2:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
   14dc4:	2000      	movs	r0, #0
   14dc6:	e71e      	b.n	14c06 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   14dc8:	2100      	movs	r1, #0
   14dca:	4640      	mov	r0, r8
   14dcc:	4b35      	ldr	r3, [pc, #212]	; (14ea4 <i2c_master_init+0x2ec>)
   14dce:	4798      	blx	r3
   14dd0:	e74a      	b.n	14c68 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   14dd2:	2101      	movs	r1, #1
   14dd4:	4640      	mov	r0, r8
   14dd6:	4b33      	ldr	r3, [pc, #204]	; (14ea4 <i2c_master_init+0x2ec>)
   14dd8:	4798      	blx	r3
   14dda:	0007      	movs	r7, r0
   14ddc:	e751      	b.n	14c82 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   14dde:	26fa      	movs	r6, #250	; 0xfa
   14de0:	00b6      	lsls	r6, r6, #2
   14de2:	4653      	mov	r3, sl
   14de4:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   14de6:	9800      	ldr	r0, [sp, #0]
   14de8:	9901      	ldr	r1, [sp, #4]
   14dea:	0002      	movs	r2, r0
   14dec:	000b      	movs	r3, r1
   14dee:	4c27      	ldr	r4, [pc, #156]	; (14e8c <i2c_master_init+0x2d4>)
   14df0:	47a0      	blx	r4
   14df2:	9000      	str	r0, [sp, #0]
   14df4:	9101      	str	r1, [sp, #4]
   14df6:	0030      	movs	r0, r6
   14df8:	4b20      	ldr	r3, [pc, #128]	; (14e7c <i2c_master_init+0x2c4>)
   14dfa:	4798      	blx	r3
   14dfc:	2200      	movs	r2, #0
   14dfe:	4b2a      	ldr	r3, [pc, #168]	; (14ea8 <i2c_master_init+0x2f0>)
   14e00:	47b8      	blx	r7
   14e02:	0002      	movs	r2, r0
   14e04:	000b      	movs	r3, r1
   14e06:	9800      	ldr	r0, [sp, #0]
   14e08:	9901      	ldr	r1, [sp, #4]
   14e0a:	4c24      	ldr	r4, [pc, #144]	; (14e9c <i2c_master_init+0x2e4>)
   14e0c:	47a0      	blx	r4
   14e0e:	2200      	movs	r2, #0
   14e10:	4b21      	ldr	r3, [pc, #132]	; (14e98 <i2c_master_init+0x2e0>)
   14e12:	4c20      	ldr	r4, [pc, #128]	; (14e94 <i2c_master_init+0x2dc>)
   14e14:	47a0      	blx	r4
   14e16:	4b22      	ldr	r3, [pc, #136]	; (14ea0 <i2c_master_init+0x2e8>)
   14e18:	4798      	blx	r3
   14e1a:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
   14e1c:	d00c      	beq.n	14e38 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   14e1e:	0031      	movs	r1, r6
   14e20:	9807      	ldr	r0, [sp, #28]
   14e22:	4b22      	ldr	r3, [pc, #136]	; (14eac <i2c_master_init+0x2f4>)
   14e24:	4798      	blx	r3
   14e26:	3802      	subs	r0, #2
   14e28:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   14e2a:	002b      	movs	r3, r5
   14e2c:	2dff      	cmp	r5, #255	; 0xff
   14e2e:	d80c      	bhi.n	14e4a <i2c_master_init+0x292>
   14e30:	28ff      	cmp	r0, #255	; 0xff
   14e32:	d9bc      	bls.n	14dae <i2c_master_init+0x1f6>
   14e34:	2040      	movs	r0, #64	; 0x40
   14e36:	e6e6      	b.n	14c06 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   14e38:	0071      	lsls	r1, r6, #1
   14e3a:	1e48      	subs	r0, r1, #1
   14e3c:	9b07      	ldr	r3, [sp, #28]
   14e3e:	469c      	mov	ip, r3
   14e40:	4460      	add	r0, ip
   14e42:	4b1a      	ldr	r3, [pc, #104]	; (14eac <i2c_master_init+0x2f4>)
   14e44:	4798      	blx	r3
   14e46:	3801      	subs	r0, #1
   14e48:	e7ef      	b.n	14e2a <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   14e4a:	2040      	movs	r0, #64	; 0x40
   14e4c:	e6db      	b.n	14c06 <i2c_master_init+0x4e>
   14e4e:	46c0      	nop			; (mov r8, r8)
   14e50:	0001dd05 	.word	0x0001dd05
   14e54:	40000400 	.word	0x40000400
   14e58:	0001f0a5 	.word	0x0001f0a5
   14e5c:	0001f019 	.word	0x0001f019
   14e60:	0001db41 	.word	0x0001db41
   14e64:	00012375 	.word	0x00012375
   14e68:	0001dd41 	.word	0x0001dd41
   14e6c:	20005554 	.word	0x20005554
   14e70:	0001f1cd 	.word	0x0001f1cd
   14e74:	41002000 	.word	0x41002000
   14e78:	0001f0c1 	.word	0x0001f0c1
   14e7c:	000260ed 	.word	0x000260ed
   14e80:	00025559 	.word	0x00025559
   14e84:	e826d695 	.word	0xe826d695
   14e88:	3e112e0b 	.word	0x3e112e0b
   14e8c:	000248d1 	.word	0x000248d1
   14e90:	40240000 	.word	0x40240000
   14e94:	00025a59 	.word	0x00025a59
   14e98:	3ff00000 	.word	0x3ff00000
   14e9c:	00024ef1 	.word	0x00024ef1
   14ea0:	00026085 	.word	0x00026085
   14ea4:	0001db8d 	.word	0x0001db8d
   14ea8:	40080000 	.word	0x40080000
   14eac:	00023fe1 	.word	0x00023fe1

00014eb0 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   14eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14eb2:	46ce      	mov	lr, r9
   14eb4:	4647      	mov	r7, r8
   14eb6:	b580      	push	{r7, lr}
   14eb8:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14eba:	6803      	ldr	r3, [r0, #0]
   14ebc:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   14ebe:	4e14      	ldr	r6, [pc, #80]	; (14f10 <i2c_master_reset+0x60>)
   14ec0:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14ec2:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   14ec4:	0028      	movs	r0, r5
   14ec6:	4b13      	ldr	r3, [pc, #76]	; (14f14 <i2c_master_reset+0x64>)
   14ec8:	4698      	mov	r8, r3
   14eca:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14ecc:	231f      	movs	r3, #31
   14ece:	4018      	ands	r0, r3
   14ed0:	2701      	movs	r7, #1
   14ed2:	0039      	movs	r1, r7
   14ed4:	4081      	lsls	r1, r0
   14ed6:	3361      	adds	r3, #97	; 0x61
   14ed8:	4a0f      	ldr	r2, [pc, #60]	; (14f18 <i2c_master_reset+0x68>)
   14eda:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14edc:	0020      	movs	r0, r4
   14ede:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   14ee0:	2383      	movs	r3, #131	; 0x83
   14ee2:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   14ee4:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   14ee6:	682b      	ldr	r3, [r5, #0]
   14ee8:	2202      	movs	r2, #2
   14eea:	4393      	bics	r3, r2
   14eec:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
   14eee:	4b0b      	ldr	r3, [pc, #44]	; (14f1c <i2c_master_reset+0x6c>)
   14ef0:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   14ef2:	6820      	ldr	r0, [r4, #0]
   14ef4:	47c0      	blx	r8
   14ef6:	4b0a      	ldr	r3, [pc, #40]	; (14f20 <i2c_master_reset+0x70>)
   14ef8:	4798      	blx	r3
	cpu_irq_leave_critical();
   14efa:	4b0a      	ldr	r3, [pc, #40]	; (14f24 <i2c_master_reset+0x74>)
   14efc:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   14efe:	0020      	movs	r0, r4
   14f00:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   14f02:	464b      	mov	r3, r9
   14f04:	601f      	str	r7, [r3, #0]
}
   14f06:	bc0c      	pop	{r2, r3}
   14f08:	4690      	mov	r8, r2
   14f0a:	4699      	mov	r9, r3
   14f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14f0e:	46c0      	nop			; (mov r8, r8)
   14f10:	00014bad 	.word	0x00014bad
   14f14:	0001dd7d 	.word	0x0001dd7d
   14f18:	e000e100 	.word	0xe000e100
   14f1c:	0001d4f1 	.word	0x0001d4f1
   14f20:	0001f0f5 	.word	0x0001f0f5
   14f24:	0001d531 	.word	0x0001d531

00014f28 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14f28:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   14f2a:	7e1a      	ldrb	r2, [r3, #24]
   14f2c:	0792      	lsls	r2, r2, #30
   14f2e:	d507      	bpl.n	14f40 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   14f30:	2202      	movs	r2, #2
   14f32:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   14f34:	8b5b      	ldrh	r3, [r3, #26]
   14f36:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   14f38:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
   14f3a:	17db      	asrs	r3, r3, #31
   14f3c:	4018      	ands	r0, r3
}
   14f3e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   14f40:	8b5a      	ldrh	r2, [r3, #26]
   14f42:	0752      	lsls	r2, r2, #29
   14f44:	d506      	bpl.n	14f54 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   14f46:	6859      	ldr	r1, [r3, #4]
   14f48:	22c0      	movs	r2, #192	; 0xc0
   14f4a:	0292      	lsls	r2, r2, #10
   14f4c:	430a      	orrs	r2, r1
   14f4e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
   14f50:	2018      	movs	r0, #24
   14f52:	e7f4      	b.n	14f3e <_i2c_master_address_response+0x16>
	return STATUS_OK;
   14f54:	2000      	movs	r0, #0
   14f56:	e7f2      	b.n	14f3e <_i2c_master_address_response+0x16>

00014f58 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   14f58:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14f5a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   14f5c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   14f5e:	2401      	movs	r4, #1
   14f60:	2502      	movs	r5, #2
   14f62:	7e11      	ldrb	r1, [r2, #24]
   14f64:	4221      	tst	r1, r4
   14f66:	d10b      	bne.n	14f80 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   14f68:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   14f6a:	4229      	tst	r1, r5
   14f6c:	d106      	bne.n	14f7c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   14f6e:	3301      	adds	r3, #1
   14f70:	b29b      	uxth	r3, r3
   14f72:	8901      	ldrh	r1, [r0, #8]
   14f74:	4299      	cmp	r1, r3
   14f76:	d8f4      	bhi.n	14f62 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
   14f78:	2012      	movs	r0, #18
   14f7a:	e002      	b.n	14f82 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
   14f7c:	2000      	movs	r0, #0
   14f7e:	e000      	b.n	14f82 <_i2c_master_wait_for_bus+0x2a>
   14f80:	2000      	movs	r0, #0
}
   14f82:	bd30      	pop	{r4, r5, pc}

00014f84 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   14f84:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14f86:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   14f88:	6862      	ldr	r2, [r4, #4]
   14f8a:	2380      	movs	r3, #128	; 0x80
   14f8c:	02db      	lsls	r3, r3, #11
   14f8e:	4313      	orrs	r3, r2
   14f90:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   14f92:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   14f94:	4b02      	ldr	r3, [pc, #8]	; (14fa0 <_i2c_master_send_hs_master_code+0x1c>)
   14f96:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   14f98:	2301      	movs	r3, #1
   14f9a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
   14f9c:	bd10      	pop	{r4, pc}
   14f9e:	46c0      	nop			; (mov r8, r8)
   14fa0:	00014f59 	.word	0x00014f59

00014fa4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   14fa4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
   14fa6:	0080      	lsls	r0, r0, #2
   14fa8:	4b16      	ldr	r3, [pc, #88]	; (15004 <_tc_interrupt_handler+0x60>)
   14faa:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   14fac:	6823      	ldr	r3, [r4, #0]
   14fae:	7b9d      	ldrb	r5, [r3, #14]
   14fb0:	7e22      	ldrb	r2, [r4, #24]
   14fb2:	7e63      	ldrb	r3, [r4, #25]
   14fb4:	4013      	ands	r3, r2
   14fb6:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   14fb8:	07eb      	lsls	r3, r5, #31
   14fba:	d406      	bmi.n	14fca <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   14fbc:	07ab      	lsls	r3, r5, #30
   14fbe:	d40b      	bmi.n	14fd8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   14fc0:	06eb      	lsls	r3, r5, #27
   14fc2:	d410      	bmi.n	14fe6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   14fc4:	06ab      	lsls	r3, r5, #26
   14fc6:	d415      	bmi.n	14ff4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
   14fc8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   14fca:	0020      	movs	r0, r4
   14fcc:	68a3      	ldr	r3, [r4, #8]
   14fce:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   14fd0:	2301      	movs	r3, #1
   14fd2:	6822      	ldr	r2, [r4, #0]
   14fd4:	7393      	strb	r3, [r2, #14]
   14fd6:	e7f1      	b.n	14fbc <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
   14fd8:	0020      	movs	r0, r4
   14fda:	68e3      	ldr	r3, [r4, #12]
   14fdc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   14fde:	2302      	movs	r3, #2
   14fe0:	6822      	ldr	r2, [r4, #0]
   14fe2:	7393      	strb	r3, [r2, #14]
   14fe4:	e7ec      	b.n	14fc0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   14fe6:	0020      	movs	r0, r4
   14fe8:	6923      	ldr	r3, [r4, #16]
   14fea:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   14fec:	2310      	movs	r3, #16
   14fee:	6822      	ldr	r2, [r4, #0]
   14ff0:	7393      	strb	r3, [r2, #14]
   14ff2:	e7e7      	b.n	14fc4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   14ff4:	0020      	movs	r0, r4
   14ff6:	6963      	ldr	r3, [r4, #20]
   14ff8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   14ffa:	6823      	ldr	r3, [r4, #0]
   14ffc:	2220      	movs	r2, #32
   14ffe:	739a      	strb	r2, [r3, #14]
}
   15000:	e7e2      	b.n	14fc8 <_tc_interrupt_handler+0x24>
   15002:	46c0      	nop			; (mov r8, r8)
   15004:	2000443c 	.word	0x2000443c

00015008 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   15008:	b510      	push	{r4, lr}
   1500a:	2000      	movs	r0, #0
   1500c:	4b01      	ldr	r3, [pc, #4]	; (15014 <TC3_Handler+0xc>)
   1500e:	4798      	blx	r3
   15010:	bd10      	pop	{r4, pc}
   15012:	46c0      	nop			; (mov r8, r8)
   15014:	00014fa5 	.word	0x00014fa5

00015018 <TC4_Handler>:
   15018:	b510      	push	{r4, lr}
   1501a:	2001      	movs	r0, #1
   1501c:	4b01      	ldr	r3, [pc, #4]	; (15024 <TC4_Handler+0xc>)
   1501e:	4798      	blx	r3
   15020:	bd10      	pop	{r4, pc}
   15022:	46c0      	nop			; (mov r8, r8)
   15024:	00014fa5 	.word	0x00014fa5

00015028 <TC5_Handler>:
   15028:	b510      	push	{r4, lr}
   1502a:	2002      	movs	r0, #2
   1502c:	4b01      	ldr	r3, [pc, #4]	; (15034 <TC5_Handler+0xc>)
   1502e:	4798      	blx	r3
   15030:	bd10      	pop	{r4, pc}
   15032:	46c0      	nop			; (mov r8, r8)
   15034:	00014fa5 	.word	0x00014fa5

00015038 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   15038:	b570      	push	{r4, r5, r6, lr}
   1503a:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   1503c:	4b09      	ldr	r3, [pc, #36]	; (15064 <prvHelpCommand+0x2c>)
   1503e:	681b      	ldr	r3, [r3, #0]
   15040:	2b00      	cmp	r3, #0
   15042:	d00a      	beq.n	1505a <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   15044:	4c07      	ldr	r4, [pc, #28]	; (15064 <prvHelpCommand+0x2c>)
   15046:	6825      	ldr	r5, [r4, #0]
   15048:	682b      	ldr	r3, [r5, #0]
   1504a:	6859      	ldr	r1, [r3, #4]
   1504c:	4b06      	ldr	r3, [pc, #24]	; (15068 <prvHelpCommand+0x30>)
   1504e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   15050:	6868      	ldr	r0, [r5, #4]
   15052:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
   15054:	1e43      	subs	r3, r0, #1
   15056:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
   15058:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
   1505a:	4904      	ldr	r1, [pc, #16]	; (1506c <prvHelpCommand+0x34>)
   1505c:	4b01      	ldr	r3, [pc, #4]	; (15064 <prvHelpCommand+0x2c>)
   1505e:	6019      	str	r1, [r3, #0]
   15060:	e7f0      	b.n	15044 <prvHelpCommand+0xc>
   15062:	46c0      	nop			; (mov r8, r8)
   15064:	20000b94 	.word	0x20000b94
   15068:	00026633 	.word	0x00026633
   1506c:	2000009c 	.word	0x2000009c

00015070 <FreeRTOS_CLIRegisterCommand>:
{
   15070:	b570      	push	{r4, r5, r6, lr}
   15072:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
   15074:	d006      	beq.n	15084 <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   15076:	2008      	movs	r0, #8
   15078:	4b0a      	ldr	r3, [pc, #40]	; (150a4 <FreeRTOS_CLIRegisterCommand+0x34>)
   1507a:	4798      	blx	r3
   1507c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
   1507e:	d103      	bne.n	15088 <FreeRTOS_CLIRegisterCommand+0x18>
   15080:	b672      	cpsid	i
   15082:	e7fe      	b.n	15082 <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
   15084:	b672      	cpsid	i
   15086:	e7fe      	b.n	15086 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
   15088:	4b07      	ldr	r3, [pc, #28]	; (150a8 <FreeRTOS_CLIRegisterCommand+0x38>)
   1508a:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   1508c:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
   1508e:	2300      	movs	r3, #0
   15090:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
   15092:	4b06      	ldr	r3, [pc, #24]	; (150ac <FreeRTOS_CLIRegisterCommand+0x3c>)
   15094:	681a      	ldr	r2, [r3, #0]
   15096:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
   15098:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
   1509a:	4b05      	ldr	r3, [pc, #20]	; (150b0 <FreeRTOS_CLIRegisterCommand+0x40>)
   1509c:	4798      	blx	r3
}
   1509e:	2001      	movs	r0, #1
   150a0:	bd70      	pop	{r4, r5, r6, pc}
   150a2:	46c0      	nop			; (mov r8, r8)
   150a4:	000166c5 	.word	0x000166c5
   150a8:	00016601 	.word	0x00016601
   150ac:	20000098 	.word	0x20000098
   150b0:	00016619 	.word	0x00016619

000150b4 <FreeRTOS_CLIProcessCommand>:
{
   150b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   150b6:	46de      	mov	lr, fp
   150b8:	4657      	mov	r7, sl
   150ba:	464e      	mov	r6, r9
   150bc:	4645      	mov	r5, r8
   150be:	b5e0      	push	{r5, r6, r7, lr}
   150c0:	b083      	sub	sp, #12
   150c2:	0006      	movs	r6, r0
   150c4:	9100      	str	r1, [sp, #0]
   150c6:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
   150c8:	4b39      	ldr	r3, [pc, #228]	; (151b0 <FreeRTOS_CLIProcessCommand+0xfc>)
   150ca:	681b      	ldr	r3, [r3, #0]
   150cc:	2b00      	cmp	r3, #0
   150ce:	d011      	beq.n	150f4 <FreeRTOS_CLIProcessCommand+0x40>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   150d0:	681b      	ldr	r3, [r3, #0]
   150d2:	689b      	ldr	r3, [r3, #8]
   150d4:	0032      	movs	r2, r6
   150d6:	9901      	ldr	r1, [sp, #4]
   150d8:	9800      	ldr	r0, [sp, #0]
   150da:	4798      	blx	r3
		if( xReturn == pdFALSE )
   150dc:	2800      	cmp	r0, #0
   150de:	d102      	bne.n	150e6 <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
   150e0:	2200      	movs	r2, #0
   150e2:	4b33      	ldr	r3, [pc, #204]	; (151b0 <FreeRTOS_CLIProcessCommand+0xfc>)
   150e4:	601a      	str	r2, [r3, #0]
}
   150e6:	b003      	add	sp, #12
   150e8:	bc3c      	pop	{r2, r3, r4, r5}
   150ea:	4690      	mov	r8, r2
   150ec:	4699      	mov	r9, r3
   150ee:	46a2      	mov	sl, r4
   150f0:	46ab      	mov	fp, r5
   150f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   150f4:	4c2f      	ldr	r4, [pc, #188]	; (151b4 <FreeRTOS_CLIProcessCommand+0x100>)
   150f6:	4b2e      	ldr	r3, [pc, #184]	; (151b0 <FreeRTOS_CLIProcessCommand+0xfc>)
   150f8:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   150fa:	4b2f      	ldr	r3, [pc, #188]	; (151b8 <FreeRTOS_CLIProcessCommand+0x104>)
   150fc:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   150fe:	2320      	movs	r3, #32
   15100:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   15102:	4b2e      	ldr	r3, [pc, #184]	; (151bc <FreeRTOS_CLIProcessCommand+0x108>)
   15104:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   15106:	4b2a      	ldr	r3, [pc, #168]	; (151b0 <FreeRTOS_CLIProcessCommand+0xfc>)
   15108:	469a      	mov	sl, r3
   1510a:	e00a      	b.n	15122 <FreeRTOS_CLIProcessCommand+0x6e>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   1510c:	0002      	movs	r2, r0
   1510e:	0029      	movs	r1, r5
   15110:	0030      	movs	r0, r6
   15112:	47d8      	blx	fp
   15114:	2800      	cmp	r0, #0
   15116:	d00d      	beq.n	15134 <FreeRTOS_CLIProcessCommand+0x80>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   15118:	6864      	ldr	r4, [r4, #4]
   1511a:	4653      	mov	r3, sl
   1511c:	601c      	str	r4, [r3, #0]
   1511e:	2c00      	cmp	r4, #0
   15120:	d03e      	beq.n	151a0 <FreeRTOS_CLIProcessCommand+0xec>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   15122:	6827      	ldr	r7, [r4, #0]
   15124:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   15126:	0028      	movs	r0, r5
   15128:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1512a:	5c33      	ldrb	r3, [r6, r0]
   1512c:	4642      	mov	r2, r8
   1512e:	4393      	bics	r3, r2
   15130:	d1f2      	bne.n	15118 <FreeRTOS_CLIProcessCommand+0x64>
   15132:	e7eb      	b.n	1510c <FreeRTOS_CLIProcessCommand+0x58>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   15134:	7b3f      	ldrb	r7, [r7, #12]
   15136:	b27f      	sxtb	r7, r7
   15138:	2f00      	cmp	r7, #0
   1513a:	db2d      	blt.n	15198 <FreeRTOS_CLIProcessCommand+0xe4>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   1513c:	7833      	ldrb	r3, [r6, #0]
   1513e:	2b00      	cmp	r3, #0
   15140:	d028      	beq.n	15194 <FreeRTOS_CLIProcessCommand+0xe0>
   15142:	0032      	movs	r2, r6
   15144:	2500      	movs	r5, #0
   15146:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
   15148:	2401      	movs	r4, #1
   1514a:	e008      	b.n	1515e <FreeRTOS_CLIProcessCommand+0xaa>
   1514c:	2901      	cmp	r1, #1
   1514e:	d00a      	beq.n	15166 <FreeRTOS_CLIProcessCommand+0xb2>
			{
				cParameters++;
   15150:	3501      	adds	r5, #1
   15152:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
   15154:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
   15156:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
   15158:	7813      	ldrb	r3, [r2, #0]
   1515a:	2b00      	cmp	r3, #0
   1515c:	d005      	beq.n	1516a <FreeRTOS_CLIProcessCommand+0xb6>
		if( ( *pcCommandString ) == ' ' )
   1515e:	2b20      	cmp	r3, #32
   15160:	d0f4      	beq.n	1514c <FreeRTOS_CLIProcessCommand+0x98>
			xLastCharacterWasSpace = pdFALSE;
   15162:	0001      	movs	r1, r0
   15164:	e7f7      	b.n	15156 <FreeRTOS_CLIProcessCommand+0xa2>
			if( xLastCharacterWasSpace != pdTRUE )
   15166:	0021      	movs	r1, r4
   15168:	e7f5      	b.n	15156 <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1516a:	2901      	cmp	r1, #1
   1516c:	d00f      	beq.n	1518e <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1516e:	4b10      	ldr	r3, [pc, #64]	; (151b0 <FreeRTOS_CLIProcessCommand+0xfc>)
   15170:	681b      	ldr	r3, [r3, #0]
   15172:	2b00      	cmp	r3, #0
   15174:	d014      	beq.n	151a0 <FreeRTOS_CLIProcessCommand+0xec>
   15176:	42af      	cmp	r7, r5
   15178:	d0aa      	beq.n	150d0 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1517a:	9a01      	ldr	r2, [sp, #4]
   1517c:	4910      	ldr	r1, [pc, #64]	; (151c0 <FreeRTOS_CLIProcessCommand+0x10c>)
   1517e:	9800      	ldr	r0, [sp, #0]
   15180:	4b10      	ldr	r3, [pc, #64]	; (151c4 <FreeRTOS_CLIProcessCommand+0x110>)
   15182:	4798      	blx	r3
		pxCommand = NULL;
   15184:	2200      	movs	r2, #0
   15186:	4b0a      	ldr	r3, [pc, #40]	; (151b0 <FreeRTOS_CLIProcessCommand+0xfc>)
   15188:	601a      	str	r2, [r3, #0]
   1518a:	2000      	movs	r0, #0
   1518c:	e7ab      	b.n	150e6 <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
   1518e:	3d01      	subs	r5, #1
   15190:	b26d      	sxtb	r5, r5
   15192:	e7ec      	b.n	1516e <FreeRTOS_CLIProcessCommand+0xba>
	while( *pcCommandString != 0x00 )
   15194:	2500      	movs	r5, #0
   15196:	e7ea      	b.n	1516e <FreeRTOS_CLIProcessCommand+0xba>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   15198:	4b05      	ldr	r3, [pc, #20]	; (151b0 <FreeRTOS_CLIProcessCommand+0xfc>)
   1519a:	681b      	ldr	r3, [r3, #0]
   1519c:	2b00      	cmp	r3, #0
   1519e:	d197      	bne.n	150d0 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   151a0:	9a01      	ldr	r2, [sp, #4]
   151a2:	4909      	ldr	r1, [pc, #36]	; (151c8 <FreeRTOS_CLIProcessCommand+0x114>)
   151a4:	9800      	ldr	r0, [sp, #0]
   151a6:	4b07      	ldr	r3, [pc, #28]	; (151c4 <FreeRTOS_CLIProcessCommand+0x110>)
   151a8:	4798      	blx	r3
		xReturn = pdFALSE;
   151aa:	2000      	movs	r0, #0
	return xReturn;
   151ac:	e79b      	b.n	150e6 <FreeRTOS_CLIProcessCommand+0x32>
   151ae:	46c0      	nop			; (mov r8, r8)
   151b0:	20000b90 	.word	0x20000b90
   151b4:	2000009c 	.word	0x2000009c
   151b8:	00026603 	.word	0x00026603
   151bc:	00026611 	.word	0x00026611
   151c0:	0002856c 	.word	0x0002856c
   151c4:	00026633 	.word	0x00026633
   151c8:	000285c4 	.word	0x000285c4

000151cc <FreeRTOS_CLIGetParameter>:
{
   151cc:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
   151ce:	2300      	movs	r3, #0
   151d0:	6013      	str	r3, [r2, #0]
	while( uxParametersFound < uxWantedParameter )
   151d2:	2400      	movs	r4, #0
   151d4:	2900      	cmp	r1, #0
   151d6:	d10a      	bne.n	151ee <FreeRTOS_CLIGetParameter+0x22>
const char *pcReturn = NULL;
   151d8:	2000      	movs	r0, #0
   151da:	e027      	b.n	1522c <FreeRTOS_CLIGetParameter+0x60>
			pcCommandString++;
   151dc:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   151de:	7803      	ldrb	r3, [r0, #0]
   151e0:	2b20      	cmp	r3, #32
   151e2:	d0fb      	beq.n	151dc <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
   151e4:	2b00      	cmp	r3, #0
   151e6:	d020      	beq.n	1522a <FreeRTOS_CLIGetParameter+0x5e>
			uxParametersFound++;
   151e8:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
   151ea:	42a1      	cmp	r1, r4
   151ec:	d00b      	beq.n	15206 <FreeRTOS_CLIGetParameter+0x3a>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   151ee:	7803      	ldrb	r3, [r0, #0]
   151f0:	2b00      	cmp	r3, #0
   151f2:	d01e      	beq.n	15232 <FreeRTOS_CLIGetParameter+0x66>
   151f4:	2b20      	cmp	r3, #32
   151f6:	d0f1      	beq.n	151dc <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
   151f8:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   151fa:	7803      	ldrb	r3, [r0, #0]
   151fc:	2b00      	cmp	r3, #0
   151fe:	d018      	beq.n	15232 <FreeRTOS_CLIGetParameter+0x66>
   15200:	2b20      	cmp	r3, #32
   15202:	d1f9      	bne.n	151f8 <FreeRTOS_CLIGetParameter+0x2c>
   15204:	e7ea      	b.n	151dc <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   15206:	7803      	ldrb	r3, [r0, #0]
   15208:	2120      	movs	r1, #32
   1520a:	438b      	bics	r3, r1
   1520c:	d00f      	beq.n	1522e <FreeRTOS_CLIGetParameter+0x62>
   1520e:	0004      	movs	r4, r0
   15210:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
   15212:	6813      	ldr	r3, [r2, #0]
   15214:	3301      	adds	r3, #1
   15216:	6013      	str	r3, [r2, #0]
					pcCommandString++;
   15218:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   1521a:	7821      	ldrb	r1, [r4, #0]
   1521c:	43a9      	bics	r1, r5
   1521e:	d1f8      	bne.n	15212 <FreeRTOS_CLIGetParameter+0x46>
					pcReturn = NULL;
   15220:	1e5a      	subs	r2, r3, #1
   15222:	4193      	sbcs	r3, r2
   15224:	425b      	negs	r3, r3
   15226:	4018      	ands	r0, r3
   15228:	e000      	b.n	1522c <FreeRTOS_CLIGetParameter+0x60>
const char *pcReturn = NULL;
   1522a:	2000      	movs	r0, #0
}
   1522c:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
   1522e:	2000      	movs	r0, #0
   15230:	e7fc      	b.n	1522c <FreeRTOS_CLIGetParameter+0x60>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   15232:	7803      	ldrb	r3, [r0, #0]
   15234:	e7d6      	b.n	151e4 <FreeRTOS_CLIGetParameter+0x18>
	...

00015238 <prvTraceGetQueueType>:
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   15238:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   1523a:	4b01      	ldr	r3, [pc, #4]	; (15240 <prvTraceGetQueueType+0x8>)
   1523c:	4798      	blx	r3
}
   1523e:	bd10      	pop	{r4, pc}
   15240:	000178b9 	.word	0x000178b9

00015244 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   15244:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   15246:	4b02      	ldr	r3, [pc, #8]	; (15250 <prvTraceGetTaskNumberLow16+0xc>)
   15248:	4798      	blx	r3
   1524a:	b280      	uxth	r0, r0
}
   1524c:	bd10      	pop	{r4, pc}
   1524e:	46c0      	nop			; (mov r8, r8)
   15250:	00018511 	.word	0x00018511

00015254 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   15254:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   15256:	4b02      	ldr	r3, [pc, #8]	; (15260 <prvTraceGetTaskNumberHigh16+0xc>)
   15258:	4798      	blx	r3
   1525a:	0c00      	lsrs	r0, r0, #16
}
   1525c:	bd10      	pop	{r4, pc}
   1525e:	46c0      	nop			; (mov r8, r8)
   15260:	00018511 	.word	0x00018511

00015264 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   15264:	b570      	push	{r4, r5, r6, lr}
   15266:	0004      	movs	r4, r0
   15268:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   1526a:	4b04      	ldr	r3, [pc, #16]	; (1527c <prvTraceSetTaskNumberLow16+0x18>)
   1526c:	4798      	blx	r3
   1526e:	0c01      	lsrs	r1, r0, #16
   15270:	0409      	lsls	r1, r1, #16
   15272:	4329      	orrs	r1, r5
   15274:	0020      	movs	r0, r4
   15276:	4b02      	ldr	r3, [pc, #8]	; (15280 <prvTraceSetTaskNumberLow16+0x1c>)
   15278:	4798      	blx	r3
}
   1527a:	bd70      	pop	{r4, r5, r6, pc}
   1527c:	00018511 	.word	0x00018511
   15280:	0001851d 	.word	0x0001851d

00015284 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   15284:	b570      	push	{r4, r5, r6, lr}
   15286:	0004      	movs	r4, r0
   15288:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1528a:	4b05      	ldr	r3, [pc, #20]	; (152a0 <prvTraceSetTaskNumberHigh16+0x1c>)
   1528c:	4798      	blx	r3
   1528e:	0401      	lsls	r1, r0, #16
   15290:	0c09      	lsrs	r1, r1, #16
   15292:	042d      	lsls	r5, r5, #16
   15294:	4329      	orrs	r1, r5
   15296:	0020      	movs	r0, r4
   15298:	4b02      	ldr	r3, [pc, #8]	; (152a4 <prvTraceSetTaskNumberHigh16+0x20>)
   1529a:	4798      	blx	r3
}
   1529c:	bd70      	pop	{r4, r5, r6, pc}
   1529e:	46c0      	nop			; (mov r8, r8)
   152a0:	00018511 	.word	0x00018511
   152a4:	0001851d 	.word	0x0001851d

000152a8 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   152a8:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   152aa:	4b02      	ldr	r3, [pc, #8]	; (152b4 <prvTraceGetQueueNumberLow16+0xc>)
   152ac:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   152ae:	b280      	uxth	r0, r0
}
   152b0:	bd10      	pop	{r4, pc}
   152b2:	46c0      	nop			; (mov r8, r8)
   152b4:	000178b1 	.word	0x000178b1

000152b8 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   152b8:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   152ba:	4b02      	ldr	r3, [pc, #8]	; (152c4 <prvTraceGetQueueNumberHigh16+0xc>)
   152bc:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   152be:	0c00      	lsrs	r0, r0, #16
}
   152c0:	bd10      	pop	{r4, pc}
   152c2:	46c0      	nop			; (mov r8, r8)
   152c4:	000178b1 	.word	0x000178b1

000152c8 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   152c8:	b570      	push	{r4, r5, r6, lr}
   152ca:	0004      	movs	r4, r0
   152cc:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
   152ce:	4b04      	ldr	r3, [pc, #16]	; (152e0 <prvTraceSetQueueNumberLow16+0x18>)
   152d0:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   152d2:	0c01      	lsrs	r1, r0, #16
   152d4:	0409      	lsls	r1, r1, #16
   152d6:	4329      	orrs	r1, r5
   152d8:	0020      	movs	r0, r4
   152da:	4b02      	ldr	r3, [pc, #8]	; (152e4 <prvTraceSetQueueNumberLow16+0x1c>)
   152dc:	4798      	blx	r3
}
   152de:	bd70      	pop	{r4, r5, r6, pc}
   152e0:	000178b1 	.word	0x000178b1
   152e4:	000178b5 	.word	0x000178b5

000152e8 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   152e8:	b570      	push	{r4, r5, r6, lr}
   152ea:	0004      	movs	r4, r0
   152ec:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
   152ee:	4b05      	ldr	r3, [pc, #20]	; (15304 <prvTraceSetQueueNumberHigh16+0x1c>)
   152f0:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   152f2:	0401      	lsls	r1, r0, #16
   152f4:	0c09      	lsrs	r1, r1, #16
   152f6:	042d      	lsls	r5, r5, #16
   152f8:	4329      	orrs	r1, r5
   152fa:	0020      	movs	r0, r4
   152fc:	4b02      	ldr	r3, [pc, #8]	; (15308 <prvTraceSetQueueNumberHigh16+0x20>)
   152fe:	4798      	blx	r3
}
   15300:	bd70      	pop	{r4, r5, r6, pc}
   15302:	46c0      	nop			; (mov r8, r8)
   15304:	000178b1 	.word	0x000178b1
   15308:	000178b5 	.word	0x000178b5

0001530c <prvAddTaskToStackMonitor>:
	int foundEmptySlot = 0;

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1530c:	4b0d      	ldr	r3, [pc, #52]	; (15344 <prvAddTaskToStackMonitor+0x38>)
   1530e:	681b      	ldr	r3, [r3, #0]
   15310:	2b00      	cmp	r3, #0
   15312:	d00d      	beq.n	15330 <prvAddTaskToStackMonitor+0x24>
   15314:	2301      	movs	r3, #1
   15316:	490b      	ldr	r1, [pc, #44]	; (15344 <prvAddTaskToStackMonitor+0x38>)
   15318:	00da      	lsls	r2, r3, #3
   1531a:	5852      	ldr	r2, [r2, r1]
   1531c:	2a00      	cmp	r2, #0
   1531e:	d008      	beq.n	15332 <prvAddTaskToStackMonitor+0x26>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   15320:	3301      	adds	r3, #1
   15322:	2b0a      	cmp	r3, #10
   15324:	d1f8      	bne.n	15318 <prvAddTaskToStackMonitor+0xc>
		}
	}

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
   15326:	4a08      	ldr	r2, [pc, #32]	; (15348 <prvAddTaskToStackMonitor+0x3c>)
   15328:	6813      	ldr	r3, [r2, #0]
   1532a:	3301      	adds	r3, #1
   1532c:	6013      	str	r3, [r2, #0]
	}
}
   1532e:	4770      	bx	lr
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   15330:	2300      	movs	r3, #0
			tasksInStackMonitor[i].tcb = task;
   15332:	4a04      	ldr	r2, [pc, #16]	; (15344 <prvAddTaskToStackMonitor+0x38>)
   15334:	00db      	lsls	r3, r3, #3
   15336:	5098      	str	r0, [r3, r2]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   15338:	18d3      	adds	r3, r2, r3
   1533a:	2201      	movs	r2, #1
   1533c:	4252      	negs	r2, r2
   1533e:	605a      	str	r2, [r3, #4]
   15340:	e7f5      	b.n	1532e <prvAddTaskToStackMonitor+0x22>
   15342:	46c0      	nop			; (mov r8, r8)
   15344:	20000ba0 	.word	0x20000ba0
   15348:	20000bf0 	.word	0x20000bf0

0001534c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1534e:	46ce      	mov	lr, r9
   15350:	4647      	mov	r7, r8
   15352:	b580      	push	{r7, lr}
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   15354:	4b1d      	ldr	r3, [pc, #116]	; (153cc <prvReportStackUsage+0x80>)
   15356:	681b      	ldr	r3, [r3, #0]
   15358:	4699      	mov	r9, r3
	int count = 0;		/* The number of generated reports */
   1535a:	2400      	movs	r4, #0
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1535c:	4e1c      	ldr	r6, [pc, #112]	; (153d0 <prvReportStackUsage+0x84>)
   1535e:	4d1b      	ldr	r5, [pc, #108]	; (153cc <prvReportStackUsage+0x80>)
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   15360:	4b1c      	ldr	r3, [pc, #112]	; (153d4 <prvReportStackUsage+0x88>)
   15362:	4698      	mov	r8, r3
   15364:	e01b      	b.n	1539e <prvReportStackUsage+0x52>
			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   15366:	4f1a      	ldr	r7, [pc, #104]	; (153d0 <prvReportStackUsage+0x84>)
   15368:	00db      	lsls	r3, r3, #3
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   1536a:	59d8      	ldr	r0, [r3, r7]
   1536c:	4b1a      	ldr	r3, [pc, #104]	; (153d8 <prvReportStackUsage+0x8c>)
   1536e:	4798      	blx	r3
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   15370:	4b16      	ldr	r3, [pc, #88]	; (153cc <prvReportStackUsage+0x80>)
   15372:	681b      	ldr	r3, [r3, #0]
   15374:	00db      	lsls	r3, r3, #3
   15376:	18fb      	adds	r3, r7, r3
   15378:	685b      	ldr	r3, [r3, #4]
   1537a:	22ff      	movs	r2, #255	; 0xff
   1537c:	4002      	ands	r2, r0
   1537e:	2103      	movs	r1, #3
   15380:	20ea      	movs	r0, #234	; 0xea
   15382:	4f16      	ldr	r7, [pc, #88]	; (153dc <prvReportStackUsage+0x90>)
   15384:	47b8      	blx	r7
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   15386:	3401      	adds	r4, #1
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   15388:	4f10      	ldr	r7, [pc, #64]	; (153cc <prvReportStackUsage+0x80>)
   1538a:	683b      	ldr	r3, [r7, #0]
   1538c:	1c58      	adds	r0, r3, #1
   1538e:	210a      	movs	r1, #10
   15390:	4b13      	ldr	r3, [pc, #76]	; (153e0 <prvReportStackUsage+0x94>)
   15392:	4798      	blx	r3
   15394:	6039      	str	r1, [r7, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   15396:	2c00      	cmp	r4, #0
   15398:	dc13      	bgt.n	153c2 <prvReportStackUsage+0x76>
   1539a:	4589      	cmp	r9, r1
   1539c:	d011      	beq.n	153c2 <prvReportStackUsage+0x76>
		if (tasksInStackMonitor[i].tcb != NULL)
   1539e:	682b      	ldr	r3, [r5, #0]
   153a0:	00db      	lsls	r3, r3, #3
   153a2:	5998      	ldr	r0, [r3, r6]
   153a4:	2800      	cmp	r0, #0
   153a6:	d0ef      	beq.n	15388 <prvReportStackUsage+0x3c>
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   153a8:	47c0      	blx	r8
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   153aa:	4b08      	ldr	r3, [pc, #32]	; (153cc <prvReportStackUsage+0x80>)
   153ac:	681b      	ldr	r3, [r3, #0]
   153ae:	00d9      	lsls	r1, r3, #3
   153b0:	4a07      	ldr	r2, [pc, #28]	; (153d0 <prvReportStackUsage+0x84>)
   153b2:	1852      	adds	r2, r2, r1
   153b4:	6852      	ldr	r2, [r2, #4]
   153b6:	4290      	cmp	r0, r2
   153b8:	d2d5      	bcs.n	15366 <prvReportStackUsage+0x1a>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   153ba:	4a05      	ldr	r2, [pc, #20]	; (153d0 <prvReportStackUsage+0x84>)
   153bc:	1852      	adds	r2, r2, r1
   153be:	6050      	str	r0, [r2, #4]
   153c0:	e7d1      	b.n	15366 <prvReportStackUsage+0x1a>
}
   153c2:	bc0c      	pop	{r2, r3}
   153c4:	4690      	mov	r8, r2
   153c6:	4699      	mov	r9, r3
   153c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   153ca:	46c0      	nop			; (mov r8, r8)
   153cc:	20000b9c 	.word	0x20000b9c
   153d0:	20000ba0 	.word	0x20000ba0
   153d4:	00018525 	.word	0x00018525
   153d8:	00018511 	.word	0x00018511
   153dc:	00016151 	.word	0x00016151
   153e0:	000242c1 	.word	0x000242c1

000153e4 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   153e4:	b570      	push	{r4, r5, r6, lr}
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   153e6:	4d05      	ldr	r5, [pc, #20]	; (153fc <TzCtrl+0x18>)
		{
			prvReportStackUsage();
   153e8:	4e05      	ldr	r6, [pc, #20]	; (15400 <TzCtrl+0x1c>)
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   153ea:	4c06      	ldr	r4, [pc, #24]	; (15404 <TzCtrl+0x20>)
   153ec:	e001      	b.n	153f2 <TzCtrl+0xe>
   153ee:	2004      	movs	r0, #4
   153f0:	47a0      	blx	r4
		if (xTraceIsRecordingEnabled())
   153f2:	47a8      	blx	r5
   153f4:	2800      	cmp	r0, #0
   153f6:	d0fa      	beq.n	153ee <TzCtrl+0xa>
			prvReportStackUsage();
   153f8:	47b0      	blx	r6
   153fa:	e7f8      	b.n	153ee <TzCtrl+0xa>
   153fc:	0001566d 	.word	0x0001566d
   15400:	0001534d 	.word	0x0001534d
   15404:	00018045 	.word	0x00018045

00015408 <prvTraceGetCurrentTaskHandle>:
{
   15408:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
   1540a:	4b01      	ldr	r3, [pc, #4]	; (15410 <prvTraceGetCurrentTaskHandle+0x8>)
   1540c:	4798      	blx	r3
}
   1540e:	bd10      	pop	{r4, pc}
   15410:	00018551 	.word	0x00018551

00015414 <vTraceEnable>:
{
   15414:	b510      	push	{r4, lr}
   15416:	b082      	sub	sp, #8
   15418:	0004      	movs	r4, r0
	prvTraceInitTraceData();
   1541a:	4b12      	ldr	r3, [pc, #72]	; (15464 <vTraceEnable+0x50>)
   1541c:	4798      	blx	r3
	if (startOption == TRC_START)
   1541e:	2c01      	cmp	r4, #1
   15420:	d009      	beq.n	15436 <vTraceEnable+0x22>
	else if (startOption == TRC_START_AWAIT_HOST)
   15422:	2c02      	cmp	r4, #2
   15424:	d00a      	beq.n	1543c <vTraceEnable+0x28>
	else if (startOption != TRC_INIT)
   15426:	2c00      	cmp	r4, #0
   15428:	d10c      	bne.n	15444 <vTraceEnable+0x30>
	if (HandleTzCtrl == NULL)
   1542a:	4b0f      	ldr	r3, [pc, #60]	; (15468 <vTraceEnable+0x54>)
   1542c:	681b      	ldr	r3, [r3, #0]
   1542e:	2b00      	cmp	r3, #0
   15430:	d00c      	beq.n	1544c <vTraceEnable+0x38>
}
   15432:	b002      	add	sp, #8
   15434:	bd10      	pop	{r4, pc}
		vTraceStart();
   15436:	4b0d      	ldr	r3, [pc, #52]	; (1546c <vTraceEnable+0x58>)
   15438:	4798      	blx	r3
   1543a:	e7f6      	b.n	1542a <vTraceEnable+0x16>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1543c:	480c      	ldr	r0, [pc, #48]	; (15470 <vTraceEnable+0x5c>)
   1543e:	4b0d      	ldr	r3, [pc, #52]	; (15474 <vTraceEnable+0x60>)
   15440:	4798      	blx	r3
   15442:	e7f2      	b.n	1542a <vTraceEnable+0x16>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   15444:	480c      	ldr	r0, [pc, #48]	; (15478 <vTraceEnable+0x64>)
   15446:	4b0b      	ldr	r3, [pc, #44]	; (15474 <vTraceEnable+0x60>)
   15448:	4798      	blx	r3
   1544a:	e7ee      	b.n	1542a <vTraceEnable+0x16>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1544c:	4b06      	ldr	r3, [pc, #24]	; (15468 <vTraceEnable+0x54>)
   1544e:	9301      	str	r3, [sp, #4]
   15450:	2304      	movs	r3, #4
   15452:	9300      	str	r3, [sp, #0]
   15454:	2300      	movs	r3, #0
   15456:	22c8      	movs	r2, #200	; 0xc8
   15458:	4908      	ldr	r1, [pc, #32]	; (1547c <vTraceEnable+0x68>)
   1545a:	4809      	ldr	r0, [pc, #36]	; (15480 <vTraceEnable+0x6c>)
   1545c:	4c09      	ldr	r4, [pc, #36]	; (15484 <vTraceEnable+0x70>)
   1545e:	47a0      	blx	r4
}
   15460:	e7e7      	b.n	15432 <vTraceEnable+0x1e>
   15462:	46c0      	nop			; (mov r8, r8)
   15464:	00015681 	.word	0x00015681
   15468:	20000b98 	.word	0x20000b98
   1546c:	00016465 	.word	0x00016465
   15470:	00028980 	.word	0x00028980
   15474:	00015859 	.word	0x00015859
   15478:	000289c0 	.word	0x000289c0
   1547c:	000289f4 	.word	0x000289f4
   15480:	000153e5 	.word	0x000153e5
   15484:	00017a55 	.word	0x00017a55

00015488 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   15488:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1548a:	4b2f      	ldr	r3, [pc, #188]	; (15548 <vTraceInitObjectPropertyTable+0xc0>)
   1548c:	681b      	ldr	r3, [r3, #0]
   1548e:	2209      	movs	r2, #9
   15490:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   15492:	3201      	adds	r2, #1
   15494:	2164      	movs	r1, #100	; 0x64
   15496:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   15498:	3101      	adds	r1, #1
   1549a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   1549c:	3101      	adds	r1, #1
   1549e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   154a0:	3205      	adds	r2, #5
   154a2:	3101      	adds	r1, #1
   154a4:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   154a6:	3962      	subs	r1, #98	; 0x62
   154a8:	2068      	movs	r0, #104	; 0x68
   154aa:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   154ac:	3001      	adds	r0, #1
   154ae:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   154b0:	3001      	adds	r0, #1
   154b2:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   154b4:	3001      	adds	r0, #1
   154b6:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   154b8:	3001      	adds	r0, #1
   154ba:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   154bc:	316b      	adds	r1, #107	; 0x6b
   154be:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   154c0:	3101      	adds	r1, #1
   154c2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   154c4:	3101      	adds	r1, #1
   154c6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   154c8:	3101      	adds	r1, #1
   154ca:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   154cc:	3101      	adds	r1, #1
   154ce:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   154d0:	3101      	adds	r1, #1
   154d2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   154d4:	3101      	adds	r1, #1
   154d6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   154d8:	3101      	adds	r1, #1
   154da:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   154dc:	3101      	adds	r1, #1
   154de:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   154e0:	3968      	subs	r1, #104	; 0x68
   154e2:	326d      	adds	r2, #109	; 0x6d
   154e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   154e6:	3201      	adds	r2, #1
   154e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   154ea:	3201      	adds	r2, #1
   154ec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   154ee:	3a6b      	subs	r2, #107	; 0x6b
   154f0:	3013      	adds	r0, #19
   154f2:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   154f4:	2411      	movs	r4, #17
   154f6:	3001      	adds	r0, #1
   154f8:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   154fa:	3001      	adds	r0, #1
   154fc:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   154fe:	3172      	adds	r1, #114	; 0x72
   15500:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   15502:	3101      	adds	r1, #1
   15504:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   15506:	3101      	adds	r1, #1
   15508:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1550a:	2100      	movs	r1, #0
   1550c:	3275      	adds	r2, #117	; 0x75
   1550e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   15510:	31a0      	adds	r1, #160	; 0xa0
   15512:	3202      	adds	r2, #2
   15514:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   15516:	31a0      	adds	r1, #160	; 0xa0
   15518:	3202      	adds	r2, #2
   1551a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1551c:	31a0      	adds	r1, #160	; 0xa0
   1551e:	3202      	adds	r2, #2
   15520:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   15522:	490a      	ldr	r1, [pc, #40]	; (1554c <vTraceInitObjectPropertyTable+0xc4>)
   15524:	3202      	adds	r2, #2
   15526:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   15528:	4909      	ldr	r1, [pc, #36]	; (15550 <vTraceInitObjectPropertyTable+0xc8>)
   1552a:	3202      	adds	r2, #2
   1552c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1552e:	4909      	ldr	r1, [pc, #36]	; (15554 <vTraceInitObjectPropertyTable+0xcc>)
   15530:	3202      	adds	r2, #2
   15532:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   15534:	4908      	ldr	r1, [pc, #32]	; (15558 <vTraceInitObjectPropertyTable+0xd0>)
   15536:	3202      	adds	r2, #2
   15538:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1553a:	315f      	adds	r1, #95	; 0x5f
   1553c:	3202      	adds	r2, #2
   1553e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   15540:	4a06      	ldr	r2, [pc, #24]	; (1555c <vTraceInitObjectPropertyTable+0xd4>)
   15542:	661a      	str	r2, [r3, #96]	; 0x60
}
   15544:	bd10      	pop	{r4, pc}
   15546:	46c0      	nop			; (mov r8, r8)
   15548:	20000bf4 	.word	0x20000bf4
   1554c:	000002fd 	.word	0x000002fd
   15550:	00000352 	.word	0x00000352
   15554:	000003a2 	.word	0x000003a2
   15558:	00000401 	.word	0x00000401
   1555c:	000004bf 	.word	0x000004bf

00015560 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   15560:	4b17      	ldr	r3, [pc, #92]	; (155c0 <vTraceInitObjectHandleStack+0x60>)
   15562:	2200      	movs	r2, #0
   15564:	825a      	strh	r2, [r3, #18]
   15566:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   15568:	320a      	adds	r2, #10
   1556a:	829a      	strh	r2, [r3, #20]
   1556c:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   1556e:	320a      	adds	r2, #10
   15570:	82da      	strh	r2, [r3, #22]
   15572:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   15574:	320a      	adds	r2, #10
   15576:	831a      	strh	r2, [r3, #24]
   15578:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   1557a:	320f      	adds	r2, #15
   1557c:	835a      	strh	r2, [r3, #26]
   1557e:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   15580:	3205      	adds	r2, #5
   15582:	839a      	strh	r2, [r3, #28]
   15584:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   15586:	3205      	adds	r2, #5
   15588:	83da      	strh	r2, [r3, #30]
   1558a:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1558c:	3205      	adds	r2, #5
   1558e:	841a      	strh	r2, [r3, #32]
   15590:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   15592:	3205      	adds	r2, #5
   15594:	845a      	strh	r2, [r3, #34]	; 0x22
   15596:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   15598:	3a38      	subs	r2, #56	; 0x38
   1559a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1559c:	320a      	adds	r2, #10
   1559e:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   155a0:	320a      	adds	r2, #10
   155a2:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   155a4:	320f      	adds	r2, #15
   155a6:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   155a8:	3205      	adds	r2, #5
   155aa:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   155ac:	3205      	adds	r2, #5
   155ae:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   155b0:	3205      	adds	r2, #5
   155b2:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   155b4:	3205      	adds	r2, #5
   155b6:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   155b8:	3205      	adds	r2, #5
   155ba:	869a      	strh	r2, [r3, #52]	; 0x34
}
   155bc:	4770      	bx	lr
   155be:	46c0      	nop			; (mov r8, r8)
   155c0:	20000c10 	.word	0x20000c10

000155c4 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
   155c4:	2808      	cmp	r0, #8
   155c6:	d813      	bhi.n	155f0 <pszTraceGetErrorNotEnoughHandles+0x2c>
   155c8:	0080      	lsls	r0, r0, #2
   155ca:	4b0b      	ldr	r3, [pc, #44]	; (155f8 <pszTraceGetErrorNotEnoughHandles+0x34>)
   155cc:	581b      	ldr	r3, [r3, r0]
   155ce:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   155d0:	480a      	ldr	r0, [pc, #40]	; (155fc <pszTraceGetErrorNotEnoughHandles+0x38>)
   155d2:	e010      	b.n	155f6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   155d4:	480a      	ldr	r0, [pc, #40]	; (15600 <pszTraceGetErrorNotEnoughHandles+0x3c>)
   155d6:	e00e      	b.n	155f6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   155d8:	480a      	ldr	r0, [pc, #40]	; (15604 <pszTraceGetErrorNotEnoughHandles+0x40>)
   155da:	e00c      	b.n	155f6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   155dc:	480a      	ldr	r0, [pc, #40]	; (15608 <pszTraceGetErrorNotEnoughHandles+0x44>)
   155de:	e00a      	b.n	155f6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   155e0:	480a      	ldr	r0, [pc, #40]	; (1560c <pszTraceGetErrorNotEnoughHandles+0x48>)
   155e2:	e008      	b.n	155f6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   155e4:	480a      	ldr	r0, [pc, #40]	; (15610 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   155e6:	e006      	b.n	155f6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   155e8:	480a      	ldr	r0, [pc, #40]	; (15614 <pszTraceGetErrorNotEnoughHandles+0x50>)
   155ea:	e004      	b.n	155f6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   155ec:	480a      	ldr	r0, [pc, #40]	; (15618 <pszTraceGetErrorNotEnoughHandles+0x54>)
   155ee:	e002      	b.n	155f6 <pszTraceGetErrorNotEnoughHandles+0x32>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   155f0:	480a      	ldr	r0, [pc, #40]	; (1561c <pszTraceGetErrorNotEnoughHandles+0x58>)
   155f2:	e000      	b.n	155f6 <pszTraceGetErrorNotEnoughHandles+0x32>
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   155f4:	480a      	ldr	r0, [pc, #40]	; (15620 <pszTraceGetErrorNotEnoughHandles+0x5c>)
	}
}
   155f6:	4770      	bx	lr
   155f8:	0002865c 	.word	0x0002865c
   155fc:	000286c8 	.word	0x000286c8
   15600:	00028710 	.word	0x00028710
   15604:	00028764 	.word	0x00028764
   15608:	000287b0 	.word	0x000287b0
   1560c:	000287fc 	.word	0x000287fc
   15610:	00028848 	.word	0x00028848
   15614:	0002889c 	.word	0x0002889c
   15618:	000288f4 	.word	0x000288f4
   1561c:	00028950 	.word	0x00028950
   15620:	00028680 	.word	0x00028680

00015624 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   15624:	b510      	push	{r4, lr}
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   15626:	2a00      	cmp	r2, #0
   15628:	d00d      	beq.n	15646 <prvStrncpy+0x22>
	{
		dst[i] = src[i];
   1562a:	780b      	ldrb	r3, [r1, #0]
   1562c:	7003      	strb	r3, [r0, #0]
		if (src[i] == 0)
   1562e:	780b      	ldrb	r3, [r1, #0]
   15630:	2b00      	cmp	r3, #0
   15632:	d008      	beq.n	15646 <prvStrncpy+0x22>
   15634:	2300      	movs	r3, #0
	for (i = 0; i < maxLength; i++)
   15636:	3301      	adds	r3, #1
   15638:	429a      	cmp	r2, r3
   1563a:	d004      	beq.n	15646 <prvStrncpy+0x22>
		dst[i] = src[i];
   1563c:	5ccc      	ldrb	r4, [r1, r3]
   1563e:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
   15640:	5ccc      	ldrb	r4, [r1, r3]
   15642:	2c00      	cmp	r4, #0
   15644:	d1f7      	bne.n	15636 <prvStrncpy+0x12>
			break;
	}
}
   15646:	bd10      	pop	{r4, pc}

00015648 <vTraceStop>:
{
   15648:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
   1564a:	4b06      	ldr	r3, [pc, #24]	; (15664 <vTraceStop+0x1c>)
   1564c:	681b      	ldr	r3, [r3, #0]
   1564e:	2b00      	cmp	r3, #0
   15650:	d001      	beq.n	15656 <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
   15652:	2200      	movs	r2, #0
   15654:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   15656:	4b04      	ldr	r3, [pc, #16]	; (15668 <vTraceStop+0x20>)
   15658:	681b      	ldr	r3, [r3, #0]
   1565a:	2b00      	cmp	r3, #0
   1565c:	d000      	beq.n	15660 <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1565e:	4798      	blx	r3
}
   15660:	bd10      	pop	{r4, pc}
   15662:	46c0      	nop			; (mov r8, r8)
   15664:	20000bf4 	.word	0x20000bf4
   15668:	20000cbc 	.word	0x20000cbc

0001566c <xTraceIsRecordingEnabled>:
	if (RecorderDataPtr != NULL)
   1566c:	4b03      	ldr	r3, [pc, #12]	; (1567c <xTraceIsRecordingEnabled+0x10>)
   1566e:	681b      	ldr	r3, [r3, #0]
   15670:	2b00      	cmp	r3, #0
   15672:	d001      	beq.n	15678 <xTraceIsRecordingEnabled+0xc>
		return (int)RecorderDataPtr->recorderActive;
   15674:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   15676:	4770      	bx	lr
   15678:	2000      	movs	r0, #0
   1567a:	e7fc      	b.n	15676 <xTraceIsRecordingEnabled+0xa>
   1567c:	20000bf4 	.word	0x20000bf4

00015680 <prvTraceInitTraceData>:
{	
   15680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15682:	46de      	mov	lr, fp
   15684:	4657      	mov	r7, sl
   15686:	464e      	mov	r6, r9
   15688:	4645      	mov	r5, r8
   1568a:	b5e0      	push	{r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
   1568c:	4b51      	ldr	r3, [pc, #324]	; (157d4 <prvTraceInitTraceData+0x154>)
   1568e:	681b      	ldr	r3, [r3, #0]
   15690:	2b00      	cmp	r3, #0
   15692:	d100      	bne.n	15696 <prvTraceInitTraceData+0x16>
   15694:	e099      	b.n	157ca <prvTraceInitTraceData+0x14a>
		if (RecorderDataPtr->startmarker0 == 1)
   15696:	781b      	ldrb	r3, [r3, #0]
   15698:	2b01      	cmp	r3, #1
   1569a:	d100      	bne.n	1569e <prvTraceInitTraceData+0x1e>
   1569c:	e08f      	b.n	157be <prvTraceInitTraceData+0x13e>
	init_hwtc_count = TRC_HWTC_COUNT;
   1569e:	4b4e      	ldr	r3, [pc, #312]	; (157d8 <prvTraceInitTraceData+0x158>)
   156a0:	681a      	ldr	r2, [r3, #0]
   156a2:	4b4e      	ldr	r3, [pc, #312]	; (157dc <prvTraceInitTraceData+0x15c>)
   156a4:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   156a6:	4c4b      	ldr	r4, [pc, #300]	; (157d4 <prvTraceInitTraceData+0x154>)
   156a8:	25bd      	movs	r5, #189	; 0xbd
   156aa:	012d      	lsls	r5, r5, #4
   156ac:	002a      	movs	r2, r5
   156ae:	2100      	movs	r1, #0
   156b0:	6820      	ldr	r0, [r4, #0]
   156b2:	4b4b      	ldr	r3, [pc, #300]	; (157e0 <prvTraceInitTraceData+0x160>)
   156b4:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   156b6:	6823      	ldr	r3, [r4, #0]
   156b8:	4a4a      	ldr	r2, [pc, #296]	; (157e4 <prvTraceInitTraceData+0x164>)
   156ba:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   156bc:	2205      	movs	r2, #5
   156be:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   156c0:	2200      	movs	r2, #0
   156c2:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   156c4:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   156c6:	2196      	movs	r1, #150	; 0x96
   156c8:	0049      	lsls	r1, r1, #1
   156ca:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   156cc:	4946      	ldr	r1, [pc, #280]	; (157e8 <prvTraceInitTraceData+0x168>)
   156ce:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   156d0:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   156d2:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
   156d4:	4b45      	ldr	r3, [pc, #276]	; (157ec <prvTraceInitTraceData+0x16c>)
   156d6:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   156d8:	6820      	ldr	r0, [r4, #0]
   156da:	4a45      	ldr	r2, [pc, #276]	; (157f0 <prvTraceInitTraceData+0x170>)
   156dc:	4b45      	ldr	r3, [pc, #276]	; (157f4 <prvTraceInitTraceData+0x174>)
   156de:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   156e0:	22c8      	movs	r2, #200	; 0xc8
   156e2:	3304      	adds	r3, #4
   156e4:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   156e6:	4b44      	ldr	r3, [pc, #272]	; (157f8 <prvTraceInitTraceData+0x178>)
   156e8:	3ac7      	subs	r2, #199	; 0xc7
   156ea:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   156ec:	4a43      	ldr	r2, [pc, #268]	; (157fc <prvTraceInitTraceData+0x17c>)
   156ee:	3355      	adds	r3, #85	; 0x55
   156f0:	33ff      	adds	r3, #255	; 0xff
   156f2:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   156f4:	4b42      	ldr	r3, [pc, #264]	; (15800 <prvTraceInitTraceData+0x180>)
   156f6:	469c      	mov	ip, r3
   156f8:	4460      	add	r0, ip
   156fa:	2250      	movs	r2, #80	; 0x50
   156fc:	4941      	ldr	r1, [pc, #260]	; (15804 <prvTraceInitTraceData+0x184>)
   156fe:	4b42      	ldr	r3, [pc, #264]	; (15808 <prvTraceInitTraceData+0x188>)
   15700:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   15702:	6823      	ldr	r3, [r4, #0]
   15704:	4941      	ldr	r1, [pc, #260]	; (1580c <prvTraceInitTraceData+0x18c>)
   15706:	4a42      	ldr	r2, [pc, #264]	; (15810 <prvTraceInitTraceData+0x190>)
   15708:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1570a:	210a      	movs	r1, #10
   1570c:	4a41      	ldr	r2, [pc, #260]	; (15814 <prvTraceInitTraceData+0x194>)
   1570e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   15710:	3101      	adds	r1, #1
   15712:	4a41      	ldr	r2, [pc, #260]	; (15818 <prvTraceInitTraceData+0x198>)
   15714:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   15716:	3101      	adds	r1, #1
   15718:	4a40      	ldr	r2, [pc, #256]	; (1581c <prvTraceInitTraceData+0x19c>)
   1571a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1571c:	3101      	adds	r1, #1
   1571e:	4a40      	ldr	r2, [pc, #256]	; (15820 <prvTraceInitTraceData+0x1a0>)
   15720:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   15722:	4a40      	ldr	r2, [pc, #256]	; (15824 <prvTraceInitTraceData+0x1a4>)
   15724:	3164      	adds	r1, #100	; 0x64
   15726:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   15728:	2572      	movs	r5, #114	; 0x72
   1572a:	4a3f      	ldr	r2, [pc, #252]	; (15828 <prvTraceInitTraceData+0x1a8>)
   1572c:	549d      	strb	r5, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1572e:	2673      	movs	r6, #115	; 0x73
   15730:	4a3e      	ldr	r2, [pc, #248]	; (1582c <prvTraceInitTraceData+0x1ac>)
   15732:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   15734:	2774      	movs	r7, #116	; 0x74
   15736:	4a3e      	ldr	r2, [pc, #248]	; (15830 <prvTraceInitTraceData+0x1b0>)
   15738:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1573a:	22f1      	movs	r2, #241	; 0xf1
   1573c:	4690      	mov	r8, r2
   1573e:	4a3d      	ldr	r2, [pc, #244]	; (15834 <prvTraceInitTraceData+0x1b4>)
   15740:	4641      	mov	r1, r8
   15742:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   15744:	22f2      	movs	r2, #242	; 0xf2
   15746:	4691      	mov	r9, r2
   15748:	4a3b      	ldr	r2, [pc, #236]	; (15838 <prvTraceInitTraceData+0x1b8>)
   1574a:	4649      	mov	r1, r9
   1574c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1574e:	22f3      	movs	r2, #243	; 0xf3
   15750:	4692      	mov	sl, r2
   15752:	4a3a      	ldr	r2, [pc, #232]	; (1583c <prvTraceInitTraceData+0x1bc>)
   15754:	4651      	mov	r1, sl
   15756:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   15758:	22f4      	movs	r2, #244	; 0xf4
   1575a:	4693      	mov	fp, r2
   1575c:	4a38      	ldr	r2, [pc, #224]	; (15840 <prvTraceInitTraceData+0x1c0>)
   1575e:	4659      	mov	r1, fp
   15760:	5499      	strb	r1, [r3, r2]
	vTraceInitObjectHandleStack();
   15762:	4b38      	ldr	r3, [pc, #224]	; (15844 <prvTraceInitTraceData+0x1c4>)
   15764:	4798      	blx	r3
	RecorderDataPtr->startmarker11 = 0xF4;
   15766:	6823      	ldr	r3, [r4, #0]
   15768:	465a      	mov	r2, fp
   1576a:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1576c:	4652      	mov	r2, sl
   1576e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   15770:	464a      	mov	r2, r9
   15772:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   15774:	4642      	mov	r2, r8
   15776:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   15778:	71df      	strb	r7, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1577a:	719e      	strb	r6, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1577c:	715d      	strb	r5, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1577e:	2271      	movs	r2, #113	; 0x71
   15780:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   15782:	2204      	movs	r2, #4
   15784:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   15786:	2303      	movs	r3, #3
   15788:	6822      	ldr	r2, [r4, #0]
   1578a:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1578c:	3b01      	subs	r3, #1
   1578e:	6822      	ldr	r2, [r4, #0]
   15790:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   15792:	6823      	ldr	r3, [r4, #0]
   15794:	2201      	movs	r2, #1
   15796:	701a      	strb	r2, [r3, #0]
	if (traceErrorMessage != NULL)
   15798:	4b2b      	ldr	r3, [pc, #172]	; (15848 <prvTraceInitTraceData+0x1c8>)
   1579a:	6819      	ldr	r1, [r3, #0]
   1579c:	2900      	cmp	r1, #0
   1579e:	d00e      	beq.n	157be <prvTraceInitTraceData+0x13e>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   157a0:	4c0c      	ldr	r4, [pc, #48]	; (157d4 <prvTraceInitTraceData+0x154>)
   157a2:	6823      	ldr	r3, [r4, #0]
   157a4:	4a16      	ldr	r2, [pc, #88]	; (15800 <prvTraceInitTraceData+0x180>)
   157a6:	4694      	mov	ip, r2
   157a8:	4463      	add	r3, ip
   157aa:	0018      	movs	r0, r3
   157ac:	2250      	movs	r2, #80	; 0x50
   157ae:	4b16      	ldr	r3, [pc, #88]	; (15808 <prvTraceInitTraceData+0x188>)
   157b0:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   157b2:	6822      	ldr	r2, [r4, #0]
   157b4:	2101      	movs	r1, #1
   157b6:	4b25      	ldr	r3, [pc, #148]	; (1584c <prvTraceInitTraceData+0x1cc>)
   157b8:	50d1      	str	r1, [r2, r3]
		vTraceStop();
   157ba:	4b25      	ldr	r3, [pc, #148]	; (15850 <prvTraceInitTraceData+0x1d0>)
   157bc:	4798      	blx	r3
}
   157be:	bc3c      	pop	{r2, r3, r4, r5}
   157c0:	4690      	mov	r8, r2
   157c2:	4699      	mov	r9, r3
   157c4:	46a2      	mov	sl, r4
   157c6:	46ab      	mov	fp, r5
   157c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RecorderDataPtr = &RecorderData;
   157ca:	4a22      	ldr	r2, [pc, #136]	; (15854 <prvTraceInitTraceData+0x1d4>)
   157cc:	4b01      	ldr	r3, [pc, #4]	; (157d4 <prvTraceInitTraceData+0x154>)
   157ce:	601a      	str	r2, [r3, #0]
   157d0:	e765      	b.n	1569e <prvTraceInitTraceData+0x1e>
   157d2:	46c0      	nop			; (mov r8, r8)
   157d4:	20000bf4 	.word	0x20000bf4
   157d8:	e000e018 	.word	0xe000e018
   157dc:	20005018 	.word	0x20005018
   157e0:	0002624b 	.word	0x0002624b
   157e4:	00001aa1 	.word	0x00001aa1
   157e8:	f0f0f0f0 	.word	0xf0f0f0f0
   157ec:	00015489 	.word	0x00015489
   157f0:	f1f1f1f1 	.word	0xf1f1f1f1
   157f4:	0000055c 	.word	0x0000055c
   157f8:	00000564 	.word	0x00000564
   157fc:	f2f2f2f2 	.word	0xf2f2f2f2
   15800:	000006bc 	.word	0x000006bc
   15804:	00028bc8 	.word	0x00028bc8
   15808:	00015625 	.word	0x00015625
   1580c:	f3f3f3f3 	.word	0xf3f3f3f3
   15810:	0000070c 	.word	0x0000070c
   15814:	00000bc4 	.word	0x00000bc4
   15818:	00000bc5 	.word	0x00000bc5
   1581c:	00000bc6 	.word	0x00000bc6
   15820:	00000bc7 	.word	0x00000bc7
   15824:	00000bc8 	.word	0x00000bc8
   15828:	00000bc9 	.word	0x00000bc9
   1582c:	00000bca 	.word	0x00000bca
   15830:	00000bcb 	.word	0x00000bcb
   15834:	00000bcc 	.word	0x00000bcc
   15838:	00000bcd 	.word	0x00000bcd
   1583c:	00000bce 	.word	0x00000bce
   15840:	00000bcf 	.word	0x00000bcf
   15844:	00015561 	.word	0x00015561
   15848:	20000cac 	.word	0x20000cac
   1584c:	000006b4 	.word	0x000006b4
   15850:	00015649 	.word	0x00015649
   15854:	20004448 	.word	0x20004448

00015858 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   15858:	b510      	push	{r4, lr}
   1585a:	0004      	movs	r4, r0
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1585c:	4b0e      	ldr	r3, [pc, #56]	; (15898 <prvTraceError+0x40>)
   1585e:	681b      	ldr	r3, [r3, #0]
   15860:	2b00      	cmp	r3, #0
   15862:	d001      	beq.n	15868 <prvTraceError+0x10>
	{
		vTraceStop();
   15864:	4b0d      	ldr	r3, [pc, #52]	; (1589c <prvTraceError+0x44>)
   15866:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   15868:	4b0d      	ldr	r3, [pc, #52]	; (158a0 <prvTraceError+0x48>)
   1586a:	681b      	ldr	r3, [r3, #0]
   1586c:	2b00      	cmp	r3, #0
   1586e:	d000      	beq.n	15872 <prvTraceError+0x1a>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
			RecorderDataPtr->internalErrorOccured = 1;
		}
	}
}
   15870:	bd10      	pop	{r4, pc}
		traceErrorMessage = (char*)(intptr_t) msg;
   15872:	4b0b      	ldr	r3, [pc, #44]	; (158a0 <prvTraceError+0x48>)
   15874:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
   15876:	4b08      	ldr	r3, [pc, #32]	; (15898 <prvTraceError+0x40>)
   15878:	6818      	ldr	r0, [r3, #0]
   1587a:	2800      	cmp	r0, #0
   1587c:	d0f8      	beq.n	15870 <prvTraceError+0x18>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1587e:	4b09      	ldr	r3, [pc, #36]	; (158a4 <prvTraceError+0x4c>)
   15880:	469c      	mov	ip, r3
   15882:	4460      	add	r0, ip
   15884:	2250      	movs	r2, #80	; 0x50
   15886:	0021      	movs	r1, r4
   15888:	4b07      	ldr	r3, [pc, #28]	; (158a8 <prvTraceError+0x50>)
   1588a:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1588c:	4b02      	ldr	r3, [pc, #8]	; (15898 <prvTraceError+0x40>)
   1588e:	681a      	ldr	r2, [r3, #0]
   15890:	2101      	movs	r1, #1
   15892:	4b06      	ldr	r3, [pc, #24]	; (158ac <prvTraceError+0x54>)
   15894:	50d1      	str	r1, [r2, r3]
}
   15896:	e7eb      	b.n	15870 <prvTraceError+0x18>
   15898:	20000bf4 	.word	0x20000bf4
   1589c:	00015649 	.word	0x00015649
   158a0:	20000cac 	.word	0x20000cac
   158a4:	000006bc 	.word	0x000006bc
   158a8:	00015625 	.word	0x00015625
   158ac:	000006b4 	.word	0x000006b4

000158b0 <prvTraceNextFreeEventBufferSlot>:
{
   158b0:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
   158b2:	4b0c      	ldr	r3, [pc, #48]	; (158e4 <prvTraceNextFreeEventBufferSlot+0x34>)
   158b4:	6818      	ldr	r0, [r3, #0]
   158b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   158b8:	2b00      	cmp	r3, #0
   158ba:	d010      	beq.n	158de <prvTraceNextFreeEventBufferSlot+0x2e>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   158bc:	69c3      	ldr	r3, [r0, #28]
   158be:	222c      	movs	r2, #44	; 0x2c
   158c0:	32ff      	adds	r2, #255	; 0xff
   158c2:	4293      	cmp	r3, r2
   158c4:	d806      	bhi.n	158d4 <prvTraceNextFreeEventBufferSlot+0x24>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   158c6:	009b      	lsls	r3, r3, #2
   158c8:	22e2      	movs	r2, #226	; 0xe2
   158ca:	00d2      	lsls	r2, r2, #3
   158cc:	4694      	mov	ip, r2
   158ce:	4463      	add	r3, ip
   158d0:	18c0      	adds	r0, r0, r3
}
   158d2:	bd10      	pop	{r4, pc}
		prvTraceError("Attempt to index outside event buffer!");
   158d4:	4804      	ldr	r0, [pc, #16]	; (158e8 <prvTraceNextFreeEventBufferSlot+0x38>)
   158d6:	4b05      	ldr	r3, [pc, #20]	; (158ec <prvTraceNextFreeEventBufferSlot+0x3c>)
   158d8:	4798      	blx	r3
		return NULL;
   158da:	2000      	movs	r0, #0
   158dc:	e7f9      	b.n	158d2 <prvTraceNextFreeEventBufferSlot+0x22>
		return NULL;
   158de:	2000      	movs	r0, #0
   158e0:	e7f7      	b.n	158d2 <prvTraceNextFreeEventBufferSlot+0x22>
   158e2:	46c0      	nop			; (mov r8, r8)
   158e4:	20000bf4 	.word	0x20000bf4
   158e8:	00028bdc 	.word	0x00028bdc
   158ec:	00015859 	.word	0x00015859

000158f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   158f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   158f2:	46c6      	mov	lr, r8
   158f4:	b500      	push	{lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   158f6:	2800      	cmp	r0, #0
   158f8:	d006      	beq.n	15908 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
   158fa:	0007      	movs	r7, r0
   158fc:	2500      	movs	r5, #0
   158fe:	2800      	cmp	r0, #0
   15900:	d005      	beq.n	1590e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   15902:	4b25      	ldr	r3, [pc, #148]	; (15998 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
   15904:	4698      	mov	r8, r3
   15906:	e00a      	b.n	1591e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
   15908:	4824      	ldr	r0, [pc, #144]	; (1599c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
   1590a:	4b25      	ldr	r3, [pc, #148]	; (159a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
   1590c:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
   1590e:	bc04      	pop	{r2}
   15910:	4690      	mov	r8, r2
   15912:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   15914:	2a01      	cmp	r2, #1
   15916:	d021      	beq.n	1595c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6c>
		i++;
   15918:	3501      	adds	r5, #1
	while (i < nofEntriesToCheck)
   1591a:	42bd      	cmp	r5, r7
   1591c:	d2f7      	bcs.n	1590e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
		e = RecorderDataPtr->nextFreeIndex + i;
   1591e:	4643      	mov	r3, r8
   15920:	681c      	ldr	r4, [r3, #0]
   15922:	69e3      	ldr	r3, [r4, #28]
   15924:	18eb      	adds	r3, r5, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   15926:	009e      	lsls	r6, r3, #2
   15928:	19a2      	adds	r2, r4, r6
   1592a:	21e2      	movs	r1, #226	; 0xe2
   1592c:	00c9      	lsls	r1, r1, #3
   1592e:	468c      	mov	ip, r1
   15930:	4462      	add	r2, ip
   15932:	7812      	ldrb	r2, [r2, #0]
   15934:	0011      	movs	r1, r2
   15936:	3167      	adds	r1, #103	; 0x67
   15938:	b2c9      	uxtb	r1, r1
   1593a:	290e      	cmp	r1, #14
   1593c:	d8ea      	bhi.n	15914 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1593e:	3268      	adds	r2, #104	; 0x68
   15940:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   15942:	18d3      	adds	r3, r2, r3
   15944:	69a1      	ldr	r1, [r4, #24]
   15946:	428b      	cmp	r3, r1
   15948:	d2e6      	bcs.n	15918 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1594a:	3201      	adds	r2, #1
   1594c:	0092      	lsls	r2, r2, #2
   1594e:	4663      	mov	r3, ip
   15950:	18f0      	adds	r0, r6, r3
   15952:	1820      	adds	r0, r4, r0
   15954:	2100      	movs	r1, #0
   15956:	4b13      	ldr	r3, [pc, #76]	; (159a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15958:	4798      	blx	r3
   1595a:	e7dd      	b.n	15918 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1595c:	3301      	adds	r3, #1
   1595e:	69a2      	ldr	r2, [r4, #24]
   15960:	4293      	cmp	r3, r2
   15962:	d208      	bcs.n	15976 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x86>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   15964:	23e2      	movs	r3, #226	; 0xe2
   15966:	00db      	lsls	r3, r3, #3
   15968:	18f0      	adds	r0, r6, r3
   1596a:	1820      	adds	r0, r4, r0
   1596c:	2208      	movs	r2, #8
   1596e:	2100      	movs	r1, #0
   15970:	4b0c      	ldr	r3, [pc, #48]	; (159a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15972:	4798      	blx	r3
   15974:	e7d0      	b.n	15918 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   15976:	23e2      	movs	r3, #226	; 0xe2
   15978:	00db      	lsls	r3, r3, #3
   1597a:	18e0      	adds	r0, r4, r3
   1597c:	2204      	movs	r2, #4
   1597e:	2100      	movs	r1, #0
   15980:	4b08      	ldr	r3, [pc, #32]	; (159a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15982:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   15984:	23e2      	movs	r3, #226	; 0xe2
   15986:	00db      	lsls	r3, r3, #3
   15988:	18f0      	adds	r0, r6, r3
   1598a:	1820      	adds	r0, r4, r0
   1598c:	2204      	movs	r2, #4
   1598e:	2100      	movs	r1, #0
   15990:	4b04      	ldr	r3, [pc, #16]	; (159a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>)
   15992:	4798      	blx	r3
   15994:	e7c0      	b.n	15918 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
   15996:	46c0      	nop			; (mov r8, r8)
   15998:	20000bf4 	.word	0x20000bf4
   1599c:	000289fc 	.word	0x000289fc
   159a0:	00015859 	.word	0x00015859
   159a4:	0002624b 	.word	0x0002624b

000159a8 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   159a8:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
   159aa:	4b0b      	ldr	r3, [pc, #44]	; (159d8 <prvTraceUpdateCounters+0x30>)
   159ac:	681b      	ldr	r3, [r3, #0]
   159ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   159b0:	2a00      	cmp	r2, #0
   159b2:	d010      	beq.n	159d6 <prvTraceUpdateCounters+0x2e>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   159b4:	695a      	ldr	r2, [r3, #20]
   159b6:	3201      	adds	r2, #1
   159b8:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   159ba:	69da      	ldr	r2, [r3, #28]
   159bc:	3201      	adds	r2, #1
   159be:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   159c0:	212c      	movs	r1, #44	; 0x2c
   159c2:	31ff      	adds	r1, #255	; 0xff
   159c4:	428a      	cmp	r2, r1
   159c6:	d903      	bls.n	159d0 <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   159c8:	2201      	movs	r2, #1
   159ca:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   159cc:	2200      	movs	r2, #0
   159ce:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   159d0:	2001      	movs	r0, #1
   159d2:	4b02      	ldr	r3, [pc, #8]	; (159dc <prvTraceUpdateCounters+0x34>)
   159d4:	4798      	blx	r3
#endif
}
   159d6:	bd10      	pop	{r4, pc}
   159d8:	20000bf4 	.word	0x20000bf4
   159dc:	000158f1 	.word	0x000158f1

000159e0 <prvTraceGetParam>:
{
   159e0:	b570      	push	{r4, r5, r6, lr}
   159e2:	0004      	movs	r4, r0
   159e4:	000d      	movs	r5, r1
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   159e6:	28ff      	cmp	r0, #255	; 0xff
   159e8:	d002      	beq.n	159f0 <prvTraceGetParam+0x10>
   159ea:	4b0d      	ldr	r3, [pc, #52]	; (15a20 <prvTraceGetParam+0x40>)
   159ec:	4298      	cmp	r0, r3
   159ee:	d103      	bne.n	159f8 <prvTraceGetParam+0x18>
	if (param <= param_max)
   159f0:	42ac      	cmp	r4, r5
   159f2:	d305      	bcc.n	15a00 <prvTraceGetParam+0x20>
}
   159f4:	0028      	movs	r0, r5
   159f6:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   159f8:	480a      	ldr	r0, [pc, #40]	; (15a24 <prvTraceGetParam+0x44>)
   159fa:	4b0b      	ldr	r3, [pc, #44]	; (15a28 <prvTraceGetParam+0x48>)
   159fc:	4798      	blx	r3
   159fe:	e7f9      	b.n	159f4 <prvTraceGetParam+0x14>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   15a00:	4b0a      	ldr	r3, [pc, #40]	; (15a2c <prvTraceGetParam+0x4c>)
   15a02:	4798      	blx	r3
		if (xps != NULL)
   15a04:	2800      	cmp	r0, #0
   15a06:	d009      	beq.n	15a1c <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
   15a08:	2301      	movs	r3, #1
   15a0a:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   15a0c:	002b      	movs	r3, r5
   15a0e:	43a3      	bics	r3, r4
   15a10:	0a1a      	lsrs	r2, r3, #8
   15a12:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   15a14:	0c1b      	lsrs	r3, r3, #16
   15a16:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
   15a18:	4b05      	ldr	r3, [pc, #20]	; (15a30 <prvTraceGetParam+0x50>)
   15a1a:	4798      	blx	r3
		return param & param_max;
   15a1c:	4025      	ands	r5, r4
   15a1e:	e7e9      	b.n	159f4 <prvTraceGetParam+0x14>
   15a20:	0000ffff 	.word	0x0000ffff
   15a24:	00028b00 	.word	0x00028b00
   15a28:	00015859 	.word	0x00015859
   15a2c:	000158b1 	.word	0x000158b1
   15a30:	000159a9 	.word	0x000159a9

00015a34 <uiIndexOfObject>:
{
   15a34:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15a36:	2908      	cmp	r1, #8
   15a38:	d814      	bhi.n	15a64 <uiIndexOfObject+0x30>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   15a3a:	2800      	cmp	r0, #0
   15a3c:	d017      	beq.n	15a6e <uiIndexOfObject+0x3a>
   15a3e:	4b0e      	ldr	r3, [pc, #56]	; (15a78 <uiIndexOfObject+0x44>)
   15a40:	681a      	ldr	r2, [r3, #0]
   15a42:	1853      	adds	r3, r2, r1
   15a44:	3364      	adds	r3, #100	; 0x64
   15a46:	781b      	ldrb	r3, [r3, #0]
   15a48:	4283      	cmp	r3, r0
   15a4a:	d310      	bcc.n	15a6e <uiIndexOfObject+0x3a>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   15a4c:	1853      	adds	r3, r2, r1
   15a4e:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15a50:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   15a52:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   15a54:	4358      	muls	r0, r3
   15a56:	3140      	adds	r1, #64	; 0x40
   15a58:	0049      	lsls	r1, r1, #1
   15a5a:	1851      	adds	r1, r2, r1
   15a5c:	890b      	ldrh	r3, [r1, #8]
   15a5e:	18c0      	adds	r0, r0, r3
   15a60:	b280      	uxth	r0, r0
   15a62:	e008      	b.n	15a76 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15a64:	4805      	ldr	r0, [pc, #20]	; (15a7c <uiIndexOfObject+0x48>)
   15a66:	4b06      	ldr	r3, [pc, #24]	; (15a80 <uiIndexOfObject+0x4c>)
   15a68:	4798      	blx	r3
   15a6a:	2000      	movs	r0, #0
   15a6c:	e003      	b.n	15a76 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   15a6e:	4805      	ldr	r0, [pc, #20]	; (15a84 <uiIndexOfObject+0x50>)
   15a70:	4b03      	ldr	r3, [pc, #12]	; (15a80 <uiIndexOfObject+0x4c>)
   15a72:	4798      	blx	r3
   15a74:	2000      	movs	r0, #0
}
   15a76:	bd10      	pop	{r4, pc}
   15a78:	20000bf4 	.word	0x20000bf4
   15a7c:	00029190 	.word	0x00029190
   15a80:	00015859 	.word	0x00015859
   15a84:	000291d0 	.word	0x000291d0

00015a88 <prvMarkObjectAsUsed>:
{
   15a88:	b510      	push	{r4, lr}
   15a8a:	000b      	movs	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   15a8c:	0001      	movs	r1, r0
   15a8e:	0018      	movs	r0, r3
   15a90:	4b04      	ldr	r3, [pc, #16]	; (15aa4 <prvMarkObjectAsUsed+0x1c>)
   15a92:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   15a94:	4b04      	ldr	r3, [pc, #16]	; (15aa8 <prvMarkObjectAsUsed+0x20>)
   15a96:	681b      	ldr	r3, [r3, #0]
   15a98:	1818      	adds	r0, r3, r0
   15a9a:	309c      	adds	r0, #156	; 0x9c
   15a9c:	2301      	movs	r3, #1
   15a9e:	7003      	strb	r3, [r0, #0]
}
   15aa0:	bd10      	pop	{r4, pc}
   15aa2:	46c0      	nop			; (mov r8, r8)
   15aa4:	00015a35 	.word	0x00015a35
   15aa8:	20000bf4 	.word	0x20000bf4

00015aac <prvTraceSetPriorityProperty>:
{
   15aac:	b570      	push	{r4, r5, r6, lr}
   15aae:	0004      	movs	r4, r0
   15ab0:	0008      	movs	r0, r1
   15ab2:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15ab4:	2c08      	cmp	r4, #8
   15ab6:	d813      	bhi.n	15ae0 <prvTraceSetPriorityProperty+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15ab8:	4b0d      	ldr	r3, [pc, #52]	; (15af0 <prvTraceSetPriorityProperty+0x44>)
   15aba:	681b      	ldr	r3, [r3, #0]
   15abc:	191b      	adds	r3, r3, r4
   15abe:	3364      	adds	r3, #100	; 0x64
   15ac0:	781b      	ldrb	r3, [r3, #0]
   15ac2:	428b      	cmp	r3, r1
   15ac4:	d310      	bcc.n	15ae8 <prvTraceSetPriorityProperty+0x3c>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   15ac6:	0021      	movs	r1, r4
   15ac8:	4b0a      	ldr	r3, [pc, #40]	; (15af4 <prvTraceSetPriorityProperty+0x48>)
   15aca:	4798      	blx	r3
   15acc:	4b08      	ldr	r3, [pc, #32]	; (15af0 <prvTraceSetPriorityProperty+0x44>)
   15ace:	681b      	ldr	r3, [r3, #0]
   15ad0:	191c      	adds	r4, r3, r4
   15ad2:	3470      	adds	r4, #112	; 0x70
   15ad4:	7822      	ldrb	r2, [r4, #0]
   15ad6:	181b      	adds	r3, r3, r0
   15ad8:	189b      	adds	r3, r3, r2
   15ada:	339d      	adds	r3, #157	; 0x9d
   15adc:	701d      	strb	r5, [r3, #0]
}
   15ade:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15ae0:	4805      	ldr	r0, [pc, #20]	; (15af8 <prvTraceSetPriorityProperty+0x4c>)
   15ae2:	4b06      	ldr	r3, [pc, #24]	; (15afc <prvTraceSetPriorityProperty+0x50>)
   15ae4:	4798      	blx	r3
   15ae6:	e7fa      	b.n	15ade <prvTraceSetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15ae8:	4805      	ldr	r0, [pc, #20]	; (15b00 <prvTraceSetPriorityProperty+0x54>)
   15aea:	4b04      	ldr	r3, [pc, #16]	; (15afc <prvTraceSetPriorityProperty+0x50>)
   15aec:	4798      	blx	r3
   15aee:	e7f6      	b.n	15ade <prvTraceSetPriorityProperty+0x32>
   15af0:	20000bf4 	.word	0x20000bf4
   15af4:	00015a35 	.word	0x00015a35
   15af8:	00028d18 	.word	0x00028d18
   15afc:	00015859 	.word	0x00015859
   15b00:	00028d64 	.word	0x00028d64

00015b04 <prvTraceGetPriorityProperty>:
{
   15b04:	b510      	push	{r4, lr}
   15b06:	0004      	movs	r4, r0
   15b08:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15b0a:	2c08      	cmp	r4, #8
   15b0c:	d813      	bhi.n	15b36 <prvTraceGetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15b0e:	4b0f      	ldr	r3, [pc, #60]	; (15b4c <prvTraceGetPriorityProperty+0x48>)
   15b10:	681b      	ldr	r3, [r3, #0]
   15b12:	191b      	adds	r3, r3, r4
   15b14:	3364      	adds	r3, #100	; 0x64
   15b16:	781b      	ldrb	r3, [r3, #0]
   15b18:	428b      	cmp	r3, r1
   15b1a:	d311      	bcc.n	15b40 <prvTraceGetPriorityProperty+0x3c>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   15b1c:	0021      	movs	r1, r4
   15b1e:	4b0c      	ldr	r3, [pc, #48]	; (15b50 <prvTraceGetPriorityProperty+0x4c>)
   15b20:	4798      	blx	r3
   15b22:	4b0a      	ldr	r3, [pc, #40]	; (15b4c <prvTraceGetPriorityProperty+0x48>)
   15b24:	681b      	ldr	r3, [r3, #0]
   15b26:	191c      	adds	r4, r3, r4
   15b28:	3470      	adds	r4, #112	; 0x70
   15b2a:	7822      	ldrb	r2, [r4, #0]
   15b2c:	181b      	adds	r3, r3, r0
   15b2e:	189b      	adds	r3, r3, r2
   15b30:	339d      	adds	r3, #157	; 0x9d
   15b32:	7818      	ldrb	r0, [r3, #0]
}
   15b34:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15b36:	4807      	ldr	r0, [pc, #28]	; (15b54 <prvTraceGetPriorityProperty+0x50>)
   15b38:	4b07      	ldr	r3, [pc, #28]	; (15b58 <prvTraceGetPriorityProperty+0x54>)
   15b3a:	4798      	blx	r3
   15b3c:	2000      	movs	r0, #0
   15b3e:	e7f9      	b.n	15b34 <prvTraceGetPriorityProperty+0x30>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15b40:	4806      	ldr	r0, [pc, #24]	; (15b5c <prvTraceGetPriorityProperty+0x58>)
   15b42:	4b05      	ldr	r3, [pc, #20]	; (15b58 <prvTraceGetPriorityProperty+0x54>)
   15b44:	4798      	blx	r3
   15b46:	2000      	movs	r0, #0
   15b48:	e7f4      	b.n	15b34 <prvTraceGetPriorityProperty+0x30>
   15b4a:	46c0      	nop			; (mov r8, r8)
   15b4c:	20000bf4 	.word	0x20000bf4
   15b50:	00015a35 	.word	0x00015a35
   15b54:	00028b3c 	.word	0x00028b3c
   15b58:	00015859 	.word	0x00015859
   15b5c:	00028b88 	.word	0x00028b88

00015b60 <prvTraceSetObjectState>:
{
   15b60:	b570      	push	{r4, r5, r6, lr}
   15b62:	0004      	movs	r4, r0
   15b64:	0008      	movs	r0, r1
   15b66:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15b68:	2c08      	cmp	r4, #8
   15b6a:	d813      	bhi.n	15b94 <prvTraceSetObjectState+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15b6c:	4b0d      	ldr	r3, [pc, #52]	; (15ba4 <prvTraceSetObjectState+0x44>)
   15b6e:	681b      	ldr	r3, [r3, #0]
   15b70:	191b      	adds	r3, r3, r4
   15b72:	3364      	adds	r3, #100	; 0x64
   15b74:	781b      	ldrb	r3, [r3, #0]
   15b76:	428b      	cmp	r3, r1
   15b78:	d310      	bcc.n	15b9c <prvTraceSetObjectState+0x3c>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   15b7a:	0021      	movs	r1, r4
   15b7c:	4b0a      	ldr	r3, [pc, #40]	; (15ba8 <prvTraceSetObjectState+0x48>)
   15b7e:	4798      	blx	r3
   15b80:	4b08      	ldr	r3, [pc, #32]	; (15ba4 <prvTraceSetObjectState+0x44>)
   15b82:	681b      	ldr	r3, [r3, #0]
   15b84:	191c      	adds	r4, r3, r4
   15b86:	3470      	adds	r4, #112	; 0x70
   15b88:	7822      	ldrb	r2, [r4, #0]
   15b8a:	181b      	adds	r3, r3, r0
   15b8c:	189b      	adds	r3, r3, r2
   15b8e:	339c      	adds	r3, #156	; 0x9c
   15b90:	701d      	strb	r5, [r3, #0]
}
   15b92:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   15b94:	4805      	ldr	r0, [pc, #20]	; (15bac <prvTraceSetObjectState+0x4c>)
   15b96:	4b06      	ldr	r3, [pc, #24]	; (15bb0 <prvTraceSetObjectState+0x50>)
   15b98:	4798      	blx	r3
   15b9a:	e7fa      	b.n	15b92 <prvTraceSetObjectState+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   15b9c:	4805      	ldr	r0, [pc, #20]	; (15bb4 <prvTraceSetObjectState+0x54>)
   15b9e:	4b04      	ldr	r3, [pc, #16]	; (15bb0 <prvTraceSetObjectState+0x50>)
   15ba0:	4798      	blx	r3
   15ba2:	e7f6      	b.n	15b92 <prvTraceSetObjectState+0x32>
   15ba4:	20000bf4 	.word	0x20000bf4
   15ba8:	00015a35 	.word	0x00015a35
   15bac:	00028c98 	.word	0x00028c98
   15bb0:	00015859 	.word	0x00015859
   15bb4:	00028cdc 	.word	0x00028cdc

00015bb8 <prvTraceSetTaskInstanceFinished>:
{
   15bb8:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   15bba:	4b0b      	ldr	r3, [pc, #44]	; (15be8 <prvTraceSetTaskInstanceFinished+0x30>)
   15bbc:	681a      	ldr	r2, [r3, #0]
   15bbe:	2367      	movs	r3, #103	; 0x67
   15bc0:	5cd3      	ldrb	r3, [r2, r3]
   15bc2:	4283      	cmp	r3, r0
   15bc4:	d30c      	bcc.n	15be0 <prvTraceSetTaskInstanceFinished+0x28>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   15bc6:	2103      	movs	r1, #3
   15bc8:	4b08      	ldr	r3, [pc, #32]	; (15bec <prvTraceSetTaskInstanceFinished+0x34>)
   15bca:	4798      	blx	r3
   15bcc:	4b06      	ldr	r3, [pc, #24]	; (15be8 <prvTraceSetTaskInstanceFinished+0x30>)
   15bce:	681b      	ldr	r3, [r3, #0]
   15bd0:	2273      	movs	r2, #115	; 0x73
   15bd2:	5c9a      	ldrb	r2, [r3, r2]
   15bd4:	181b      	adds	r3, r3, r0
   15bd6:	189b      	adds	r3, r3, r2
   15bd8:	339c      	adds	r3, #156	; 0x9c
   15bda:	2200      	movs	r2, #0
   15bdc:	701a      	strb	r2, [r3, #0]
}
   15bde:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   15be0:	4803      	ldr	r0, [pc, #12]	; (15bf0 <prvTraceSetTaskInstanceFinished+0x38>)
   15be2:	4b04      	ldr	r3, [pc, #16]	; (15bf4 <prvTraceSetTaskInstanceFinished+0x3c>)
   15be4:	4798      	blx	r3
   15be6:	e7fa      	b.n	15bde <prvTraceSetTaskInstanceFinished+0x26>
   15be8:	20000bf4 	.word	0x20000bf4
   15bec:	00015a35 	.word	0x00015a35
   15bf0:	00028da4 	.word	0x00028da4
   15bf4:	00015859 	.word	0x00015859

00015bf8 <prvTraceGetObjectHandle>:
{
   15bf8:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   15bfa:	4b2d      	ldr	r3, [pc, #180]	; (15cb0 <prvTraceGetObjectHandle+0xb8>)
   15bfc:	681b      	ldr	r3, [r3, #0]
   15bfe:	2b00      	cmp	r3, #0
   15c00:	d046      	beq.n	15c90 <prvTraceGetObjectHandle+0x98>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15c02:	2808      	cmp	r0, #8
   15c04:	d849      	bhi.n	15c9a <prvTraceGetObjectHandle+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15c06:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15c0a:	2301      	movs	r3, #1
   15c0c:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   15c10:	4a28      	ldr	r2, [pc, #160]	; (15cb4 <prvTraceGetObjectHandle+0xbc>)
   15c12:	6813      	ldr	r3, [r2, #0]
   15c14:	3301      	adds	r3, #1
   15c16:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   15c18:	4a27      	ldr	r2, [pc, #156]	; (15cb8 <prvTraceGetObjectHandle+0xc0>)
   15c1a:	0043      	lsls	r3, r0, #1
   15c1c:	5a9b      	ldrh	r3, [r3, r2]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   15c1e:	18d2      	adds	r2, r2, r3
   15c20:	3248      	adds	r2, #72	; 0x48
   15c22:	7812      	ldrb	r2, [r2, #0]
   15c24:	2a00      	cmp	r2, #0
   15c26:	d10a      	bne.n	15c3e <prvTraceGetObjectHandle+0x46>
		objectHandleStacks.objectHandles[indexOfHandle] =
   15c28:	4923      	ldr	r1, [pc, #140]	; (15cb8 <prvTraceGetObjectHandle+0xc0>)
   15c2a:	18cd      	adds	r5, r1, r3
   15c2c:	3548      	adds	r5, #72	; 0x48
			(traceHandle)(1 + indexOfHandle -
   15c2e:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   15c30:	0006      	movs	r6, r0
   15c32:	3608      	adds	r6, #8
   15c34:	0076      	lsls	r6, r6, #1
   15c36:	1989      	adds	r1, r1, r6
			(traceHandle)(1 + indexOfHandle -
   15c38:	8849      	ldrh	r1, [r1, #2]
   15c3a:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
   15c3c:	702a      	strb	r2, [r5, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   15c3e:	0001      	movs	r1, r0
   15c40:	3110      	adds	r1, #16
   15c42:	0049      	lsls	r1, r1, #1
   15c44:	4a1c      	ldr	r2, [pc, #112]	; (15cb8 <prvTraceGetObjectHandle+0xc0>)
   15c46:	1852      	adds	r2, r2, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   15c48:	8892      	ldrh	r2, [r2, #4]
   15c4a:	429a      	cmp	r2, r3
   15c4c:	d32a      	bcc.n	15ca4 <prvTraceGetObjectHandle+0xac>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
   15c4e:	491a      	ldr	r1, [pc, #104]	; (15cb8 <prvTraceGetObjectHandle+0xc0>)
   15c50:	18ca      	adds	r2, r1, r3
   15c52:	3248      	adds	r2, #72	; 0x48
   15c54:	7812      	ldrb	r2, [r2, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   15c56:	3301      	adds	r3, #1
   15c58:	b29b      	uxth	r3, r3
   15c5a:	0045      	lsls	r5, r0, #1
   15c5c:	526b      	strh	r3, [r5, r1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
   15c5e:	0005      	movs	r5, r0
   15c60:	3508      	adds	r5, #8
   15c62:	006d      	lsls	r5, r5, #1
   15c64:	194d      	adds	r5, r1, r5
   15c66:	886d      	ldrh	r5, [r5, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   15c68:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   15c6a:	0005      	movs	r5, r0
   15c6c:	3518      	adds	r5, #24
   15c6e:	006d      	lsls	r5, r5, #1
   15c70:	1949      	adds	r1, r1, r5
   15c72:	88c9      	ldrh	r1, [r1, #6]
		if (hndCount >
   15c74:	428b      	cmp	r3, r1
   15c76:	dd03      	ble.n	15c80 <prvTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   15c78:	490f      	ldr	r1, [pc, #60]	; (15cb8 <prvTraceGetObjectHandle+0xc0>)
   15c7a:	1948      	adds	r0, r1, r5
				(traceHandle)hndCount;
   15c7c:	b2db      	uxtb	r3, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   15c7e:	80c3      	strh	r3, [r0, #6]
	trcCRITICAL_SECTION_END();
   15c80:	490c      	ldr	r1, [pc, #48]	; (15cb4 <prvTraceGetObjectHandle+0xbc>)
   15c82:	680b      	ldr	r3, [r1, #0]
   15c84:	3b01      	subs	r3, #1
   15c86:	600b      	str	r3, [r1, #0]
   15c88:	f384 8810 	msr	PRIMASK, r4
}
   15c8c:	0010      	movs	r0, r2
   15c8e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   15c90:	480a      	ldr	r0, [pc, #40]	; (15cbc <prvTraceGetObjectHandle+0xc4>)
   15c92:	4b0b      	ldr	r3, [pc, #44]	; (15cc0 <prvTraceGetObjectHandle+0xc8>)
   15c94:	4798      	blx	r3
   15c96:	2200      	movs	r2, #0
   15c98:	e7f8      	b.n	15c8c <prvTraceGetObjectHandle+0x94>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   15c9a:	480a      	ldr	r0, [pc, #40]	; (15cc4 <prvTraceGetObjectHandle+0xcc>)
   15c9c:	4b08      	ldr	r3, [pc, #32]	; (15cc0 <prvTraceGetObjectHandle+0xc8>)
   15c9e:	4798      	blx	r3
   15ca0:	2200      	movs	r2, #0
   15ca2:	e7f3      	b.n	15c8c <prvTraceGetObjectHandle+0x94>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   15ca4:	4b08      	ldr	r3, [pc, #32]	; (15cc8 <prvTraceGetObjectHandle+0xd0>)
   15ca6:	4798      	blx	r3
   15ca8:	4b05      	ldr	r3, [pc, #20]	; (15cc0 <prvTraceGetObjectHandle+0xc8>)
   15caa:	4798      	blx	r3
		handle = 0;
   15cac:	2200      	movs	r2, #0
   15cae:	e7e7      	b.n	15c80 <prvTraceGetObjectHandle+0x88>
   15cb0:	20000bf4 	.word	0x20000bf4
   15cb4:	20000ca4 	.word	0x20000ca4
   15cb8:	20000c10 	.word	0x20000c10
   15cbc:	00029294 	.word	0x00029294
   15cc0:	00015859 	.word	0x00015859
   15cc4:	00028ab8 	.word	0x00028ab8
   15cc8:	000155c5 	.word	0x000155c5

00015ccc <prvTraceSetObjectName>:
{
   15ccc:	b570      	push	{r4, r5, r6, lr}
   15cce:	0004      	movs	r4, r0
   15cd0:	0008      	movs	r0, r1
   15cd2:	1e15      	subs	r5, r2, #0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   15cd4:	d012      	beq.n	15cfc <prvTraceSetObjectName+0x30>
	if (objectclass >= TRACE_NCLASSES)
   15cd6:	2c08      	cmp	r4, #8
   15cd8:	d814      	bhi.n	15d04 <prvTraceSetObjectName+0x38>
	if (handle == 0)
   15cda:	2900      	cmp	r1, #0
   15cdc:	d016      	beq.n	15d0c <prvTraceSetObjectName+0x40>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   15cde:	4b16      	ldr	r3, [pc, #88]	; (15d38 <prvTraceSetObjectName+0x6c>)
   15ce0:	681b      	ldr	r3, [r3, #0]
   15ce2:	191b      	adds	r3, r3, r4
   15ce4:	3364      	adds	r3, #100	; 0x64
   15ce6:	781b      	ldrb	r3, [r3, #0]
   15ce8:	428b      	cmp	r3, r1
   15cea:	d313      	bcc.n	15d14 <prvTraceSetObjectName+0x48>
		idx = uiIndexOfObject(handle, objectclass);
   15cec:	0021      	movs	r1, r4
   15cee:	4b13      	ldr	r3, [pc, #76]	; (15d3c <prvTraceSetObjectName+0x70>)
   15cf0:	4798      	blx	r3
		if (traceErrorMessage == NULL)
   15cf2:	4b13      	ldr	r3, [pc, #76]	; (15d40 <prvTraceSetObjectName+0x74>)
   15cf4:	681b      	ldr	r3, [r3, #0]
   15cf6:	2b00      	cmp	r3, #0
   15cf8:	d012      	beq.n	15d20 <prvTraceSetObjectName+0x54>
}
   15cfa:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   15cfc:	4811      	ldr	r0, [pc, #68]	; (15d44 <prvTraceSetObjectName+0x78>)
   15cfe:	4b12      	ldr	r3, [pc, #72]	; (15d48 <prvTraceSetObjectName+0x7c>)
   15d00:	4798      	blx	r3
   15d02:	e7fa      	b.n	15cfa <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   15d04:	4811      	ldr	r0, [pc, #68]	; (15d4c <prvTraceSetObjectName+0x80>)
   15d06:	4b10      	ldr	r3, [pc, #64]	; (15d48 <prvTraceSetObjectName+0x7c>)
   15d08:	4798      	blx	r3
		return;
   15d0a:	e7f6      	b.n	15cfa <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   15d0c:	4810      	ldr	r0, [pc, #64]	; (15d50 <prvTraceSetObjectName+0x84>)
   15d0e:	4b0e      	ldr	r3, [pc, #56]	; (15d48 <prvTraceSetObjectName+0x7c>)
   15d10:	4798      	blx	r3
		return;
   15d12:	e7f2      	b.n	15cfa <prvTraceSetObjectName+0x2e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   15d14:	0020      	movs	r0, r4
   15d16:	4b0f      	ldr	r3, [pc, #60]	; (15d54 <prvTraceSetObjectName+0x88>)
   15d18:	4798      	blx	r3
   15d1a:	4b0b      	ldr	r3, [pc, #44]	; (15d48 <prvTraceSetObjectName+0x7c>)
   15d1c:	4798      	blx	r3
   15d1e:	e7ec      	b.n	15cfa <prvTraceSetObjectName+0x2e>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   15d20:	4b05      	ldr	r3, [pc, #20]	; (15d38 <prvTraceSetObjectName+0x6c>)
   15d22:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   15d24:	191c      	adds	r4, r3, r4
   15d26:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   15d28:	7822      	ldrb	r2, [r4, #0]
   15d2a:	309c      	adds	r0, #156	; 0x9c
   15d2c:	1818      	adds	r0, r3, r0
   15d2e:	0029      	movs	r1, r5
   15d30:	4b09      	ldr	r3, [pc, #36]	; (15d58 <prvTraceSetObjectName+0x8c>)
   15d32:	4798      	blx	r3
   15d34:	e7e1      	b.n	15cfa <prvTraceSetObjectName+0x2e>
   15d36:	46c0      	nop			; (mov r8, r8)
   15d38:	20000bf4 	.word	0x20000bf4
   15d3c:	00015a35 	.word	0x00015a35
   15d40:	20000cac 	.word	0x20000cac
   15d44:	00028c04 	.word	0x00028c04
   15d48:	00015859 	.word	0x00015859
   15d4c:	00028c38 	.word	0x00028c38
   15d50:	00028c68 	.word	0x00028c68
   15d54:	000155c5 	.word	0x000155c5
   15d58:	00015625 	.word	0x00015625

00015d5c <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   15d5c:	b570      	push	{r4, r5, r6, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   15d5e:	4b1e      	ldr	r3, [pc, #120]	; (15dd8 <prvTracePortGetTimeStamp+0x7c>)
   15d60:	681b      	ldr	r3, [r3, #0]
   15d62:	2b01      	cmp	r3, #1
   15d64:	d02b      	beq.n	15dbe <prvTracePortGetTimeStamp+0x62>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   15d66:	4b1d      	ldr	r3, [pc, #116]	; (15ddc <prvTracePortGetTimeStamp+0x80>)
   15d68:	6819      	ldr	r1, [r3, #0]
   15d6a:	4b1d      	ldr	r3, [pc, #116]	; (15de0 <prvTracePortGetTimeStamp+0x84>)
   15d6c:	681b      	ldr	r3, [r3, #0]
   15d6e:	3101      	adds	r1, #1
   15d70:	1ac9      	subs	r1, r1, r3
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   15d72:	4b1c      	ldr	r3, [pc, #112]	; (15de4 <prvTracePortGetTimeStamp+0x88>)
   15d74:	681b      	ldr	r3, [r3, #0]
   15d76:	4a1c      	ldr	r2, [pc, #112]	; (15de8 <prvTracePortGetTimeStamp+0x8c>)
   15d78:	6814      	ldr	r4, [r2, #0]
   15d7a:	43e2      	mvns	r2, r4
   15d7c:	42da      	cmn	r2, r3
   15d7e:	d424      	bmi.n	15dca <prvTracePortGetTimeStamp+0x6e>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   15d80:	4a1a      	ldr	r2, [pc, #104]	; (15dec <prvTracePortGetTimeStamp+0x90>)
   15d82:	6814      	ldr	r4, [r2, #0]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   15d84:	42a1      	cmp	r1, r4
   15d86:	41a4      	sbcs	r4, r4
   15d88:	4264      	negs	r4, r4
   15d8a:	191c      	adds	r4, r3, r4
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   15d8c:	2800      	cmp	r0, #0
   15d8e:	d01f      	beq.n	15dd0 <prvTracePortGetTimeStamp+0x74>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   15d90:	4d12      	ldr	r5, [pc, #72]	; (15ddc <prvTracePortGetTimeStamp+0x80>)
   15d92:	682b      	ldr	r3, [r5, #0]
   15d94:	3301      	adds	r3, #1
   15d96:	089b      	lsrs	r3, r3, #2
   15d98:	4363      	muls	r3, r4
   15d9a:	001a      	movs	r2, r3
   15d9c:	4e14      	ldr	r6, [pc, #80]	; (15df0 <prvTracePortGetTimeStamp+0x94>)
   15d9e:	6033      	str	r3, [r6, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   15da0:	682d      	ldr	r5, [r5, #0]
   15da2:	3501      	adds	r5, #1
   15da4:	2303      	movs	r3, #3
   15da6:	402b      	ands	r3, r5
   15da8:	4363      	muls	r3, r4
   15daa:	185b      	adds	r3, r3, r1
   15dac:	089b      	lsrs	r3, r3, #2
   15dae:	189b      	adds	r3, r3, r2
   15db0:	6033      	str	r3, [r6, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   15db2:	4a0c      	ldr	r2, [pc, #48]	; (15de4 <prvTracePortGetTimeStamp+0x88>)
   15db4:	6014      	str	r4, [r2, #0]
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;
   15db6:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   15db8:	4b0c      	ldr	r3, [pc, #48]	; (15dec <prvTracePortGetTimeStamp+0x90>)
   15dba:	6019      	str	r1, [r3, #0]
}
   15dbc:	bd70      	pop	{r4, r5, r6, pc}
		if (pTimestamp)
   15dbe:	2800      	cmp	r0, #0
   15dc0:	d0fc      	beq.n	15dbc <prvTracePortGetTimeStamp+0x60>
			*pTimestamp = last_timestamp;
   15dc2:	4b0b      	ldr	r3, [pc, #44]	; (15df0 <prvTracePortGetTimeStamp+0x94>)
   15dc4:	681b      	ldr	r3, [r3, #0]
   15dc6:	6003      	str	r3, [r0, #0]
   15dc8:	e7f8      	b.n	15dbc <prvTracePortGetTimeStamp+0x60>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   15dca:	42a3      	cmp	r3, r4
   15dcc:	d1de      	bne.n	15d8c <prvTracePortGetTimeStamp+0x30>
   15dce:	e7d7      	b.n	15d80 <prvTracePortGetTimeStamp+0x24>
	last_traceTickCount = traceTickCount;
   15dd0:	4b04      	ldr	r3, [pc, #16]	; (15de4 <prvTracePortGetTimeStamp+0x88>)
   15dd2:	601c      	str	r4, [r3, #0]
   15dd4:	e7f0      	b.n	15db8 <prvTracePortGetTimeStamp+0x5c>
   15dd6:	46c0      	nop			; (mov r8, r8)
   15dd8:	20000cb0 	.word	0x20000cb0
   15ddc:	e000e014 	.word	0xe000e014
   15de0:	e000e018 	.word	0xe000e018
   15de4:	20000c0c 	.word	0x20000c0c
   15de8:	20000cb8 	.word	0x20000cb8
   15dec:	20000c04 	.word	0x20000c04
   15df0:	20000c08 	.word	0x20000c08

00015df4 <prvTraceGetDTS>:
{
   15df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15df6:	b083      	sub	sp, #12
   15df8:	0005      	movs	r5, r0
	uint32_t timestamp = 0;
   15dfa:	2300      	movs	r3, #0
   15dfc:	9301      	str	r3, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   15dfe:	28ff      	cmp	r0, #255	; 0xff
   15e00:	d002      	beq.n	15e08 <prvTraceGetDTS+0x14>
   15e02:	4b39      	ldr	r3, [pc, #228]	; (15ee8 <prvTraceGetDTS+0xf4>)
   15e04:	4298      	cmp	r0, r3
   15e06:	d135      	bne.n	15e74 <prvTraceGetDTS+0x80>
	if (RecorderDataPtr->frequency == 0)
   15e08:	4b38      	ldr	r3, [pc, #224]	; (15eec <prvTraceGetDTS+0xf8>)
   15e0a:	681c      	ldr	r4, [r3, #0]
   15e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15e0e:	2b00      	cmp	r3, #0
   15e10:	d105      	bne.n	15e1e <prvTraceGetDTS+0x2a>
		if (timestampFrequency != 0)
   15e12:	4b37      	ldr	r3, [pc, #220]	; (15ef0 <prvTraceGetDTS+0xfc>)
   15e14:	681b      	ldr	r3, [r3, #0]
   15e16:	2b00      	cmp	r3, #0
   15e18:	d031      	beq.n	15e7e <prvTraceGetDTS+0x8a>
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   15e1a:	089b      	lsrs	r3, r3, #2
   15e1c:	6263      	str	r3, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
   15e1e:	a801      	add	r0, sp, #4
   15e20:	4b34      	ldr	r3, [pc, #208]	; (15ef4 <prvTraceGetDTS+0x100>)
   15e22:	4798      	blx	r3
	dts = timestamp - old_timestamp;
   15e24:	9b01      	ldr	r3, [sp, #4]
   15e26:	4a34      	ldr	r2, [pc, #208]	; (15ef8 <prvTraceGetDTS+0x104>)
   15e28:	6811      	ldr	r1, [r2, #0]
   15e2a:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
   15e2c:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
   15e2e:	4a2f      	ldr	r2, [pc, #188]	; (15eec <prvTraceGetDTS+0xf8>)
   15e30:	6816      	ldr	r6, [r2, #0]
   15e32:	6a77      	ldr	r7, [r6, #36]	; 0x24
   15e34:	2f00      	cmp	r7, #0
   15e36:	d032      	beq.n	15e9e <prvTraceGetDTS+0xaa>
		if (dts > RecorderDataPtr->frequency)
   15e38:	42bc      	cmp	r4, r7
   15e3a:	d92c      	bls.n	15e96 <prvTraceGetDTS+0xa2>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   15e3c:	0039      	movs	r1, r7
   15e3e:	0020      	movs	r0, r4
   15e40:	4b2e      	ldr	r3, [pc, #184]	; (15efc <prvTraceGetDTS+0x108>)
   15e42:	4798      	blx	r3
   15e44:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   15e46:	469c      	mov	ip, r3
   15e48:	4460      	add	r0, ip
   15e4a:	62f0      	str	r0, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   15e4c:	0039      	movs	r1, r7
   15e4e:	0020      	movs	r0, r4
   15e50:	4b2b      	ldr	r3, [pc, #172]	; (15f00 <prvTraceGetDTS+0x10c>)
   15e52:	4798      	blx	r3
   15e54:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15e56:	469c      	mov	ip, r3
   15e58:	4461      	add	r1, ip
   15e5a:	62b1      	str	r1, [r6, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   15e5c:	4b23      	ldr	r3, [pc, #140]	; (15eec <prvTraceGetDTS+0xf8>)
   15e5e:	681b      	ldr	r3, [r3, #0]
   15e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15e62:	6a59      	ldr	r1, [r3, #36]	; 0x24
   15e64:	428a      	cmp	r2, r1
   15e66:	d31b      	bcc.n	15ea0 <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond++;
   15e68:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   15e6a:	3001      	adds	r0, #1
   15e6c:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   15e6e:	1a52      	subs	r2, r2, r1
   15e70:	629a      	str	r2, [r3, #40]	; 0x28
   15e72:	e015      	b.n	15ea0 <prvTraceGetDTS+0xac>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   15e74:	4823      	ldr	r0, [pc, #140]	; (15f04 <prvTraceGetDTS+0x110>)
   15e76:	4b24      	ldr	r3, [pc, #144]	; (15f08 <prvTraceGetDTS+0x114>)
   15e78:	4798      	blx	r3
   15e7a:	2000      	movs	r0, #0
   15e7c:	e014      	b.n	15ea8 <prvTraceGetDTS+0xb4>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   15e7e:	4b23      	ldr	r3, [pc, #140]	; (15f0c <prvTraceGetDTS+0x118>)
   15e80:	681a      	ldr	r2, [r3, #0]
   15e82:	4b23      	ldr	r3, [pc, #140]	; (15f10 <prvTraceGetDTS+0x11c>)
   15e84:	681b      	ldr	r3, [r3, #0]
   15e86:	429a      	cmp	r2, r3
   15e88:	d0c9      	beq.n	15e1e <prvTraceGetDTS+0x2a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   15e8a:	2000      	movs	r0, #0
   15e8c:	4b21      	ldr	r3, [pc, #132]	; (15f14 <prvTraceGetDTS+0x120>)
   15e8e:	4798      	blx	r3
   15e90:	0880      	lsrs	r0, r0, #2
   15e92:	6260      	str	r0, [r4, #36]	; 0x24
   15e94:	e7c3      	b.n	15e1e <prvTraceGetDTS+0x2a>
			RecorderDataPtr->absTimeLastEvent += dts;
   15e96:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15e98:	191b      	adds	r3, r3, r4
   15e9a:	62b3      	str	r3, [r6, #40]	; 0x28
   15e9c:	e7de      	b.n	15e5c <prvTraceGetDTS+0x68>
		RecorderDataPtr->absTimeLastEvent = timestamp;
   15e9e:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
   15ea0:	42ac      	cmp	r4, r5
   15ea2:	d803      	bhi.n	15eac <prvTraceGetDTS+0xb8>
	return (uint16_t)dts & param_maxDTS;
   15ea4:	0020      	movs	r0, r4
   15ea6:	4028      	ands	r0, r5
}
   15ea8:	b003      	add	sp, #12
   15eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   15eac:	4b1a      	ldr	r3, [pc, #104]	; (15f18 <prvTraceGetDTS+0x124>)
   15eae:	4798      	blx	r3
		if (xts != NULL)
   15eb0:	2800      	cmp	r0, #0
   15eb2:	d0f7      	beq.n	15ea4 <prvTraceGetDTS+0xb0>
			if (param_maxDTS == 0xFFFF)
   15eb4:	4b0c      	ldr	r3, [pc, #48]	; (15ee8 <prvTraceGetDTS+0xf4>)
   15eb6:	429d      	cmp	r5, r3
   15eb8:	d007      	beq.n	15eca <prvTraceGetDTS+0xd6>
			else if (param_maxDTS == 0xFF)
   15eba:	2dff      	cmp	r5, #255	; 0xff
   15ebc:	d00c      	beq.n	15ed8 <prvTraceGetDTS+0xe4>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   15ebe:	4817      	ldr	r0, [pc, #92]	; (15f1c <prvTraceGetDTS+0x128>)
   15ec0:	4b11      	ldr	r3, [pc, #68]	; (15f08 <prvTraceGetDTS+0x114>)
   15ec2:	4798      	blx	r3
			prvTraceUpdateCounters();
   15ec4:	4b16      	ldr	r3, [pc, #88]	; (15f20 <prvTraceGetDTS+0x12c>)
   15ec6:	4798      	blx	r3
   15ec8:	e7ec      	b.n	15ea4 <prvTraceGetDTS+0xb0>
				xts->type = XTS16;
   15eca:	23a9      	movs	r3, #169	; 0xa9
   15ecc:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   15ece:	0c23      	lsrs	r3, r4, #16
   15ed0:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
   15ed2:	2300      	movs	r3, #0
   15ed4:	7043      	strb	r3, [r0, #1]
   15ed6:	e7f5      	b.n	15ec4 <prvTraceGetDTS+0xd0>
				xts->type = XTS8;
   15ed8:	23a8      	movs	r3, #168	; 0xa8
   15eda:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   15edc:	0a23      	lsrs	r3, r4, #8
   15ede:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   15ee0:	0e23      	lsrs	r3, r4, #24
   15ee2:	7043      	strb	r3, [r0, #1]
   15ee4:	e7ee      	b.n	15ec4 <prvTraceGetDTS+0xd0>
   15ee6:	46c0      	nop			; (mov r8, r8)
   15ee8:	0000ffff 	.word	0x0000ffff
   15eec:	20000bf4 	.word	0x20000bf4
   15ef0:	20000ca8 	.word	0x20000ca8
   15ef4:	00015d5d 	.word	0x00015d5d
   15ef8:	20000ca0 	.word	0x20000ca0
   15efc:	00023fe1 	.word	0x00023fe1
   15f00:	000240ed 	.word	0x000240ed
   15f04:	00028a54 	.word	0x00028a54
   15f08:	00015859 	.word	0x00015859
   15f0c:	e000e018 	.word	0xe000e018
   15f10:	20005018 	.word	0x20005018
   15f14:	0001ef8d 	.word	0x0001ef8d
   15f18:	000158b1 	.word	0x000158b1
   15f1c:	00028a94 	.word	0x00028a94
   15f20:	000159a9 	.word	0x000159a9

00015f24 <prvTraceStoreTaskReady>:
{
   15f24:	b570      	push	{r4, r5, r6, lr}
   15f26:	1e04      	subs	r4, r0, #0
	if (handle == 0)
   15f28:	d01d      	beq.n	15f66 <prvTraceStoreTaskReady+0x42>
	if (! readyEventsEnabled)
   15f2a:	4b1b      	ldr	r3, [pc, #108]	; (15f98 <prvTraceStoreTaskReady+0x74>)
   15f2c:	681b      	ldr	r3, [r3, #0]
   15f2e:	2b00      	cmp	r3, #0
   15f30:	d019      	beq.n	15f66 <prvTraceStoreTaskReady+0x42>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   15f32:	280f      	cmp	r0, #15
   15f34:	d818      	bhi.n	15f68 <prvTraceStoreTaskReady+0x44>
	if (recorder_busy)
   15f36:	4b19      	ldr	r3, [pc, #100]	; (15f9c <prvTraceStoreTaskReady+0x78>)
   15f38:	681b      	ldr	r3, [r3, #0]
   15f3a:	2b00      	cmp	r3, #0
   15f3c:	d118      	bne.n	15f70 <prvTraceStoreTaskReady+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15f3e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15f42:	2301      	movs	r3, #1
   15f44:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   15f48:	4a14      	ldr	r2, [pc, #80]	; (15f9c <prvTraceStoreTaskReady+0x78>)
   15f4a:	6813      	ldr	r3, [r2, #0]
   15f4c:	3301      	adds	r3, #1
   15f4e:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   15f50:	4b13      	ldr	r3, [pc, #76]	; (15fa0 <prvTraceStoreTaskReady+0x7c>)
   15f52:	681b      	ldr	r3, [r3, #0]
   15f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15f56:	2b00      	cmp	r3, #0
   15f58:	d10e      	bne.n	15f78 <prvTraceStoreTaskReady+0x54>
	trcCRITICAL_SECTION_END();
   15f5a:	4a10      	ldr	r2, [pc, #64]	; (15f9c <prvTraceStoreTaskReady+0x78>)
   15f5c:	6813      	ldr	r3, [r2, #0]
   15f5e:	3b01      	subs	r3, #1
   15f60:	6013      	str	r3, [r2, #0]
   15f62:	f385 8810 	msr	PRIMASK, r5
}
   15f66:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   15f68:	480e      	ldr	r0, [pc, #56]	; (15fa4 <prvTraceStoreTaskReady+0x80>)
   15f6a:	4b0f      	ldr	r3, [pc, #60]	; (15fa8 <prvTraceStoreTaskReady+0x84>)
   15f6c:	4798      	blx	r3
   15f6e:	e7fa      	b.n	15f66 <prvTraceStoreTaskReady+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   15f70:	480e      	ldr	r0, [pc, #56]	; (15fac <prvTraceStoreTaskReady+0x88>)
   15f72:	4b0d      	ldr	r3, [pc, #52]	; (15fa8 <prvTraceStoreTaskReady+0x84>)
   15f74:	4798      	blx	r3
		return;
   15f76:	e7f6      	b.n	15f66 <prvTraceStoreTaskReady+0x42>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   15f78:	480d      	ldr	r0, [pc, #52]	; (15fb0 <prvTraceStoreTaskReady+0x8c>)
   15f7a:	4b0e      	ldr	r3, [pc, #56]	; (15fb4 <prvTraceStoreTaskReady+0x90>)
   15f7c:	4798      	blx	r3
   15f7e:	0006      	movs	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   15f80:	4b0d      	ldr	r3, [pc, #52]	; (15fb8 <prvTraceStoreTaskReady+0x94>)
   15f82:	4798      	blx	r3
		if (tr != NULL)
   15f84:	2800      	cmp	r0, #0
   15f86:	d0e8      	beq.n	15f5a <prvTraceStoreTaskReady+0x36>
			tr->type = DIV_TASK_READY;
   15f88:	2302      	movs	r3, #2
   15f8a:	7003      	strb	r3, [r0, #0]
			tr->dts = dts3;
   15f8c:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
   15f8e:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
   15f90:	4b0a      	ldr	r3, [pc, #40]	; (15fbc <prvTraceStoreTaskReady+0x98>)
   15f92:	4798      	blx	r3
   15f94:	e7e1      	b.n	15f5a <prvTraceStoreTaskReady+0x36>
   15f96:	46c0      	nop			; (mov r8, r8)
   15f98:	200000b0 	.word	0x200000b0
   15f9c:	20000ca4 	.word	0x20000ca4
   15fa0:	20000bf4 	.word	0x20000bf4
   15fa4:	00029094 	.word	0x00029094
   15fa8:	00015859 	.word	0x00015859
   15fac:	000290d4 	.word	0x000290d4
   15fb0:	0000ffff 	.word	0x0000ffff
   15fb4:	00015df5 	.word	0x00015df5
   15fb8:	000158b1 	.word	0x000158b1
   15fbc:	000159a9 	.word	0x000159a9

00015fc0 <vTraceStoreMemMangEvent>:
{
   15fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fc2:	b083      	sub	sp, #12
   15fc4:	9000      	str	r0, [sp, #0]
   15fc6:	000c      	movs	r4, r1
	if (RecorderDataPtr == NULL)
   15fc8:	4b28      	ldr	r3, [pc, #160]	; (1606c <vTraceStoreMemMangEvent+0xac>)
   15fca:	681b      	ldr	r3, [r3, #0]
   15fcc:	2b00      	cmp	r3, #0
   15fce:	d01d      	beq.n	1600c <vTraceStoreMemMangEvent+0x4c>
		size = (uint32_t)(- signed_size);
   15fd0:	17d3      	asrs	r3, r2, #31
   15fd2:	18d6      	adds	r6, r2, r3
   15fd4:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   15fd6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   15fda:	2301      	movs	r3, #1
   15fdc:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   15fe0:	4923      	ldr	r1, [pc, #140]	; (16070 <vTraceStoreMemMangEvent+0xb0>)
   15fe2:	680b      	ldr	r3, [r1, #0]
   15fe4:	3301      	adds	r3, #1
   15fe6:	600b      	str	r3, [r1, #0]
	if (address != 0)
   15fe8:	2c00      	cmp	r4, #0
   15fea:	d004      	beq.n	15ff6 <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
   15fec:	4b21      	ldr	r3, [pc, #132]	; (16074 <vTraceStoreMemMangEvent+0xb4>)
   15fee:	6819      	ldr	r1, [r3, #0]
   15ff0:	468c      	mov	ip, r1
   15ff2:	4462      	add	r2, ip
   15ff4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   15ff6:	4b1d      	ldr	r3, [pc, #116]	; (1606c <vTraceStoreMemMangEvent+0xac>)
   15ff8:	681b      	ldr	r3, [r3, #0]
   15ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15ffc:	2b00      	cmp	r3, #0
   15ffe:	d107      	bne.n	16010 <vTraceStoreMemMangEvent+0x50>
	trcCRITICAL_SECTION_END();
   16000:	4a1b      	ldr	r2, [pc, #108]	; (16070 <vTraceStoreMemMangEvent+0xb0>)
   16002:	6813      	ldr	r3, [r2, #0]
   16004:	3b01      	subs	r3, #1
   16006:	6013      	str	r3, [r2, #0]
   16008:	f385 8810 	msr	PRIMASK, r5
}
   1600c:	b003      	add	sp, #12
   1600e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   16010:	20ff      	movs	r0, #255	; 0xff
   16012:	4b19      	ldr	r3, [pc, #100]	; (16078 <vTraceStoreMemMangEvent+0xb8>)
   16014:	4798      	blx	r3
   16016:	9001      	str	r0, [sp, #4]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   16018:	0031      	movs	r1, r6
   1601a:	4818      	ldr	r0, [pc, #96]	; (1607c <vTraceStoreMemMangEvent+0xbc>)
   1601c:	4b18      	ldr	r3, [pc, #96]	; (16080 <vTraceStoreMemMangEvent+0xc0>)
   1601e:	4798      	blx	r3
   16020:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   16022:	4b18      	ldr	r3, [pc, #96]	; (16084 <vTraceStoreMemMangEvent+0xc4>)
   16024:	4798      	blx	r3
   16026:	1e07      	subs	r7, r0, #0
		if (ms != NULL)
   16028:	d0ea      	beq.n	16000 <vTraceStoreMemMangEvent+0x40>
			ms->dts = dts1;
   1602a:	466b      	mov	r3, sp
   1602c:	791b      	ldrb	r3, [r3, #4]
   1602e:	7043      	strb	r3, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   16030:	2300      	movs	r3, #0
   16032:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
   16034:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
   16036:	4b14      	ldr	r3, [pc, #80]	; (16088 <vTraceStoreMemMangEvent+0xc8>)
   16038:	4798      	blx	r3
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1603a:	0021      	movs	r1, r4
   1603c:	480f      	ldr	r0, [pc, #60]	; (1607c <vTraceStoreMemMangEvent+0xbc>)
   1603e:	4b10      	ldr	r3, [pc, #64]	; (16080 <vTraceStoreMemMangEvent+0xc0>)
   16040:	4798      	blx	r3
   16042:	0006      	movs	r6, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   16044:	4b0f      	ldr	r3, [pc, #60]	; (16084 <vTraceStoreMemMangEvent+0xc4>)
   16046:	4798      	blx	r3
			if (ma != NULL)
   16048:	2800      	cmp	r0, #0
   1604a:	d0d9      	beq.n	16000 <vTraceStoreMemMangEvent+0x40>
				ma->addr_low = addr_low;
   1604c:	8046      	strh	r6, [r0, #2]
				ma->addr_high = addr_high;
   1604e:	2300      	movs	r3, #0
   16050:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   16052:	466b      	mov	r3, sp
   16054:	781c      	ldrb	r4, [r3, #0]
   16056:	1c63      	adds	r3, r4, #1
   16058:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;
   1605a:	703c      	strb	r4, [r7, #0]
				prvTraceUpdateCounters();					
   1605c:	4b0a      	ldr	r3, [pc, #40]	; (16088 <vTraceStoreMemMangEvent+0xc8>)
   1605e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   16060:	4b02      	ldr	r3, [pc, #8]	; (1606c <vTraceStoreMemMangEvent+0xac>)
   16062:	681b      	ldr	r3, [r3, #0]
   16064:	4a03      	ldr	r2, [pc, #12]	; (16074 <vTraceStoreMemMangEvent+0xb4>)
   16066:	6812      	ldr	r2, [r2, #0]
   16068:	651a      	str	r2, [r3, #80]	; 0x50
   1606a:	e7c9      	b.n	16000 <vTraceStoreMemMangEvent+0x40>
   1606c:	20000bf4 	.word	0x20000bf4
   16070:	20000ca4 	.word	0x20000ca4
   16074:	20000bfc 	.word	0x20000bfc
   16078:	00015df5 	.word	0x00015df5
   1607c:	0000ffff 	.word	0x0000ffff
   16080:	000159e1 	.word	0x000159e1
   16084:	000158b1 	.word	0x000158b1
   16088:	000159a9 	.word	0x000159a9

0001608c <prvTraceStoreKernelCall>:
{
   1608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1608e:	0005      	movs	r5, r0
   16090:	0014      	movs	r4, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   16092:	28fe      	cmp	r0, #254	; 0xfe
   16094:	d825      	bhi.n	160e2 <prvTraceStoreKernelCall+0x56>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   16096:	2908      	cmp	r1, #8
   16098:	d827      	bhi.n	160ea <prvTraceStoreKernelCall+0x5e>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1609a:	4b21      	ldr	r3, [pc, #132]	; (16120 <prvTraceStoreKernelCall+0x94>)
   1609c:	681b      	ldr	r3, [r3, #0]
   1609e:	1859      	adds	r1, r3, r1
   160a0:	3164      	adds	r1, #100	; 0x64
   160a2:	780b      	ldrb	r3, [r1, #0]
   160a4:	4293      	cmp	r3, r2
   160a6:	d324      	bcc.n	160f2 <prvTraceStoreKernelCall+0x66>
	if (recorder_busy)
   160a8:	4b1e      	ldr	r3, [pc, #120]	; (16124 <prvTraceStoreKernelCall+0x98>)
   160aa:	681b      	ldr	r3, [r3, #0]
   160ac:	2b00      	cmp	r3, #0
   160ae:	d124      	bne.n	160fa <prvTraceStoreKernelCall+0x6e>
	if (handle_of_last_logged_task == 0)
   160b0:	4b1d      	ldr	r3, [pc, #116]	; (16128 <prvTraceStoreKernelCall+0x9c>)
   160b2:	781b      	ldrb	r3, [r3, #0]
   160b4:	2b00      	cmp	r3, #0
   160b6:	d013      	beq.n	160e0 <prvTraceStoreKernelCall+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   160b8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   160bc:	2301      	movs	r3, #1
   160be:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   160c2:	4a18      	ldr	r2, [pc, #96]	; (16124 <prvTraceStoreKernelCall+0x98>)
   160c4:	6813      	ldr	r3, [r2, #0]
   160c6:	3301      	adds	r3, #1
   160c8:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
   160ca:	4b15      	ldr	r3, [pc, #84]	; (16120 <prvTraceStoreKernelCall+0x94>)
   160cc:	681b      	ldr	r3, [r3, #0]
   160ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   160d0:	2b00      	cmp	r3, #0
   160d2:	d116      	bne.n	16102 <prvTraceStoreKernelCall+0x76>
	trcCRITICAL_SECTION_END();
   160d4:	4a13      	ldr	r2, [pc, #76]	; (16124 <prvTraceStoreKernelCall+0x98>)
   160d6:	6813      	ldr	r3, [r2, #0]
   160d8:	3b01      	subs	r3, #1
   160da:	6013      	str	r3, [r2, #0]
   160dc:	f386 8810 	msr	PRIMASK, r6
}
   160e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   160e2:	4812      	ldr	r0, [pc, #72]	; (1612c <prvTraceStoreKernelCall+0xa0>)
   160e4:	4b12      	ldr	r3, [pc, #72]	; (16130 <prvTraceStoreKernelCall+0xa4>)
   160e6:	4798      	blx	r3
   160e8:	e7fa      	b.n	160e0 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   160ea:	4812      	ldr	r0, [pc, #72]	; (16134 <prvTraceStoreKernelCall+0xa8>)
   160ec:	4b10      	ldr	r3, [pc, #64]	; (16130 <prvTraceStoreKernelCall+0xa4>)
   160ee:	4798      	blx	r3
   160f0:	e7f6      	b.n	160e0 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   160f2:	4811      	ldr	r0, [pc, #68]	; (16138 <prvTraceStoreKernelCall+0xac>)
   160f4:	4b0e      	ldr	r3, [pc, #56]	; (16130 <prvTraceStoreKernelCall+0xa4>)
   160f6:	4798      	blx	r3
   160f8:	e7f2      	b.n	160e0 <prvTraceStoreKernelCall+0x54>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   160fa:	4810      	ldr	r0, [pc, #64]	; (1613c <prvTraceStoreKernelCall+0xb0>)
   160fc:	4b0c      	ldr	r3, [pc, #48]	; (16130 <prvTraceStoreKernelCall+0xa4>)
   160fe:	4798      	blx	r3
		return;
   16100:	e7ee      	b.n	160e0 <prvTraceStoreKernelCall+0x54>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   16102:	480f      	ldr	r0, [pc, #60]	; (16140 <prvTraceStoreKernelCall+0xb4>)
   16104:	4b0f      	ldr	r3, [pc, #60]	; (16144 <prvTraceStoreKernelCall+0xb8>)
   16106:	4798      	blx	r3
   16108:	0007      	movs	r7, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1610a:	4b0f      	ldr	r3, [pc, #60]	; (16148 <prvTraceStoreKernelCall+0xbc>)
   1610c:	4798      	blx	r3
		if (kse != NULL)
   1610e:	2800      	cmp	r0, #0
   16110:	d0e0      	beq.n	160d4 <prvTraceStoreKernelCall+0x48>
			kse->dts = dts1;
   16112:	8047      	strh	r7, [r0, #2]
			kse->type = (uint8_t)ecode;
   16114:	7005      	strb	r5, [r0, #0]
			kse->objHandle = hnd8;
   16116:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
   16118:	4b0c      	ldr	r3, [pc, #48]	; (1614c <prvTraceStoreKernelCall+0xc0>)
   1611a:	4798      	blx	r3
   1611c:	e7da      	b.n	160d4 <prvTraceStoreKernelCall+0x48>
   1611e:	46c0      	nop			; (mov r8, r8)
   16120:	20000bf4 	.word	0x20000bf4
   16124:	20000ca4 	.word	0x20000ca4
   16128:	20000bf8 	.word	0x20000bf8
   1612c:	00028dec 	.word	0x00028dec
   16130:	00015859 	.word	0x00015859
   16134:	00028e24 	.word	0x00028e24
   16138:	00028e6c 	.word	0x00028e6c
   1613c:	00028eb4 	.word	0x00028eb4
   16140:	0000ffff 	.word	0x0000ffff
   16144:	00015df5 	.word	0x00015df5
   16148:	000158b1 	.word	0x000158b1
   1614c:	000159a9 	.word	0x000159a9

00016150 <prvTraceStoreKernelCallWithParam>:
{
   16150:	b5f0      	push	{r4, r5, r6, r7, lr}
   16152:	46c6      	mov	lr, r8
   16154:	b500      	push	{lr}
   16156:	0006      	movs	r6, r0
   16158:	0014      	movs	r4, r2
   1615a:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1615c:	28fe      	cmp	r0, #254	; 0xfe
   1615e:	d827      	bhi.n	161b0 <prvTraceStoreKernelCallWithParam+0x60>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   16160:	2908      	cmp	r1, #8
   16162:	d829      	bhi.n	161b8 <prvTraceStoreKernelCallWithParam+0x68>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   16164:	4b24      	ldr	r3, [pc, #144]	; (161f8 <prvTraceStoreKernelCallWithParam+0xa8>)
   16166:	681b      	ldr	r3, [r3, #0]
   16168:	1859      	adds	r1, r3, r1
   1616a:	3164      	adds	r1, #100	; 0x64
   1616c:	780b      	ldrb	r3, [r1, #0]
   1616e:	4293      	cmp	r3, r2
   16170:	d326      	bcc.n	161c0 <prvTraceStoreKernelCallWithParam+0x70>
	if (recorder_busy)
   16172:	4b22      	ldr	r3, [pc, #136]	; (161fc <prvTraceStoreKernelCallWithParam+0xac>)
   16174:	681b      	ldr	r3, [r3, #0]
   16176:	2b00      	cmp	r3, #0
   16178:	d126      	bne.n	161c8 <prvTraceStoreKernelCallWithParam+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1617a:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1617e:	2301      	movs	r3, #1
   16180:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   16184:	4a1d      	ldr	r2, [pc, #116]	; (161fc <prvTraceStoreKernelCallWithParam+0xac>)
   16186:	6813      	ldr	r3, [r2, #0]
   16188:	3301      	adds	r3, #1
   1618a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1618c:	4b1a      	ldr	r3, [pc, #104]	; (161f8 <prvTraceStoreKernelCallWithParam+0xa8>)
   1618e:	681b      	ldr	r3, [r3, #0]
   16190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16192:	2b00      	cmp	r3, #0
   16194:	d003      	beq.n	1619e <prvTraceStoreKernelCallWithParam+0x4e>
   16196:	4b1a      	ldr	r3, [pc, #104]	; (16200 <prvTraceStoreKernelCallWithParam+0xb0>)
   16198:	781b      	ldrb	r3, [r3, #0]
   1619a:	2b00      	cmp	r3, #0
   1619c:	d118      	bne.n	161d0 <prvTraceStoreKernelCallWithParam+0x80>
	trcCRITICAL_SECTION_END();
   1619e:	4a17      	ldr	r2, [pc, #92]	; (161fc <prvTraceStoreKernelCallWithParam+0xac>)
   161a0:	6813      	ldr	r3, [r2, #0]
   161a2:	3b01      	subs	r3, #1
   161a4:	6013      	str	r3, [r2, #0]
   161a6:	f388 8810 	msr	PRIMASK, r8
}
   161aa:	bc04      	pop	{r2}
   161ac:	4690      	mov	r8, r2
   161ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   161b0:	4814      	ldr	r0, [pc, #80]	; (16204 <prvTraceStoreKernelCallWithParam+0xb4>)
   161b2:	4b15      	ldr	r3, [pc, #84]	; (16208 <prvTraceStoreKernelCallWithParam+0xb8>)
   161b4:	4798      	blx	r3
   161b6:	e7f8      	b.n	161aa <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   161b8:	4814      	ldr	r0, [pc, #80]	; (1620c <prvTraceStoreKernelCallWithParam+0xbc>)
   161ba:	4b13      	ldr	r3, [pc, #76]	; (16208 <prvTraceStoreKernelCallWithParam+0xb8>)
   161bc:	4798      	blx	r3
   161be:	e7f4      	b.n	161aa <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   161c0:	4813      	ldr	r0, [pc, #76]	; (16210 <prvTraceStoreKernelCallWithParam+0xc0>)
   161c2:	4b11      	ldr	r3, [pc, #68]	; (16208 <prvTraceStoreKernelCallWithParam+0xb8>)
   161c4:	4798      	blx	r3
   161c6:	e7f0      	b.n	161aa <prvTraceStoreKernelCallWithParam+0x5a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   161c8:	4812      	ldr	r0, [pc, #72]	; (16214 <prvTraceStoreKernelCallWithParam+0xc4>)
   161ca:	4b0f      	ldr	r3, [pc, #60]	; (16208 <prvTraceStoreKernelCallWithParam+0xb8>)
   161cc:	4798      	blx	r3
		return;
   161ce:	e7ec      	b.n	161aa <prvTraceStoreKernelCallWithParam+0x5a>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   161d0:	20ff      	movs	r0, #255	; 0xff
   161d2:	4b11      	ldr	r3, [pc, #68]	; (16218 <prvTraceStoreKernelCallWithParam+0xc8>)
   161d4:	4798      	blx	r3
   161d6:	0007      	movs	r7, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   161d8:	0029      	movs	r1, r5
   161da:	20ff      	movs	r0, #255	; 0xff
   161dc:	4b0f      	ldr	r3, [pc, #60]	; (1621c <prvTraceStoreKernelCallWithParam+0xcc>)
   161de:	4798      	blx	r3
   161e0:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   161e2:	4b0f      	ldr	r3, [pc, #60]	; (16220 <prvTraceStoreKernelCallWithParam+0xd0>)
   161e4:	4798      	blx	r3
		if (kse != NULL)
   161e6:	2800      	cmp	r0, #0
   161e8:	d0d9      	beq.n	1619e <prvTraceStoreKernelCallWithParam+0x4e>
			kse->dts = dts2;
   161ea:	70c7      	strb	r7, [r0, #3]
			kse->type = (uint8_t)evtcode;
   161ec:	7006      	strb	r6, [r0, #0]
			kse->objHandle = hnd8;
   161ee:	7044      	strb	r4, [r0, #1]
			kse->param = p8;
   161f0:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
   161f2:	4b0c      	ldr	r3, [pc, #48]	; (16224 <prvTraceStoreKernelCallWithParam+0xd4>)
   161f4:	4798      	blx	r3
   161f6:	e7d2      	b.n	1619e <prvTraceStoreKernelCallWithParam+0x4e>
   161f8:	20000bf4 	.word	0x20000bf4
   161fc:	20000ca4 	.word	0x20000ca4
   16200:	20000bf8 	.word	0x20000bf8
   16204:	00028f7c 	.word	0x00028f7c
   16208:	00015859 	.word	0x00015859
   1620c:	00028fbc 	.word	0x00028fbc
   16210:	0002900c 	.word	0x0002900c
   16214:	0002905c 	.word	0x0002905c
   16218:	00015df5 	.word	0x00015df5
   1621c:	000159e1 	.word	0x000159e1
   16220:	000158b1 	.word	0x000158b1
   16224:	000159a9 	.word	0x000159a9

00016228 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
   16228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1622a:	0004      	movs	r4, r0
   1622c:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   1622e:	28fe      	cmp	r0, #254	; 0xfe
   16230:	d81c      	bhi.n	1626c <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
	if (recorder_busy)
   16232:	4b1c      	ldr	r3, [pc, #112]	; (162a4 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   16234:	681b      	ldr	r3, [r3, #0]
   16236:	2b00      	cmp	r3, #0
   16238:	d11c      	bne.n	16274 <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1623a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1623e:	2301      	movs	r3, #1
   16240:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   16244:	4a17      	ldr	r2, [pc, #92]	; (162a4 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   16246:	6813      	ldr	r3, [r2, #0]
   16248:	3301      	adds	r3, #1
   1624a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1624c:	4b16      	ldr	r3, [pc, #88]	; (162a8 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
   1624e:	681b      	ldr	r3, [r3, #0]
   16250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16252:	2b00      	cmp	r3, #0
   16254:	d003      	beq.n	1625e <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
   16256:	4b15      	ldr	r3, [pc, #84]	; (162ac <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
   16258:	781b      	ldrb	r3, [r3, #0]
   1625a:	2b00      	cmp	r3, #0
   1625c:	d10e      	bne.n	1627c <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
	trcCRITICAL_SECTION_END();
   1625e:	4a11      	ldr	r2, [pc, #68]	; (162a4 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   16260:	6813      	ldr	r3, [r2, #0]
   16262:	3b01      	subs	r3, #1
   16264:	6013      	str	r3, [r2, #0]
   16266:	f386 8810 	msr	PRIMASK, r6
}
   1626a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   1626c:	4810      	ldr	r0, [pc, #64]	; (162b0 <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
   1626e:	4b11      	ldr	r3, [pc, #68]	; (162b4 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
   16270:	4798      	blx	r3
   16272:	e7fa      	b.n	1626a <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   16274:	4810      	ldr	r0, [pc, #64]	; (162b8 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
   16276:	4b0f      	ldr	r3, [pc, #60]	; (162b4 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
   16278:	4798      	blx	r3
		return;
   1627a:	e7f6      	b.n	1626a <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   1627c:	20ff      	movs	r0, #255	; 0xff
   1627e:	4b0f      	ldr	r3, [pc, #60]	; (162bc <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
   16280:	4798      	blx	r3
   16282:	0007      	movs	r7, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   16284:	0029      	movs	r1, r5
   16286:	480e      	ldr	r0, [pc, #56]	; (162c0 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
   16288:	4b0e      	ldr	r3, [pc, #56]	; (162c4 <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   1628a:	4798      	blx	r3
   1628c:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1628e:	4b0e      	ldr	r3, [pc, #56]	; (162c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
   16290:	4798      	blx	r3
		if (kse != NULL)
   16292:	2800      	cmp	r0, #0
   16294:	d0e3      	beq.n	1625e <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
			kse->dts = dts6;
   16296:	7047      	strb	r7, [r0, #1]
			kse->type = (uint8_t)evtcode;
   16298:	7004      	strb	r4, [r0, #0]
			kse->param = restParam;
   1629a:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
   1629c:	4b0b      	ldr	r3, [pc, #44]	; (162cc <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
   1629e:	4798      	blx	r3
   162a0:	e7dd      	b.n	1625e <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
   162a2:	46c0      	nop			; (mov r8, r8)
   162a4:	20000ca4 	.word	0x20000ca4
   162a8:	20000bf4 	.word	0x20000bf4
   162ac:	20000bf8 	.word	0x20000bf8
   162b0:	00028eec 	.word	0x00028eec
   162b4:	00015859 	.word	0x00015859
   162b8:	00028f44 	.word	0x00028f44
   162bc:	00015df5 	.word	0x00015df5
   162c0:	0000ffff 	.word	0x0000ffff
   162c4:	000159e1 	.word	0x000159e1
   162c8:	000158b1 	.word	0x000158b1
   162cc:	000159a9 	.word	0x000159a9

000162d0 <prvTraceStoreTaskswitch>:
{
   162d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   162d2:	0004      	movs	r4, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   162d4:	280f      	cmp	r0, #15
   162d6:	d818      	bhi.n	1630a <prvTraceStoreTaskswitch+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   162d8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   162dc:	2301      	movs	r3, #1
   162de:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   162e2:	4a26      	ldr	r2, [pc, #152]	; (1637c <prvTraceStoreTaskswitch+0xac>)
   162e4:	6813      	ldr	r3, [r2, #0]
   162e6:	3301      	adds	r3, #1
   162e8:	6013      	str	r3, [r2, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   162ea:	4b25      	ldr	r3, [pc, #148]	; (16380 <prvTraceStoreTaskswitch+0xb0>)
   162ec:	781b      	ldrb	r3, [r3, #0]
   162ee:	4283      	cmp	r3, r0
   162f0:	d004      	beq.n	162fc <prvTraceStoreTaskswitch+0x2c>
   162f2:	4b24      	ldr	r3, [pc, #144]	; (16384 <prvTraceStoreTaskswitch+0xb4>)
   162f4:	681b      	ldr	r3, [r3, #0]
   162f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   162f8:	2b00      	cmp	r3, #0
   162fa:	d10a      	bne.n	16312 <prvTraceStoreTaskswitch+0x42>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   162fc:	4a1f      	ldr	r2, [pc, #124]	; (1637c <prvTraceStoreTaskswitch+0xac>)
   162fe:	6813      	ldr	r3, [r2, #0]
   16300:	3b01      	subs	r3, #1
   16302:	6013      	str	r3, [r2, #0]
   16304:	f385 8810 	msr	PRIMASK, r5
}
   16308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1630a:	481f      	ldr	r0, [pc, #124]	; (16388 <prvTraceStoreTaskswitch+0xb8>)
   1630c:	4b1f      	ldr	r3, [pc, #124]	; (1638c <prvTraceStoreTaskswitch+0xbc>)
   1630e:	4798      	blx	r3
   16310:	e7fa      	b.n	16308 <prvTraceStoreTaskswitch+0x38>
		isPendingContextSwitch = 0;
   16312:	2200      	movs	r2, #0
   16314:	4b1e      	ldr	r3, [pc, #120]	; (16390 <prvTraceStoreTaskswitch+0xc0>)
   16316:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   16318:	481e      	ldr	r0, [pc, #120]	; (16394 <prvTraceStoreTaskswitch+0xc4>)
   1631a:	4b1f      	ldr	r3, [pc, #124]	; (16398 <prvTraceStoreTaskswitch+0xc8>)
   1631c:	4798      	blx	r3
   1631e:	0007      	movs	r7, r0
		handle_of_last_logged_task = task_handle;
   16320:	4b17      	ldr	r3, [pc, #92]	; (16380 <prvTraceStoreTaskswitch+0xb0>)
   16322:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   16324:	4b1d      	ldr	r3, [pc, #116]	; (1639c <prvTraceStoreTaskswitch+0xcc>)
   16326:	4798      	blx	r3
   16328:	1e06      	subs	r6, r0, #0
		if (ts != NULL)
   1632a:	d0e7      	beq.n	162fc <prvTraceStoreTaskswitch+0x2c>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   1632c:	4b14      	ldr	r3, [pc, #80]	; (16380 <prvTraceStoreTaskswitch+0xb0>)
   1632e:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   16330:	4b14      	ldr	r3, [pc, #80]	; (16384 <prvTraceStoreTaskswitch+0xb4>)
   16332:	681a      	ldr	r2, [r3, #0]
   16334:	2367      	movs	r3, #103	; 0x67
   16336:	5cd3      	ldrb	r3, [r2, r3]
   16338:	4283      	cmp	r3, r0
   1633a:	d30f      	bcc.n	1635c <prvTraceStoreTaskswitch+0x8c>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1633c:	2103      	movs	r1, #3
   1633e:	4b18      	ldr	r3, [pc, #96]	; (163a0 <prvTraceStoreTaskswitch+0xd0>)
   16340:	4798      	blx	r3
   16342:	4b10      	ldr	r3, [pc, #64]	; (16384 <prvTraceStoreTaskswitch+0xb4>)
   16344:	681b      	ldr	r3, [r3, #0]
   16346:	2273      	movs	r2, #115	; 0x73
   16348:	5c9a      	ldrb	r2, [r3, r2]
   1634a:	181b      	adds	r3, r3, r0
   1634c:	189b      	adds	r3, r3, r2
   1634e:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   16350:	781b      	ldrb	r3, [r3, #0]
   16352:	2b01      	cmp	r3, #1
   16354:	d105      	bne.n	16362 <prvTraceStoreTaskswitch+0x92>
				ts->type = TS_TASK_RESUME;
   16356:	3306      	adds	r3, #6
   16358:	7033      	strb	r3, [r6, #0]
   1635a:	e004      	b.n	16366 <prvTraceStoreTaskswitch+0x96>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1635c:	4811      	ldr	r0, [pc, #68]	; (163a4 <prvTraceStoreTaskswitch+0xd4>)
   1635e:	4b0b      	ldr	r3, [pc, #44]	; (1638c <prvTraceStoreTaskswitch+0xbc>)
   16360:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
   16362:	2306      	movs	r3, #6
   16364:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
   16366:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
   16368:	7074      	strb	r4, [r6, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
   1636a:	4b05      	ldr	r3, [pc, #20]	; (16380 <prvTraceStoreTaskswitch+0xb0>)
   1636c:	7819      	ldrb	r1, [r3, #0]
   1636e:	2201      	movs	r2, #1
   16370:	2003      	movs	r0, #3
   16372:	4b0d      	ldr	r3, [pc, #52]	; (163a8 <prvTraceStoreTaskswitch+0xd8>)
   16374:	4798      	blx	r3
			prvTraceUpdateCounters();
   16376:	4b0d      	ldr	r3, [pc, #52]	; (163ac <prvTraceStoreTaskswitch+0xdc>)
   16378:	4798      	blx	r3
   1637a:	e7bf      	b.n	162fc <prvTraceStoreTaskswitch+0x2c>
   1637c:	20000ca4 	.word	0x20000ca4
   16380:	20000bf8 	.word	0x20000bf8
   16384:	20000bf4 	.word	0x20000bf4
   16388:	0002910c 	.word	0x0002910c
   1638c:	00015859 	.word	0x00015859
   16390:	20000c00 	.word	0x20000c00
   16394:	0000ffff 	.word	0x0000ffff
   16398:	00015df5 	.word	0x00015df5
   1639c:	000158b1 	.word	0x000158b1
   163a0:	00015a35 	.word	0x00015a35
   163a4:	00029154 	.word	0x00029154
   163a8:	00015b61 	.word	0x00015b61
   163ac:	000159a9 	.word	0x000159a9

000163b0 <uiTraceStart>:
{
   163b0:	b570      	push	{r4, r5, r6, lr}
	if (RecorderDataPtr == NULL)
   163b2:	4b20      	ldr	r3, [pc, #128]	; (16434 <uiTraceStart+0x84>)
   163b4:	681b      	ldr	r3, [r3, #0]
   163b6:	2b00      	cmp	r3, #0
   163b8:	d00a      	beq.n	163d0 <uiTraceStart+0x20>
	if (RecorderDataPtr->recorderActive == 1)
   163ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
   163bc:	2801      	cmp	r0, #1
   163be:	d006      	beq.n	163ce <uiTraceStart+0x1e>
	if (traceErrorMessage == NULL)
   163c0:	4b1d      	ldr	r3, [pc, #116]	; (16438 <uiTraceStart+0x88>)
   163c2:	681b      	ldr	r3, [r3, #0]
   163c4:	2b00      	cmp	r3, #0
   163c6:	d008      	beq.n	163da <uiTraceStart+0x2a>
	return RecorderDataPtr->recorderActive;
   163c8:	4b1a      	ldr	r3, [pc, #104]	; (16434 <uiTraceStart+0x84>)
   163ca:	681b      	ldr	r3, [r3, #0]
   163cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   163ce:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   163d0:	481a      	ldr	r0, [pc, #104]	; (1643c <uiTraceStart+0x8c>)
   163d2:	4b1b      	ldr	r3, [pc, #108]	; (16440 <uiTraceStart+0x90>)
   163d4:	4798      	blx	r3
   163d6:	2000      	movs	r0, #0
   163d8:	e7f9      	b.n	163ce <uiTraceStart+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   163da:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   163de:	2201      	movs	r2, #1
   163e0:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
   163e4:	4917      	ldr	r1, [pc, #92]	; (16444 <uiTraceStart+0x94>)
   163e6:	680b      	ldr	r3, [r1, #0]
   163e8:	3301      	adds	r3, #1
   163ea:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
   163ec:	4b11      	ldr	r3, [pc, #68]	; (16434 <uiTraceStart+0x84>)
   163ee:	681b      	ldr	r3, [r3, #0]
   163f0:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   163f2:	4b15      	ldr	r3, [pc, #84]	; (16448 <uiTraceStart+0x98>)
   163f4:	4798      	blx	r3
   163f6:	4b15      	ldr	r3, [pc, #84]	; (1644c <uiTraceStart+0x9c>)
   163f8:	4798      	blx	r3
   163fa:	b2c4      	uxtb	r4, r0
		if (handle == 0)
   163fc:	2c00      	cmp	r4, #0
   163fe:	d009      	beq.n	16414 <uiTraceStart+0x64>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   16400:	0020      	movs	r0, r4
   16402:	4b13      	ldr	r3, [pc, #76]	; (16450 <uiTraceStart+0xa0>)
   16404:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   16406:	4a0f      	ldr	r2, [pc, #60]	; (16444 <uiTraceStart+0x94>)
   16408:	6813      	ldr	r3, [r2, #0]
   1640a:	3b01      	subs	r3, #1
   1640c:	6013      	str	r3, [r2, #0]
   1640e:	f385 8810 	msr	PRIMASK, r5
   16412:	e7d9      	b.n	163c8 <uiTraceStart+0x18>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   16414:	2003      	movs	r0, #3
   16416:	4b0f      	ldr	r3, [pc, #60]	; (16454 <uiTraceStart+0xa4>)
   16418:	4798      	blx	r3
   1641a:	0006      	movs	r6, r0
   1641c:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1641e:	4a0e      	ldr	r2, [pc, #56]	; (16458 <uiTraceStart+0xa8>)
   16420:	0001      	movs	r1, r0
   16422:	2003      	movs	r0, #3
   16424:	4b0d      	ldr	r3, [pc, #52]	; (1645c <uiTraceStart+0xac>)
   16426:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   16428:	2200      	movs	r2, #0
   1642a:	0031      	movs	r1, r6
   1642c:	2003      	movs	r0, #3
   1642e:	4b0c      	ldr	r3, [pc, #48]	; (16460 <uiTraceStart+0xb0>)
   16430:	4798      	blx	r3
   16432:	e7e5      	b.n	16400 <uiTraceStart+0x50>
   16434:	20000bf4 	.word	0x20000bf4
   16438:	20000cac 	.word	0x20000cac
   1643c:	00029210 	.word	0x00029210
   16440:	00015859 	.word	0x00015859
   16444:	20000ca4 	.word	0x20000ca4
   16448:	00015409 	.word	0x00015409
   1644c:	00015245 	.word	0x00015245
   16450:	000162d1 	.word	0x000162d1
   16454:	00015bf9 	.word	0x00015bf9
   16458:	00029254 	.word	0x00029254
   1645c:	00015ccd 	.word	0x00015ccd
   16460:	00015aad 	.word	0x00015aad

00016464 <vTraceStart>:
{
   16464:	b510      	push	{r4, lr}
	(void)uiTraceStart();
   16466:	4b01      	ldr	r3, [pc, #4]	; (1646c <vTraceStart+0x8>)
   16468:	4798      	blx	r3
}
   1646a:	bd10      	pop	{r4, pc}
   1646c:	000163b1 	.word	0x000163b1

00016470 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   16470:	0003      	movs	r3, r0
   16472:	3308      	adds	r3, #8
   16474:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   16476:	2201      	movs	r2, #1
   16478:	4252      	negs	r2, r2
   1647a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1647c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1647e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   16480:	2300      	movs	r3, #0
   16482:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   16484:	4770      	bx	lr

00016486 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   16486:	2300      	movs	r3, #0
   16488:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1648a:	4770      	bx	lr

0001648c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   1648c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1648e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   16490:	689a      	ldr	r2, [r3, #8]
   16492:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   16494:	689a      	ldr	r2, [r3, #8]
   16496:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   16498:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1649a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   1649c:	6803      	ldr	r3, [r0, #0]
   1649e:	3301      	adds	r3, #1
   164a0:	6003      	str	r3, [r0, #0]
}
   164a2:	4770      	bx	lr

000164a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   164a4:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   164a6:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   164a8:	0002      	movs	r2, r0
   164aa:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
   164ac:	1c63      	adds	r3, r4, #1
   164ae:	d102      	bne.n	164b6 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
   164b0:	6902      	ldr	r2, [r0, #16]
   164b2:	e004      	b.n	164be <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   164b4:	001a      	movs	r2, r3
   164b6:	6853      	ldr	r3, [r2, #4]
   164b8:	681d      	ldr	r5, [r3, #0]
   164ba:	42ac      	cmp	r4, r5
   164bc:	d2fa      	bcs.n	164b4 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   164be:	6853      	ldr	r3, [r2, #4]
   164c0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   164c2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   164c4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   164c6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   164c8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   164ca:	6803      	ldr	r3, [r0, #0]
   164cc:	3301      	adds	r3, #1
   164ce:	6003      	str	r3, [r0, #0]
}
   164d0:	bd30      	pop	{r4, r5, pc}

000164d2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   164d2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   164d4:	6842      	ldr	r2, [r0, #4]
   164d6:	6881      	ldr	r1, [r0, #8]
   164d8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   164da:	6882      	ldr	r2, [r0, #8]
   164dc:	6841      	ldr	r1, [r0, #4]
   164de:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   164e0:	685a      	ldr	r2, [r3, #4]
   164e2:	4290      	cmp	r0, r2
   164e4:	d006      	beq.n	164f4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   164e6:	2200      	movs	r2, #0
   164e8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   164ea:	681a      	ldr	r2, [r3, #0]
   164ec:	3a01      	subs	r2, #1
   164ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   164f0:	6818      	ldr	r0, [r3, #0]
}
   164f2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   164f4:	6882      	ldr	r2, [r0, #8]
   164f6:	605a      	str	r2, [r3, #4]
   164f8:	e7f5      	b.n	164e6 <uxListRemove+0x14>
	...

000164fc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   164fc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   164fe:	2300      	movs	r3, #0
   16500:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   16502:	4b06      	ldr	r3, [pc, #24]	; (1651c <prvTaskExitError+0x20>)
   16504:	681b      	ldr	r3, [r3, #0]
   16506:	3301      	adds	r3, #1
   16508:	d001      	beq.n	1650e <prvTaskExitError+0x12>
   1650a:	b672      	cpsid	i
   1650c:	e7fe      	b.n	1650c <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
   1650e:	b672      	cpsid	i
	while( ulDummy == 0 )
   16510:	9b01      	ldr	r3, [sp, #4]
   16512:	2b00      	cmp	r3, #0
   16514:	d0fc      	beq.n	16510 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   16516:	b002      	add	sp, #8
   16518:	4770      	bx	lr
   1651a:	46c0      	nop			; (mov r8, r8)
   1651c:	200000b4 	.word	0x200000b4

00016520 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   16520:	4a0b      	ldr	r2, [pc, #44]	; (16550 <pxCurrentTCBConst2>)
   16522:	6813      	ldr	r3, [r2, #0]
   16524:	6818      	ldr	r0, [r3, #0]
   16526:	3020      	adds	r0, #32
   16528:	f380 8809 	msr	PSP, r0
   1652c:	2002      	movs	r0, #2
   1652e:	f380 8814 	msr	CONTROL, r0
   16532:	f3bf 8f6f 	isb	sy
   16536:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   16538:	46ae      	mov	lr, r5
   1653a:	bc08      	pop	{r3}
   1653c:	bc04      	pop	{r2}
   1653e:	b662      	cpsie	i
   16540:	4718      	bx	r3
   16542:	46c0      	nop			; (mov r8, r8)
   16544:	46c0      	nop			; (mov r8, r8)
   16546:	46c0      	nop			; (mov r8, r8)
   16548:	46c0      	nop			; (mov r8, r8)
   1654a:	46c0      	nop			; (mov r8, r8)
   1654c:	46c0      	nop			; (mov r8, r8)
   1654e:	46c0      	nop			; (mov r8, r8)

00016550 <pxCurrentTCBConst2>:
   16550:	20003ba8 	.word	0x20003ba8

00016554 <pxPortInitialiseStack>:
{
   16554:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   16556:	1f03      	subs	r3, r0, #4
   16558:	2480      	movs	r4, #128	; 0x80
   1655a:	0464      	lsls	r4, r4, #17
   1655c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1655e:	3b04      	subs	r3, #4
   16560:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   16562:	3b04      	subs	r3, #4
   16564:	4902      	ldr	r1, [pc, #8]	; (16570 <pxPortInitialiseStack+0x1c>)
   16566:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   16568:	3b14      	subs	r3, #20
   1656a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1656c:	3840      	subs	r0, #64	; 0x40
}
   1656e:	bd10      	pop	{r4, pc}
   16570:	000164fd 	.word	0x000164fd

00016574 <SVC_Handler>:
}
   16574:	4770      	bx	lr
	...

00016578 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   16578:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1657a:	4b13      	ldr	r3, [pc, #76]	; (165c8 <xPortStartScheduler+0x50>)
   1657c:	6819      	ldr	r1, [r3, #0]
   1657e:	22ff      	movs	r2, #255	; 0xff
   16580:	0412      	lsls	r2, r2, #16
   16582:	430a      	orrs	r2, r1
   16584:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   16586:	6819      	ldr	r1, [r3, #0]
   16588:	22ff      	movs	r2, #255	; 0xff
   1658a:	0612      	lsls	r2, r2, #24
   1658c:	430a      	orrs	r2, r1
   1658e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   16590:	4d0e      	ldr	r5, [pc, #56]	; (165cc <xPortStartScheduler+0x54>)
   16592:	2400      	movs	r4, #0
   16594:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   16596:	4b0e      	ldr	r3, [pc, #56]	; (165d0 <xPortStartScheduler+0x58>)
   16598:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1659a:	2000      	movs	r0, #0
   1659c:	4b0d      	ldr	r3, [pc, #52]	; (165d4 <xPortStartScheduler+0x5c>)
   1659e:	4798      	blx	r3
   165a0:	21fa      	movs	r1, #250	; 0xfa
   165a2:	0089      	lsls	r1, r1, #2
   165a4:	4b0c      	ldr	r3, [pc, #48]	; (165d8 <xPortStartScheduler+0x60>)
   165a6:	4798      	blx	r3
   165a8:	3801      	subs	r0, #1
   165aa:	4b0c      	ldr	r3, [pc, #48]	; (165dc <xPortStartScheduler+0x64>)
   165ac:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   165ae:	2307      	movs	r3, #7
   165b0:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
   165b2:	4b0b      	ldr	r3, [pc, #44]	; (165e0 <xPortStartScheduler+0x68>)
   165b4:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
   165b6:	4b0b      	ldr	r3, [pc, #44]	; (165e4 <xPortStartScheduler+0x6c>)
   165b8:	4798      	blx	r3
	vTaskSwitchContext();
   165ba:	4b0b      	ldr	r3, [pc, #44]	; (165e8 <xPortStartScheduler+0x70>)
   165bc:	4798      	blx	r3
	prvTaskExitError();
   165be:	4b0b      	ldr	r3, [pc, #44]	; (165ec <xPortStartScheduler+0x74>)
   165c0:	4798      	blx	r3
}
   165c2:	2000      	movs	r0, #0
   165c4:	bd70      	pop	{r4, r5, r6, pc}
   165c6:	46c0      	nop			; (mov r8, r8)
   165c8:	e000ed20 	.word	0xe000ed20
   165cc:	e000e010 	.word	0xe000e010
   165d0:	e000e018 	.word	0xe000e018
   165d4:	0001ef8d 	.word	0x0001ef8d
   165d8:	00023fe1 	.word	0x00023fe1
   165dc:	e000e014 	.word	0xe000e014
   165e0:	200000b4 	.word	0x200000b4
   165e4:	00016521 	.word	0x00016521
   165e8:	000180e5 	.word	0x000180e5
   165ec:	000164fd 	.word	0x000164fd

000165f0 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   165f0:	2280      	movs	r2, #128	; 0x80
   165f2:	0552      	lsls	r2, r2, #21
   165f4:	4b01      	ldr	r3, [pc, #4]	; (165fc <vPortYield+0xc>)
   165f6:	601a      	str	r2, [r3, #0]
}
   165f8:	4770      	bx	lr
   165fa:	46c0      	nop			; (mov r8, r8)
   165fc:	e000ed04 	.word	0xe000ed04

00016600 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
   16600:	b672      	cpsid	i
    uxCriticalNesting++;
   16602:	4a04      	ldr	r2, [pc, #16]	; (16614 <vPortEnterCritical+0x14>)
   16604:	6813      	ldr	r3, [r2, #0]
   16606:	3301      	adds	r3, #1
   16608:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
   1660a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1660e:	f3bf 8f6f 	isb	sy
}
   16612:	4770      	bx	lr
   16614:	200000b4 	.word	0x200000b4

00016618 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
   16618:	4b06      	ldr	r3, [pc, #24]	; (16634 <vPortExitCritical+0x1c>)
   1661a:	681b      	ldr	r3, [r3, #0]
   1661c:	2b00      	cmp	r3, #0
   1661e:	d101      	bne.n	16624 <vPortExitCritical+0xc>
   16620:	b672      	cpsid	i
   16622:	e7fe      	b.n	16622 <vPortExitCritical+0xa>
    uxCriticalNesting--;
   16624:	3b01      	subs	r3, #1
   16626:	4a03      	ldr	r2, [pc, #12]	; (16634 <vPortExitCritical+0x1c>)
   16628:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
   1662a:	2b00      	cmp	r3, #0
   1662c:	d100      	bne.n	16630 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
   1662e:	b662      	cpsie	i
}
   16630:	4770      	bx	lr
   16632:	46c0      	nop			; (mov r8, r8)
   16634:	200000b4 	.word	0x200000b4

00016638 <ulSetInterruptMaskFromISR>:
	__asm volatile(
   16638:	f3ef 8010 	mrs	r0, PRIMASK
   1663c:	b672      	cpsid	i
   1663e:	4770      	bx	lr

00016640 <vClearInterruptMaskFromISR>:
	__asm volatile(
   16640:	f380 8810 	msr	PRIMASK, r0
   16644:	4770      	bx	lr
	...

00016650 <PendSV_Handler>:
	__asm volatile
   16650:	f3ef 8009 	mrs	r0, PSP
   16654:	4b0e      	ldr	r3, [pc, #56]	; (16690 <pxCurrentTCBConst>)
   16656:	681a      	ldr	r2, [r3, #0]
   16658:	3820      	subs	r0, #32
   1665a:	6010      	str	r0, [r2, #0]
   1665c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1665e:	4644      	mov	r4, r8
   16660:	464d      	mov	r5, r9
   16662:	4656      	mov	r6, sl
   16664:	465f      	mov	r7, fp
   16666:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   16668:	b508      	push	{r3, lr}
   1666a:	b672      	cpsid	i
   1666c:	f001 fd3a 	bl	180e4 <vTaskSwitchContext>
   16670:	b662      	cpsie	i
   16672:	bc0c      	pop	{r2, r3}
   16674:	6811      	ldr	r1, [r2, #0]
   16676:	6808      	ldr	r0, [r1, #0]
   16678:	3010      	adds	r0, #16
   1667a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1667c:	46a0      	mov	r8, r4
   1667e:	46a9      	mov	r9, r5
   16680:	46b2      	mov	sl, r6
   16682:	46bb      	mov	fp, r7
   16684:	f380 8809 	msr	PSP, r0
   16688:	3820      	subs	r0, #32
   1668a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1668c:	4718      	bx	r3
   1668e:	46c0      	nop			; (mov r8, r8)

00016690 <pxCurrentTCBConst>:
   16690:	20003ba8 	.word	0x20003ba8

00016694 <SysTick_Handler>:
{
   16694:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   16696:	4b07      	ldr	r3, [pc, #28]	; (166b4 <SysTick_Handler+0x20>)
   16698:	4798      	blx	r3
   1669a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
   1669c:	4b06      	ldr	r3, [pc, #24]	; (166b8 <SysTick_Handler+0x24>)
   1669e:	4798      	blx	r3
   166a0:	2800      	cmp	r0, #0
   166a2:	d003      	beq.n	166ac <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   166a4:	2280      	movs	r2, #128	; 0x80
   166a6:	0552      	lsls	r2, r2, #21
   166a8:	4b04      	ldr	r3, [pc, #16]	; (166bc <SysTick_Handler+0x28>)
   166aa:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   166ac:	0020      	movs	r0, r4
   166ae:	4b04      	ldr	r3, [pc, #16]	; (166c0 <SysTick_Handler+0x2c>)
   166b0:	4798      	blx	r3
}
   166b2:	bd10      	pop	{r4, pc}
   166b4:	00016639 	.word	0x00016639
   166b8:	00017d8d 	.word	0x00017d8d
   166bc:	e000ed04 	.word	0xe000ed04
   166c0:	00016641 	.word	0x00016641

000166c4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   166c4:	b570      	push	{r4, r5, r6, lr}
   166c6:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   166c8:	0743      	lsls	r3, r0, #29
   166ca:	d002      	beq.n	166d2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   166cc:	2307      	movs	r3, #7
   166ce:	439c      	bics	r4, r3
   166d0:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   166d2:	4b18      	ldr	r3, [pc, #96]	; (16734 <pvPortMalloc+0x70>)
   166d4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   166d6:	4b18      	ldr	r3, [pc, #96]	; (16738 <pvPortMalloc+0x74>)
   166d8:	681b      	ldr	r3, [r3, #0]
   166da:	2b00      	cmp	r3, #0
   166dc:	d017      	beq.n	1670e <pvPortMalloc+0x4a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   166de:	4b17      	ldr	r3, [pc, #92]	; (1673c <pvPortMalloc+0x78>)
   166e0:	681a      	ldr	r2, [r3, #0]
   166e2:	18a3      	adds	r3, r4, r2
   166e4:	4916      	ldr	r1, [pc, #88]	; (16740 <pvPortMalloc+0x7c>)
   166e6:	428b      	cmp	r3, r1
   166e8:	d818      	bhi.n	1671c <pvPortMalloc+0x58>
   166ea:	429a      	cmp	r2, r3
   166ec:	d216      	bcs.n	1671c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   166ee:	4912      	ldr	r1, [pc, #72]	; (16738 <pvPortMalloc+0x74>)
   166f0:	680d      	ldr	r5, [r1, #0]
   166f2:	18ad      	adds	r5, r5, r2
			xNextFreeByte += xWantedSize;
   166f4:	4a11      	ldr	r2, [pc, #68]	; (1673c <pvPortMalloc+0x78>)
   166f6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   166f8:	2d00      	cmp	r5, #0
   166fa:	d00f      	beq.n	1671c <pvPortMalloc+0x58>
   166fc:	0022      	movs	r2, r4
   166fe:	0029      	movs	r1, r5
   16700:	2094      	movs	r0, #148	; 0x94
   16702:	4b10      	ldr	r3, [pc, #64]	; (16744 <pvPortMalloc+0x80>)
   16704:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   16706:	4b10      	ldr	r3, [pc, #64]	; (16748 <pvPortMalloc+0x84>)
   16708:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   1670a:	0028      	movs	r0, r5
   1670c:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1670e:	2207      	movs	r2, #7
   16710:	4b0e      	ldr	r3, [pc, #56]	; (1674c <pvPortMalloc+0x88>)
   16712:	3308      	adds	r3, #8
   16714:	4393      	bics	r3, r2
   16716:	4a08      	ldr	r2, [pc, #32]	; (16738 <pvPortMalloc+0x74>)
   16718:	6013      	str	r3, [r2, #0]
   1671a:	e7e0      	b.n	166de <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
   1671c:	0022      	movs	r2, r4
   1671e:	2100      	movs	r1, #0
   16720:	20e8      	movs	r0, #232	; 0xe8
   16722:	4b08      	ldr	r3, [pc, #32]	; (16744 <pvPortMalloc+0x80>)
   16724:	4798      	blx	r3
	( void ) xTaskResumeAll();
   16726:	4b08      	ldr	r3, [pc, #32]	; (16748 <pvPortMalloc+0x84>)
   16728:	4798      	blx	r3
			vApplicationMallocFailedHook();
   1672a:	4b09      	ldr	r3, [pc, #36]	; (16750 <pvPortMalloc+0x8c>)
   1672c:	4798      	blx	r3
   1672e:	2500      	movs	r5, #0
	return pvReturn;
   16730:	e7eb      	b.n	1670a <pvPortMalloc+0x46>
   16732:	46c0      	nop			; (mov r8, r8)
   16734:	00017d71 	.word	0x00017d71
   16738:	20000cc0 	.word	0x20000cc0
   1673c:	20003ba4 	.word	0x20003ba4
   16740:	00002ed7 	.word	0x00002ed7
   16744:	00015fc1 	.word	0x00015fc1
   16748:	00017f19 	.word	0x00017f19
   1674c:	20000cc4 	.word	0x20000cc4
   16750:	00023fb9 	.word	0x00023fb9

00016754 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   16754:	2800      	cmp	r0, #0
   16756:	d001      	beq.n	1675c <vPortFree+0x8>
   16758:	b672      	cpsid	i
   1675a:	e7fe      	b.n	1675a <vPortFree+0x6>
}
   1675c:	4770      	bx	lr
	...

00016760 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   16760:	4b02      	ldr	r3, [pc, #8]	; (1676c <xPortGetFreeHeapSize+0xc>)
   16762:	681b      	ldr	r3, [r3, #0]
   16764:	4802      	ldr	r0, [pc, #8]	; (16770 <xPortGetFreeHeapSize+0x10>)
   16766:	1ac0      	subs	r0, r0, r3
}
   16768:	4770      	bx	lr
   1676a:	46c0      	nop			; (mov r8, r8)
   1676c:	20003ba4 	.word	0x20003ba4
   16770:	00002ed8 	.word	0x00002ed8

00016774 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   16774:	b510      	push	{r4, lr}
   16776:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   16778:	4b03      	ldr	r3, [pc, #12]	; (16788 <prvIsQueueEmpty+0x14>)
   1677a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1677c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   1677e:	4b03      	ldr	r3, [pc, #12]	; (1678c <prvIsQueueEmpty+0x18>)
   16780:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   16782:	4260      	negs	r0, r4
   16784:	4160      	adcs	r0, r4

	return xReturn;
}
   16786:	bd10      	pop	{r4, pc}
   16788:	00016601 	.word	0x00016601
   1678c:	00016619 	.word	0x00016619

00016790 <prvCopyDataToQueue>:
{
   16790:	b570      	push	{r4, r5, r6, lr}
   16792:	0004      	movs	r4, r0
   16794:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   16796:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   16798:	6c02      	ldr	r2, [r0, #64]	; 0x40
   1679a:	2a00      	cmp	r2, #0
   1679c:	d10b      	bne.n	167b6 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
   1679e:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   167a0:	6823      	ldr	r3, [r4, #0]
   167a2:	4283      	cmp	r3, r0
   167a4:	d104      	bne.n	167b0 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   167a6:	6860      	ldr	r0, [r4, #4]
   167a8:	4b16      	ldr	r3, [pc, #88]	; (16804 <prvCopyDataToQueue+0x74>)
   167aa:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   167ac:	2300      	movs	r3, #0
   167ae:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   167b0:	3501      	adds	r5, #1
   167b2:	63a5      	str	r5, [r4, #56]	; 0x38
}
   167b4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
   167b6:	2e00      	cmp	r6, #0
   167b8:	d10e      	bne.n	167d8 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   167ba:	6880      	ldr	r0, [r0, #8]
   167bc:	4b12      	ldr	r3, [pc, #72]	; (16808 <prvCopyDataToQueue+0x78>)
   167be:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   167c0:	68a3      	ldr	r3, [r4, #8]
   167c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   167c4:	4694      	mov	ip, r2
   167c6:	4463      	add	r3, ip
   167c8:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
   167ca:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   167cc:	6862      	ldr	r2, [r4, #4]
   167ce:	4293      	cmp	r3, r2
   167d0:	d3ee      	bcc.n	167b0 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   167d2:	6823      	ldr	r3, [r4, #0]
   167d4:	60a3      	str	r3, [r4, #8]
   167d6:	e7eb      	b.n	167b0 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   167d8:	68c0      	ldr	r0, [r0, #12]
   167da:	4b0b      	ldr	r3, [pc, #44]	; (16808 <prvCopyDataToQueue+0x78>)
   167dc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   167de:	6c23      	ldr	r3, [r4, #64]	; 0x40
   167e0:	425b      	negs	r3, r3
   167e2:	68e2      	ldr	r2, [r4, #12]
   167e4:	18d2      	adds	r2, r2, r3
   167e6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   167e8:	6821      	ldr	r1, [r4, #0]
   167ea:	428a      	cmp	r2, r1
   167ec:	d203      	bcs.n	167f6 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   167ee:	6862      	ldr	r2, [r4, #4]
   167f0:	4694      	mov	ip, r2
   167f2:	4463      	add	r3, ip
   167f4:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
   167f6:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
   167f8:	2e02      	cmp	r6, #2
   167fa:	d1d9      	bne.n	167b0 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   167fc:	4285      	cmp	r5, r0
   167fe:	d0d7      	beq.n	167b0 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
   16800:	3d01      	subs	r5, #1
   16802:	e7d5      	b.n	167b0 <prvCopyDataToQueue+0x20>
   16804:	00018695 	.word	0x00018695
   16808:	00026215 	.word	0x00026215

0001680c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1680c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1680e:	46ce      	mov	lr, r9
   16810:	4647      	mov	r7, r8
   16812:	b580      	push	{r7, lr}
   16814:	b083      	sub	sp, #12
   16816:	9001      	str	r0, [sp, #4]
   16818:	9100      	str	r1, [sp, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1681a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1681c:	2c00      	cmp	r4, #0
   1681e:	d005      	beq.n	1682c <prvNotifyQueueSetContainer+0x20>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   16820:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   16822:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16824:	429a      	cmp	r2, r3
   16826:	d303      	bcc.n	16830 <prvNotifyQueueSetContainer+0x24>
   16828:	b672      	cpsid	i
   1682a:	e7fe      	b.n	1682a <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer );
   1682c:	b672      	cpsid	i
   1682e:	e7fe      	b.n	1682e <prvNotifyQueueSetContainer+0x22>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   16830:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
   16832:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   16834:	4293      	cmp	r3, r2
   16836:	d805      	bhi.n	16844 <prvNotifyQueueSetContainer+0x38>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
   16838:	0030      	movs	r0, r6
   1683a:	b003      	add	sp, #12
   1683c:	bc0c      	pop	{r2, r3}
   1683e:	4690      	mov	r8, r2
   16840:	4699      	mov	r9, r3
   16842:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   16844:	2345      	movs	r3, #69	; 0x45
   16846:	5ce5      	ldrb	r5, [r4, r3]
   16848:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );
   1684a:	4b2c      	ldr	r3, [pc, #176]	; (168fc <prvNotifyQueueSetContainer+0xf0>)
   1684c:	4798      	blx	r3
   1684e:	4b2c      	ldr	r3, [pc, #176]	; (16900 <prvNotifyQueueSetContainer+0xf4>)
   16850:	4798      	blx	r3
   16852:	4b2c      	ldr	r3, [pc, #176]	; (16904 <prvNotifyQueueSetContainer+0xf8>)
   16854:	881b      	ldrh	r3, [r3, #0]
   16856:	4203      	tst	r3, r0
   16858:	d01e      	beq.n	16898 <prvNotifyQueueSetContainer+0x8c>
   1685a:	0020      	movs	r0, r4
   1685c:	4b2a      	ldr	r3, [pc, #168]	; (16908 <prvNotifyQueueSetContainer+0xfc>)
   1685e:	4798      	blx	r3
   16860:	4b28      	ldr	r3, [pc, #160]	; (16904 <prvNotifyQueueSetContainer+0xf8>)
   16862:	881b      	ldrh	r3, [r3, #0]
   16864:	4203      	tst	r3, r0
   16866:	d017      	beq.n	16898 <prvNotifyQueueSetContainer+0x8c>
   16868:	3625      	adds	r6, #37	; 0x25
   1686a:	9b00      	ldr	r3, [sp, #0]
   1686c:	2b00      	cmp	r3, #0
   1686e:	d106      	bne.n	1687e <prvNotifyQueueSetContainer+0x72>
   16870:	0020      	movs	r0, r4
   16872:	4b26      	ldr	r3, [pc, #152]	; (1690c <prvNotifyQueueSetContainer+0x100>)
   16874:	4798      	blx	r3
   16876:	4b26      	ldr	r3, [pc, #152]	; (16910 <prvNotifyQueueSetContainer+0x104>)
   16878:	5c1e      	ldrb	r6, [r3, r0]
   1687a:	3620      	adds	r6, #32
   1687c:	b2f6      	uxtb	r6, r6
   1687e:	0020      	movs	r0, r4
   16880:	4b22      	ldr	r3, [pc, #136]	; (1690c <prvNotifyQueueSetContainer+0x100>)
   16882:	4798      	blx	r3
   16884:	4b22      	ldr	r3, [pc, #136]	; (16910 <prvNotifyQueueSetContainer+0x104>)
   16886:	5c1f      	ldrb	r7, [r3, r0]
   16888:	0020      	movs	r0, r4
   1688a:	4b22      	ldr	r3, [pc, #136]	; (16914 <prvNotifyQueueSetContainer+0x108>)
   1688c:	4798      	blx	r3
   1688e:	b2c2      	uxtb	r2, r0
   16890:	0039      	movs	r1, r7
   16892:	0030      	movs	r0, r6
   16894:	4b20      	ldr	r3, [pc, #128]	; (16918 <prvNotifyQueueSetContainer+0x10c>)
   16896:	4798      	blx	r3
   16898:	0020      	movs	r0, r4
   1689a:	4f1c      	ldr	r7, [pc, #112]	; (1690c <prvNotifyQueueSetContainer+0x100>)
   1689c:	47b8      	blx	r7
   1689e:	4e1c      	ldr	r6, [pc, #112]	; (16910 <prvNotifyQueueSetContainer+0x104>)
   168a0:	5c33      	ldrb	r3, [r6, r0]
   168a2:	4698      	mov	r8, r3
   168a4:	0020      	movs	r0, r4
   168a6:	4b1b      	ldr	r3, [pc, #108]	; (16914 <prvNotifyQueueSetContainer+0x108>)
   168a8:	4798      	blx	r3
   168aa:	b2c3      	uxtb	r3, r0
   168ac:	4699      	mov	r9, r3
   168ae:	0020      	movs	r0, r4
   168b0:	47b8      	blx	r7
   168b2:	5c33      	ldrb	r3, [r6, r0]
   168b4:	2b02      	cmp	r3, #2
   168b6:	d019      	beq.n	168ec <prvNotifyQueueSetContainer+0xe0>
   168b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   168ba:	3201      	adds	r2, #1
   168bc:	b2d2      	uxtb	r2, r2
   168be:	4649      	mov	r1, r9
   168c0:	4640      	mov	r0, r8
   168c2:	4b16      	ldr	r3, [pc, #88]	; (1691c <prvNotifyQueueSetContainer+0x110>)
   168c4:	4798      	blx	r3
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   168c6:	9a00      	ldr	r2, [sp, #0]
   168c8:	a901      	add	r1, sp, #4
   168ca:	0020      	movs	r0, r4
   168cc:	4b14      	ldr	r3, [pc, #80]	; (16920 <prvNotifyQueueSetContainer+0x114>)
   168ce:	4798      	blx	r3
   168d0:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
   168d2:	1c6b      	adds	r3, r5, #1
   168d4:	d10c      	bne.n	168f0 <prvNotifyQueueSetContainer+0xe4>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   168d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   168d8:	2b00      	cmp	r3, #0
   168da:	d0ad      	beq.n	16838 <prvNotifyQueueSetContainer+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   168dc:	0020      	movs	r0, r4
   168de:	3024      	adds	r0, #36	; 0x24
   168e0:	4b10      	ldr	r3, [pc, #64]	; (16924 <prvNotifyQueueSetContainer+0x118>)
   168e2:	4798      	blx	r3
   168e4:	2800      	cmp	r0, #0
   168e6:	d0a7      	beq.n	16838 <prvNotifyQueueSetContainer+0x2c>
						xReturn = pdTRUE;
   168e8:	2601      	movs	r6, #1
   168ea:	e7a5      	b.n	16838 <prvNotifyQueueSetContainer+0x2c>
			traceQUEUE_SEND( pxQueueSetContainer );
   168ec:	2200      	movs	r2, #0
   168ee:	e7e6      	b.n	168be <prvNotifyQueueSetContainer+0xb2>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   168f0:	3501      	adds	r5, #1
   168f2:	b26d      	sxtb	r5, r5
   168f4:	2345      	movs	r3, #69	; 0x45
   168f6:	54e5      	strb	r5, [r4, r3]
   168f8:	e79e      	b.n	16838 <prvNotifyQueueSetContainer+0x2c>
   168fa:	46c0      	nop			; (mov r8, r8)
   168fc:	00015409 	.word	0x00015409
   16900:	00015255 	.word	0x00015255
   16904:	200000ac 	.word	0x200000ac
   16908:	000152b9 	.word	0x000152b9
   1690c:	00015239 	.word	0x00015239
   16910:	200000a4 	.word	0x200000a4
   16914:	000152a9 	.word	0x000152a9
   16918:	0001608d 	.word	0x0001608d
   1691c:	00015b61 	.word	0x00015b61
   16920:	00016791 	.word	0x00016791
   16924:	000183c9 	.word	0x000183c9

00016928 <prvCopyDataFromQueue>:
{
   16928:	b510      	push	{r4, lr}
   1692a:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1692c:	6c02      	ldr	r2, [r0, #64]	; 0x40
   1692e:	2a00      	cmp	r2, #0
   16930:	d00b      	beq.n	1694a <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   16932:	68c3      	ldr	r3, [r0, #12]
   16934:	189b      	adds	r3, r3, r2
   16936:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   16938:	6841      	ldr	r1, [r0, #4]
   1693a:	428b      	cmp	r3, r1
   1693c:	d301      	bcc.n	16942 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1693e:	6803      	ldr	r3, [r0, #0]
   16940:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   16942:	68c1      	ldr	r1, [r0, #12]
   16944:	0020      	movs	r0, r4
   16946:	4b01      	ldr	r3, [pc, #4]	; (1694c <prvCopyDataFromQueue+0x24>)
   16948:	4798      	blx	r3
}
   1694a:	bd10      	pop	{r4, pc}
   1694c:	00026215 	.word	0x00026215

00016950 <prvUnlockQueue>:
{
   16950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16952:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
   16954:	4b25      	ldr	r3, [pc, #148]	; (169ec <prvUnlockQueue+0x9c>)
   16956:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
   16958:	2345      	movs	r3, #69	; 0x45
   1695a:	5cfc      	ldrb	r4, [r7, r3]
   1695c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1695e:	2c00      	cmp	r4, #0
   16960:	dd1c      	ble.n	1699c <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   16962:	4e23      	ldr	r6, [pc, #140]	; (169f0 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16964:	4d23      	ldr	r5, [pc, #140]	; (169f4 <prvUnlockQueue+0xa4>)
   16966:	e00b      	b.n	16980 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   16968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1696a:	2b00      	cmp	r3, #0
   1696c:	d016      	beq.n	1699c <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1696e:	0038      	movs	r0, r7
   16970:	3024      	adds	r0, #36	; 0x24
   16972:	47a8      	blx	r5
   16974:	2800      	cmp	r0, #0
   16976:	d10e      	bne.n	16996 <prvUnlockQueue+0x46>
   16978:	3c01      	subs	r4, #1
   1697a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1697c:	2c00      	cmp	r4, #0
   1697e:	d00d      	beq.n	1699c <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
   16980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16982:	2b00      	cmp	r3, #0
   16984:	d0f0      	beq.n	16968 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   16986:	2100      	movs	r1, #0
   16988:	0038      	movs	r0, r7
   1698a:	47b0      	blx	r6
   1698c:	2800      	cmp	r0, #0
   1698e:	d0f3      	beq.n	16978 <prvUnlockQueue+0x28>
						vTaskMissedYield();
   16990:	4b19      	ldr	r3, [pc, #100]	; (169f8 <prvUnlockQueue+0xa8>)
   16992:	4798      	blx	r3
   16994:	e7f0      	b.n	16978 <prvUnlockQueue+0x28>
							vTaskMissedYield();
   16996:	4b18      	ldr	r3, [pc, #96]	; (169f8 <prvUnlockQueue+0xa8>)
   16998:	4798      	blx	r3
   1699a:	e7ed      	b.n	16978 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
   1699c:	22ff      	movs	r2, #255	; 0xff
   1699e:	2345      	movs	r3, #69	; 0x45
   169a0:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
   169a2:	4b16      	ldr	r3, [pc, #88]	; (169fc <prvUnlockQueue+0xac>)
   169a4:	4798      	blx	r3
	taskENTER_CRITICAL();
   169a6:	4b11      	ldr	r3, [pc, #68]	; (169ec <prvUnlockQueue+0x9c>)
   169a8:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
   169aa:	2344      	movs	r3, #68	; 0x44
   169ac:	5cfc      	ldrb	r4, [r7, r3]
   169ae:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   169b0:	2c00      	cmp	r4, #0
   169b2:	dd14      	ble.n	169de <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   169b4:	693b      	ldr	r3, [r7, #16]
   169b6:	2b00      	cmp	r3, #0
   169b8:	d011      	beq.n	169de <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   169ba:	003d      	movs	r5, r7
   169bc:	3510      	adds	r5, #16
   169be:	4e0d      	ldr	r6, [pc, #52]	; (169f4 <prvUnlockQueue+0xa4>)
   169c0:	e006      	b.n	169d0 <prvUnlockQueue+0x80>
   169c2:	3c01      	subs	r4, #1
   169c4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
   169c6:	2c00      	cmp	r4, #0
   169c8:	d009      	beq.n	169de <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   169ca:	693b      	ldr	r3, [r7, #16]
   169cc:	2b00      	cmp	r3, #0
   169ce:	d006      	beq.n	169de <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   169d0:	0028      	movs	r0, r5
   169d2:	47b0      	blx	r6
   169d4:	2800      	cmp	r0, #0
   169d6:	d0f4      	beq.n	169c2 <prvUnlockQueue+0x72>
					vTaskMissedYield();
   169d8:	4b07      	ldr	r3, [pc, #28]	; (169f8 <prvUnlockQueue+0xa8>)
   169da:	4798      	blx	r3
   169dc:	e7f1      	b.n	169c2 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
   169de:	22ff      	movs	r2, #255	; 0xff
   169e0:	2344      	movs	r3, #68	; 0x44
   169e2:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
   169e4:	4b05      	ldr	r3, [pc, #20]	; (169fc <prvUnlockQueue+0xac>)
   169e6:	4798      	blx	r3
}
   169e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   169ea:	46c0      	nop			; (mov r8, r8)
   169ec:	00016601 	.word	0x00016601
   169f0:	0001680d 	.word	0x0001680d
   169f4:	000183c9 	.word	0x000183c9
   169f8:	00018505 	.word	0x00018505
   169fc:	00016619 	.word	0x00016619

00016a00 <xQueueGenericReset>:
{
   16a00:	b570      	push	{r4, r5, r6, lr}
   16a02:	0004      	movs	r4, r0
   16a04:	000d      	movs	r5, r1
	configASSERT( pxQueue );
   16a06:	2800      	cmp	r0, #0
   16a08:	d021      	beq.n	16a4e <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
   16a0a:	4b17      	ldr	r3, [pc, #92]	; (16a68 <xQueueGenericReset+0x68>)
   16a0c:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   16a0e:	6822      	ldr	r2, [r4, #0]
   16a10:	6c21      	ldr	r1, [r4, #64]	; 0x40
   16a12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16a14:	434b      	muls	r3, r1
   16a16:	18d0      	adds	r0, r2, r3
   16a18:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   16a1a:	2000      	movs	r0, #0
   16a1c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   16a1e:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   16a20:	1a5b      	subs	r3, r3, r1
   16a22:	18d3      	adds	r3, r2, r3
   16a24:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   16a26:	23ff      	movs	r3, #255	; 0xff
   16a28:	2244      	movs	r2, #68	; 0x44
   16a2a:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   16a2c:	3201      	adds	r2, #1
   16a2e:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
   16a30:	2d00      	cmp	r5, #0
   16a32:	d111      	bne.n	16a58 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16a34:	6923      	ldr	r3, [r4, #16]
   16a36:	2b00      	cmp	r3, #0
   16a38:	d005      	beq.n	16a46 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   16a3a:	0020      	movs	r0, r4
   16a3c:	3010      	adds	r0, #16
   16a3e:	4b0b      	ldr	r3, [pc, #44]	; (16a6c <xQueueGenericReset+0x6c>)
   16a40:	4798      	blx	r3
   16a42:	2800      	cmp	r0, #0
   16a44:	d105      	bne.n	16a52 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
   16a46:	4b0a      	ldr	r3, [pc, #40]	; (16a70 <xQueueGenericReset+0x70>)
   16a48:	4798      	blx	r3
}
   16a4a:	2001      	movs	r0, #1
   16a4c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
   16a4e:	b672      	cpsid	i
   16a50:	e7fe      	b.n	16a50 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
   16a52:	4b08      	ldr	r3, [pc, #32]	; (16a74 <xQueueGenericReset+0x74>)
   16a54:	4798      	blx	r3
   16a56:	e7f6      	b.n	16a46 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   16a58:	0020      	movs	r0, r4
   16a5a:	3010      	adds	r0, #16
   16a5c:	4d06      	ldr	r5, [pc, #24]	; (16a78 <xQueueGenericReset+0x78>)
   16a5e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   16a60:	0020      	movs	r0, r4
   16a62:	3024      	adds	r0, #36	; 0x24
   16a64:	47a8      	blx	r5
   16a66:	e7ee      	b.n	16a46 <xQueueGenericReset+0x46>
   16a68:	00016601 	.word	0x00016601
   16a6c:	000183c9 	.word	0x000183c9
   16a70:	00016619 	.word	0x00016619
   16a74:	000165f1 	.word	0x000165f1
   16a78:	00016471 	.word	0x00016471

00016a7c <xQueueGenericCreate>:
	{
   16a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a7e:	0006      	movs	r6, r0
   16a80:	000d      	movs	r5, r1
   16a82:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   16a84:	2800      	cmp	r0, #0
   16a86:	d101      	bne.n	16a8c <xQueueGenericCreate+0x10>
   16a88:	b672      	cpsid	i
   16a8a:	e7fe      	b.n	16a8a <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16a8c:	0008      	movs	r0, r1
   16a8e:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   16a90:	3054      	adds	r0, #84	; 0x54
   16a92:	4b38      	ldr	r3, [pc, #224]	; (16b74 <xQueueGenericCreate+0xf8>)
   16a94:	4798      	blx	r3
   16a96:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   16a98:	d05b      	beq.n	16b52 <xQueueGenericCreate+0xd6>
	if( uxItemSize == ( UBaseType_t ) 0 )
   16a9a:	2d00      	cmp	r5, #0
   16a9c:	d13b      	bne.n	16b16 <xQueueGenericCreate+0x9a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   16a9e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
   16aa0:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   16aa2:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   16aa4:	2101      	movs	r1, #1
   16aa6:	0020      	movs	r0, r4
   16aa8:	4b33      	ldr	r3, [pc, #204]	; (16b78 <xQueueGenericCreate+0xfc>)
   16aaa:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   16aac:	2350      	movs	r3, #80	; 0x50
   16aae:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
   16ab0:	2300      	movs	r3, #0
   16ab2:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
   16ab4:	0020      	movs	r0, r4
   16ab6:	4e31      	ldr	r6, [pc, #196]	; (16b7c <xQueueGenericCreate+0x100>)
   16ab8:	47b0      	blx	r6
   16aba:	4d31      	ldr	r5, [pc, #196]	; (16b80 <xQueueGenericCreate+0x104>)
   16abc:	5c28      	ldrb	r0, [r5, r0]
   16abe:	4b31      	ldr	r3, [pc, #196]	; (16b84 <xQueueGenericCreate+0x108>)
   16ac0:	4798      	blx	r3
   16ac2:	b281      	uxth	r1, r0
   16ac4:	0020      	movs	r0, r4
   16ac6:	4b30      	ldr	r3, [pc, #192]	; (16b88 <xQueueGenericCreate+0x10c>)
   16ac8:	4798      	blx	r3
   16aca:	4b30      	ldr	r3, [pc, #192]	; (16b8c <xQueueGenericCreate+0x110>)
   16acc:	8819      	ldrh	r1, [r3, #0]
   16ace:	0020      	movs	r0, r4
   16ad0:	4b2f      	ldr	r3, [pc, #188]	; (16b90 <xQueueGenericCreate+0x114>)
   16ad2:	4798      	blx	r3
   16ad4:	0020      	movs	r0, r4
   16ad6:	47b0      	blx	r6
   16ad8:	5c2d      	ldrb	r5, [r5, r0]
   16ada:	0020      	movs	r0, r4
   16adc:	4b2d      	ldr	r3, [pc, #180]	; (16b94 <xQueueGenericCreate+0x118>)
   16ade:	4798      	blx	r3
   16ae0:	b2c1      	uxtb	r1, r0
   16ae2:	0028      	movs	r0, r5
   16ae4:	4b2c      	ldr	r3, [pc, #176]	; (16b98 <xQueueGenericCreate+0x11c>)
   16ae6:	4798      	blx	r3
   16ae8:	4b2c      	ldr	r3, [pc, #176]	; (16b9c <xQueueGenericCreate+0x120>)
   16aea:	4798      	blx	r3
   16aec:	4b2c      	ldr	r3, [pc, #176]	; (16ba0 <xQueueGenericCreate+0x124>)
   16aee:	4798      	blx	r3
   16af0:	4b2c      	ldr	r3, [pc, #176]	; (16ba4 <xQueueGenericCreate+0x128>)
   16af2:	881b      	ldrh	r3, [r3, #0]
   16af4:	4203      	tst	r3, r0
   16af6:	d112      	bne.n	16b1e <xQueueGenericCreate+0xa2>
   16af8:	0020      	movs	r0, r4
   16afa:	4b20      	ldr	r3, [pc, #128]	; (16b7c <xQueueGenericCreate+0x100>)
   16afc:	4798      	blx	r3
   16afe:	4b20      	ldr	r3, [pc, #128]	; (16b80 <xQueueGenericCreate+0x104>)
   16b00:	5c1d      	ldrb	r5, [r3, r0]
   16b02:	0020      	movs	r0, r4
   16b04:	4b23      	ldr	r3, [pc, #140]	; (16b94 <xQueueGenericCreate+0x118>)
   16b06:	4798      	blx	r3
   16b08:	b2c1      	uxtb	r1, r0
   16b0a:	2200      	movs	r2, #0
   16b0c:	0028      	movs	r0, r5
   16b0e:	4b26      	ldr	r3, [pc, #152]	; (16ba8 <xQueueGenericCreate+0x12c>)
   16b10:	4798      	blx	r3
	}
   16b12:	0020      	movs	r0, r4
   16b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   16b16:	0003      	movs	r3, r0
   16b18:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   16b1a:	6003      	str	r3, [r0, #0]
   16b1c:	e7c0      	b.n	16aa0 <xQueueGenericCreate+0x24>
	traceQUEUE_CREATE( pxNewQueue );
   16b1e:	0020      	movs	r0, r4
   16b20:	4b22      	ldr	r3, [pc, #136]	; (16bac <xQueueGenericCreate+0x130>)
   16b22:	4798      	blx	r3
   16b24:	4b1f      	ldr	r3, [pc, #124]	; (16ba4 <xQueueGenericCreate+0x128>)
   16b26:	881b      	ldrh	r3, [r3, #0]
   16b28:	4203      	tst	r3, r0
   16b2a:	d0e5      	beq.n	16af8 <xQueueGenericCreate+0x7c>
   16b2c:	0020      	movs	r0, r4
   16b2e:	4f13      	ldr	r7, [pc, #76]	; (16b7c <xQueueGenericCreate+0x100>)
   16b30:	47b8      	blx	r7
   16b32:	4e13      	ldr	r6, [pc, #76]	; (16b80 <xQueueGenericCreate+0x104>)
   16b34:	5c35      	ldrb	r5, [r6, r0]
   16b36:	3518      	adds	r5, #24
   16b38:	b2ed      	uxtb	r5, r5
   16b3a:	0020      	movs	r0, r4
   16b3c:	47b8      	blx	r7
   16b3e:	5c36      	ldrb	r6, [r6, r0]
   16b40:	0020      	movs	r0, r4
   16b42:	4b14      	ldr	r3, [pc, #80]	; (16b94 <xQueueGenericCreate+0x118>)
   16b44:	4798      	blx	r3
   16b46:	b2c2      	uxtb	r2, r0
   16b48:	0031      	movs	r1, r6
   16b4a:	0028      	movs	r0, r5
   16b4c:	4b18      	ldr	r3, [pc, #96]	; (16bb0 <xQueueGenericCreate+0x134>)
   16b4e:	4798      	blx	r3
   16b50:	e7d2      	b.n	16af8 <xQueueGenericCreate+0x7c>
			traceQUEUE_CREATE_FAILED( ucQueueType );
   16b52:	4b12      	ldr	r3, [pc, #72]	; (16b9c <xQueueGenericCreate+0x120>)
   16b54:	4798      	blx	r3
   16b56:	4b12      	ldr	r3, [pc, #72]	; (16ba0 <xQueueGenericCreate+0x124>)
   16b58:	4798      	blx	r3
   16b5a:	4b12      	ldr	r3, [pc, #72]	; (16ba4 <xQueueGenericCreate+0x128>)
   16b5c:	881b      	ldrh	r3, [r3, #0]
   16b5e:	4203      	tst	r3, r0
   16b60:	d0d7      	beq.n	16b12 <xQueueGenericCreate+0x96>
   16b62:	4b07      	ldr	r3, [pc, #28]	; (16b80 <xQueueGenericCreate+0x104>)
   16b64:	5dd8      	ldrb	r0, [r3, r7]
   16b66:	3040      	adds	r0, #64	; 0x40
   16b68:	b2c0      	uxtb	r0, r0
   16b6a:	2100      	movs	r1, #0
   16b6c:	4b11      	ldr	r3, [pc, #68]	; (16bb4 <xQueueGenericCreate+0x138>)
   16b6e:	4798      	blx	r3
   16b70:	e7cf      	b.n	16b12 <xQueueGenericCreate+0x96>
   16b72:	46c0      	nop			; (mov r8, r8)
   16b74:	000166c5 	.word	0x000166c5
   16b78:	00016a01 	.word	0x00016a01
   16b7c:	00015239 	.word	0x00015239
   16b80:	200000a4 	.word	0x200000a4
   16b84:	00015bf9 	.word	0x00015bf9
   16b88:	000152c9 	.word	0x000152c9
   16b8c:	200000aa 	.word	0x200000aa
   16b90:	000152e9 	.word	0x000152e9
   16b94:	000152a9 	.word	0x000152a9
   16b98:	00015a89 	.word	0x00015a89
   16b9c:	00015409 	.word	0x00015409
   16ba0:	00015255 	.word	0x00015255
   16ba4:	200000ac 	.word	0x200000ac
   16ba8:	00015b61 	.word	0x00015b61
   16bac:	000152b9 	.word	0x000152b9
   16bb0:	0001608d 	.word	0x0001608d
   16bb4:	00016229 	.word	0x00016229

00016bb8 <xQueueGenericSend>:
{
   16bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bba:	46ce      	mov	lr, r9
   16bbc:	4647      	mov	r7, r8
   16bbe:	b580      	push	{r7, lr}
   16bc0:	b085      	sub	sp, #20
   16bc2:	0004      	movs	r4, r0
   16bc4:	9100      	str	r1, [sp, #0]
   16bc6:	9201      	str	r2, [sp, #4]
   16bc8:	001d      	movs	r5, r3
	configASSERT( pxQueue );
   16bca:	2800      	cmp	r0, #0
   16bcc:	d00d      	beq.n	16bea <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16bce:	9b00      	ldr	r3, [sp, #0]
   16bd0:	2b00      	cmp	r3, #0
   16bd2:	d00c      	beq.n	16bee <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16bd4:	2d02      	cmp	r5, #2
   16bd6:	d00f      	beq.n	16bf8 <xQueueGenericSend+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   16bd8:	4bab      	ldr	r3, [pc, #684]	; (16e88 <xQueueGenericSend+0x2d0>)
   16bda:	4798      	blx	r3
   16bdc:	2800      	cmp	r0, #0
   16bde:	d110      	bne.n	16c02 <xQueueGenericSend+0x4a>
   16be0:	9b01      	ldr	r3, [sp, #4]
   16be2:	2b00      	cmp	r3, #0
   16be4:	d010      	beq.n	16c08 <xQueueGenericSend+0x50>
   16be6:	b672      	cpsid	i
   16be8:	e7fe      	b.n	16be8 <xQueueGenericSend+0x30>
	configASSERT( pxQueue );
   16bea:	b672      	cpsid	i
   16bec:	e7fe      	b.n	16bec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16bee:	6c03      	ldr	r3, [r0, #64]	; 0x40
   16bf0:	2b00      	cmp	r3, #0
   16bf2:	d0ef      	beq.n	16bd4 <xQueueGenericSend+0x1c>
   16bf4:	b672      	cpsid	i
   16bf6:	e7fe      	b.n	16bf6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16bfa:	2b01      	cmp	r3, #1
   16bfc:	d0ec      	beq.n	16bd8 <xQueueGenericSend+0x20>
   16bfe:	b672      	cpsid	i
   16c00:	e7fe      	b.n	16c00 <xQueueGenericSend+0x48>
   16c02:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   16c04:	4ea1      	ldr	r6, [pc, #644]	; (16e8c <xQueueGenericSend+0x2d4>)
   16c06:	e0bc      	b.n	16d82 <xQueueGenericSend+0x1ca>
   16c08:	2700      	movs	r7, #0
   16c0a:	e7fb      	b.n	16c04 <xQueueGenericSend+0x4c>
				traceQUEUE_SEND( pxQueue );
   16c0c:	4ba0      	ldr	r3, [pc, #640]	; (16e90 <xQueueGenericSend+0x2d8>)
   16c0e:	4798      	blx	r3
   16c10:	4ba0      	ldr	r3, [pc, #640]	; (16e94 <xQueueGenericSend+0x2dc>)
   16c12:	4798      	blx	r3
   16c14:	4ba0      	ldr	r3, [pc, #640]	; (16e98 <xQueueGenericSend+0x2e0>)
   16c16:	881b      	ldrh	r3, [r3, #0]
   16c18:	4203      	tst	r3, r0
   16c1a:	d01d      	beq.n	16c58 <xQueueGenericSend+0xa0>
   16c1c:	0020      	movs	r0, r4
   16c1e:	4b9f      	ldr	r3, [pc, #636]	; (16e9c <xQueueGenericSend+0x2e4>)
   16c20:	4798      	blx	r3
   16c22:	4b9d      	ldr	r3, [pc, #628]	; (16e98 <xQueueGenericSend+0x2e0>)
   16c24:	881b      	ldrh	r3, [r3, #0]
   16c26:	4203      	tst	r3, r0
   16c28:	d016      	beq.n	16c58 <xQueueGenericSend+0xa0>
   16c2a:	2725      	movs	r7, #37	; 0x25
   16c2c:	2d00      	cmp	r5, #0
   16c2e:	d106      	bne.n	16c3e <xQueueGenericSend+0x86>
   16c30:	0020      	movs	r0, r4
   16c32:	4b9b      	ldr	r3, [pc, #620]	; (16ea0 <xQueueGenericSend+0x2e8>)
   16c34:	4798      	blx	r3
   16c36:	4b9b      	ldr	r3, [pc, #620]	; (16ea4 <xQueueGenericSend+0x2ec>)
   16c38:	5c1f      	ldrb	r7, [r3, r0]
   16c3a:	3720      	adds	r7, #32
   16c3c:	b2ff      	uxtb	r7, r7
   16c3e:	0020      	movs	r0, r4
   16c40:	4b97      	ldr	r3, [pc, #604]	; (16ea0 <xQueueGenericSend+0x2e8>)
   16c42:	4798      	blx	r3
   16c44:	4b97      	ldr	r3, [pc, #604]	; (16ea4 <xQueueGenericSend+0x2ec>)
   16c46:	5c1e      	ldrb	r6, [r3, r0]
   16c48:	0020      	movs	r0, r4
   16c4a:	4b97      	ldr	r3, [pc, #604]	; (16ea8 <xQueueGenericSend+0x2f0>)
   16c4c:	4798      	blx	r3
   16c4e:	b2c2      	uxtb	r2, r0
   16c50:	0031      	movs	r1, r6
   16c52:	0038      	movs	r0, r7
   16c54:	4b95      	ldr	r3, [pc, #596]	; (16eac <xQueueGenericSend+0x2f4>)
   16c56:	4798      	blx	r3
   16c58:	0020      	movs	r0, r4
   16c5a:	4e91      	ldr	r6, [pc, #580]	; (16ea0 <xQueueGenericSend+0x2e8>)
   16c5c:	47b0      	blx	r6
   16c5e:	4f91      	ldr	r7, [pc, #580]	; (16ea4 <xQueueGenericSend+0x2ec>)
   16c60:	5c3b      	ldrb	r3, [r7, r0]
   16c62:	4698      	mov	r8, r3
   16c64:	0020      	movs	r0, r4
   16c66:	4b90      	ldr	r3, [pc, #576]	; (16ea8 <xQueueGenericSend+0x2f0>)
   16c68:	4798      	blx	r3
   16c6a:	b2c3      	uxtb	r3, r0
   16c6c:	4699      	mov	r9, r3
   16c6e:	0020      	movs	r0, r4
   16c70:	47b0      	blx	r6
   16c72:	5c3b      	ldrb	r3, [r7, r0]
   16c74:	2b02      	cmp	r3, #2
   16c76:	d01f      	beq.n	16cb8 <xQueueGenericSend+0x100>
   16c78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   16c7a:	3201      	adds	r2, #1
   16c7c:	b2d2      	uxtb	r2, r2
   16c7e:	4649      	mov	r1, r9
   16c80:	4640      	mov	r0, r8
   16c82:	4b8b      	ldr	r3, [pc, #556]	; (16eb0 <xQueueGenericSend+0x2f8>)
   16c84:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   16c86:	002a      	movs	r2, r5
   16c88:	9900      	ldr	r1, [sp, #0]
   16c8a:	0020      	movs	r0, r4
   16c8c:	4b89      	ldr	r3, [pc, #548]	; (16eb4 <xQueueGenericSend+0x2fc>)
   16c8e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
   16c90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16c92:	2b00      	cmp	r3, #0
   16c94:	d012      	beq.n	16cbc <xQueueGenericSend+0x104>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   16c96:	0029      	movs	r1, r5
   16c98:	0020      	movs	r0, r4
   16c9a:	4b87      	ldr	r3, [pc, #540]	; (16eb8 <xQueueGenericSend+0x300>)
   16c9c:	4798      	blx	r3
   16c9e:	2800      	cmp	r0, #0
   16ca0:	d001      	beq.n	16ca6 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
   16ca2:	4b86      	ldr	r3, [pc, #536]	; (16ebc <xQueueGenericSend+0x304>)
   16ca4:	4798      	blx	r3
				taskEXIT_CRITICAL();
   16ca6:	4b86      	ldr	r3, [pc, #536]	; (16ec0 <xQueueGenericSend+0x308>)
   16ca8:	4798      	blx	r3
				return pdPASS;
   16caa:	2301      	movs	r3, #1
}
   16cac:	0018      	movs	r0, r3
   16cae:	b005      	add	sp, #20
   16cb0:	bc0c      	pop	{r2, r3}
   16cb2:	4690      	mov	r8, r2
   16cb4:	4699      	mov	r9, r3
   16cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_SEND( pxQueue );
   16cb8:	2200      	movs	r2, #0
   16cba:	e7e0      	b.n	16c7e <xQueueGenericSend+0xc6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   16cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16cbe:	2b00      	cmp	r3, #0
   16cc0:	d008      	beq.n	16cd4 <xQueueGenericSend+0x11c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16cc2:	0020      	movs	r0, r4
   16cc4:	3024      	adds	r0, #36	; 0x24
   16cc6:	4b7f      	ldr	r3, [pc, #508]	; (16ec4 <xQueueGenericSend+0x30c>)
   16cc8:	4798      	blx	r3
   16cca:	2800      	cmp	r0, #0
   16ccc:	d0eb      	beq.n	16ca6 <xQueueGenericSend+0xee>
								queueYIELD_IF_USING_PREEMPTION();
   16cce:	4b7b      	ldr	r3, [pc, #492]	; (16ebc <xQueueGenericSend+0x304>)
   16cd0:	4798      	blx	r3
   16cd2:	e7e8      	b.n	16ca6 <xQueueGenericSend+0xee>
						else if( xYieldRequired != pdFALSE )
   16cd4:	2800      	cmp	r0, #0
   16cd6:	d0e6      	beq.n	16ca6 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
   16cd8:	4b78      	ldr	r3, [pc, #480]	; (16ebc <xQueueGenericSend+0x304>)
   16cda:	4798      	blx	r3
   16cdc:	e7e3      	b.n	16ca6 <xQueueGenericSend+0xee>
					taskEXIT_CRITICAL();
   16cde:	4b78      	ldr	r3, [pc, #480]	; (16ec0 <xQueueGenericSend+0x308>)
   16ce0:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
   16ce2:	4b6b      	ldr	r3, [pc, #428]	; (16e90 <xQueueGenericSend+0x2d8>)
   16ce4:	4798      	blx	r3
   16ce6:	4b6b      	ldr	r3, [pc, #428]	; (16e94 <xQueueGenericSend+0x2dc>)
   16ce8:	4798      	blx	r3
   16cea:	4b6b      	ldr	r3, [pc, #428]	; (16e98 <xQueueGenericSend+0x2e0>)
   16cec:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
   16cee:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
   16cf0:	4202      	tst	r2, r0
   16cf2:	d0db      	beq.n	16cac <xQueueGenericSend+0xf4>
   16cf4:	0020      	movs	r0, r4
   16cf6:	4b69      	ldr	r3, [pc, #420]	; (16e9c <xQueueGenericSend+0x2e4>)
   16cf8:	4798      	blx	r3
   16cfa:	4b67      	ldr	r3, [pc, #412]	; (16e98 <xQueueGenericSend+0x2e0>)
   16cfc:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
   16cfe:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
   16d00:	4202      	tst	r2, r0
   16d02:	d0d3      	beq.n	16cac <xQueueGenericSend+0xf4>
   16d04:	264d      	movs	r6, #77	; 0x4d
   16d06:	2d00      	cmp	r5, #0
   16d08:	d106      	bne.n	16d18 <xQueueGenericSend+0x160>
   16d0a:	0020      	movs	r0, r4
   16d0c:	4b64      	ldr	r3, [pc, #400]	; (16ea0 <xQueueGenericSend+0x2e8>)
   16d0e:	4798      	blx	r3
   16d10:	4b64      	ldr	r3, [pc, #400]	; (16ea4 <xQueueGenericSend+0x2ec>)
   16d12:	5c1e      	ldrb	r6, [r3, r0]
   16d14:	3648      	adds	r6, #72	; 0x48
   16d16:	b2f6      	uxtb	r6, r6
   16d18:	0020      	movs	r0, r4
   16d1a:	4b61      	ldr	r3, [pc, #388]	; (16ea0 <xQueueGenericSend+0x2e8>)
   16d1c:	4798      	blx	r3
   16d1e:	4b61      	ldr	r3, [pc, #388]	; (16ea4 <xQueueGenericSend+0x2ec>)
   16d20:	5c1d      	ldrb	r5, [r3, r0]
   16d22:	0020      	movs	r0, r4
   16d24:	4b60      	ldr	r3, [pc, #384]	; (16ea8 <xQueueGenericSend+0x2f0>)
   16d26:	4798      	blx	r3
   16d28:	b2c2      	uxtb	r2, r0
   16d2a:	0029      	movs	r1, r5
   16d2c:	0030      	movs	r0, r6
   16d2e:	4b5f      	ldr	r3, [pc, #380]	; (16eac <xQueueGenericSend+0x2f4>)
   16d30:	4798      	blx	r3
					return errQUEUE_FULL;
   16d32:	2300      	movs	r3, #0
   16d34:	e7ba      	b.n	16cac <xQueueGenericSend+0xf4>
		prvLockQueue( pxQueue );
   16d36:	4b62      	ldr	r3, [pc, #392]	; (16ec0 <xQueueGenericSend+0x308>)
   16d38:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   16d3a:	a901      	add	r1, sp, #4
   16d3c:	a802      	add	r0, sp, #8
   16d3e:	4b62      	ldr	r3, [pc, #392]	; (16ec8 <xQueueGenericSend+0x310>)
   16d40:	4798      	blx	r3
   16d42:	2800      	cmp	r0, #0
   16d44:	d16e      	bne.n	16e24 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
   16d46:	4b51      	ldr	r3, [pc, #324]	; (16e8c <xQueueGenericSend+0x2d4>)
   16d48:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   16d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16d4c:	4699      	mov	r9, r3
   16d4e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   16d50:	4b5b      	ldr	r3, [pc, #364]	; (16ec0 <xQueueGenericSend+0x308>)
   16d52:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   16d54:	45b9      	cmp	r9, r7
   16d56:	d15f      	bne.n	16e18 <xQueueGenericSend+0x260>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   16d58:	4b4d      	ldr	r3, [pc, #308]	; (16e90 <xQueueGenericSend+0x2d8>)
   16d5a:	4798      	blx	r3
   16d5c:	4b4d      	ldr	r3, [pc, #308]	; (16e94 <xQueueGenericSend+0x2dc>)
   16d5e:	4798      	blx	r3
   16d60:	4b4d      	ldr	r3, [pc, #308]	; (16e98 <xQueueGenericSend+0x2e0>)
   16d62:	881b      	ldrh	r3, [r3, #0]
   16d64:	4203      	tst	r3, r0
   16d66:	d134      	bne.n	16dd2 <xQueueGenericSend+0x21a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   16d68:	0020      	movs	r0, r4
   16d6a:	3010      	adds	r0, #16
   16d6c:	9901      	ldr	r1, [sp, #4]
   16d6e:	4b57      	ldr	r3, [pc, #348]	; (16ecc <xQueueGenericSend+0x314>)
   16d70:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   16d72:	0020      	movs	r0, r4
   16d74:	4b56      	ldr	r3, [pc, #344]	; (16ed0 <xQueueGenericSend+0x318>)
   16d76:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   16d78:	4b56      	ldr	r3, [pc, #344]	; (16ed4 <xQueueGenericSend+0x31c>)
   16d7a:	4798      	blx	r3
   16d7c:	2800      	cmp	r0, #0
   16d7e:	d048      	beq.n	16e12 <xQueueGenericSend+0x25a>
   16d80:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   16d82:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   16d84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16d86:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   16d88:	4293      	cmp	r3, r2
   16d8a:	d200      	bcs.n	16d8e <xQueueGenericSend+0x1d6>
   16d8c:	e73e      	b.n	16c0c <xQueueGenericSend+0x54>
   16d8e:	2d02      	cmp	r5, #2
   16d90:	d100      	bne.n	16d94 <xQueueGenericSend+0x1dc>
   16d92:	e73b      	b.n	16c0c <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
   16d94:	9b01      	ldr	r3, [sp, #4]
   16d96:	2b00      	cmp	r3, #0
   16d98:	d0a1      	beq.n	16cde <xQueueGenericSend+0x126>
				else if( xEntryTimeSet == pdFALSE )
   16d9a:	2f00      	cmp	r7, #0
   16d9c:	d102      	bne.n	16da4 <xQueueGenericSend+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
   16d9e:	a802      	add	r0, sp, #8
   16da0:	4b4d      	ldr	r3, [pc, #308]	; (16ed8 <xQueueGenericSend+0x320>)
   16da2:	4798      	blx	r3
		taskEXIT_CRITICAL();
   16da4:	4b46      	ldr	r3, [pc, #280]	; (16ec0 <xQueueGenericSend+0x308>)
   16da6:	4798      	blx	r3
		vTaskSuspendAll();
   16da8:	4b4c      	ldr	r3, [pc, #304]	; (16edc <xQueueGenericSend+0x324>)
   16daa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   16dac:	4b37      	ldr	r3, [pc, #220]	; (16e8c <xQueueGenericSend+0x2d4>)
   16dae:	4798      	blx	r3
   16db0:	2344      	movs	r3, #68	; 0x44
   16db2:	5ce3      	ldrb	r3, [r4, r3]
   16db4:	b25b      	sxtb	r3, r3
   16db6:	3301      	adds	r3, #1
   16db8:	d102      	bne.n	16dc0 <xQueueGenericSend+0x208>
   16dba:	2200      	movs	r2, #0
   16dbc:	2344      	movs	r3, #68	; 0x44
   16dbe:	54e2      	strb	r2, [r4, r3]
   16dc0:	2345      	movs	r3, #69	; 0x45
   16dc2:	5ce3      	ldrb	r3, [r4, r3]
   16dc4:	b25b      	sxtb	r3, r3
   16dc6:	3301      	adds	r3, #1
   16dc8:	d1b5      	bne.n	16d36 <xQueueGenericSend+0x17e>
   16dca:	2200      	movs	r2, #0
   16dcc:	2345      	movs	r3, #69	; 0x45
   16dce:	54e2      	strb	r2, [r4, r3]
   16dd0:	e7b1      	b.n	16d36 <xQueueGenericSend+0x17e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   16dd2:	0020      	movs	r0, r4
   16dd4:	4b31      	ldr	r3, [pc, #196]	; (16e9c <xQueueGenericSend+0x2e4>)
   16dd6:	4798      	blx	r3
   16dd8:	4b2f      	ldr	r3, [pc, #188]	; (16e98 <xQueueGenericSend+0x2e0>)
   16dda:	881b      	ldrh	r3, [r3, #0]
   16ddc:	4203      	tst	r3, r0
   16dde:	d0c3      	beq.n	16d68 <xQueueGenericSend+0x1b0>
   16de0:	2775      	movs	r7, #117	; 0x75
   16de2:	2d00      	cmp	r5, #0
   16de4:	d106      	bne.n	16df4 <xQueueGenericSend+0x23c>
   16de6:	0020      	movs	r0, r4
   16de8:	4b2d      	ldr	r3, [pc, #180]	; (16ea0 <xQueueGenericSend+0x2e8>)
   16dea:	4798      	blx	r3
   16dec:	4b2d      	ldr	r3, [pc, #180]	; (16ea4 <xQueueGenericSend+0x2ec>)
   16dee:	5c1f      	ldrb	r7, [r3, r0]
   16df0:	3770      	adds	r7, #112	; 0x70
   16df2:	b2ff      	uxtb	r7, r7
   16df4:	0020      	movs	r0, r4
   16df6:	4b2a      	ldr	r3, [pc, #168]	; (16ea0 <xQueueGenericSend+0x2e8>)
   16df8:	4798      	blx	r3
   16dfa:	4b2a      	ldr	r3, [pc, #168]	; (16ea4 <xQueueGenericSend+0x2ec>)
   16dfc:	5c1b      	ldrb	r3, [r3, r0]
   16dfe:	4699      	mov	r9, r3
   16e00:	0020      	movs	r0, r4
   16e02:	4b29      	ldr	r3, [pc, #164]	; (16ea8 <xQueueGenericSend+0x2f0>)
   16e04:	4798      	blx	r3
   16e06:	b2c2      	uxtb	r2, r0
   16e08:	4649      	mov	r1, r9
   16e0a:	0038      	movs	r0, r7
   16e0c:	4b27      	ldr	r3, [pc, #156]	; (16eac <xQueueGenericSend+0x2f4>)
   16e0e:	4798      	blx	r3
   16e10:	e7aa      	b.n	16d68 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
   16e12:	4b2a      	ldr	r3, [pc, #168]	; (16ebc <xQueueGenericSend+0x304>)
   16e14:	4798      	blx	r3
   16e16:	e7b3      	b.n	16d80 <xQueueGenericSend+0x1c8>
				prvUnlockQueue( pxQueue );
   16e18:	0020      	movs	r0, r4
   16e1a:	4b2d      	ldr	r3, [pc, #180]	; (16ed0 <xQueueGenericSend+0x318>)
   16e1c:	4798      	blx	r3
				( void ) xTaskResumeAll();
   16e1e:	4b2d      	ldr	r3, [pc, #180]	; (16ed4 <xQueueGenericSend+0x31c>)
   16e20:	4798      	blx	r3
   16e22:	e7ad      	b.n	16d80 <xQueueGenericSend+0x1c8>
			prvUnlockQueue( pxQueue );
   16e24:	0020      	movs	r0, r4
   16e26:	4b2a      	ldr	r3, [pc, #168]	; (16ed0 <xQueueGenericSend+0x318>)
   16e28:	4798      	blx	r3
			( void ) xTaskResumeAll();
   16e2a:	4b2a      	ldr	r3, [pc, #168]	; (16ed4 <xQueueGenericSend+0x31c>)
   16e2c:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
   16e2e:	4b18      	ldr	r3, [pc, #96]	; (16e90 <xQueueGenericSend+0x2d8>)
   16e30:	4798      	blx	r3
   16e32:	4b18      	ldr	r3, [pc, #96]	; (16e94 <xQueueGenericSend+0x2dc>)
   16e34:	4798      	blx	r3
   16e36:	4b18      	ldr	r3, [pc, #96]	; (16e98 <xQueueGenericSend+0x2e0>)
   16e38:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
   16e3a:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
   16e3c:	4202      	tst	r2, r0
   16e3e:	d100      	bne.n	16e42 <xQueueGenericSend+0x28a>
   16e40:	e734      	b.n	16cac <xQueueGenericSend+0xf4>
   16e42:	0020      	movs	r0, r4
   16e44:	4b15      	ldr	r3, [pc, #84]	; (16e9c <xQueueGenericSend+0x2e4>)
   16e46:	4798      	blx	r3
   16e48:	4b13      	ldr	r3, [pc, #76]	; (16e98 <xQueueGenericSend+0x2e0>)
   16e4a:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
   16e4c:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
   16e4e:	4202      	tst	r2, r0
   16e50:	d100      	bne.n	16e54 <xQueueGenericSend+0x29c>
   16e52:	e72b      	b.n	16cac <xQueueGenericSend+0xf4>
   16e54:	264d      	movs	r6, #77	; 0x4d
   16e56:	2d00      	cmp	r5, #0
   16e58:	d106      	bne.n	16e68 <xQueueGenericSend+0x2b0>
   16e5a:	0020      	movs	r0, r4
   16e5c:	4b10      	ldr	r3, [pc, #64]	; (16ea0 <xQueueGenericSend+0x2e8>)
   16e5e:	4798      	blx	r3
   16e60:	4b10      	ldr	r3, [pc, #64]	; (16ea4 <xQueueGenericSend+0x2ec>)
   16e62:	5c1e      	ldrb	r6, [r3, r0]
   16e64:	3648      	adds	r6, #72	; 0x48
   16e66:	b2f6      	uxtb	r6, r6
   16e68:	0020      	movs	r0, r4
   16e6a:	4b0d      	ldr	r3, [pc, #52]	; (16ea0 <xQueueGenericSend+0x2e8>)
   16e6c:	4798      	blx	r3
   16e6e:	4b0d      	ldr	r3, [pc, #52]	; (16ea4 <xQueueGenericSend+0x2ec>)
   16e70:	5c1d      	ldrb	r5, [r3, r0]
   16e72:	0020      	movs	r0, r4
   16e74:	4b0c      	ldr	r3, [pc, #48]	; (16ea8 <xQueueGenericSend+0x2f0>)
   16e76:	4798      	blx	r3
   16e78:	b2c2      	uxtb	r2, r0
   16e7a:	0029      	movs	r1, r5
   16e7c:	0030      	movs	r0, r6
   16e7e:	4b0b      	ldr	r3, [pc, #44]	; (16eac <xQueueGenericSend+0x2f4>)
   16e80:	4798      	blx	r3
			return errQUEUE_FULL;
   16e82:	2300      	movs	r3, #0
   16e84:	e712      	b.n	16cac <xQueueGenericSend+0xf4>
   16e86:	46c0      	nop			; (mov r8, r8)
   16e88:	0001855d 	.word	0x0001855d
   16e8c:	00016601 	.word	0x00016601
   16e90:	00015409 	.word	0x00015409
   16e94:	00015255 	.word	0x00015255
   16e98:	200000ac 	.word	0x200000ac
   16e9c:	000152b9 	.word	0x000152b9
   16ea0:	00015239 	.word	0x00015239
   16ea4:	200000a4 	.word	0x200000a4
   16ea8:	000152a9 	.word	0x000152a9
   16eac:	0001608d 	.word	0x0001608d
   16eb0:	00015b61 	.word	0x00015b61
   16eb4:	00016791 	.word	0x00016791
   16eb8:	0001680d 	.word	0x0001680d
   16ebc:	000165f1 	.word	0x000165f1
   16ec0:	00016619 	.word	0x00016619
   16ec4:	000183c9 	.word	0x000183c9
   16ec8:	00018495 	.word	0x00018495
   16ecc:	00018301 	.word	0x00018301
   16ed0:	00016951 	.word	0x00016951
   16ed4:	00017f19 	.word	0x00017f19
   16ed8:	0001847d 	.word	0x0001847d
   16edc:	00017d71 	.word	0x00017d71

00016ee0 <xQueueCreateMutex>:
	{
   16ee0:	b570      	push	{r4, r5, r6, lr}
   16ee2:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   16ee4:	2100      	movs	r1, #0
   16ee6:	2001      	movs	r0, #1
   16ee8:	4b06      	ldr	r3, [pc, #24]	; (16f04 <xQueueCreateMutex+0x24>)
   16eea:	4798      	blx	r3
   16eec:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   16eee:	d007      	beq.n	16f00 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
   16ef0:	2300      	movs	r3, #0
   16ef2:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   16ef4:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
   16ef6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   16ef8:	2200      	movs	r2, #0
   16efa:	2100      	movs	r1, #0
   16efc:	4d02      	ldr	r5, [pc, #8]	; (16f08 <xQueueCreateMutex+0x28>)
   16efe:	47a8      	blx	r5
	}
   16f00:	0020      	movs	r0, r4
   16f02:	bd70      	pop	{r4, r5, r6, pc}
   16f04:	00016a7d 	.word	0x00016a7d
   16f08:	00016bb9 	.word	0x00016bb9

00016f0c <xQueueGenericSendFromISR>:
{
   16f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f0e:	46de      	mov	lr, fp
   16f10:	4647      	mov	r7, r8
   16f12:	b580      	push	{r7, lr}
   16f14:	b083      	sub	sp, #12
   16f16:	0004      	movs	r4, r0
   16f18:	9101      	str	r1, [sp, #4]
   16f1a:	0016      	movs	r6, r2
   16f1c:	001f      	movs	r7, r3
	configASSERT( pxQueue );
   16f1e:	2800      	cmp	r0, #0
   16f20:	d02d      	beq.n	16f7e <xQueueGenericSendFromISR+0x72>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16f22:	9b01      	ldr	r3, [sp, #4]
   16f24:	2b00      	cmp	r3, #0
   16f26:	d02c      	beq.n	16f82 <xQueueGenericSendFromISR+0x76>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16f28:	2f02      	cmp	r7, #2
   16f2a:	d02f      	beq.n	16f8c <xQueueGenericSendFromISR+0x80>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   16f2c:	4b59      	ldr	r3, [pc, #356]	; (17094 <xQueueGenericSendFromISR+0x188>)
   16f2e:	4798      	blx	r3
   16f30:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   16f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16f34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   16f36:	429a      	cmp	r2, r3
   16f38:	d85a      	bhi.n	16ff0 <xQueueGenericSendFromISR+0xe4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   16f3a:	0020      	movs	r0, r4
   16f3c:	4b56      	ldr	r3, [pc, #344]	; (17098 <xQueueGenericSendFromISR+0x18c>)
   16f3e:	4798      	blx	r3
   16f40:	4b56      	ldr	r3, [pc, #344]	; (1709c <xQueueGenericSendFromISR+0x190>)
   16f42:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
   16f44:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   16f46:	4203      	tst	r3, r0
   16f48:	d100      	bne.n	16f4c <xQueueGenericSendFromISR+0x40>
   16f4a:	e09a      	b.n	17082 <xQueueGenericSendFromISR+0x176>
   16f4c:	355d      	adds	r5, #93	; 0x5d
   16f4e:	2f00      	cmp	r7, #0
   16f50:	d106      	bne.n	16f60 <xQueueGenericSendFromISR+0x54>
   16f52:	0020      	movs	r0, r4
   16f54:	4b52      	ldr	r3, [pc, #328]	; (170a0 <xQueueGenericSendFromISR+0x194>)
   16f56:	4798      	blx	r3
   16f58:	4b52      	ldr	r3, [pc, #328]	; (170a4 <xQueueGenericSendFromISR+0x198>)
   16f5a:	5c1d      	ldrb	r5, [r3, r0]
   16f5c:	3558      	adds	r5, #88	; 0x58
   16f5e:	b2ed      	uxtb	r5, r5
   16f60:	0020      	movs	r0, r4
   16f62:	4b4f      	ldr	r3, [pc, #316]	; (170a0 <xQueueGenericSendFromISR+0x194>)
   16f64:	4798      	blx	r3
   16f66:	4b4f      	ldr	r3, [pc, #316]	; (170a4 <xQueueGenericSendFromISR+0x198>)
   16f68:	5c1f      	ldrb	r7, [r3, r0]
   16f6a:	0020      	movs	r0, r4
   16f6c:	4b4e      	ldr	r3, [pc, #312]	; (170a8 <xQueueGenericSendFromISR+0x19c>)
   16f6e:	4798      	blx	r3
   16f70:	b2c2      	uxtb	r2, r0
   16f72:	0039      	movs	r1, r7
   16f74:	0028      	movs	r0, r5
   16f76:	4b4d      	ldr	r3, [pc, #308]	; (170ac <xQueueGenericSendFromISR+0x1a0>)
   16f78:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   16f7a:	2500      	movs	r5, #0
   16f7c:	e081      	b.n	17082 <xQueueGenericSendFromISR+0x176>
	configASSERT( pxQueue );
   16f7e:	b672      	cpsid	i
   16f80:	e7fe      	b.n	16f80 <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   16f82:	6c03      	ldr	r3, [r0, #64]	; 0x40
   16f84:	2b00      	cmp	r3, #0
   16f86:	d0cf      	beq.n	16f28 <xQueueGenericSendFromISR+0x1c>
   16f88:	b672      	cpsid	i
   16f8a:	e7fe      	b.n	16f8a <xQueueGenericSendFromISR+0x7e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   16f8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16f8e:	2b01      	cmp	r3, #1
   16f90:	d027      	beq.n	16fe2 <xQueueGenericSendFromISR+0xd6>
   16f92:	b672      	cpsid	i
   16f94:	e7fe      	b.n	16f94 <xQueueGenericSendFromISR+0x88>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   16f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
   16f98:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   16f9a:	2b00      	cmp	r3, #0
   16f9c:	d071      	beq.n	17082 <xQueueGenericSendFromISR+0x176>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   16f9e:	0020      	movs	r0, r4
   16fa0:	3024      	adds	r0, #36	; 0x24
   16fa2:	4b43      	ldr	r3, [pc, #268]	; (170b0 <xQueueGenericSendFromISR+0x1a4>)
   16fa4:	4798      	blx	r3
   16fa6:	2800      	cmp	r0, #0
   16fa8:	d06b      	beq.n	17082 <xQueueGenericSendFromISR+0x176>
								if( pxHigherPriorityTaskWoken != NULL )
   16faa:	2e00      	cmp	r6, #0
   16fac:	d00a      	beq.n	16fc4 <xQueueGenericSendFromISR+0xb8>
									*pxHigherPriorityTaskWoken = pdTRUE;
   16fae:	2301      	movs	r3, #1
   16fb0:	6033      	str	r3, [r6, #0]
   16fb2:	e066      	b.n	17082 <xQueueGenericSendFromISR+0x176>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   16fb4:	3501      	adds	r5, #1
   16fb6:	b26d      	sxtb	r5, r5
   16fb8:	2345      	movs	r3, #69	; 0x45
   16fba:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
   16fbc:	2501      	movs	r5, #1
   16fbe:	e060      	b.n	17082 <xQueueGenericSendFromISR+0x176>
   16fc0:	2501      	movs	r5, #1
   16fc2:	e05e      	b.n	17082 <xQueueGenericSendFromISR+0x176>
   16fc4:	2501      	movs	r5, #1
   16fc6:	e05c      	b.n	17082 <xQueueGenericSendFromISR+0x176>
			const int8_t cTxLock = pxQueue->cTxLock;
   16fc8:	2345      	movs	r3, #69	; 0x45
   16fca:	5ce5      	ldrb	r5, [r4, r3]
   16fcc:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   16fce:	0020      	movs	r0, r4
   16fd0:	4b31      	ldr	r3, [pc, #196]	; (17098 <xQueueGenericSendFromISR+0x18c>)
   16fd2:	4798      	blx	r3
   16fd4:	4b31      	ldr	r3, [pc, #196]	; (1709c <xQueueGenericSendFromISR+0x190>)
   16fd6:	881b      	ldrh	r3, [r3, #0]
   16fd8:	4203      	tst	r3, r0
   16fda:	d02d      	beq.n	17038 <xQueueGenericSendFromISR+0x12c>
   16fdc:	2335      	movs	r3, #53	; 0x35
   16fde:	4698      	mov	r8, r3
   16fe0:	e01c      	b.n	1701c <xQueueGenericSendFromISR+0x110>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   16fe2:	4b2c      	ldr	r3, [pc, #176]	; (17094 <xQueueGenericSendFromISR+0x188>)
   16fe4:	4798      	blx	r3
   16fe6:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   16fe8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16fea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   16fec:	429a      	cmp	r2, r3
   16fee:	d9eb      	bls.n	16fc8 <xQueueGenericSendFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
   16ff0:	2345      	movs	r3, #69	; 0x45
   16ff2:	5ce5      	ldrb	r5, [r4, r3]
   16ff4:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   16ff6:	0020      	movs	r0, r4
   16ff8:	4b27      	ldr	r3, [pc, #156]	; (17098 <xQueueGenericSendFromISR+0x18c>)
   16ffa:	4798      	blx	r3
   16ffc:	4b27      	ldr	r3, [pc, #156]	; (1709c <xQueueGenericSendFromISR+0x190>)
   16ffe:	881b      	ldrh	r3, [r3, #0]
   17000:	4203      	tst	r3, r0
   17002:	d019      	beq.n	17038 <xQueueGenericSendFromISR+0x12c>
   17004:	2335      	movs	r3, #53	; 0x35
   17006:	4698      	mov	r8, r3
   17008:	2f00      	cmp	r7, #0
   1700a:	d107      	bne.n	1701c <xQueueGenericSendFromISR+0x110>
   1700c:	0020      	movs	r0, r4
   1700e:	4b24      	ldr	r3, [pc, #144]	; (170a0 <xQueueGenericSendFromISR+0x194>)
   17010:	4798      	blx	r3
   17012:	4b24      	ldr	r3, [pc, #144]	; (170a4 <xQueueGenericSendFromISR+0x198>)
   17014:	5c1b      	ldrb	r3, [r3, r0]
   17016:	3330      	adds	r3, #48	; 0x30
   17018:	b2db      	uxtb	r3, r3
   1701a:	4698      	mov	r8, r3
   1701c:	0020      	movs	r0, r4
   1701e:	4b20      	ldr	r3, [pc, #128]	; (170a0 <xQueueGenericSendFromISR+0x194>)
   17020:	4798      	blx	r3
   17022:	4b20      	ldr	r3, [pc, #128]	; (170a4 <xQueueGenericSendFromISR+0x198>)
   17024:	5c1b      	ldrb	r3, [r3, r0]
   17026:	469b      	mov	fp, r3
   17028:	0020      	movs	r0, r4
   1702a:	4b1f      	ldr	r3, [pc, #124]	; (170a8 <xQueueGenericSendFromISR+0x19c>)
   1702c:	4798      	blx	r3
   1702e:	b2c2      	uxtb	r2, r0
   17030:	4659      	mov	r1, fp
   17032:	4640      	mov	r0, r8
   17034:	4b1d      	ldr	r3, [pc, #116]	; (170ac <xQueueGenericSendFromISR+0x1a0>)
   17036:	4798      	blx	r3
   17038:	0020      	movs	r0, r4
   1703a:	4b19      	ldr	r3, [pc, #100]	; (170a0 <xQueueGenericSendFromISR+0x194>)
   1703c:	4798      	blx	r3
   1703e:	4b19      	ldr	r3, [pc, #100]	; (170a4 <xQueueGenericSendFromISR+0x198>)
   17040:	5c1b      	ldrb	r3, [r3, r0]
   17042:	4698      	mov	r8, r3
   17044:	0020      	movs	r0, r4
   17046:	4b18      	ldr	r3, [pc, #96]	; (170a8 <xQueueGenericSendFromISR+0x19c>)
   17048:	4798      	blx	r3
   1704a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1704c:	3201      	adds	r2, #1
   1704e:	b2d2      	uxtb	r2, r2
   17050:	b2c1      	uxtb	r1, r0
   17052:	4640      	mov	r0, r8
   17054:	4b17      	ldr	r3, [pc, #92]	; (170b4 <xQueueGenericSendFromISR+0x1a8>)
   17056:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   17058:	003a      	movs	r2, r7
   1705a:	9901      	ldr	r1, [sp, #4]
   1705c:	0020      	movs	r0, r4
   1705e:	4b16      	ldr	r3, [pc, #88]	; (170b8 <xQueueGenericSendFromISR+0x1ac>)
   17060:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   17062:	1c6b      	adds	r3, r5, #1
   17064:	d1a6      	bne.n	16fb4 <xQueueGenericSendFromISR+0xa8>
					if( pxQueue->pxQueueSetContainer != NULL )
   17066:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   17068:	2b00      	cmp	r3, #0
   1706a:	d094      	beq.n	16f96 <xQueueGenericSendFromISR+0x8a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1706c:	0039      	movs	r1, r7
   1706e:	0020      	movs	r0, r4
   17070:	4b12      	ldr	r3, [pc, #72]	; (170bc <xQueueGenericSendFromISR+0x1b0>)
   17072:	4798      	blx	r3
			xReturn = pdPASS;
   17074:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   17076:	2800      	cmp	r0, #0
   17078:	d003      	beq.n	17082 <xQueueGenericSendFromISR+0x176>
							if( pxHigherPriorityTaskWoken != NULL )
   1707a:	2e00      	cmp	r6, #0
   1707c:	d0a0      	beq.n	16fc0 <xQueueGenericSendFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
   1707e:	2301      	movs	r3, #1
   17080:	6033      	str	r3, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   17082:	9800      	ldr	r0, [sp, #0]
   17084:	4b0e      	ldr	r3, [pc, #56]	; (170c0 <xQueueGenericSendFromISR+0x1b4>)
   17086:	4798      	blx	r3
}
   17088:	0028      	movs	r0, r5
   1708a:	b003      	add	sp, #12
   1708c:	bc0c      	pop	{r2, r3}
   1708e:	4690      	mov	r8, r2
   17090:	469b      	mov	fp, r3
   17092:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17094:	00016639 	.word	0x00016639
   17098:	000152b9 	.word	0x000152b9
   1709c:	200000ac 	.word	0x200000ac
   170a0:	00015239 	.word	0x00015239
   170a4:	200000a4 	.word	0x200000a4
   170a8:	000152a9 	.word	0x000152a9
   170ac:	0001608d 	.word	0x0001608d
   170b0:	000183c9 	.word	0x000183c9
   170b4:	00015b61 	.word	0x00015b61
   170b8:	00016791 	.word	0x00016791
   170bc:	0001680d 	.word	0x0001680d
   170c0:	00016641 	.word	0x00016641

000170c4 <MyWrapper>:
{
   170c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   170c6:	46d6      	mov	lr, sl
   170c8:	4647      	mov	r7, r8
   170ca:	b580      	push	{r7, lr}
   170cc:	b083      	sub	sp, #12
   170ce:	0004      	movs	r4, r0
   170d0:	000f      	movs	r7, r1
   170d2:	0016      	movs	r6, r2
	configASSERT( pxQueue );
   170d4:	2800      	cmp	r0, #0
   170d6:	d004      	beq.n	170e2 <MyWrapper+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
   170d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   170da:	2b00      	cmp	r3, #0
   170dc:	d003      	beq.n	170e6 <MyWrapper+0x22>
   170de:	b672      	cpsid	i
   170e0:	e7fe      	b.n	170e0 <MyWrapper+0x1c>
	configASSERT( pxQueue );
   170e2:	b672      	cpsid	i
   170e4:	e7fe      	b.n	170e4 <MyWrapper+0x20>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   170e6:	6803      	ldr	r3, [r0, #0]
   170e8:	2b00      	cmp	r3, #0
   170ea:	d055      	beq.n	17198 <MyWrapper+0xd4>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   170ec:	4b4a      	ldr	r3, [pc, #296]	; (17218 <MyWrapper+0x154>)
   170ee:	4798      	blx	r3
   170f0:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   170f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   170f4:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
   170f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   170f8:	4598      	cmp	r8, r3
   170fa:	d267      	bcs.n	171cc <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
   170fc:	2345      	movs	r3, #69	; 0x45
   170fe:	5ce5      	ldrb	r5, [r4, r3]
   17100:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   17102:	0020      	movs	r0, r4
   17104:	4b45      	ldr	r3, [pc, #276]	; (1721c <MyWrapper+0x158>)
   17106:	4798      	blx	r3
   17108:	4b45      	ldr	r3, [pc, #276]	; (17220 <MyWrapper+0x15c>)
   1710a:	881b      	ldrh	r3, [r3, #0]
   1710c:	4203      	tst	r3, r0
   1710e:	d018      	beq.n	17142 <MyWrapper+0x7e>
   17110:	2335      	movs	r3, #53	; 0x35
   17112:	469a      	mov	sl, r3
   17114:	2e00      	cmp	r6, #0
   17116:	d107      	bne.n	17128 <MyWrapper+0x64>
   17118:	0020      	movs	r0, r4
   1711a:	4b42      	ldr	r3, [pc, #264]	; (17224 <MyWrapper+0x160>)
   1711c:	4798      	blx	r3
   1711e:	4b42      	ldr	r3, [pc, #264]	; (17228 <MyWrapper+0x164>)
   17120:	5c1b      	ldrb	r3, [r3, r0]
   17122:	3330      	adds	r3, #48	; 0x30
   17124:	b2db      	uxtb	r3, r3
   17126:	469a      	mov	sl, r3
   17128:	0020      	movs	r0, r4
   1712a:	4b3e      	ldr	r3, [pc, #248]	; (17224 <MyWrapper+0x160>)
   1712c:	4798      	blx	r3
   1712e:	4b3e      	ldr	r3, [pc, #248]	; (17228 <MyWrapper+0x164>)
   17130:	5c1e      	ldrb	r6, [r3, r0]
   17132:	0020      	movs	r0, r4
   17134:	4b3d      	ldr	r3, [pc, #244]	; (1722c <MyWrapper+0x168>)
   17136:	4798      	blx	r3
   17138:	b2c2      	uxtb	r2, r0
   1713a:	0031      	movs	r1, r6
   1713c:	4650      	mov	r0, sl
   1713e:	4b3c      	ldr	r3, [pc, #240]	; (17230 <MyWrapper+0x16c>)
   17140:	4798      	blx	r3
   17142:	0020      	movs	r0, r4
   17144:	4b37      	ldr	r3, [pc, #220]	; (17224 <MyWrapper+0x160>)
   17146:	4798      	blx	r3
   17148:	4b37      	ldr	r3, [pc, #220]	; (17228 <MyWrapper+0x164>)
   1714a:	5c1e      	ldrb	r6, [r3, r0]
   1714c:	0020      	movs	r0, r4
   1714e:	4b37      	ldr	r3, [pc, #220]	; (1722c <MyWrapper+0x168>)
   17150:	4798      	blx	r3
   17152:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   17154:	3201      	adds	r2, #1
   17156:	b2d2      	uxtb	r2, r2
   17158:	b2c1      	uxtb	r1, r0
   1715a:	0030      	movs	r0, r6
   1715c:	4b35      	ldr	r3, [pc, #212]	; (17234 <MyWrapper+0x170>)
   1715e:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   17160:	4643      	mov	r3, r8
   17162:	3301      	adds	r3, #1
   17164:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
   17166:	1c6b      	adds	r3, r5, #1
   17168:	d12a      	bne.n	171c0 <MyWrapper+0xfc>
					if( pxQueue->pxQueueSetContainer != NULL )
   1716a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1716c:	2b00      	cmp	r3, #0
   1716e:	d018      	beq.n	171a2 <MyWrapper+0xde>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   17170:	2100      	movs	r1, #0
   17172:	0020      	movs	r0, r4
   17174:	4b30      	ldr	r3, [pc, #192]	; (17238 <MyWrapper+0x174>)
   17176:	4798      	blx	r3
			xReturn = pdPASS;
   17178:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1717a:	2800      	cmp	r0, #0
   1717c:	d003      	beq.n	17186 <MyWrapper+0xc2>
							if( pxHigherPriorityTaskWoken != NULL )
   1717e:	2f00      	cmp	r7, #0
   17180:	d045      	beq.n	1720e <MyWrapper+0x14a>
								*pxHigherPriorityTaskWoken = pdTRUE;
   17182:	2301      	movs	r3, #1
   17184:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   17186:	9801      	ldr	r0, [sp, #4]
   17188:	4b2c      	ldr	r3, [pc, #176]	; (1723c <MyWrapper+0x178>)
   1718a:	4798      	blx	r3
}
   1718c:	0028      	movs	r0, r5
   1718e:	b003      	add	sp, #12
   17190:	bc0c      	pop	{r2, r3}
   17192:	4690      	mov	r8, r2
   17194:	469a      	mov	sl, r3
   17196:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   17198:	6843      	ldr	r3, [r0, #4]
   1719a:	2b00      	cmp	r3, #0
   1719c:	d0a6      	beq.n	170ec <MyWrapper+0x28>
   1719e:	b672      	cpsid	i
   171a0:	e7fe      	b.n	171a0 <MyWrapper+0xdc>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   171a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
   171a4:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   171a6:	2b00      	cmp	r3, #0
   171a8:	d0ed      	beq.n	17186 <MyWrapper+0xc2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   171aa:	0020      	movs	r0, r4
   171ac:	3024      	adds	r0, #36	; 0x24
   171ae:	4b24      	ldr	r3, [pc, #144]	; (17240 <MyWrapper+0x17c>)
   171b0:	4798      	blx	r3
   171b2:	2800      	cmp	r0, #0
   171b4:	d0e7      	beq.n	17186 <MyWrapper+0xc2>
								if( pxHigherPriorityTaskWoken != NULL )
   171b6:	2f00      	cmp	r7, #0
   171b8:	d02b      	beq.n	17212 <MyWrapper+0x14e>
									*pxHigherPriorityTaskWoken = pdTRUE;
   171ba:	2301      	movs	r3, #1
   171bc:	603b      	str	r3, [r7, #0]
   171be:	e7e2      	b.n	17186 <MyWrapper+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   171c0:	3501      	adds	r5, #1
   171c2:	b26d      	sxtb	r5, r5
   171c4:	2345      	movs	r3, #69	; 0x45
   171c6:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
   171c8:	2501      	movs	r5, #1
   171ca:	e7dc      	b.n	17186 <MyWrapper+0xc2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   171cc:	0020      	movs	r0, r4
   171ce:	4b13      	ldr	r3, [pc, #76]	; (1721c <MyWrapper+0x158>)
   171d0:	4798      	blx	r3
   171d2:	4b13      	ldr	r3, [pc, #76]	; (17220 <MyWrapper+0x15c>)
   171d4:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
   171d6:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   171d8:	4203      	tst	r3, r0
   171da:	d0d4      	beq.n	17186 <MyWrapper+0xc2>
   171dc:	355d      	adds	r5, #93	; 0x5d
   171de:	2e00      	cmp	r6, #0
   171e0:	d106      	bne.n	171f0 <MyWrapper+0x12c>
   171e2:	0020      	movs	r0, r4
   171e4:	4b0f      	ldr	r3, [pc, #60]	; (17224 <MyWrapper+0x160>)
   171e6:	4798      	blx	r3
   171e8:	4b0f      	ldr	r3, [pc, #60]	; (17228 <MyWrapper+0x164>)
   171ea:	5c1d      	ldrb	r5, [r3, r0]
   171ec:	3558      	adds	r5, #88	; 0x58
   171ee:	b2ed      	uxtb	r5, r5
   171f0:	0020      	movs	r0, r4
   171f2:	4b0c      	ldr	r3, [pc, #48]	; (17224 <MyWrapper+0x160>)
   171f4:	4798      	blx	r3
   171f6:	4b0c      	ldr	r3, [pc, #48]	; (17228 <MyWrapper+0x164>)
   171f8:	5c1f      	ldrb	r7, [r3, r0]
   171fa:	0020      	movs	r0, r4
   171fc:	4b0b      	ldr	r3, [pc, #44]	; (1722c <MyWrapper+0x168>)
   171fe:	4798      	blx	r3
   17200:	b2c2      	uxtb	r2, r0
   17202:	0039      	movs	r1, r7
   17204:	0028      	movs	r0, r5
   17206:	4b0a      	ldr	r3, [pc, #40]	; (17230 <MyWrapper+0x16c>)
   17208:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1720a:	2500      	movs	r5, #0
   1720c:	e7bb      	b.n	17186 <MyWrapper+0xc2>
			xReturn = pdPASS;
   1720e:	2501      	movs	r5, #1
   17210:	e7b9      	b.n	17186 <MyWrapper+0xc2>
   17212:	2501      	movs	r5, #1
   17214:	e7b7      	b.n	17186 <MyWrapper+0xc2>
   17216:	46c0      	nop			; (mov r8, r8)
   17218:	00016639 	.word	0x00016639
   1721c:	000152b9 	.word	0x000152b9
   17220:	200000ac 	.word	0x200000ac
   17224:	00015239 	.word	0x00015239
   17228:	200000a4 	.word	0x200000a4
   1722c:	000152a9 	.word	0x000152a9
   17230:	0001608d 	.word	0x0001608d
   17234:	00015b61 	.word	0x00015b61
   17238:	0001680d 	.word	0x0001680d
   1723c:	00016641 	.word	0x00016641
   17240:	000183c9 	.word	0x000183c9

00017244 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   17244:	b510      	push	{r4, lr}
   17246:	2200      	movs	r2, #0
   17248:	4b01      	ldr	r3, [pc, #4]	; (17250 <xQueueGiveFromISR+0xc>)
   1724a:	4798      	blx	r3
   1724c:	bd10      	pop	{r4, pc}
   1724e:	46c0      	nop			; (mov r8, r8)
   17250:	000170c5 	.word	0x000170c5

00017254 <xQueueReceive>:
{
   17254:	b5f0      	push	{r4, r5, r6, r7, lr}
   17256:	46ce      	mov	lr, r9
   17258:	4647      	mov	r7, r8
   1725a:	b580      	push	{r7, lr}
   1725c:	b085      	sub	sp, #20
   1725e:	1e04      	subs	r4, r0, #0
   17260:	9100      	str	r1, [sp, #0]
   17262:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
   17264:	d00b      	beq.n	1727e <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17266:	9b00      	ldr	r3, [sp, #0]
   17268:	2b00      	cmp	r3, #0
   1726a:	d00a      	beq.n	17282 <xQueueReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1726c:	4ba4      	ldr	r3, [pc, #656]	; (17500 <xQueueReceive+0x2ac>)
   1726e:	4798      	blx	r3
   17270:	2800      	cmp	r0, #0
   17272:	d10b      	bne.n	1728c <xQueueReceive+0x38>
   17274:	9b01      	ldr	r3, [sp, #4]
   17276:	2b00      	cmp	r3, #0
   17278:	d00c      	beq.n	17294 <xQueueReceive+0x40>
   1727a:	b672      	cpsid	i
   1727c:	e7fe      	b.n	1727c <xQueueReceive+0x28>
	configASSERT( ( pxQueue ) );
   1727e:	b672      	cpsid	i
   17280:	e7fe      	b.n	17280 <xQueueReceive+0x2c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   17282:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17284:	2b00      	cmp	r3, #0
   17286:	d0f1      	beq.n	1726c <xQueueReceive+0x18>
   17288:	b672      	cpsid	i
   1728a:	e7fe      	b.n	1728a <xQueueReceive+0x36>
   1728c:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
   1728e:	4b9d      	ldr	r3, [pc, #628]	; (17504 <xQueueReceive+0x2b0>)
   17290:	4698      	mov	r8, r3
   17292:	e0b4      	b.n	173fe <xQueueReceive+0x1aa>
   17294:	2500      	movs	r5, #0
   17296:	e7fa      	b.n	1728e <xQueueReceive+0x3a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   17298:	9900      	ldr	r1, [sp, #0]
   1729a:	0020      	movs	r0, r4
   1729c:	4b9a      	ldr	r3, [pc, #616]	; (17508 <xQueueReceive+0x2b4>)
   1729e:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   172a0:	4b9a      	ldr	r3, [pc, #616]	; (1750c <xQueueReceive+0x2b8>)
   172a2:	4798      	blx	r3
   172a4:	4b9a      	ldr	r3, [pc, #616]	; (17510 <xQueueReceive+0x2bc>)
   172a6:	4798      	blx	r3
   172a8:	4b9a      	ldr	r3, [pc, #616]	; (17514 <xQueueReceive+0x2c0>)
   172aa:	881b      	ldrh	r3, [r3, #0]
   172ac:	4203      	tst	r3, r0
   172ae:	d019      	beq.n	172e4 <xQueueReceive+0x90>
   172b0:	0020      	movs	r0, r4
   172b2:	4b99      	ldr	r3, [pc, #612]	; (17518 <xQueueReceive+0x2c4>)
   172b4:	4798      	blx	r3
   172b6:	4b97      	ldr	r3, [pc, #604]	; (17514 <xQueueReceive+0x2c0>)
   172b8:	881b      	ldrh	r3, [r3, #0]
   172ba:	4203      	tst	r3, r0
   172bc:	d012      	beq.n	172e4 <xQueueReceive+0x90>
   172be:	0020      	movs	r0, r4
   172c0:	4b96      	ldr	r3, [pc, #600]	; (1751c <xQueueReceive+0x2c8>)
   172c2:	4698      	mov	r8, r3
   172c4:	4798      	blx	r3
   172c6:	4f96      	ldr	r7, [pc, #600]	; (17520 <xQueueReceive+0x2cc>)
   172c8:	5c3d      	ldrb	r5, [r7, r0]
   172ca:	3528      	adds	r5, #40	; 0x28
   172cc:	b2ed      	uxtb	r5, r5
   172ce:	0020      	movs	r0, r4
   172d0:	47c0      	blx	r8
   172d2:	5c3f      	ldrb	r7, [r7, r0]
   172d4:	0020      	movs	r0, r4
   172d6:	4b93      	ldr	r3, [pc, #588]	; (17524 <xQueueReceive+0x2d0>)
   172d8:	4798      	blx	r3
   172da:	b2c2      	uxtb	r2, r0
   172dc:	0039      	movs	r1, r7
   172de:	0028      	movs	r0, r5
   172e0:	4b91      	ldr	r3, [pc, #580]	; (17528 <xQueueReceive+0x2d4>)
   172e2:	4798      	blx	r3
   172e4:	0020      	movs	r0, r4
   172e6:	4f8d      	ldr	r7, [pc, #564]	; (1751c <xQueueReceive+0x2c8>)
   172e8:	47b8      	blx	r7
   172ea:	4d8d      	ldr	r5, [pc, #564]	; (17520 <xQueueReceive+0x2cc>)
   172ec:	5c2b      	ldrb	r3, [r5, r0]
   172ee:	4699      	mov	r9, r3
   172f0:	0020      	movs	r0, r4
   172f2:	4b8c      	ldr	r3, [pc, #560]	; (17524 <xQueueReceive+0x2d0>)
   172f4:	4798      	blx	r3
   172f6:	b2c3      	uxtb	r3, r0
   172f8:	4698      	mov	r8, r3
   172fa:	0020      	movs	r0, r4
   172fc:	47b8      	blx	r7
   172fe:	5c2b      	ldrb	r3, [r5, r0]
   17300:	2b02      	cmp	r3, #2
   17302:	d11e      	bne.n	17342 <xQueueReceive+0xee>
   17304:	4b81      	ldr	r3, [pc, #516]	; (1750c <xQueueReceive+0x2b8>)
   17306:	4798      	blx	r3
   17308:	4b88      	ldr	r3, [pc, #544]	; (1752c <xQueueReceive+0x2d8>)
   1730a:	4798      	blx	r3
   1730c:	b2c2      	uxtb	r2, r0
   1730e:	4641      	mov	r1, r8
   17310:	4648      	mov	r0, r9
   17312:	4b87      	ldr	r3, [pc, #540]	; (17530 <xQueueReceive+0x2dc>)
   17314:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   17316:	3e01      	subs	r6, #1
   17318:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1731a:	6923      	ldr	r3, [r4, #16]
   1731c:	2b00      	cmp	r3, #0
   1731e:	d007      	beq.n	17330 <xQueueReceive+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   17320:	0020      	movs	r0, r4
   17322:	3010      	adds	r0, #16
   17324:	4b83      	ldr	r3, [pc, #524]	; (17534 <xQueueReceive+0x2e0>)
   17326:	4798      	blx	r3
   17328:	2800      	cmp	r0, #0
   1732a:	d001      	beq.n	17330 <xQueueReceive+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
   1732c:	4b82      	ldr	r3, [pc, #520]	; (17538 <xQueueReceive+0x2e4>)
   1732e:	4798      	blx	r3
				taskEXIT_CRITICAL();
   17330:	4b82      	ldr	r3, [pc, #520]	; (1753c <xQueueReceive+0x2e8>)
   17332:	4798      	blx	r3
				return pdPASS;
   17334:	2301      	movs	r3, #1
}
   17336:	0018      	movs	r0, r3
   17338:	b005      	add	sp, #20
   1733a:	bc0c      	pop	{r2, r3}
   1733c:	4690      	mov	r8, r2
   1733e:	4699      	mov	r9, r3
   17340:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
   17342:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   17344:	3a01      	subs	r2, #1
   17346:	b2d2      	uxtb	r2, r2
   17348:	e7e1      	b.n	1730e <xQueueReceive+0xba>
					taskEXIT_CRITICAL();
   1734a:	4b7c      	ldr	r3, [pc, #496]	; (1753c <xQueueReceive+0x2e8>)
   1734c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1734e:	4b6f      	ldr	r3, [pc, #444]	; (1750c <xQueueReceive+0x2b8>)
   17350:	4798      	blx	r3
   17352:	4b6f      	ldr	r3, [pc, #444]	; (17510 <xQueueReceive+0x2bc>)
   17354:	4798      	blx	r3
   17356:	4b6f      	ldr	r3, [pc, #444]	; (17514 <xQueueReceive+0x2c0>)
   17358:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
   1735a:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1735c:	4202      	tst	r2, r0
   1735e:	d0ea      	beq.n	17336 <xQueueReceive+0xe2>
   17360:	0020      	movs	r0, r4
   17362:	4b6d      	ldr	r3, [pc, #436]	; (17518 <xQueueReceive+0x2c4>)
   17364:	4798      	blx	r3
   17366:	4b6b      	ldr	r3, [pc, #428]	; (17514 <xQueueReceive+0x2c0>)
   17368:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
   1736a:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1736c:	4202      	tst	r2, r0
   1736e:	d0e2      	beq.n	17336 <xQueueReceive+0xe2>
   17370:	0020      	movs	r0, r4
   17372:	4f6a      	ldr	r7, [pc, #424]	; (1751c <xQueueReceive+0x2c8>)
   17374:	47b8      	blx	r7
   17376:	4e6a      	ldr	r6, [pc, #424]	; (17520 <xQueueReceive+0x2cc>)
   17378:	5c35      	ldrb	r5, [r6, r0]
   1737a:	3550      	adds	r5, #80	; 0x50
   1737c:	b2ed      	uxtb	r5, r5
   1737e:	0020      	movs	r0, r4
   17380:	47b8      	blx	r7
   17382:	5c36      	ldrb	r6, [r6, r0]
   17384:	0020      	movs	r0, r4
   17386:	4b67      	ldr	r3, [pc, #412]	; (17524 <xQueueReceive+0x2d0>)
   17388:	4798      	blx	r3
   1738a:	b2c2      	uxtb	r2, r0
   1738c:	0031      	movs	r1, r6
   1738e:	0028      	movs	r0, r5
   17390:	4b65      	ldr	r3, [pc, #404]	; (17528 <xQueueReceive+0x2d4>)
   17392:	4798      	blx	r3
					return errQUEUE_EMPTY;
   17394:	2300      	movs	r3, #0
   17396:	e7ce      	b.n	17336 <xQueueReceive+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
   17398:	a802      	add	r0, sp, #8
   1739a:	4b69      	ldr	r3, [pc, #420]	; (17540 <xQueueReceive+0x2ec>)
   1739c:	4798      	blx	r3
   1739e:	e038      	b.n	17412 <xQueueReceive+0x1be>
		prvLockQueue( pxQueue );
   173a0:	2200      	movs	r2, #0
   173a2:	2344      	movs	r3, #68	; 0x44
   173a4:	54e2      	strb	r2, [r4, r3]
   173a6:	e03f      	b.n	17428 <xQueueReceive+0x1d4>
   173a8:	2200      	movs	r2, #0
   173aa:	2345      	movs	r3, #69	; 0x45
   173ac:	54e2      	strb	r2, [r4, r3]
   173ae:	e040      	b.n	17432 <xQueueReceive+0x1de>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   173b0:	0020      	movs	r0, r4
   173b2:	4b59      	ldr	r3, [pc, #356]	; (17518 <xQueueReceive+0x2c4>)
   173b4:	4798      	blx	r3
   173b6:	4b57      	ldr	r3, [pc, #348]	; (17514 <xQueueReceive+0x2c0>)
   173b8:	881b      	ldrh	r3, [r3, #0]
   173ba:	4203      	tst	r3, r0
   173bc:	d04e      	beq.n	1745c <xQueueReceive+0x208>
   173be:	0020      	movs	r0, r4
   173c0:	4f56      	ldr	r7, [pc, #344]	; (1751c <xQueueReceive+0x2c8>)
   173c2:	47b8      	blx	r7
   173c4:	4e56      	ldr	r6, [pc, #344]	; (17520 <xQueueReceive+0x2cc>)
   173c6:	5c35      	ldrb	r5, [r6, r0]
   173c8:	3568      	adds	r5, #104	; 0x68
   173ca:	b2ed      	uxtb	r5, r5
   173cc:	0020      	movs	r0, r4
   173ce:	47b8      	blx	r7
   173d0:	5c36      	ldrb	r6, [r6, r0]
   173d2:	0020      	movs	r0, r4
   173d4:	4b53      	ldr	r3, [pc, #332]	; (17524 <xQueueReceive+0x2d0>)
   173d6:	4798      	blx	r3
   173d8:	b2c2      	uxtb	r2, r0
   173da:	0031      	movs	r1, r6
   173dc:	0028      	movs	r0, r5
   173de:	4b52      	ldr	r3, [pc, #328]	; (17528 <xQueueReceive+0x2d4>)
   173e0:	4798      	blx	r3
   173e2:	e03b      	b.n	1745c <xQueueReceive+0x208>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   173e4:	0020      	movs	r0, r4
   173e6:	3024      	adds	r0, #36	; 0x24
   173e8:	9901      	ldr	r1, [sp, #4]
   173ea:	4b56      	ldr	r3, [pc, #344]	; (17544 <xQueueReceive+0x2f0>)
   173ec:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   173ee:	0020      	movs	r0, r4
   173f0:	4b55      	ldr	r3, [pc, #340]	; (17548 <xQueueReceive+0x2f4>)
   173f2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   173f4:	4b55      	ldr	r3, [pc, #340]	; (1754c <xQueueReceive+0x2f8>)
   173f6:	4798      	blx	r3
   173f8:	2800      	cmp	r0, #0
   173fa:	d046      	beq.n	1748a <xQueueReceive+0x236>
   173fc:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   173fe:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   17400:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   17402:	2e00      	cmp	r6, #0
   17404:	d000      	beq.n	17408 <xQueueReceive+0x1b4>
   17406:	e747      	b.n	17298 <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
   17408:	9b01      	ldr	r3, [sp, #4]
   1740a:	2b00      	cmp	r3, #0
   1740c:	d09d      	beq.n	1734a <xQueueReceive+0xf6>
				else if( xEntryTimeSet == pdFALSE )
   1740e:	2d00      	cmp	r5, #0
   17410:	d0c2      	beq.n	17398 <xQueueReceive+0x144>
		taskEXIT_CRITICAL();
   17412:	4b4a      	ldr	r3, [pc, #296]	; (1753c <xQueueReceive+0x2e8>)
   17414:	4798      	blx	r3
		vTaskSuspendAll();
   17416:	4b4e      	ldr	r3, [pc, #312]	; (17550 <xQueueReceive+0x2fc>)
   17418:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1741a:	4b3a      	ldr	r3, [pc, #232]	; (17504 <xQueueReceive+0x2b0>)
   1741c:	4798      	blx	r3
   1741e:	2344      	movs	r3, #68	; 0x44
   17420:	5ce3      	ldrb	r3, [r4, r3]
   17422:	b25b      	sxtb	r3, r3
   17424:	3301      	adds	r3, #1
   17426:	d0bb      	beq.n	173a0 <xQueueReceive+0x14c>
   17428:	2345      	movs	r3, #69	; 0x45
   1742a:	5ce3      	ldrb	r3, [r4, r3]
   1742c:	b25b      	sxtb	r3, r3
   1742e:	3301      	adds	r3, #1
   17430:	d0ba      	beq.n	173a8 <xQueueReceive+0x154>
   17432:	4b42      	ldr	r3, [pc, #264]	; (1753c <xQueueReceive+0x2e8>)
   17434:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   17436:	a901      	add	r1, sp, #4
   17438:	a802      	add	r0, sp, #8
   1743a:	4b46      	ldr	r3, [pc, #280]	; (17554 <xQueueReceive+0x300>)
   1743c:	4798      	blx	r3
   1743e:	2800      	cmp	r0, #0
   17440:	d12c      	bne.n	1749c <xQueueReceive+0x248>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   17442:	0020      	movs	r0, r4
   17444:	4b44      	ldr	r3, [pc, #272]	; (17558 <xQueueReceive+0x304>)
   17446:	4798      	blx	r3
   17448:	2800      	cmp	r0, #0
   1744a:	d021      	beq.n	17490 <xQueueReceive+0x23c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1744c:	4b2f      	ldr	r3, [pc, #188]	; (1750c <xQueueReceive+0x2b8>)
   1744e:	4798      	blx	r3
   17450:	4b2f      	ldr	r3, [pc, #188]	; (17510 <xQueueReceive+0x2bc>)
   17452:	4798      	blx	r3
   17454:	4b2f      	ldr	r3, [pc, #188]	; (17514 <xQueueReceive+0x2c0>)
   17456:	881b      	ldrh	r3, [r3, #0]
   17458:	4203      	tst	r3, r0
   1745a:	d1a9      	bne.n	173b0 <xQueueReceive+0x15c>
   1745c:	0020      	movs	r0, r4
   1745e:	4b2f      	ldr	r3, [pc, #188]	; (1751c <xQueueReceive+0x2c8>)
   17460:	4798      	blx	r3
   17462:	4b2f      	ldr	r3, [pc, #188]	; (17520 <xQueueReceive+0x2cc>)
   17464:	5c1b      	ldrb	r3, [r3, r0]
   17466:	2b02      	cmp	r3, #2
   17468:	d0bc      	beq.n	173e4 <xQueueReceive+0x190>
   1746a:	4b28      	ldr	r3, [pc, #160]	; (1750c <xQueueReceive+0x2b8>)
   1746c:	4798      	blx	r3
   1746e:	4b28      	ldr	r3, [pc, #160]	; (17510 <xQueueReceive+0x2bc>)
   17470:	4798      	blx	r3
   17472:	4b28      	ldr	r3, [pc, #160]	; (17514 <xQueueReceive+0x2c0>)
   17474:	881b      	ldrh	r3, [r3, #0]
   17476:	4203      	tst	r3, r0
   17478:	d0b4      	beq.n	173e4 <xQueueReceive+0x190>
   1747a:	4b24      	ldr	r3, [pc, #144]	; (1750c <xQueueReceive+0x2b8>)
   1747c:	4798      	blx	r3
   1747e:	4b2b      	ldr	r3, [pc, #172]	; (1752c <xQueueReceive+0x2d8>)
   17480:	4798      	blx	r3
   17482:	b2c0      	uxtb	r0, r0
   17484:	4b35      	ldr	r3, [pc, #212]	; (1755c <xQueueReceive+0x308>)
   17486:	4798      	blx	r3
   17488:	e7ac      	b.n	173e4 <xQueueReceive+0x190>
					portYIELD_WITHIN_API();
   1748a:	4b2b      	ldr	r3, [pc, #172]	; (17538 <xQueueReceive+0x2e4>)
   1748c:	4798      	blx	r3
   1748e:	e7b5      	b.n	173fc <xQueueReceive+0x1a8>
				prvUnlockQueue( pxQueue );
   17490:	0020      	movs	r0, r4
   17492:	4b2d      	ldr	r3, [pc, #180]	; (17548 <xQueueReceive+0x2f4>)
   17494:	4798      	blx	r3
				( void ) xTaskResumeAll();
   17496:	4b2d      	ldr	r3, [pc, #180]	; (1754c <xQueueReceive+0x2f8>)
   17498:	4798      	blx	r3
   1749a:	e7af      	b.n	173fc <xQueueReceive+0x1a8>
			prvUnlockQueue( pxQueue );
   1749c:	0020      	movs	r0, r4
   1749e:	4b2a      	ldr	r3, [pc, #168]	; (17548 <xQueueReceive+0x2f4>)
   174a0:	4798      	blx	r3
			( void ) xTaskResumeAll();
   174a2:	4b2a      	ldr	r3, [pc, #168]	; (1754c <xQueueReceive+0x2f8>)
   174a4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   174a6:	0020      	movs	r0, r4
   174a8:	4b2b      	ldr	r3, [pc, #172]	; (17558 <xQueueReceive+0x304>)
   174aa:	4798      	blx	r3
   174ac:	2800      	cmp	r0, #0
   174ae:	d0a5      	beq.n	173fc <xQueueReceive+0x1a8>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   174b0:	4b16      	ldr	r3, [pc, #88]	; (1750c <xQueueReceive+0x2b8>)
   174b2:	4798      	blx	r3
   174b4:	4b16      	ldr	r3, [pc, #88]	; (17510 <xQueueReceive+0x2bc>)
   174b6:	4798      	blx	r3
   174b8:	4b16      	ldr	r3, [pc, #88]	; (17514 <xQueueReceive+0x2c0>)
   174ba:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
   174bc:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   174be:	4202      	tst	r2, r0
   174c0:	d100      	bne.n	174c4 <xQueueReceive+0x270>
   174c2:	e738      	b.n	17336 <xQueueReceive+0xe2>
   174c4:	0020      	movs	r0, r4
   174c6:	4b14      	ldr	r3, [pc, #80]	; (17518 <xQueueReceive+0x2c4>)
   174c8:	4798      	blx	r3
   174ca:	4b12      	ldr	r3, [pc, #72]	; (17514 <xQueueReceive+0x2c0>)
   174cc:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
   174ce:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   174d0:	4202      	tst	r2, r0
   174d2:	d100      	bne.n	174d6 <xQueueReceive+0x282>
   174d4:	e72f      	b.n	17336 <xQueueReceive+0xe2>
   174d6:	0020      	movs	r0, r4
   174d8:	4f10      	ldr	r7, [pc, #64]	; (1751c <xQueueReceive+0x2c8>)
   174da:	47b8      	blx	r7
   174dc:	4e10      	ldr	r6, [pc, #64]	; (17520 <xQueueReceive+0x2cc>)
   174de:	5c35      	ldrb	r5, [r6, r0]
   174e0:	3550      	adds	r5, #80	; 0x50
   174e2:	b2ed      	uxtb	r5, r5
   174e4:	0020      	movs	r0, r4
   174e6:	47b8      	blx	r7
   174e8:	5c36      	ldrb	r6, [r6, r0]
   174ea:	0020      	movs	r0, r4
   174ec:	4b0d      	ldr	r3, [pc, #52]	; (17524 <xQueueReceive+0x2d0>)
   174ee:	4798      	blx	r3
   174f0:	b2c2      	uxtb	r2, r0
   174f2:	0031      	movs	r1, r6
   174f4:	0028      	movs	r0, r5
   174f6:	4b0c      	ldr	r3, [pc, #48]	; (17528 <xQueueReceive+0x2d4>)
   174f8:	4798      	blx	r3
				return errQUEUE_EMPTY;
   174fa:	2300      	movs	r3, #0
   174fc:	e71b      	b.n	17336 <xQueueReceive+0xe2>
   174fe:	46c0      	nop			; (mov r8, r8)
   17500:	0001855d 	.word	0x0001855d
   17504:	00016601 	.word	0x00016601
   17508:	00016929 	.word	0x00016929
   1750c:	00015409 	.word	0x00015409
   17510:	00015255 	.word	0x00015255
   17514:	200000ac 	.word	0x200000ac
   17518:	000152b9 	.word	0x000152b9
   1751c:	00015239 	.word	0x00015239
   17520:	200000a4 	.word	0x200000a4
   17524:	000152a9 	.word	0x000152a9
   17528:	0001608d 	.word	0x0001608d
   1752c:	00015245 	.word	0x00015245
   17530:	00015b61 	.word	0x00015b61
   17534:	000183c9 	.word	0x000183c9
   17538:	000165f1 	.word	0x000165f1
   1753c:	00016619 	.word	0x00016619
   17540:	0001847d 	.word	0x0001847d
   17544:	00018301 	.word	0x00018301
   17548:	00016951 	.word	0x00016951
   1754c:	00017f19 	.word	0x00017f19
   17550:	00017d71 	.word	0x00017d71
   17554:	00018495 	.word	0x00018495
   17558:	00016775 	.word	0x00016775
   1755c:	00015bb9 	.word	0x00015bb9

00017560 <xQueueSemaphoreTake>:
{
   17560:	b5f0      	push	{r4, r5, r6, r7, lr}
   17562:	46ce      	mov	lr, r9
   17564:	4647      	mov	r7, r8
   17566:	b580      	push	{r7, lr}
   17568:	b085      	sub	sp, #20
   1756a:	1e04      	subs	r4, r0, #0
   1756c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
   1756e:	d004      	beq.n	1757a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
   17570:	6c03      	ldr	r3, [r0, #64]	; 0x40
   17572:	2b00      	cmp	r3, #0
   17574:	d003      	beq.n	1757e <xQueueSemaphoreTake+0x1e>
   17576:	b672      	cpsid	i
   17578:	e7fe      	b.n	17578 <xQueueSemaphoreTake+0x18>
	configASSERT( ( pxQueue ) );
   1757a:	b672      	cpsid	i
   1757c:	e7fe      	b.n	1757c <xQueueSemaphoreTake+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1757e:	4bb2      	ldr	r3, [pc, #712]	; (17848 <xQueueSemaphoreTake+0x2e8>)
   17580:	4798      	blx	r3
   17582:	2800      	cmp	r0, #0
   17584:	d104      	bne.n	17590 <xQueueSemaphoreTake+0x30>
   17586:	9b01      	ldr	r3, [sp, #4]
   17588:	2b00      	cmp	r3, #0
   1758a:	d006      	beq.n	1759a <xQueueSemaphoreTake+0x3a>
   1758c:	b672      	cpsid	i
   1758e:	e7fe      	b.n	1758e <xQueueSemaphoreTake+0x2e>
   17590:	2500      	movs	r5, #0
   17592:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   17594:	4bad      	ldr	r3, [pc, #692]	; (1784c <xQueueSemaphoreTake+0x2ec>)
   17596:	4698      	mov	r8, r3
   17598:	e0bd      	b.n	17716 <xQueueSemaphoreTake+0x1b6>
   1759a:	2500      	movs	r5, #0
   1759c:	2700      	movs	r7, #0
   1759e:	e7f9      	b.n	17594 <xQueueSemaphoreTake+0x34>
				traceQUEUE_RECEIVE( pxQueue );
   175a0:	4bab      	ldr	r3, [pc, #684]	; (17850 <xQueueSemaphoreTake+0x2f0>)
   175a2:	4798      	blx	r3
   175a4:	4bab      	ldr	r3, [pc, #684]	; (17854 <xQueueSemaphoreTake+0x2f4>)
   175a6:	4798      	blx	r3
   175a8:	4bab      	ldr	r3, [pc, #684]	; (17858 <xQueueSemaphoreTake+0x2f8>)
   175aa:	881b      	ldrh	r3, [r3, #0]
   175ac:	4203      	tst	r3, r0
   175ae:	d019      	beq.n	175e4 <xQueueSemaphoreTake+0x84>
   175b0:	0020      	movs	r0, r4
   175b2:	4baa      	ldr	r3, [pc, #680]	; (1785c <xQueueSemaphoreTake+0x2fc>)
   175b4:	4798      	blx	r3
   175b6:	4ba8      	ldr	r3, [pc, #672]	; (17858 <xQueueSemaphoreTake+0x2f8>)
   175b8:	881b      	ldrh	r3, [r3, #0]
   175ba:	4203      	tst	r3, r0
   175bc:	d012      	beq.n	175e4 <xQueueSemaphoreTake+0x84>
   175be:	0020      	movs	r0, r4
   175c0:	4ba7      	ldr	r3, [pc, #668]	; (17860 <xQueueSemaphoreTake+0x300>)
   175c2:	4698      	mov	r8, r3
   175c4:	4798      	blx	r3
   175c6:	4fa7      	ldr	r7, [pc, #668]	; (17864 <xQueueSemaphoreTake+0x304>)
   175c8:	5c3d      	ldrb	r5, [r7, r0]
   175ca:	3528      	adds	r5, #40	; 0x28
   175cc:	b2ed      	uxtb	r5, r5
   175ce:	0020      	movs	r0, r4
   175d0:	47c0      	blx	r8
   175d2:	5c3f      	ldrb	r7, [r7, r0]
   175d4:	0020      	movs	r0, r4
   175d6:	4ba4      	ldr	r3, [pc, #656]	; (17868 <xQueueSemaphoreTake+0x308>)
   175d8:	4798      	blx	r3
   175da:	b2c2      	uxtb	r2, r0
   175dc:	0039      	movs	r1, r7
   175de:	0028      	movs	r0, r5
   175e0:	4ba2      	ldr	r3, [pc, #648]	; (1786c <xQueueSemaphoreTake+0x30c>)
   175e2:	4798      	blx	r3
   175e4:	0020      	movs	r0, r4
   175e6:	4f9e      	ldr	r7, [pc, #632]	; (17860 <xQueueSemaphoreTake+0x300>)
   175e8:	47b8      	blx	r7
   175ea:	4d9e      	ldr	r5, [pc, #632]	; (17864 <xQueueSemaphoreTake+0x304>)
   175ec:	5c2b      	ldrb	r3, [r5, r0]
   175ee:	4699      	mov	r9, r3
   175f0:	0020      	movs	r0, r4
   175f2:	4b9d      	ldr	r3, [pc, #628]	; (17868 <xQueueSemaphoreTake+0x308>)
   175f4:	4798      	blx	r3
   175f6:	b2c3      	uxtb	r3, r0
   175f8:	4698      	mov	r8, r3
   175fa:	0020      	movs	r0, r4
   175fc:	47b8      	blx	r7
   175fe:	5c2b      	ldrb	r3, [r5, r0]
   17600:	2b02      	cmp	r3, #2
   17602:	d124      	bne.n	1764e <xQueueSemaphoreTake+0xee>
   17604:	4b92      	ldr	r3, [pc, #584]	; (17850 <xQueueSemaphoreTake+0x2f0>)
   17606:	4798      	blx	r3
   17608:	4b99      	ldr	r3, [pc, #612]	; (17870 <xQueueSemaphoreTake+0x310>)
   1760a:	4798      	blx	r3
   1760c:	b2c2      	uxtb	r2, r0
   1760e:	4641      	mov	r1, r8
   17610:	4648      	mov	r0, r9
   17612:	4b98      	ldr	r3, [pc, #608]	; (17874 <xQueueSemaphoreTake+0x314>)
   17614:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   17616:	3e01      	subs	r6, #1
   17618:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1761a:	6823      	ldr	r3, [r4, #0]
   1761c:	2b00      	cmp	r3, #0
   1761e:	d102      	bne.n	17626 <xQueueSemaphoreTake+0xc6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   17620:	4b95      	ldr	r3, [pc, #596]	; (17878 <xQueueSemaphoreTake+0x318>)
   17622:	4798      	blx	r3
   17624:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   17626:	6923      	ldr	r3, [r4, #16]
   17628:	2b00      	cmp	r3, #0
   1762a:	d007      	beq.n	1763c <xQueueSemaphoreTake+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1762c:	0020      	movs	r0, r4
   1762e:	3010      	adds	r0, #16
   17630:	4b92      	ldr	r3, [pc, #584]	; (1787c <xQueueSemaphoreTake+0x31c>)
   17632:	4798      	blx	r3
   17634:	2800      	cmp	r0, #0
   17636:	d001      	beq.n	1763c <xQueueSemaphoreTake+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
   17638:	4b91      	ldr	r3, [pc, #580]	; (17880 <xQueueSemaphoreTake+0x320>)
   1763a:	4798      	blx	r3
				taskEXIT_CRITICAL();
   1763c:	4b91      	ldr	r3, [pc, #580]	; (17884 <xQueueSemaphoreTake+0x324>)
   1763e:	4798      	blx	r3
				return pdPASS;
   17640:	2501      	movs	r5, #1
}
   17642:	0028      	movs	r0, r5
   17644:	b005      	add	sp, #20
   17646:	bc0c      	pop	{r2, r3}
   17648:	4690      	mov	r8, r2
   1764a:	4699      	mov	r9, r3
   1764c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
   1764e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   17650:	3a01      	subs	r2, #1
   17652:	b2d2      	uxtb	r2, r2
   17654:	e7db      	b.n	1760e <xQueueSemaphoreTake+0xae>
						configASSERT( xInheritanceOccurred == pdFALSE );
   17656:	2d00      	cmp	r5, #0
   17658:	d001      	beq.n	1765e <xQueueSemaphoreTake+0xfe>
   1765a:	b672      	cpsid	i
   1765c:	e7fe      	b.n	1765c <xQueueSemaphoreTake+0xfc>
					taskEXIT_CRITICAL();
   1765e:	4b89      	ldr	r3, [pc, #548]	; (17884 <xQueueSemaphoreTake+0x324>)
   17660:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   17662:	4b7b      	ldr	r3, [pc, #492]	; (17850 <xQueueSemaphoreTake+0x2f0>)
   17664:	4798      	blx	r3
   17666:	4b7b      	ldr	r3, [pc, #492]	; (17854 <xQueueSemaphoreTake+0x2f4>)
   17668:	4798      	blx	r3
   1766a:	4b7b      	ldr	r3, [pc, #492]	; (17858 <xQueueSemaphoreTake+0x2f8>)
   1766c:	881b      	ldrh	r3, [r3, #0]
   1766e:	4203      	tst	r3, r0
   17670:	d0e7      	beq.n	17642 <xQueueSemaphoreTake+0xe2>
   17672:	0020      	movs	r0, r4
   17674:	4b79      	ldr	r3, [pc, #484]	; (1785c <xQueueSemaphoreTake+0x2fc>)
   17676:	4798      	blx	r3
   17678:	4b77      	ldr	r3, [pc, #476]	; (17858 <xQueueSemaphoreTake+0x2f8>)
   1767a:	881b      	ldrh	r3, [r3, #0]
   1767c:	4203      	tst	r3, r0
   1767e:	d0e0      	beq.n	17642 <xQueueSemaphoreTake+0xe2>
   17680:	0020      	movs	r0, r4
   17682:	4b77      	ldr	r3, [pc, #476]	; (17860 <xQueueSemaphoreTake+0x300>)
   17684:	4698      	mov	r8, r3
   17686:	4798      	blx	r3
   17688:	4f76      	ldr	r7, [pc, #472]	; (17864 <xQueueSemaphoreTake+0x304>)
   1768a:	5c3e      	ldrb	r6, [r7, r0]
   1768c:	3650      	adds	r6, #80	; 0x50
   1768e:	b2f6      	uxtb	r6, r6
   17690:	0020      	movs	r0, r4
   17692:	47c0      	blx	r8
   17694:	5c3f      	ldrb	r7, [r7, r0]
   17696:	0020      	movs	r0, r4
   17698:	4b73      	ldr	r3, [pc, #460]	; (17868 <xQueueSemaphoreTake+0x308>)
   1769a:	4798      	blx	r3
   1769c:	b2c2      	uxtb	r2, r0
   1769e:	0039      	movs	r1, r7
   176a0:	0030      	movs	r0, r6
   176a2:	4b72      	ldr	r3, [pc, #456]	; (1786c <xQueueSemaphoreTake+0x30c>)
   176a4:	4798      	blx	r3
   176a6:	e7cc      	b.n	17642 <xQueueSemaphoreTake+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
   176a8:	a802      	add	r0, sp, #8
   176aa:	4b77      	ldr	r3, [pc, #476]	; (17888 <xQueueSemaphoreTake+0x328>)
   176ac:	4798      	blx	r3
   176ae:	e03c      	b.n	1772a <xQueueSemaphoreTake+0x1ca>
		prvLockQueue( pxQueue );
   176b0:	2200      	movs	r2, #0
   176b2:	2344      	movs	r3, #68	; 0x44
   176b4:	54e2      	strb	r2, [r4, r3]
   176b6:	e043      	b.n	17740 <xQueueSemaphoreTake+0x1e0>
   176b8:	2200      	movs	r2, #0
   176ba:	2345      	movs	r3, #69	; 0x45
   176bc:	54e2      	strb	r2, [r4, r3]
   176be:	e044      	b.n	1774a <xQueueSemaphoreTake+0x1ea>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   176c0:	0020      	movs	r0, r4
   176c2:	4b66      	ldr	r3, [pc, #408]	; (1785c <xQueueSemaphoreTake+0x2fc>)
   176c4:	4798      	blx	r3
   176c6:	4b64      	ldr	r3, [pc, #400]	; (17858 <xQueueSemaphoreTake+0x2f8>)
   176c8:	881b      	ldrh	r3, [r3, #0]
   176ca:	4203      	tst	r3, r0
   176cc:	d052      	beq.n	17774 <xQueueSemaphoreTake+0x214>
   176ce:	0020      	movs	r0, r4
   176d0:	4b63      	ldr	r3, [pc, #396]	; (17860 <xQueueSemaphoreTake+0x300>)
   176d2:	4699      	mov	r9, r3
   176d4:	4798      	blx	r3
   176d6:	4f63      	ldr	r7, [pc, #396]	; (17864 <xQueueSemaphoreTake+0x304>)
   176d8:	5c3e      	ldrb	r6, [r7, r0]
   176da:	3668      	adds	r6, #104	; 0x68
   176dc:	b2f6      	uxtb	r6, r6
   176de:	0020      	movs	r0, r4
   176e0:	47c8      	blx	r9
   176e2:	5c3f      	ldrb	r7, [r7, r0]
   176e4:	0020      	movs	r0, r4
   176e6:	4b60      	ldr	r3, [pc, #384]	; (17868 <xQueueSemaphoreTake+0x308>)
   176e8:	4798      	blx	r3
   176ea:	b2c2      	uxtb	r2, r0
   176ec:	0039      	movs	r1, r7
   176ee:	0030      	movs	r0, r6
   176f0:	4b5e      	ldr	r3, [pc, #376]	; (1786c <xQueueSemaphoreTake+0x30c>)
   176f2:	4798      	blx	r3
   176f4:	e03e      	b.n	17774 <xQueueSemaphoreTake+0x214>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   176f6:	6823      	ldr	r3, [r4, #0]
   176f8:	2b00      	cmp	r3, #0
   176fa:	d052      	beq.n	177a2 <xQueueSemaphoreTake+0x242>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   176fc:	0020      	movs	r0, r4
   176fe:	3024      	adds	r0, #36	; 0x24
   17700:	9901      	ldr	r1, [sp, #4]
   17702:	4b62      	ldr	r3, [pc, #392]	; (1788c <xQueueSemaphoreTake+0x32c>)
   17704:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   17706:	0020      	movs	r0, r4
   17708:	4b61      	ldr	r3, [pc, #388]	; (17890 <xQueueSemaphoreTake+0x330>)
   1770a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1770c:	4b61      	ldr	r3, [pc, #388]	; (17894 <xQueueSemaphoreTake+0x334>)
   1770e:	4798      	blx	r3
   17710:	2800      	cmp	r0, #0
   17712:	d04f      	beq.n	177b4 <xQueueSemaphoreTake+0x254>
   17714:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   17716:	47c0      	blx	r8
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   17718:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1771a:	2e00      	cmp	r6, #0
   1771c:	d000      	beq.n	17720 <xQueueSemaphoreTake+0x1c0>
   1771e:	e73f      	b.n	175a0 <xQueueSemaphoreTake+0x40>
				if( xTicksToWait == ( TickType_t ) 0 )
   17720:	9b01      	ldr	r3, [sp, #4]
   17722:	2b00      	cmp	r3, #0
   17724:	d097      	beq.n	17656 <xQueueSemaphoreTake+0xf6>
				else if( xEntryTimeSet == pdFALSE )
   17726:	2f00      	cmp	r7, #0
   17728:	d0be      	beq.n	176a8 <xQueueSemaphoreTake+0x148>
		taskEXIT_CRITICAL();
   1772a:	4b56      	ldr	r3, [pc, #344]	; (17884 <xQueueSemaphoreTake+0x324>)
   1772c:	4798      	blx	r3
		vTaskSuspendAll();
   1772e:	4b5a      	ldr	r3, [pc, #360]	; (17898 <xQueueSemaphoreTake+0x338>)
   17730:	4798      	blx	r3
		prvLockQueue( pxQueue );
   17732:	4b46      	ldr	r3, [pc, #280]	; (1784c <xQueueSemaphoreTake+0x2ec>)
   17734:	4798      	blx	r3
   17736:	2344      	movs	r3, #68	; 0x44
   17738:	5ce3      	ldrb	r3, [r4, r3]
   1773a:	b25b      	sxtb	r3, r3
   1773c:	3301      	adds	r3, #1
   1773e:	d0b7      	beq.n	176b0 <xQueueSemaphoreTake+0x150>
   17740:	2345      	movs	r3, #69	; 0x45
   17742:	5ce3      	ldrb	r3, [r4, r3]
   17744:	b25b      	sxtb	r3, r3
   17746:	3301      	adds	r3, #1
   17748:	d0b6      	beq.n	176b8 <xQueueSemaphoreTake+0x158>
   1774a:	4b4e      	ldr	r3, [pc, #312]	; (17884 <xQueueSemaphoreTake+0x324>)
   1774c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1774e:	a901      	add	r1, sp, #4
   17750:	a802      	add	r0, sp, #8
   17752:	4b52      	ldr	r3, [pc, #328]	; (1789c <xQueueSemaphoreTake+0x33c>)
   17754:	4798      	blx	r3
   17756:	2800      	cmp	r0, #0
   17758:	d135      	bne.n	177c6 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1775a:	0020      	movs	r0, r4
   1775c:	4b50      	ldr	r3, [pc, #320]	; (178a0 <xQueueSemaphoreTake+0x340>)
   1775e:	4798      	blx	r3
   17760:	2800      	cmp	r0, #0
   17762:	d02a      	beq.n	177ba <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   17764:	4b3a      	ldr	r3, [pc, #232]	; (17850 <xQueueSemaphoreTake+0x2f0>)
   17766:	4798      	blx	r3
   17768:	4b3a      	ldr	r3, [pc, #232]	; (17854 <xQueueSemaphoreTake+0x2f4>)
   1776a:	4798      	blx	r3
   1776c:	4b3a      	ldr	r3, [pc, #232]	; (17858 <xQueueSemaphoreTake+0x2f8>)
   1776e:	881b      	ldrh	r3, [r3, #0]
   17770:	4203      	tst	r3, r0
   17772:	d1a5      	bne.n	176c0 <xQueueSemaphoreTake+0x160>
   17774:	0020      	movs	r0, r4
   17776:	4b3a      	ldr	r3, [pc, #232]	; (17860 <xQueueSemaphoreTake+0x300>)
   17778:	4798      	blx	r3
   1777a:	4b3a      	ldr	r3, [pc, #232]	; (17864 <xQueueSemaphoreTake+0x304>)
   1777c:	5c1b      	ldrb	r3, [r3, r0]
   1777e:	2b02      	cmp	r3, #2
   17780:	d0b9      	beq.n	176f6 <xQueueSemaphoreTake+0x196>
   17782:	4b33      	ldr	r3, [pc, #204]	; (17850 <xQueueSemaphoreTake+0x2f0>)
   17784:	4798      	blx	r3
   17786:	4b33      	ldr	r3, [pc, #204]	; (17854 <xQueueSemaphoreTake+0x2f4>)
   17788:	4798      	blx	r3
   1778a:	4b33      	ldr	r3, [pc, #204]	; (17858 <xQueueSemaphoreTake+0x2f8>)
   1778c:	881b      	ldrh	r3, [r3, #0]
   1778e:	4203      	tst	r3, r0
   17790:	d0b1      	beq.n	176f6 <xQueueSemaphoreTake+0x196>
   17792:	4b2f      	ldr	r3, [pc, #188]	; (17850 <xQueueSemaphoreTake+0x2f0>)
   17794:	4798      	blx	r3
   17796:	4b36      	ldr	r3, [pc, #216]	; (17870 <xQueueSemaphoreTake+0x310>)
   17798:	4798      	blx	r3
   1779a:	b2c0      	uxtb	r0, r0
   1779c:	4b41      	ldr	r3, [pc, #260]	; (178a4 <xQueueSemaphoreTake+0x344>)
   1779e:	4798      	blx	r3
   177a0:	e7a9      	b.n	176f6 <xQueueSemaphoreTake+0x196>
						taskENTER_CRITICAL();
   177a2:	4b2a      	ldr	r3, [pc, #168]	; (1784c <xQueueSemaphoreTake+0x2ec>)
   177a4:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   177a6:	6860      	ldr	r0, [r4, #4]
   177a8:	4b3f      	ldr	r3, [pc, #252]	; (178a8 <xQueueSemaphoreTake+0x348>)
   177aa:	4798      	blx	r3
   177ac:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
   177ae:	4b35      	ldr	r3, [pc, #212]	; (17884 <xQueueSemaphoreTake+0x324>)
   177b0:	4798      	blx	r3
   177b2:	e7a3      	b.n	176fc <xQueueSemaphoreTake+0x19c>
					portYIELD_WITHIN_API();
   177b4:	4b32      	ldr	r3, [pc, #200]	; (17880 <xQueueSemaphoreTake+0x320>)
   177b6:	4798      	blx	r3
   177b8:	e7ac      	b.n	17714 <xQueueSemaphoreTake+0x1b4>
				prvUnlockQueue( pxQueue );
   177ba:	0020      	movs	r0, r4
   177bc:	4b34      	ldr	r3, [pc, #208]	; (17890 <xQueueSemaphoreTake+0x330>)
   177be:	4798      	blx	r3
				( void ) xTaskResumeAll();
   177c0:	4b34      	ldr	r3, [pc, #208]	; (17894 <xQueueSemaphoreTake+0x334>)
   177c2:	4798      	blx	r3
   177c4:	e7a6      	b.n	17714 <xQueueSemaphoreTake+0x1b4>
			prvUnlockQueue( pxQueue );
   177c6:	0020      	movs	r0, r4
   177c8:	4b31      	ldr	r3, [pc, #196]	; (17890 <xQueueSemaphoreTake+0x330>)
   177ca:	4798      	blx	r3
			( void ) xTaskResumeAll();
   177cc:	4b31      	ldr	r3, [pc, #196]	; (17894 <xQueueSemaphoreTake+0x334>)
   177ce:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   177d0:	0020      	movs	r0, r4
   177d2:	4b33      	ldr	r3, [pc, #204]	; (178a0 <xQueueSemaphoreTake+0x340>)
   177d4:	4798      	blx	r3
   177d6:	2800      	cmp	r0, #0
   177d8:	d09c      	beq.n	17714 <xQueueSemaphoreTake+0x1b4>
					if( xInheritanceOccurred != pdFALSE )
   177da:	2d00      	cmp	r5, #0
   177dc:	d00e      	beq.n	177fc <xQueueSemaphoreTake+0x29c>
						taskENTER_CRITICAL();
   177de:	4b1b      	ldr	r3, [pc, #108]	; (1784c <xQueueSemaphoreTake+0x2ec>)
   177e0:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   177e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   177e4:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   177e6:	2b00      	cmp	r3, #0
   177e8:	d003      	beq.n	177f2 <xQueueSemaphoreTake+0x292>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   177ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
   177ec:	681b      	ldr	r3, [r3, #0]
   177ee:	3105      	adds	r1, #5
   177f0:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   177f2:	6860      	ldr	r0, [r4, #4]
   177f4:	4b2d      	ldr	r3, [pc, #180]	; (178ac <xQueueSemaphoreTake+0x34c>)
   177f6:	4798      	blx	r3
						taskEXIT_CRITICAL();
   177f8:	4b22      	ldr	r3, [pc, #136]	; (17884 <xQueueSemaphoreTake+0x324>)
   177fa:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   177fc:	4b14      	ldr	r3, [pc, #80]	; (17850 <xQueueSemaphoreTake+0x2f0>)
   177fe:	4798      	blx	r3
   17800:	4b14      	ldr	r3, [pc, #80]	; (17854 <xQueueSemaphoreTake+0x2f4>)
   17802:	4798      	blx	r3
   17804:	4b14      	ldr	r3, [pc, #80]	; (17858 <xQueueSemaphoreTake+0x2f8>)
   17806:	881b      	ldrh	r3, [r3, #0]
				return errQUEUE_EMPTY;
   17808:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1780a:	4203      	tst	r3, r0
   1780c:	d100      	bne.n	17810 <xQueueSemaphoreTake+0x2b0>
   1780e:	e718      	b.n	17642 <xQueueSemaphoreTake+0xe2>
   17810:	0020      	movs	r0, r4
   17812:	4b12      	ldr	r3, [pc, #72]	; (1785c <xQueueSemaphoreTake+0x2fc>)
   17814:	4798      	blx	r3
   17816:	4b10      	ldr	r3, [pc, #64]	; (17858 <xQueueSemaphoreTake+0x2f8>)
   17818:	881b      	ldrh	r3, [r3, #0]
   1781a:	4203      	tst	r3, r0
   1781c:	d100      	bne.n	17820 <xQueueSemaphoreTake+0x2c0>
   1781e:	e710      	b.n	17642 <xQueueSemaphoreTake+0xe2>
   17820:	0020      	movs	r0, r4
   17822:	4f0f      	ldr	r7, [pc, #60]	; (17860 <xQueueSemaphoreTake+0x300>)
   17824:	47b8      	blx	r7
   17826:	4e0f      	ldr	r6, [pc, #60]	; (17864 <xQueueSemaphoreTake+0x304>)
   17828:	5c35      	ldrb	r5, [r6, r0]
   1782a:	3550      	adds	r5, #80	; 0x50
   1782c:	b2ed      	uxtb	r5, r5
   1782e:	0020      	movs	r0, r4
   17830:	47b8      	blx	r7
   17832:	5c36      	ldrb	r6, [r6, r0]
   17834:	0020      	movs	r0, r4
   17836:	4b0c      	ldr	r3, [pc, #48]	; (17868 <xQueueSemaphoreTake+0x308>)
   17838:	4798      	blx	r3
   1783a:	b2c2      	uxtb	r2, r0
   1783c:	0031      	movs	r1, r6
   1783e:	0028      	movs	r0, r5
   17840:	4b0a      	ldr	r3, [pc, #40]	; (1786c <xQueueSemaphoreTake+0x30c>)
   17842:	4798      	blx	r3
				return errQUEUE_EMPTY;
   17844:	2500      	movs	r5, #0
   17846:	e6fc      	b.n	17642 <xQueueSemaphoreTake+0xe2>
   17848:	0001855d 	.word	0x0001855d
   1784c:	00016601 	.word	0x00016601
   17850:	00015409 	.word	0x00015409
   17854:	00015255 	.word	0x00015255
   17858:	200000ac 	.word	0x200000ac
   1785c:	000152b9 	.word	0x000152b9
   17860:	00015239 	.word	0x00015239
   17864:	200000a4 	.word	0x200000a4
   17868:	000152a9 	.word	0x000152a9
   1786c:	0001608d 	.word	0x0001608d
   17870:	00015245 	.word	0x00015245
   17874:	00015b61 	.word	0x00015b61
   17878:	0001888d 	.word	0x0001888d
   1787c:	000183c9 	.word	0x000183c9
   17880:	000165f1 	.word	0x000165f1
   17884:	00016619 	.word	0x00016619
   17888:	0001847d 	.word	0x0001847d
   1788c:	00018301 	.word	0x00018301
   17890:	00016951 	.word	0x00016951
   17894:	00017f19 	.word	0x00017f19
   17898:	00017d71 	.word	0x00017d71
   1789c:	00018495 	.word	0x00018495
   178a0:	00016775 	.word	0x00016775
   178a4:	00015bb9 	.word	0x00015bb9
   178a8:	0001857d 	.word	0x0001857d
   178ac:	00018789 	.word	0x00018789

000178b0 <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   178b0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
   178b2:	4770      	bx	lr

000178b4 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   178b4:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
   178b6:	4770      	bx	lr

000178b8 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   178b8:	2350      	movs	r3, #80	; 0x50
   178ba:	5cc0      	ldrb	r0, [r0, r3]
	}
   178bc:	4770      	bx	lr
	...

000178c0 <vQueueWaitForMessageRestricted>:
	{
   178c0:	b570      	push	{r4, r5, r6, lr}
   178c2:	0004      	movs	r4, r0
   178c4:	000d      	movs	r5, r1
   178c6:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
   178c8:	4b11      	ldr	r3, [pc, #68]	; (17910 <vQueueWaitForMessageRestricted+0x50>)
   178ca:	4798      	blx	r3
   178cc:	2344      	movs	r3, #68	; 0x44
   178ce:	5ce3      	ldrb	r3, [r4, r3]
   178d0:	b25b      	sxtb	r3, r3
   178d2:	3301      	adds	r3, #1
   178d4:	d00d      	beq.n	178f2 <vQueueWaitForMessageRestricted+0x32>
   178d6:	2345      	movs	r3, #69	; 0x45
   178d8:	5ce3      	ldrb	r3, [r4, r3]
   178da:	b25b      	sxtb	r3, r3
   178dc:	3301      	adds	r3, #1
   178de:	d00c      	beq.n	178fa <vQueueWaitForMessageRestricted+0x3a>
   178e0:	4b0c      	ldr	r3, [pc, #48]	; (17914 <vQueueWaitForMessageRestricted+0x54>)
   178e2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   178e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   178e6:	2b00      	cmp	r3, #0
   178e8:	d00b      	beq.n	17902 <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
   178ea:	0020      	movs	r0, r4
   178ec:	4b0a      	ldr	r3, [pc, #40]	; (17918 <vQueueWaitForMessageRestricted+0x58>)
   178ee:	4798      	blx	r3
	}
   178f0:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
   178f2:	2200      	movs	r2, #0
   178f4:	2344      	movs	r3, #68	; 0x44
   178f6:	54e2      	strb	r2, [r4, r3]
   178f8:	e7ed      	b.n	178d6 <vQueueWaitForMessageRestricted+0x16>
   178fa:	2200      	movs	r2, #0
   178fc:	2345      	movs	r3, #69	; 0x45
   178fe:	54e2      	strb	r2, [r4, r3]
   17900:	e7ee      	b.n	178e0 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   17902:	0020      	movs	r0, r4
   17904:	3024      	adds	r0, #36	; 0x24
   17906:	0032      	movs	r2, r6
   17908:	0029      	movs	r1, r5
   1790a:	4b04      	ldr	r3, [pc, #16]	; (1791c <vQueueWaitForMessageRestricted+0x5c>)
   1790c:	4798      	blx	r3
   1790e:	e7ec      	b.n	178ea <vQueueWaitForMessageRestricted+0x2a>
   17910:	00016601 	.word	0x00016601
   17914:	00016619 	.word	0x00016619
   17918:	00016951 	.word	0x00016951
   1791c:	0001832d 	.word	0x0001832d

00017920 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   17920:	4b08      	ldr	r3, [pc, #32]	; (17944 <prvResetNextTaskUnblockTime+0x24>)
   17922:	681b      	ldr	r3, [r3, #0]
   17924:	681b      	ldr	r3, [r3, #0]
   17926:	2b00      	cmp	r3, #0
   17928:	d007      	beq.n	1793a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1792a:	4b06      	ldr	r3, [pc, #24]	; (17944 <prvResetNextTaskUnblockTime+0x24>)
   1792c:	681b      	ldr	r3, [r3, #0]
   1792e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   17930:	68db      	ldr	r3, [r3, #12]
   17932:	685a      	ldr	r2, [r3, #4]
   17934:	4b04      	ldr	r3, [pc, #16]	; (17948 <prvResetNextTaskUnblockTime+0x28>)
   17936:	601a      	str	r2, [r3, #0]
	}
}
   17938:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
   1793a:	2201      	movs	r2, #1
   1793c:	4252      	negs	r2, r2
   1793e:	4b02      	ldr	r3, [pc, #8]	; (17948 <prvResetNextTaskUnblockTime+0x28>)
   17940:	601a      	str	r2, [r3, #0]
   17942:	e7f9      	b.n	17938 <prvResetNextTaskUnblockTime+0x18>
   17944:	20003bac 	.word	0x20003bac
   17948:	20003c5c 	.word	0x20003c5c

0001794c <prvIdleTask>:
{
   1794c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1794e:	46d6      	mov	lr, sl
   17950:	464f      	mov	r7, r9
   17952:	4646      	mov	r6, r8
   17954:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17956:	4b14      	ldr	r3, [pc, #80]	; (179a8 <prvIdleTask+0x5c>)
   17958:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
   1795a:	4b14      	ldr	r3, [pc, #80]	; (179ac <prvIdleTask+0x60>)
   1795c:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1795e:	4f14      	ldr	r7, [pc, #80]	; (179b0 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17960:	4b14      	ldr	r3, [pc, #80]	; (179b4 <prvIdleTask+0x68>)
   17962:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17964:	464b      	mov	r3, r9
   17966:	681b      	ldr	r3, [r3, #0]
   17968:	2b00      	cmp	r3, #0
   1796a:	d016      	beq.n	1799a <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
   1796c:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1796e:	68fb      	ldr	r3, [r7, #12]
   17970:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17972:	1d28      	adds	r0, r5, #4
   17974:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
   17976:	4a10      	ldr	r2, [pc, #64]	; (179b8 <prvIdleTask+0x6c>)
   17978:	6813      	ldr	r3, [r2, #0]
   1797a:	3b01      	subs	r3, #1
   1797c:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   1797e:	4c0a      	ldr	r4, [pc, #40]	; (179a8 <prvIdleTask+0x5c>)
   17980:	6823      	ldr	r3, [r4, #0]
   17982:	3b01      	subs	r3, #1
   17984:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
   17986:	4b0d      	ldr	r3, [pc, #52]	; (179bc <prvIdleTask+0x70>)
   17988:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   1798a:	6b28      	ldr	r0, [r5, #48]	; 0x30
   1798c:	4e0c      	ldr	r6, [pc, #48]	; (179c0 <prvIdleTask+0x74>)
   1798e:	47b0      	blx	r6
			vPortFree( pxTCB );
   17990:	0028      	movs	r0, r5
   17992:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   17994:	6823      	ldr	r3, [r4, #0]
   17996:	2b00      	cmp	r3, #0
   17998:	d1e8      	bne.n	1796c <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1799a:	4b0a      	ldr	r3, [pc, #40]	; (179c4 <prvIdleTask+0x78>)
   1799c:	681b      	ldr	r3, [r3, #0]
   1799e:	2b01      	cmp	r3, #1
   179a0:	d9e0      	bls.n	17964 <prvIdleTask+0x18>
				taskYIELD();
   179a2:	4b09      	ldr	r3, [pc, #36]	; (179c8 <prvIdleTask+0x7c>)
   179a4:	4798      	blx	r3
   179a6:	e7dd      	b.n	17964 <prvIdleTask+0x18>
   179a8:	20003c1c 	.word	0x20003c1c
   179ac:	00016601 	.word	0x00016601
   179b0:	20003c90 	.word	0x20003c90
   179b4:	000164d3 	.word	0x000164d3
   179b8:	20003c18 	.word	0x20003c18
   179bc:	00016619 	.word	0x00016619
   179c0:	00016755 	.word	0x00016755
   179c4:	20003bb4 	.word	0x20003bb4
   179c8:	000165f1 	.word	0x000165f1

000179cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   179cc:	b570      	push	{r4, r5, r6, lr}
   179ce:	0004      	movs	r4, r0
   179d0:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   179d2:	4b17      	ldr	r3, [pc, #92]	; (17a30 <prvAddCurrentTaskToDelayedList+0x64>)
   179d4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   179d6:	4b17      	ldr	r3, [pc, #92]	; (17a34 <prvAddCurrentTaskToDelayedList+0x68>)
   179d8:	6818      	ldr	r0, [r3, #0]
   179da:	3004      	adds	r0, #4
   179dc:	4b16      	ldr	r3, [pc, #88]	; (17a38 <prvAddCurrentTaskToDelayedList+0x6c>)
   179de:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   179e0:	1c63      	adds	r3, r4, #1
   179e2:	d013      	beq.n	17a0c <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
   179e4:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   179e6:	4b13      	ldr	r3, [pc, #76]	; (17a34 <prvAddCurrentTaskToDelayedList+0x68>)
   179e8:	681b      	ldr	r3, [r3, #0]
   179ea:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
   179ec:	42a6      	cmp	r6, r4
   179ee:	d816      	bhi.n	17a1e <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   179f0:	4b12      	ldr	r3, [pc, #72]	; (17a3c <prvAddCurrentTaskToDelayedList+0x70>)
   179f2:	6818      	ldr	r0, [r3, #0]
   179f4:	4b0f      	ldr	r3, [pc, #60]	; (17a34 <prvAddCurrentTaskToDelayedList+0x68>)
   179f6:	6819      	ldr	r1, [r3, #0]
   179f8:	3104      	adds	r1, #4
   179fa:	4b11      	ldr	r3, [pc, #68]	; (17a40 <prvAddCurrentTaskToDelayedList+0x74>)
   179fc:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
   179fe:	4b11      	ldr	r3, [pc, #68]	; (17a44 <prvAddCurrentTaskToDelayedList+0x78>)
   17a00:	681b      	ldr	r3, [r3, #0]
   17a02:	429c      	cmp	r4, r3
   17a04:	d212      	bcs.n	17a2c <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
   17a06:	4b0f      	ldr	r3, [pc, #60]	; (17a44 <prvAddCurrentTaskToDelayedList+0x78>)
   17a08:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   17a0a:	e00f      	b.n	17a2c <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   17a0c:	2d00      	cmp	r5, #0
   17a0e:	d0e9      	beq.n	179e4 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17a10:	4b08      	ldr	r3, [pc, #32]	; (17a34 <prvAddCurrentTaskToDelayedList+0x68>)
   17a12:	6819      	ldr	r1, [r3, #0]
   17a14:	3104      	adds	r1, #4
   17a16:	480c      	ldr	r0, [pc, #48]	; (17a48 <prvAddCurrentTaskToDelayedList+0x7c>)
   17a18:	4b0c      	ldr	r3, [pc, #48]	; (17a4c <prvAddCurrentTaskToDelayedList+0x80>)
   17a1a:	4798      	blx	r3
   17a1c:	e006      	b.n	17a2c <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   17a1e:	4b0c      	ldr	r3, [pc, #48]	; (17a50 <prvAddCurrentTaskToDelayedList+0x84>)
   17a20:	6818      	ldr	r0, [r3, #0]
   17a22:	4b04      	ldr	r3, [pc, #16]	; (17a34 <prvAddCurrentTaskToDelayedList+0x68>)
   17a24:	6819      	ldr	r1, [r3, #0]
   17a26:	3104      	adds	r1, #4
   17a28:	4b05      	ldr	r3, [pc, #20]	; (17a40 <prvAddCurrentTaskToDelayedList+0x74>)
   17a2a:	4798      	blx	r3
}
   17a2c:	bd70      	pop	{r4, r5, r6, pc}
   17a2e:	46c0      	nop			; (mov r8, r8)
   17a30:	20003ca4 	.word	0x20003ca4
   17a34:	20003ba8 	.word	0x20003ba8
   17a38:	000164d3 	.word	0x000164d3
   17a3c:	20003bac 	.word	0x20003bac
   17a40:	000164a5 	.word	0x000164a5
   17a44:	20003c5c 	.word	0x20003c5c
   17a48:	20003c7c 	.word	0x20003c7c
   17a4c:	0001648d 	.word	0x0001648d
   17a50:	20003bb0 	.word	0x20003bb0

00017a54 <xTaskCreate>:
	{
   17a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a56:	46c6      	mov	lr, r8
   17a58:	b500      	push	{lr}
   17a5a:	b084      	sub	sp, #16
   17a5c:	9001      	str	r0, [sp, #4]
   17a5e:	000d      	movs	r5, r1
   17a60:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17a62:	0097      	lsls	r7, r2, #2
   17a64:	0038      	movs	r0, r7
   17a66:	4b82      	ldr	r3, [pc, #520]	; (17c70 <xTaskCreate+0x21c>)
   17a68:	4798      	blx	r3
   17a6a:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
   17a6c:	d100      	bne.n	17a70 <xTaskCreate+0x1c>
   17a6e:	e0b9      	b.n	17be4 <xTaskCreate+0x190>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   17a70:	2054      	movs	r0, #84	; 0x54
   17a72:	4b7f      	ldr	r3, [pc, #508]	; (17c70 <xTaskCreate+0x21c>)
   17a74:	4798      	blx	r3
   17a76:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
   17a78:	d100      	bne.n	17a7c <xTaskCreate+0x28>
   17a7a:	e0b0      	b.n	17bde <xTaskCreate+0x18a>
					pxNewTCB->pxStack = pxStack;
   17a7c:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   17a7e:	003a      	movs	r2, r7
   17a80:	21a5      	movs	r1, #165	; 0xa5
   17a82:	0030      	movs	r0, r6
   17a84:	4b7b      	ldr	r3, [pc, #492]	; (17c74 <xTaskCreate+0x220>)
   17a86:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   17a88:	1f3a      	subs	r2, r7, #4
   17a8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17a8c:	469c      	mov	ip, r3
   17a8e:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   17a90:	2307      	movs	r3, #7
   17a92:	439a      	bics	r2, r3
   17a94:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   17a96:	782a      	ldrb	r2, [r5, #0]
   17a98:	332d      	adds	r3, #45	; 0x2d
   17a9a:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
   17a9c:	782b      	ldrb	r3, [r5, #0]
   17a9e:	2b00      	cmp	r3, #0
   17aa0:	d00d      	beq.n	17abe <xTaskCreate+0x6a>
   17aa2:	3501      	adds	r5, #1
   17aa4:	0023      	movs	r3, r4
   17aa6:	3335      	adds	r3, #53	; 0x35
   17aa8:	0020      	movs	r0, r4
   17aaa:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   17aac:	782a      	ldrb	r2, [r5, #0]
   17aae:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
   17ab0:	782a      	ldrb	r2, [r5, #0]
   17ab2:	2a00      	cmp	r2, #0
   17ab4:	d003      	beq.n	17abe <xTaskCreate+0x6a>
   17ab6:	3501      	adds	r5, #1
   17ab8:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   17aba:	4283      	cmp	r3, r0
   17abc:	d1f6      	bne.n	17aac <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   17abe:	2200      	movs	r2, #0
   17ac0:	233b      	movs	r3, #59	; 0x3b
   17ac2:	54e2      	strb	r2, [r4, r3]
   17ac4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   17ac6:	2f04      	cmp	r7, #4
   17ac8:	d900      	bls.n	17acc <xTaskCreate+0x78>
   17aca:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
   17acc:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   17ace:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   17ad0:	2600      	movs	r6, #0
   17ad2:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   17ad4:	1d23      	adds	r3, r4, #4
   17ad6:	9303      	str	r3, [sp, #12]
   17ad8:	0018      	movs	r0, r3
   17ada:	4d67      	ldr	r5, [pc, #412]	; (17c78 <xTaskCreate+0x224>)
   17adc:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   17ade:	0020      	movs	r0, r4
   17ae0:	3018      	adds	r0, #24
   17ae2:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   17ae4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17ae6:	2305      	movs	r3, #5
   17ae8:	1bdb      	subs	r3, r3, r7
   17aea:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   17aec:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   17aee:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   17af0:	2350      	movs	r3, #80	; 0x50
   17af2:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   17af4:	9a02      	ldr	r2, [sp, #8]
   17af6:	9901      	ldr	r1, [sp, #4]
   17af8:	4640      	mov	r0, r8
   17afa:	4b60      	ldr	r3, [pc, #384]	; (17c7c <xTaskCreate+0x228>)
   17afc:	4798      	blx	r3
   17afe:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   17b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17b02:	2b00      	cmp	r3, #0
   17b04:	d000      	beq.n	17b08 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   17b06:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
   17b08:	4b5d      	ldr	r3, [pc, #372]	; (17c80 <xTaskCreate+0x22c>)
   17b0a:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   17b0c:	4a5d      	ldr	r2, [pc, #372]	; (17c84 <xTaskCreate+0x230>)
   17b0e:	6813      	ldr	r3, [r2, #0]
   17b10:	3301      	adds	r3, #1
   17b12:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   17b14:	4b5c      	ldr	r3, [pc, #368]	; (17c88 <xTaskCreate+0x234>)
   17b16:	681b      	ldr	r3, [r3, #0]
   17b18:	2b00      	cmp	r3, #0
   17b1a:	d066      	beq.n	17bea <xTaskCreate+0x196>
			if( xSchedulerRunning == pdFALSE )
   17b1c:	4b5b      	ldr	r3, [pc, #364]	; (17c8c <xTaskCreate+0x238>)
   17b1e:	681b      	ldr	r3, [r3, #0]
   17b20:	2b00      	cmp	r3, #0
   17b22:	d107      	bne.n	17b34 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   17b24:	4b58      	ldr	r3, [pc, #352]	; (17c88 <xTaskCreate+0x234>)
   17b26:	681b      	ldr	r3, [r3, #0]
   17b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17b2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17b2c:	4293      	cmp	r3, r2
   17b2e:	d801      	bhi.n	17b34 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
   17b30:	4b55      	ldr	r3, [pc, #340]	; (17c88 <xTaskCreate+0x234>)
   17b32:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
   17b34:	4a56      	ldr	r2, [pc, #344]	; (17c90 <xTaskCreate+0x23c>)
   17b36:	6813      	ldr	r3, [r2, #0]
   17b38:	3301      	adds	r3, #1
   17b3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   17b3c:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
   17b3e:	2003      	movs	r0, #3
   17b40:	4b54      	ldr	r3, [pc, #336]	; (17c94 <xTaskCreate+0x240>)
   17b42:	4798      	blx	r3
   17b44:	b281      	uxth	r1, r0
   17b46:	0020      	movs	r0, r4
   17b48:	4b53      	ldr	r3, [pc, #332]	; (17c98 <xTaskCreate+0x244>)
   17b4a:	4798      	blx	r3
   17b4c:	4b53      	ldr	r3, [pc, #332]	; (17c9c <xTaskCreate+0x248>)
   17b4e:	8819      	ldrh	r1, [r3, #0]
   17b50:	0020      	movs	r0, r4
   17b52:	4b53      	ldr	r3, [pc, #332]	; (17ca0 <xTaskCreate+0x24c>)
   17b54:	4798      	blx	r3
   17b56:	0020      	movs	r0, r4
   17b58:	4e52      	ldr	r6, [pc, #328]	; (17ca4 <xTaskCreate+0x250>)
   17b5a:	47b0      	blx	r6
   17b5c:	0022      	movs	r2, r4
   17b5e:	3234      	adds	r2, #52	; 0x34
   17b60:	b2c1      	uxtb	r1, r0
   17b62:	2003      	movs	r0, #3
   17b64:	4b50      	ldr	r3, [pc, #320]	; (17ca8 <xTaskCreate+0x254>)
   17b66:	4798      	blx	r3
   17b68:	0020      	movs	r0, r4
   17b6a:	47b0      	blx	r6
   17b6c:	232c      	movs	r3, #44	; 0x2c
   17b6e:	18e3      	adds	r3, r4, r3
   17b70:	781a      	ldrb	r2, [r3, #0]
   17b72:	b2c1      	uxtb	r1, r0
   17b74:	2003      	movs	r0, #3
   17b76:	4b4d      	ldr	r3, [pc, #308]	; (17cac <xTaskCreate+0x258>)
   17b78:	4798      	blx	r3
   17b7a:	4b4d      	ldr	r3, [pc, #308]	; (17cb0 <xTaskCreate+0x25c>)
   17b7c:	4798      	blx	r3
   17b7e:	4b4d      	ldr	r3, [pc, #308]	; (17cb4 <xTaskCreate+0x260>)
   17b80:	4798      	blx	r3
   17b82:	4b4d      	ldr	r3, [pc, #308]	; (17cb8 <xTaskCreate+0x264>)
   17b84:	881b      	ldrh	r3, [r3, #0]
   17b86:	4203      	tst	r3, r0
   17b88:	d157      	bne.n	17c3a <xTaskCreate+0x1e6>
   17b8a:	0020      	movs	r0, r4
   17b8c:	4b4b      	ldr	r3, [pc, #300]	; (17cbc <xTaskCreate+0x268>)
   17b8e:	4798      	blx	r3
		prvAddTaskToReadyList( pxNewTCB );
   17b90:	0020      	movs	r0, r4
   17b92:	4b48      	ldr	r3, [pc, #288]	; (17cb4 <xTaskCreate+0x260>)
   17b94:	4798      	blx	r3
   17b96:	4b48      	ldr	r3, [pc, #288]	; (17cb8 <xTaskCreate+0x264>)
   17b98:	881b      	ldrh	r3, [r3, #0]
   17b9a:	4203      	tst	r3, r0
   17b9c:	d15d      	bne.n	17c5a <xTaskCreate+0x206>
   17b9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17ba0:	4a47      	ldr	r2, [pc, #284]	; (17cc0 <xTaskCreate+0x26c>)
   17ba2:	6812      	ldr	r2, [r2, #0]
   17ba4:	4293      	cmp	r3, r2
   17ba6:	d901      	bls.n	17bac <xTaskCreate+0x158>
   17ba8:	4a45      	ldr	r2, [pc, #276]	; (17cc0 <xTaskCreate+0x26c>)
   17baa:	6013      	str	r3, [r2, #0]
   17bac:	0098      	lsls	r0, r3, #2
   17bae:	18c0      	adds	r0, r0, r3
   17bb0:	0080      	lsls	r0, r0, #2
   17bb2:	4b44      	ldr	r3, [pc, #272]	; (17cc4 <xTaskCreate+0x270>)
   17bb4:	1818      	adds	r0, r3, r0
   17bb6:	9903      	ldr	r1, [sp, #12]
   17bb8:	4b43      	ldr	r3, [pc, #268]	; (17cc8 <xTaskCreate+0x274>)
   17bba:	4798      	blx	r3
	taskEXIT_CRITICAL();
   17bbc:	4b43      	ldr	r3, [pc, #268]	; (17ccc <xTaskCreate+0x278>)
   17bbe:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   17bc0:	4b32      	ldr	r3, [pc, #200]	; (17c8c <xTaskCreate+0x238>)
   17bc2:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
   17bc4:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
   17bc6:	2b00      	cmp	r3, #0
   17bc8:	d005      	beq.n	17bd6 <xTaskCreate+0x182>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   17bca:	4b2f      	ldr	r3, [pc, #188]	; (17c88 <xTaskCreate+0x234>)
   17bcc:	681b      	ldr	r3, [r3, #0]
   17bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17bd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17bd2:	429a      	cmp	r2, r3
   17bd4:	d348      	bcc.n	17c68 <xTaskCreate+0x214>
	}
   17bd6:	b004      	add	sp, #16
   17bd8:	bc04      	pop	{r2}
   17bda:	4690      	mov	r8, r2
   17bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
   17bde:	0030      	movs	r0, r6
   17be0:	4b3b      	ldr	r3, [pc, #236]	; (17cd0 <xTaskCreate+0x27c>)
   17be2:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   17be4:	2001      	movs	r0, #1
   17be6:	4240      	negs	r0, r0
   17be8:	e7f5      	b.n	17bd6 <xTaskCreate+0x182>
			pxCurrentTCB = pxNewTCB;
   17bea:	4b27      	ldr	r3, [pc, #156]	; (17c88 <xTaskCreate+0x234>)
   17bec:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   17bee:	6813      	ldr	r3, [r2, #0]
   17bf0:	2b01      	cmp	r3, #1
   17bf2:	d19f      	bne.n	17b34 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   17bf4:	4f33      	ldr	r7, [pc, #204]	; (17cc4 <xTaskCreate+0x270>)
   17bf6:	0038      	movs	r0, r7
   17bf8:	4e36      	ldr	r6, [pc, #216]	; (17cd4 <xTaskCreate+0x280>)
   17bfa:	47b0      	blx	r6
   17bfc:	0038      	movs	r0, r7
   17bfe:	3014      	adds	r0, #20
   17c00:	47b0      	blx	r6
   17c02:	0038      	movs	r0, r7
   17c04:	3028      	adds	r0, #40	; 0x28
   17c06:	47b0      	blx	r6
   17c08:	0038      	movs	r0, r7
   17c0a:	303c      	adds	r0, #60	; 0x3c
   17c0c:	47b0      	blx	r6
   17c0e:	0038      	movs	r0, r7
   17c10:	3050      	adds	r0, #80	; 0x50
   17c12:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
   17c14:	4b30      	ldr	r3, [pc, #192]	; (17cd8 <xTaskCreate+0x284>)
   17c16:	4698      	mov	r8, r3
   17c18:	0018      	movs	r0, r3
   17c1a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
   17c1c:	4f2f      	ldr	r7, [pc, #188]	; (17cdc <xTaskCreate+0x288>)
   17c1e:	0038      	movs	r0, r7
   17c20:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
   17c22:	482f      	ldr	r0, [pc, #188]	; (17ce0 <xTaskCreate+0x28c>)
   17c24:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
   17c26:	482f      	ldr	r0, [pc, #188]	; (17ce4 <xTaskCreate+0x290>)
   17c28:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
   17c2a:	482f      	ldr	r0, [pc, #188]	; (17ce8 <xTaskCreate+0x294>)
   17c2c:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
   17c2e:	4b2f      	ldr	r3, [pc, #188]	; (17cec <xTaskCreate+0x298>)
   17c30:	4642      	mov	r2, r8
   17c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   17c34:	4b2e      	ldr	r3, [pc, #184]	; (17cf0 <xTaskCreate+0x29c>)
   17c36:	601f      	str	r7, [r3, #0]
   17c38:	e77c      	b.n	17b34 <xTaskCreate+0xe0>
		traceTASK_CREATE( pxNewTCB );
   17c3a:	0020      	movs	r0, r4
   17c3c:	4b1d      	ldr	r3, [pc, #116]	; (17cb4 <xTaskCreate+0x260>)
   17c3e:	4798      	blx	r3
   17c40:	4b1d      	ldr	r3, [pc, #116]	; (17cb8 <xTaskCreate+0x264>)
   17c42:	881b      	ldrh	r3, [r3, #0]
   17c44:	4203      	tst	r3, r0
   17c46:	d0a0      	beq.n	17b8a <xTaskCreate+0x136>
   17c48:	0020      	movs	r0, r4
   17c4a:	4b16      	ldr	r3, [pc, #88]	; (17ca4 <xTaskCreate+0x250>)
   17c4c:	4798      	blx	r3
   17c4e:	b2c2      	uxtb	r2, r0
   17c50:	2103      	movs	r1, #3
   17c52:	201b      	movs	r0, #27
   17c54:	4b27      	ldr	r3, [pc, #156]	; (17cf4 <xTaskCreate+0x2a0>)
   17c56:	4798      	blx	r3
   17c58:	e797      	b.n	17b8a <xTaskCreate+0x136>
		prvAddTaskToReadyList( pxNewTCB );
   17c5a:	0020      	movs	r0, r4
   17c5c:	4b11      	ldr	r3, [pc, #68]	; (17ca4 <xTaskCreate+0x250>)
   17c5e:	4798      	blx	r3
   17c60:	b2c0      	uxtb	r0, r0
   17c62:	4b25      	ldr	r3, [pc, #148]	; (17cf8 <xTaskCreate+0x2a4>)
   17c64:	4798      	blx	r3
   17c66:	e79a      	b.n	17b9e <xTaskCreate+0x14a>
			taskYIELD_IF_USING_PREEMPTION();
   17c68:	4b24      	ldr	r3, [pc, #144]	; (17cfc <xTaskCreate+0x2a8>)
   17c6a:	4798      	blx	r3
			xReturn = pdPASS;
   17c6c:	2001      	movs	r0, #1
   17c6e:	e7b2      	b.n	17bd6 <xTaskCreate+0x182>
   17c70:	000166c5 	.word	0x000166c5
   17c74:	0002624b 	.word	0x0002624b
   17c78:	00016487 	.word	0x00016487
   17c7c:	00016555 	.word	0x00016555
   17c80:	00016601 	.word	0x00016601
   17c84:	20003c18 	.word	0x20003c18
   17c88:	20003ba8 	.word	0x20003ba8
   17c8c:	20003c78 	.word	0x20003c78
   17c90:	20003c28 	.word	0x20003c28
   17c94:	00015bf9 	.word	0x00015bf9
   17c98:	00015265 	.word	0x00015265
   17c9c:	200000aa 	.word	0x200000aa
   17ca0:	00015285 	.word	0x00015285
   17ca4:	00015245 	.word	0x00015245
   17ca8:	00015ccd 	.word	0x00015ccd
   17cac:	00015aad 	.word	0x00015aad
   17cb0:	00015409 	.word	0x00015409
   17cb4:	00015255 	.word	0x00015255
   17cb8:	200000ac 	.word	0x200000ac
   17cbc:	0001530d 	.word	0x0001530d
   17cc0:	20003c2c 	.word	0x20003c2c
   17cc4:	20003bb4 	.word	0x20003bb4
   17cc8:	0001648d 	.word	0x0001648d
   17ccc:	00016619 	.word	0x00016619
   17cd0:	00016755 	.word	0x00016755
   17cd4:	00016471 	.word	0x00016471
   17cd8:	20003c30 	.word	0x20003c30
   17cdc:	20003c44 	.word	0x20003c44
   17ce0:	20003c64 	.word	0x20003c64
   17ce4:	20003c90 	.word	0x20003c90
   17ce8:	20003c7c 	.word	0x20003c7c
   17cec:	20003bac 	.word	0x20003bac
   17cf0:	20003bb0 	.word	0x20003bb0
   17cf4:	0001608d 	.word	0x0001608d
   17cf8:	00015f25 	.word	0x00015f25
   17cfc:	000165f1 	.word	0x000165f1

00017d00 <vTaskStartScheduler>:
{
   17d00:	b510      	push	{r4, lr}
   17d02:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
   17d04:	4b11      	ldr	r3, [pc, #68]	; (17d4c <vTaskStartScheduler+0x4c>)
   17d06:	9301      	str	r3, [sp, #4]
   17d08:	2300      	movs	r3, #0
   17d0a:	9300      	str	r3, [sp, #0]
   17d0c:	2264      	movs	r2, #100	; 0x64
   17d0e:	4910      	ldr	r1, [pc, #64]	; (17d50 <vTaskStartScheduler+0x50>)
   17d10:	4810      	ldr	r0, [pc, #64]	; (17d54 <vTaskStartScheduler+0x54>)
   17d12:	4c11      	ldr	r4, [pc, #68]	; (17d58 <vTaskStartScheduler+0x58>)
   17d14:	47a0      	blx	r4
		if( xReturn == pdPASS )
   17d16:	2801      	cmp	r0, #1
   17d18:	d003      	beq.n	17d22 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   17d1a:	1c43      	adds	r3, r0, #1
   17d1c:	d013      	beq.n	17d46 <vTaskStartScheduler+0x46>
}
   17d1e:	b002      	add	sp, #8
   17d20:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   17d22:	4b0e      	ldr	r3, [pc, #56]	; (17d5c <vTaskStartScheduler+0x5c>)
   17d24:	4798      	blx	r3
	if( xReturn == pdPASS )
   17d26:	2801      	cmp	r0, #1
   17d28:	d1f7      	bne.n	17d1a <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
   17d2a:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
   17d2c:	2201      	movs	r2, #1
   17d2e:	4252      	negs	r2, r2
   17d30:	4b0b      	ldr	r3, [pc, #44]	; (17d60 <vTaskStartScheduler+0x60>)
   17d32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   17d34:	3202      	adds	r2, #2
   17d36:	4b0b      	ldr	r3, [pc, #44]	; (17d64 <vTaskStartScheduler+0x64>)
   17d38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   17d3a:	2200      	movs	r2, #0
   17d3c:	4b0a      	ldr	r3, [pc, #40]	; (17d68 <vTaskStartScheduler+0x68>)
   17d3e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   17d40:	4b0a      	ldr	r3, [pc, #40]	; (17d6c <vTaskStartScheduler+0x6c>)
   17d42:	4798      	blx	r3
   17d44:	e7eb      	b.n	17d1e <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   17d46:	b672      	cpsid	i
   17d48:	e7fe      	b.n	17d48 <vTaskStartScheduler+0x48>
   17d4a:	46c0      	nop			; (mov r8, r8)
   17d4c:	20003c58 	.word	0x20003c58
   17d50:	000292d8 	.word	0x000292d8
   17d54:	0001794d 	.word	0x0001794d
   17d58:	00017a55 	.word	0x00017a55
   17d5c:	00018951 	.word	0x00018951
   17d60:	20003c5c 	.word	0x20003c5c
   17d64:	20003c78 	.word	0x20003c78
   17d68:	20003ca4 	.word	0x20003ca4
   17d6c:	00016579 	.word	0x00016579

00017d70 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   17d70:	4a02      	ldr	r2, [pc, #8]	; (17d7c <vTaskSuspendAll+0xc>)
   17d72:	6813      	ldr	r3, [r2, #0]
   17d74:	3301      	adds	r3, #1
   17d76:	6013      	str	r3, [r2, #0]
}
   17d78:	4770      	bx	lr
   17d7a:	46c0      	nop			; (mov r8, r8)
   17d7c:	20003c24 	.word	0x20003c24

00017d80 <xTaskGetTickCount>:
		xTicks = xTickCount;
   17d80:	4b01      	ldr	r3, [pc, #4]	; (17d88 <xTaskGetTickCount+0x8>)
   17d82:	6818      	ldr	r0, [r3, #0]
}
   17d84:	4770      	bx	lr
   17d86:	46c0      	nop			; (mov r8, r8)
   17d88:	20003ca4 	.word	0x20003ca4

00017d8c <xTaskIncrementTick>:
{
   17d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d8e:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
   17d90:	4b4c      	ldr	r3, [pc, #304]	; (17ec4 <xTaskIncrementTick+0x138>)
   17d92:	681b      	ldr	r3, [r3, #0]
   17d94:	2b01      	cmp	r3, #1
   17d96:	d003      	beq.n	17da0 <xTaskIncrementTick+0x14>
   17d98:	4b4b      	ldr	r3, [pc, #300]	; (17ec8 <xTaskIncrementTick+0x13c>)
   17d9a:	681b      	ldr	r3, [r3, #0]
   17d9c:	2b00      	cmp	r3, #0
   17d9e:	d106      	bne.n	17dae <xTaskIncrementTick+0x22>
   17da0:	4a4a      	ldr	r2, [pc, #296]	; (17ecc <xTaskIncrementTick+0x140>)
   17da2:	6813      	ldr	r3, [r2, #0]
   17da4:	3301      	adds	r3, #1
   17da6:	6013      	str	r3, [r2, #0]
   17da8:	2000      	movs	r0, #0
   17daa:	4b49      	ldr	r3, [pc, #292]	; (17ed0 <xTaskIncrementTick+0x144>)
   17dac:	4798      	blx	r3
   17dae:	4b45      	ldr	r3, [pc, #276]	; (17ec4 <xTaskIncrementTick+0x138>)
   17db0:	681b      	ldr	r3, [r3, #0]
   17db2:	2b00      	cmp	r3, #0
   17db4:	d010      	beq.n	17dd8 <xTaskIncrementTick+0x4c>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   17db6:	4b43      	ldr	r3, [pc, #268]	; (17ec4 <xTaskIncrementTick+0x138>)
   17db8:	681b      	ldr	r3, [r3, #0]
   17dba:	2b00      	cmp	r3, #0
   17dbc:	d175      	bne.n	17eaa <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   17dbe:	4b45      	ldr	r3, [pc, #276]	; (17ed4 <xTaskIncrementTick+0x148>)
   17dc0:	681e      	ldr	r6, [r3, #0]
   17dc2:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
   17dc4:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   17dc6:	2e00      	cmp	r6, #0
   17dc8:	d119      	bne.n	17dfe <xTaskIncrementTick+0x72>
			taskSWITCH_DELAYED_LISTS();
   17dca:	4b43      	ldr	r3, [pc, #268]	; (17ed8 <xTaskIncrementTick+0x14c>)
   17dcc:	681b      	ldr	r3, [r3, #0]
   17dce:	681b      	ldr	r3, [r3, #0]
   17dd0:	2b00      	cmp	r3, #0
   17dd2:	d008      	beq.n	17de6 <xTaskIncrementTick+0x5a>
   17dd4:	b672      	cpsid	i
   17dd6:	e7fe      	b.n	17dd6 <xTaskIncrementTick+0x4a>
	traceTASK_INCREMENT_TICK( xTickCount );
   17dd8:	4b3e      	ldr	r3, [pc, #248]	; (17ed4 <xTaskIncrementTick+0x148>)
   17dda:	6819      	ldr	r1, [r3, #0]
   17ddc:	3101      	adds	r1, #1
   17dde:	2003      	movs	r0, #3
   17de0:	4b3e      	ldr	r3, [pc, #248]	; (17edc <xTaskIncrementTick+0x150>)
   17de2:	4798      	blx	r3
   17de4:	e7e7      	b.n	17db6 <xTaskIncrementTick+0x2a>
			taskSWITCH_DELAYED_LISTS();
   17de6:	4a3c      	ldr	r2, [pc, #240]	; (17ed8 <xTaskIncrementTick+0x14c>)
   17de8:	6811      	ldr	r1, [r2, #0]
   17dea:	4b3d      	ldr	r3, [pc, #244]	; (17ee0 <xTaskIncrementTick+0x154>)
   17dec:	6818      	ldr	r0, [r3, #0]
   17dee:	6010      	str	r0, [r2, #0]
   17df0:	6019      	str	r1, [r3, #0]
   17df2:	4a3c      	ldr	r2, [pc, #240]	; (17ee4 <xTaskIncrementTick+0x158>)
   17df4:	6813      	ldr	r3, [r2, #0]
   17df6:	3301      	adds	r3, #1
   17df8:	6013      	str	r3, [r2, #0]
   17dfa:	4b3b      	ldr	r3, [pc, #236]	; (17ee8 <xTaskIncrementTick+0x15c>)
   17dfc:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   17dfe:	4b3b      	ldr	r3, [pc, #236]	; (17eec <xTaskIncrementTick+0x160>)
   17e00:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
   17e02:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
   17e04:	429e      	cmp	r6, r3
   17e06:	d33a      	bcc.n	17e7e <xTaskIncrementTick+0xf2>
   17e08:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   17e0a:	4f33      	ldr	r7, [pc, #204]	; (17ed8 <xTaskIncrementTick+0x14c>)
   17e0c:	683b      	ldr	r3, [r7, #0]
   17e0e:	681b      	ldr	r3, [r3, #0]
   17e10:	2b00      	cmp	r3, #0
   17e12:	d030      	beq.n	17e76 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   17e14:	4b30      	ldr	r3, [pc, #192]	; (17ed8 <xTaskIncrementTick+0x14c>)
   17e16:	681b      	ldr	r3, [r3, #0]
   17e18:	68db      	ldr	r3, [r3, #12]
   17e1a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   17e1c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
   17e1e:	429e      	cmp	r6, r3
   17e20:	d339      	bcc.n	17e96 <xTaskIncrementTick+0x10a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17e22:	1d23      	adds	r3, r4, #4
   17e24:	9301      	str	r3, [sp, #4]
   17e26:	0018      	movs	r0, r3
   17e28:	4b31      	ldr	r3, [pc, #196]	; (17ef0 <xTaskIncrementTick+0x164>)
   17e2a:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   17e2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17e2e:	2b00      	cmp	r3, #0
   17e30:	d003      	beq.n	17e3a <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   17e32:	0020      	movs	r0, r4
   17e34:	3018      	adds	r0, #24
   17e36:	4b2e      	ldr	r3, [pc, #184]	; (17ef0 <xTaskIncrementTick+0x164>)
   17e38:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   17e3a:	0020      	movs	r0, r4
   17e3c:	4b2d      	ldr	r3, [pc, #180]	; (17ef4 <xTaskIncrementTick+0x168>)
   17e3e:	4798      	blx	r3
   17e40:	4b2d      	ldr	r3, [pc, #180]	; (17ef8 <xTaskIncrementTick+0x16c>)
   17e42:	881b      	ldrh	r3, [r3, #0]
   17e44:	4203      	tst	r3, r0
   17e46:	d129      	bne.n	17e9c <xTaskIncrementTick+0x110>
   17e48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17e4a:	4a2c      	ldr	r2, [pc, #176]	; (17efc <xTaskIncrementTick+0x170>)
   17e4c:	6812      	ldr	r2, [r2, #0]
   17e4e:	4293      	cmp	r3, r2
   17e50:	d901      	bls.n	17e56 <xTaskIncrementTick+0xca>
   17e52:	4a2a      	ldr	r2, [pc, #168]	; (17efc <xTaskIncrementTick+0x170>)
   17e54:	6013      	str	r3, [r2, #0]
   17e56:	0098      	lsls	r0, r3, #2
   17e58:	18c0      	adds	r0, r0, r3
   17e5a:	0080      	lsls	r0, r0, #2
   17e5c:	4b28      	ldr	r3, [pc, #160]	; (17f00 <xTaskIncrementTick+0x174>)
   17e5e:	1818      	adds	r0, r3, r0
   17e60:	9901      	ldr	r1, [sp, #4]
   17e62:	4b28      	ldr	r3, [pc, #160]	; (17f04 <xTaskIncrementTick+0x178>)
   17e64:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   17e66:	4b28      	ldr	r3, [pc, #160]	; (17f08 <xTaskIncrementTick+0x17c>)
   17e68:	681b      	ldr	r3, [r3, #0]
   17e6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17e6e:	429a      	cmp	r2, r3
   17e70:	d3cc      	bcc.n	17e0c <xTaskIncrementTick+0x80>
							xSwitchRequired = pdTRUE;
   17e72:	2501      	movs	r5, #1
   17e74:	e7ca      	b.n	17e0c <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17e76:	2201      	movs	r2, #1
   17e78:	4252      	negs	r2, r2
   17e7a:	4b1c      	ldr	r3, [pc, #112]	; (17eec <xTaskIncrementTick+0x160>)
   17e7c:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   17e7e:	4b22      	ldr	r3, [pc, #136]	; (17f08 <xTaskIncrementTick+0x17c>)
   17e80:	681b      	ldr	r3, [r3, #0]
   17e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17e84:	0093      	lsls	r3, r2, #2
   17e86:	189b      	adds	r3, r3, r2
   17e88:	009b      	lsls	r3, r3, #2
   17e8a:	4a1d      	ldr	r2, [pc, #116]	; (17f00 <xTaskIncrementTick+0x174>)
   17e8c:	589b      	ldr	r3, [r3, r2]
   17e8e:	2b01      	cmp	r3, #1
   17e90:	d910      	bls.n	17eb4 <xTaskIncrementTick+0x128>
				xSwitchRequired = pdTRUE;
   17e92:	2501      	movs	r5, #1
   17e94:	e00e      	b.n	17eb4 <xTaskIncrementTick+0x128>
						xNextTaskUnblockTime = xItemValue;
   17e96:	4a15      	ldr	r2, [pc, #84]	; (17eec <xTaskIncrementTick+0x160>)
   17e98:	6013      	str	r3, [r2, #0]
						break;
   17e9a:	e7f0      	b.n	17e7e <xTaskIncrementTick+0xf2>
					prvAddTaskToReadyList( pxTCB );
   17e9c:	0020      	movs	r0, r4
   17e9e:	4b1b      	ldr	r3, [pc, #108]	; (17f0c <xTaskIncrementTick+0x180>)
   17ea0:	4798      	blx	r3
   17ea2:	b2c0      	uxtb	r0, r0
   17ea4:	4b1a      	ldr	r3, [pc, #104]	; (17f10 <xTaskIncrementTick+0x184>)
   17ea6:	4798      	blx	r3
   17ea8:	e7ce      	b.n	17e48 <xTaskIncrementTick+0xbc>
		++uxPendedTicks;
   17eaa:	4a07      	ldr	r2, [pc, #28]	; (17ec8 <xTaskIncrementTick+0x13c>)
   17eac:	6813      	ldr	r3, [r2, #0]
   17eae:	3301      	adds	r3, #1
   17eb0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
   17eb2:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
   17eb4:	4b17      	ldr	r3, [pc, #92]	; (17f14 <xTaskIncrementTick+0x188>)
   17eb6:	681b      	ldr	r3, [r3, #0]
   17eb8:	2b00      	cmp	r3, #0
   17eba:	d000      	beq.n	17ebe <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
   17ebc:	2501      	movs	r5, #1
}
   17ebe:	0028      	movs	r0, r5
   17ec0:	b003      	add	sp, #12
   17ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ec4:	20003c24 	.word	0x20003c24
   17ec8:	20003c20 	.word	0x20003c20
   17ecc:	20000cb8 	.word	0x20000cb8
   17ed0:	00015d5d 	.word	0x00015d5d
   17ed4:	20003ca4 	.word	0x20003ca4
   17ed8:	20003bac 	.word	0x20003bac
   17edc:	00016229 	.word	0x00016229
   17ee0:	20003bb0 	.word	0x20003bb0
   17ee4:	20003c60 	.word	0x20003c60
   17ee8:	00017921 	.word	0x00017921
   17eec:	20003c5c 	.word	0x20003c5c
   17ef0:	000164d3 	.word	0x000164d3
   17ef4:	00015255 	.word	0x00015255
   17ef8:	200000ac 	.word	0x200000ac
   17efc:	20003c2c 	.word	0x20003c2c
   17f00:	20003bb4 	.word	0x20003bb4
   17f04:	0001648d 	.word	0x0001648d
   17f08:	20003ba8 	.word	0x20003ba8
   17f0c:	00015245 	.word	0x00015245
   17f10:	00015f25 	.word	0x00015f25
   17f14:	20003ca8 	.word	0x20003ca8

00017f18 <xTaskResumeAll>:
{
   17f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
   17f1a:	4b37      	ldr	r3, [pc, #220]	; (17ff8 <xTaskResumeAll+0xe0>)
   17f1c:	681b      	ldr	r3, [r3, #0]
   17f1e:	2b00      	cmp	r3, #0
   17f20:	d101      	bne.n	17f26 <xTaskResumeAll+0xe>
   17f22:	b672      	cpsid	i
   17f24:	e7fe      	b.n	17f24 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
   17f26:	4b35      	ldr	r3, [pc, #212]	; (17ffc <xTaskResumeAll+0xe4>)
   17f28:	4798      	blx	r3
		--uxSchedulerSuspended;
   17f2a:	4b33      	ldr	r3, [pc, #204]	; (17ff8 <xTaskResumeAll+0xe0>)
   17f2c:	681a      	ldr	r2, [r3, #0]
   17f2e:	3a01      	subs	r2, #1
   17f30:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   17f32:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
   17f34:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   17f36:	2b00      	cmp	r3, #0
   17f38:	d103      	bne.n	17f42 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   17f3a:	4b31      	ldr	r3, [pc, #196]	; (18000 <xTaskResumeAll+0xe8>)
   17f3c:	681b      	ldr	r3, [r3, #0]
   17f3e:	2b00      	cmp	r3, #0
   17f40:	d136      	bne.n	17fb0 <xTaskResumeAll+0x98>
	taskEXIT_CRITICAL();
   17f42:	4b30      	ldr	r3, [pc, #192]	; (18004 <xTaskResumeAll+0xec>)
   17f44:	4798      	blx	r3
}
   17f46:	0020      	movs	r0, r4
   17f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
   17f4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17f4c:	4a2e      	ldr	r2, [pc, #184]	; (18008 <xTaskResumeAll+0xf0>)
   17f4e:	6812      	ldr	r2, [r2, #0]
   17f50:	4293      	cmp	r3, r2
   17f52:	d901      	bls.n	17f58 <xTaskResumeAll+0x40>
   17f54:	4a2c      	ldr	r2, [pc, #176]	; (18008 <xTaskResumeAll+0xf0>)
   17f56:	6013      	str	r3, [r2, #0]
   17f58:	0098      	lsls	r0, r3, #2
   17f5a:	18c0      	adds	r0, r0, r3
   17f5c:	0080      	lsls	r0, r0, #2
   17f5e:	4b2b      	ldr	r3, [pc, #172]	; (1800c <xTaskResumeAll+0xf4>)
   17f60:	1818      	adds	r0, r3, r0
   17f62:	0031      	movs	r1, r6
   17f64:	4b2a      	ldr	r3, [pc, #168]	; (18010 <xTaskResumeAll+0xf8>)
   17f66:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   17f68:	4b2a      	ldr	r3, [pc, #168]	; (18014 <xTaskResumeAll+0xfc>)
   17f6a:	681b      	ldr	r3, [r3, #0]
   17f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17f6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17f70:	429a      	cmp	r2, r3
   17f72:	d302      	bcc.n	17f7a <xTaskResumeAll+0x62>
						xYieldPending = pdTRUE;
   17f74:	2201      	movs	r2, #1
   17f76:	4b28      	ldr	r3, [pc, #160]	; (18018 <xTaskResumeAll+0x100>)
   17f78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   17f7a:	682b      	ldr	r3, [r5, #0]
   17f7c:	2b00      	cmp	r3, #0
   17f7e:	d01a      	beq.n	17fb6 <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   17f80:	68fb      	ldr	r3, [r7, #12]
   17f82:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   17f84:	0020      	movs	r0, r4
   17f86:	3018      	adds	r0, #24
   17f88:	4b24      	ldr	r3, [pc, #144]	; (1801c <xTaskResumeAll+0x104>)
   17f8a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   17f8c:	1d26      	adds	r6, r4, #4
   17f8e:	0030      	movs	r0, r6
   17f90:	4b22      	ldr	r3, [pc, #136]	; (1801c <xTaskResumeAll+0x104>)
   17f92:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   17f94:	0020      	movs	r0, r4
   17f96:	4b22      	ldr	r3, [pc, #136]	; (18020 <xTaskResumeAll+0x108>)
   17f98:	4798      	blx	r3
   17f9a:	4b22      	ldr	r3, [pc, #136]	; (18024 <xTaskResumeAll+0x10c>)
   17f9c:	881b      	ldrh	r3, [r3, #0]
   17f9e:	4203      	tst	r3, r0
   17fa0:	d0d3      	beq.n	17f4a <xTaskResumeAll+0x32>
   17fa2:	0020      	movs	r0, r4
   17fa4:	4b20      	ldr	r3, [pc, #128]	; (18028 <xTaskResumeAll+0x110>)
   17fa6:	4798      	blx	r3
   17fa8:	b2c0      	uxtb	r0, r0
   17faa:	4b20      	ldr	r3, [pc, #128]	; (1802c <xTaskResumeAll+0x114>)
   17fac:	4798      	blx	r3
   17fae:	e7cc      	b.n	17f4a <xTaskResumeAll+0x32>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   17fb0:	4d1f      	ldr	r5, [pc, #124]	; (18030 <xTaskResumeAll+0x118>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   17fb2:	002f      	movs	r7, r5
   17fb4:	e7e1      	b.n	17f7a <xTaskResumeAll+0x62>
				if( pxTCB != NULL )
   17fb6:	2c00      	cmp	r4, #0
   17fb8:	d001      	beq.n	17fbe <xTaskResumeAll+0xa6>
					prvResetNextTaskUnblockTime();
   17fba:	4b1e      	ldr	r3, [pc, #120]	; (18034 <xTaskResumeAll+0x11c>)
   17fbc:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   17fbe:	4b1e      	ldr	r3, [pc, #120]	; (18038 <xTaskResumeAll+0x120>)
   17fc0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   17fc2:	2c00      	cmp	r4, #0
   17fc4:	d00e      	beq.n	17fe4 <xTaskResumeAll+0xcc>
							if( xTaskIncrementTick() != pdFALSE )
   17fc6:	4f1d      	ldr	r7, [pc, #116]	; (1803c <xTaskResumeAll+0x124>)
								xYieldPending = pdTRUE;
   17fc8:	4e13      	ldr	r6, [pc, #76]	; (18018 <xTaskResumeAll+0x100>)
   17fca:	2501      	movs	r5, #1
   17fcc:	e002      	b.n	17fd4 <xTaskResumeAll+0xbc>
							--uxPendedCounts;
   17fce:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   17fd0:	2c00      	cmp	r4, #0
   17fd2:	d004      	beq.n	17fde <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
   17fd4:	47b8      	blx	r7
   17fd6:	2800      	cmp	r0, #0
   17fd8:	d0f9      	beq.n	17fce <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
   17fda:	6035      	str	r5, [r6, #0]
   17fdc:	e7f7      	b.n	17fce <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
   17fde:	2200      	movs	r2, #0
   17fe0:	4b15      	ldr	r3, [pc, #84]	; (18038 <xTaskResumeAll+0x120>)
   17fe2:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
   17fe4:	4b0c      	ldr	r3, [pc, #48]	; (18018 <xTaskResumeAll+0x100>)
   17fe6:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
   17fe8:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
   17fea:	2b00      	cmp	r3, #0
   17fec:	d0a9      	beq.n	17f42 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
   17fee:	4b14      	ldr	r3, [pc, #80]	; (18040 <xTaskResumeAll+0x128>)
   17ff0:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
   17ff2:	3401      	adds	r4, #1
   17ff4:	e7a5      	b.n	17f42 <xTaskResumeAll+0x2a>
   17ff6:	46c0      	nop			; (mov r8, r8)
   17ff8:	20003c24 	.word	0x20003c24
   17ffc:	00016601 	.word	0x00016601
   18000:	20003c18 	.word	0x20003c18
   18004:	00016619 	.word	0x00016619
   18008:	20003c2c 	.word	0x20003c2c
   1800c:	20003bb4 	.word	0x20003bb4
   18010:	0001648d 	.word	0x0001648d
   18014:	20003ba8 	.word	0x20003ba8
   18018:	20003ca8 	.word	0x20003ca8
   1801c:	000164d3 	.word	0x000164d3
   18020:	00015255 	.word	0x00015255
   18024:	200000ac 	.word	0x200000ac
   18028:	00015245 	.word	0x00015245
   1802c:	00015f25 	.word	0x00015f25
   18030:	20003c64 	.word	0x20003c64
   18034:	00017921 	.word	0x00017921
   18038:	20003c20 	.word	0x20003c20
   1803c:	00017d8d 	.word	0x00017d8d
   18040:	000165f1 	.word	0x000165f1

00018044 <vTaskDelay>:
	{
   18044:	b510      	push	{r4, lr}
   18046:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
   18048:	d031      	beq.n	180ae <vTaskDelay+0x6a>
			configASSERT( uxSchedulerSuspended == 0 );
   1804a:	4b1a      	ldr	r3, [pc, #104]	; (180b4 <vTaskDelay+0x70>)
   1804c:	681b      	ldr	r3, [r3, #0]
   1804e:	2b00      	cmp	r3, #0
   18050:	d001      	beq.n	18056 <vTaskDelay+0x12>
   18052:	b672      	cpsid	i
   18054:	e7fe      	b.n	18054 <vTaskDelay+0x10>
			vTaskSuspendAll();
   18056:	4b18      	ldr	r3, [pc, #96]	; (180b8 <vTaskDelay+0x74>)
   18058:	4798      	blx	r3
				traceTASK_DELAY();
   1805a:	4b18      	ldr	r3, [pc, #96]	; (180bc <vTaskDelay+0x78>)
   1805c:	6818      	ldr	r0, [r3, #0]
   1805e:	4b18      	ldr	r3, [pc, #96]	; (180c0 <vTaskDelay+0x7c>)
   18060:	4798      	blx	r3
   18062:	4b18      	ldr	r3, [pc, #96]	; (180c4 <vTaskDelay+0x80>)
   18064:	881b      	ldrh	r3, [r3, #0]
   18066:	4203      	tst	r3, r0
   18068:	d00a      	beq.n	18080 <vTaskDelay+0x3c>
   1806a:	0021      	movs	r1, r4
   1806c:	2089      	movs	r0, #137	; 0x89
   1806e:	4b16      	ldr	r3, [pc, #88]	; (180c8 <vTaskDelay+0x84>)
   18070:	4798      	blx	r3
   18072:	4b12      	ldr	r3, [pc, #72]	; (180bc <vTaskDelay+0x78>)
   18074:	6818      	ldr	r0, [r3, #0]
   18076:	4b15      	ldr	r3, [pc, #84]	; (180cc <vTaskDelay+0x88>)
   18078:	4798      	blx	r3
   1807a:	b2c0      	uxtb	r0, r0
   1807c:	4b14      	ldr	r3, [pc, #80]	; (180d0 <vTaskDelay+0x8c>)
   1807e:	4798      	blx	r3
   18080:	4b14      	ldr	r3, [pc, #80]	; (180d4 <vTaskDelay+0x90>)
   18082:	4798      	blx	r3
   18084:	4b0e      	ldr	r3, [pc, #56]	; (180c0 <vTaskDelay+0x7c>)
   18086:	4798      	blx	r3
   18088:	4b0e      	ldr	r3, [pc, #56]	; (180c4 <vTaskDelay+0x80>)
   1808a:	881b      	ldrh	r3, [r3, #0]
   1808c:	4203      	tst	r3, r0
   1808e:	d006      	beq.n	1809e <vTaskDelay+0x5a>
   18090:	4b10      	ldr	r3, [pc, #64]	; (180d4 <vTaskDelay+0x90>)
   18092:	4798      	blx	r3
   18094:	4b0d      	ldr	r3, [pc, #52]	; (180cc <vTaskDelay+0x88>)
   18096:	4798      	blx	r3
   18098:	b2c0      	uxtb	r0, r0
   1809a:	4b0d      	ldr	r3, [pc, #52]	; (180d0 <vTaskDelay+0x8c>)
   1809c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1809e:	2100      	movs	r1, #0
   180a0:	0020      	movs	r0, r4
   180a2:	4b0d      	ldr	r3, [pc, #52]	; (180d8 <vTaskDelay+0x94>)
   180a4:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
   180a6:	4b0d      	ldr	r3, [pc, #52]	; (180dc <vTaskDelay+0x98>)
   180a8:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   180aa:	2800      	cmp	r0, #0
   180ac:	d101      	bne.n	180b2 <vTaskDelay+0x6e>
			portYIELD_WITHIN_API();
   180ae:	4b0c      	ldr	r3, [pc, #48]	; (180e0 <vTaskDelay+0x9c>)
   180b0:	4798      	blx	r3
	}
   180b2:	bd10      	pop	{r4, pc}
   180b4:	20003c24 	.word	0x20003c24
   180b8:	00017d71 	.word	0x00017d71
   180bc:	20003ba8 	.word	0x20003ba8
   180c0:	00015255 	.word	0x00015255
   180c4:	200000ac 	.word	0x200000ac
   180c8:	00016229 	.word	0x00016229
   180cc:	00015245 	.word	0x00015245
   180d0:	00015bb9 	.word	0x00015bb9
   180d4:	00015409 	.word	0x00015409
   180d8:	000179cd 	.word	0x000179cd
   180dc:	00017f19 	.word	0x00017f19
   180e0:	000165f1 	.word	0x000165f1

000180e4 <vTaskSwitchContext>:
{
   180e4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   180e6:	4b33      	ldr	r3, [pc, #204]	; (181b4 <vTaskSwitchContext+0xd0>)
   180e8:	681b      	ldr	r3, [r3, #0]
   180ea:	2b00      	cmp	r3, #0
   180ec:	d125      	bne.n	1813a <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
   180ee:	2200      	movs	r2, #0
   180f0:	4b31      	ldr	r3, [pc, #196]	; (181b8 <vTaskSwitchContext+0xd4>)
   180f2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   180f4:	4b31      	ldr	r3, [pc, #196]	; (181bc <vTaskSwitchContext+0xd8>)
   180f6:	681a      	ldr	r2, [r3, #0]
   180f8:	681b      	ldr	r3, [r3, #0]
   180fa:	6812      	ldr	r2, [r2, #0]
   180fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   180fe:	429a      	cmp	r2, r3
   18100:	d805      	bhi.n	1810e <vTaskSwitchContext+0x2a>
   18102:	4b2e      	ldr	r3, [pc, #184]	; (181bc <vTaskSwitchContext+0xd8>)
   18104:	6818      	ldr	r0, [r3, #0]
   18106:	6819      	ldr	r1, [r3, #0]
   18108:	3134      	adds	r1, #52	; 0x34
   1810a:	4b2d      	ldr	r3, [pc, #180]	; (181c0 <vTaskSwitchContext+0xdc>)
   1810c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1810e:	4b2d      	ldr	r3, [pc, #180]	; (181c4 <vTaskSwitchContext+0xe0>)
   18110:	681b      	ldr	r3, [r3, #0]
   18112:	009a      	lsls	r2, r3, #2
   18114:	18d2      	adds	r2, r2, r3
   18116:	0092      	lsls	r2, r2, #2
   18118:	492b      	ldr	r1, [pc, #172]	; (181c8 <vTaskSwitchContext+0xe4>)
   1811a:	5852      	ldr	r2, [r2, r1]
   1811c:	2a00      	cmp	r2, #0
   1811e:	d110      	bne.n	18142 <vTaskSwitchContext+0x5e>
   18120:	2b00      	cmp	r3, #0
   18122:	d008      	beq.n	18136 <vTaskSwitchContext+0x52>
   18124:	3b01      	subs	r3, #1
   18126:	009a      	lsls	r2, r3, #2
   18128:	18d2      	adds	r2, r2, r3
   1812a:	0092      	lsls	r2, r2, #2
   1812c:	5852      	ldr	r2, [r2, r1]
   1812e:	2a00      	cmp	r2, #0
   18130:	d107      	bne.n	18142 <vTaskSwitchContext+0x5e>
   18132:	2b00      	cmp	r3, #0
   18134:	d1f6      	bne.n	18124 <vTaskSwitchContext+0x40>
   18136:	b672      	cpsid	i
   18138:	e7fe      	b.n	18138 <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
   1813a:	2201      	movs	r2, #1
   1813c:	4b1e      	ldr	r3, [pc, #120]	; (181b8 <vTaskSwitchContext+0xd4>)
   1813e:	601a      	str	r2, [r3, #0]
}
   18140:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   18142:	4821      	ldr	r0, [pc, #132]	; (181c8 <vTaskSwitchContext+0xe4>)
   18144:	009a      	lsls	r2, r3, #2
   18146:	18d1      	adds	r1, r2, r3
   18148:	0089      	lsls	r1, r1, #2
   1814a:	1841      	adds	r1, r0, r1
   1814c:	684c      	ldr	r4, [r1, #4]
   1814e:	6864      	ldr	r4, [r4, #4]
   18150:	604c      	str	r4, [r1, #4]
   18152:	18d2      	adds	r2, r2, r3
   18154:	0092      	lsls	r2, r2, #2
   18156:	3208      	adds	r2, #8
   18158:	1882      	adds	r2, r0, r2
   1815a:	4294      	cmp	r4, r2
   1815c:	d019      	beq.n	18192 <vTaskSwitchContext+0xae>
   1815e:	009a      	lsls	r2, r3, #2
   18160:	18d2      	adds	r2, r2, r3
   18162:	0092      	lsls	r2, r2, #2
   18164:	4918      	ldr	r1, [pc, #96]	; (181c8 <vTaskSwitchContext+0xe4>)
   18166:	188a      	adds	r2, r1, r2
   18168:	6852      	ldr	r2, [r2, #4]
   1816a:	68d1      	ldr	r1, [r2, #12]
   1816c:	4a13      	ldr	r2, [pc, #76]	; (181bc <vTaskSwitchContext+0xd8>)
   1816e:	6011      	str	r1, [r2, #0]
   18170:	4a14      	ldr	r2, [pc, #80]	; (181c4 <vTaskSwitchContext+0xe0>)
   18172:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
   18174:	2201      	movs	r2, #1
   18176:	4b15      	ldr	r3, [pc, #84]	; (181cc <vTaskSwitchContext+0xe8>)
   18178:	601a      	str	r2, [r3, #0]
   1817a:	4b15      	ldr	r3, [pc, #84]	; (181d0 <vTaskSwitchContext+0xec>)
   1817c:	4798      	blx	r3
   1817e:	4b15      	ldr	r3, [pc, #84]	; (181d4 <vTaskSwitchContext+0xf0>)
   18180:	4798      	blx	r3
   18182:	4b15      	ldr	r3, [pc, #84]	; (181d8 <vTaskSwitchContext+0xf4>)
   18184:	881b      	ldrh	r3, [r3, #0]
   18186:	4203      	tst	r3, r0
   18188:	d10b      	bne.n	181a2 <vTaskSwitchContext+0xbe>
   1818a:	2202      	movs	r2, #2
   1818c:	4b0f      	ldr	r3, [pc, #60]	; (181cc <vTaskSwitchContext+0xe8>)
   1818e:	601a      	str	r2, [r3, #0]
}
   18190:	e7d6      	b.n	18140 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
   18192:	6860      	ldr	r0, [r4, #4]
   18194:	009a      	lsls	r2, r3, #2
   18196:	18d2      	adds	r2, r2, r3
   18198:	0092      	lsls	r2, r2, #2
   1819a:	490b      	ldr	r1, [pc, #44]	; (181c8 <vTaskSwitchContext+0xe4>)
   1819c:	188a      	adds	r2, r1, r2
   1819e:	6050      	str	r0, [r2, #4]
   181a0:	e7dd      	b.n	1815e <vTaskSwitchContext+0x7a>
		traceTASK_SWITCHED_IN();
   181a2:	4b0b      	ldr	r3, [pc, #44]	; (181d0 <vTaskSwitchContext+0xec>)
   181a4:	4798      	blx	r3
   181a6:	4b0d      	ldr	r3, [pc, #52]	; (181dc <vTaskSwitchContext+0xf8>)
   181a8:	4798      	blx	r3
   181aa:	b2c0      	uxtb	r0, r0
   181ac:	4b0c      	ldr	r3, [pc, #48]	; (181e0 <vTaskSwitchContext+0xfc>)
   181ae:	4798      	blx	r3
   181b0:	e7eb      	b.n	1818a <vTaskSwitchContext+0xa6>
   181b2:	46c0      	nop			; (mov r8, r8)
   181b4:	20003c24 	.word	0x20003c24
   181b8:	20003ca8 	.word	0x20003ca8
   181bc:	20003ba8 	.word	0x20003ba8
   181c0:	00023fcd 	.word	0x00023fcd
   181c4:	20003c2c 	.word	0x20003c2c
   181c8:	20003bb4 	.word	0x20003bb4
   181cc:	20000cb4 	.word	0x20000cb4
   181d0:	00015409 	.word	0x00015409
   181d4:	00015255 	.word	0x00015255
   181d8:	200000ac 	.word	0x200000ac
   181dc:	00015245 	.word	0x00015245
   181e0:	000162d1 	.word	0x000162d1

000181e4 <vTaskSuspend>:
	{
   181e4:	b570      	push	{r4, r5, r6, lr}
   181e6:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
   181e8:	4b33      	ldr	r3, [pc, #204]	; (182b8 <vTaskSuspend+0xd4>)
   181ea:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   181ec:	1e2c      	subs	r4, r5, #0
   181ee:	d02b      	beq.n	18248 <vTaskSuspend+0x64>
			traceTASK_SUSPEND( pxTCB );
   181f0:	4b32      	ldr	r3, [pc, #200]	; (182bc <vTaskSuspend+0xd8>)
   181f2:	4798      	blx	r3
   181f4:	4b32      	ldr	r3, [pc, #200]	; (182c0 <vTaskSuspend+0xdc>)
   181f6:	4798      	blx	r3
   181f8:	4b32      	ldr	r3, [pc, #200]	; (182c4 <vTaskSuspend+0xe0>)
   181fa:	881b      	ldrh	r3, [r3, #0]
   181fc:	4203      	tst	r3, r0
   181fe:	d126      	bne.n	1824e <vTaskSuspend+0x6a>
   18200:	0020      	movs	r0, r4
   18202:	4b31      	ldr	r3, [pc, #196]	; (182c8 <vTaskSuspend+0xe4>)
   18204:	4798      	blx	r3
   18206:	b2c0      	uxtb	r0, r0
   18208:	4b30      	ldr	r3, [pc, #192]	; (182cc <vTaskSuspend+0xe8>)
   1820a:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1820c:	1d25      	adds	r5, r4, #4
   1820e:	0028      	movs	r0, r5
   18210:	4b2f      	ldr	r3, [pc, #188]	; (182d0 <vTaskSuspend+0xec>)
   18212:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   18214:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18216:	2b00      	cmp	r3, #0
   18218:	d003      	beq.n	18222 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1821a:	0020      	movs	r0, r4
   1821c:	3018      	adds	r0, #24
   1821e:	4b2c      	ldr	r3, [pc, #176]	; (182d0 <vTaskSuspend+0xec>)
   18220:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   18222:	0029      	movs	r1, r5
   18224:	482b      	ldr	r0, [pc, #172]	; (182d4 <vTaskSuspend+0xf0>)
   18226:	4b2c      	ldr	r3, [pc, #176]	; (182d8 <vTaskSuspend+0xf4>)
   18228:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1822a:	2350      	movs	r3, #80	; 0x50
   1822c:	5ce3      	ldrb	r3, [r4, r3]
   1822e:	2b01      	cmp	r3, #1
   18230:	d01d      	beq.n	1826e <vTaskSuspend+0x8a>
		taskEXIT_CRITICAL();
   18232:	4b2a      	ldr	r3, [pc, #168]	; (182dc <vTaskSuspend+0xf8>)
   18234:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   18236:	4b2a      	ldr	r3, [pc, #168]	; (182e0 <vTaskSuspend+0xfc>)
   18238:	681b      	ldr	r3, [r3, #0]
   1823a:	2b00      	cmp	r3, #0
   1823c:	d11b      	bne.n	18276 <vTaskSuspend+0x92>
		if( pxTCB == pxCurrentTCB )
   1823e:	4b29      	ldr	r3, [pc, #164]	; (182e4 <vTaskSuspend+0x100>)
   18240:	681b      	ldr	r3, [r3, #0]
   18242:	429c      	cmp	r4, r3
   18244:	d01e      	beq.n	18284 <vTaskSuspend+0xa0>
	}
   18246:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   18248:	4b26      	ldr	r3, [pc, #152]	; (182e4 <vTaskSuspend+0x100>)
   1824a:	681c      	ldr	r4, [r3, #0]
   1824c:	e7d0      	b.n	181f0 <vTaskSuspend+0xc>
			traceTASK_SUSPEND( pxTCB );
   1824e:	0020      	movs	r0, r4
   18250:	4b1b      	ldr	r3, [pc, #108]	; (182c0 <vTaskSuspend+0xdc>)
   18252:	4798      	blx	r3
   18254:	4b1b      	ldr	r3, [pc, #108]	; (182c4 <vTaskSuspend+0xe0>)
   18256:	881b      	ldrh	r3, [r3, #0]
   18258:	4203      	tst	r3, r0
   1825a:	d0d1      	beq.n	18200 <vTaskSuspend+0x1c>
   1825c:	0020      	movs	r0, r4
   1825e:	4b1a      	ldr	r3, [pc, #104]	; (182c8 <vTaskSuspend+0xe4>)
   18260:	4798      	blx	r3
   18262:	b2c2      	uxtb	r2, r0
   18264:	2103      	movs	r1, #3
   18266:	208a      	movs	r0, #138	; 0x8a
   18268:	4b1f      	ldr	r3, [pc, #124]	; (182e8 <vTaskSuspend+0x104>)
   1826a:	4798      	blx	r3
   1826c:	e7c8      	b.n	18200 <vTaskSuspend+0x1c>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1826e:	2200      	movs	r2, #0
   18270:	334f      	adds	r3, #79	; 0x4f
   18272:	54e2      	strb	r2, [r4, r3]
   18274:	e7dd      	b.n	18232 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
   18276:	4b10      	ldr	r3, [pc, #64]	; (182b8 <vTaskSuspend+0xd4>)
   18278:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
   1827a:	4b1c      	ldr	r3, [pc, #112]	; (182ec <vTaskSuspend+0x108>)
   1827c:	4798      	blx	r3
			taskEXIT_CRITICAL();
   1827e:	4b17      	ldr	r3, [pc, #92]	; (182dc <vTaskSuspend+0xf8>)
   18280:	4798      	blx	r3
   18282:	e7dc      	b.n	1823e <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
   18284:	4b16      	ldr	r3, [pc, #88]	; (182e0 <vTaskSuspend+0xfc>)
   18286:	681b      	ldr	r3, [r3, #0]
   18288:	2b00      	cmp	r3, #0
   1828a:	d008      	beq.n	1829e <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
   1828c:	4b18      	ldr	r3, [pc, #96]	; (182f0 <vTaskSuspend+0x10c>)
   1828e:	681b      	ldr	r3, [r3, #0]
   18290:	2b00      	cmp	r3, #0
   18292:	d001      	beq.n	18298 <vTaskSuspend+0xb4>
   18294:	b672      	cpsid	i
   18296:	e7fe      	b.n	18296 <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
   18298:	4b16      	ldr	r3, [pc, #88]	; (182f4 <vTaskSuspend+0x110>)
   1829a:	4798      	blx	r3
   1829c:	e7d3      	b.n	18246 <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1829e:	4b0d      	ldr	r3, [pc, #52]	; (182d4 <vTaskSuspend+0xf0>)
   182a0:	681a      	ldr	r2, [r3, #0]
   182a2:	4b15      	ldr	r3, [pc, #84]	; (182f8 <vTaskSuspend+0x114>)
   182a4:	681b      	ldr	r3, [r3, #0]
   182a6:	429a      	cmp	r2, r3
   182a8:	d002      	beq.n	182b0 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
   182aa:	4b14      	ldr	r3, [pc, #80]	; (182fc <vTaskSuspend+0x118>)
   182ac:	4798      	blx	r3
	}
   182ae:	e7ca      	b.n	18246 <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
   182b0:	2200      	movs	r2, #0
   182b2:	4b0c      	ldr	r3, [pc, #48]	; (182e4 <vTaskSuspend+0x100>)
   182b4:	601a      	str	r2, [r3, #0]
   182b6:	e7c6      	b.n	18246 <vTaskSuspend+0x62>
   182b8:	00016601 	.word	0x00016601
   182bc:	00015409 	.word	0x00015409
   182c0:	00015255 	.word	0x00015255
   182c4:	200000ac 	.word	0x200000ac
   182c8:	00015245 	.word	0x00015245
   182cc:	00015bb9 	.word	0x00015bb9
   182d0:	000164d3 	.word	0x000164d3
   182d4:	20003c7c 	.word	0x20003c7c
   182d8:	0001648d 	.word	0x0001648d
   182dc:	00016619 	.word	0x00016619
   182e0:	20003c78 	.word	0x20003c78
   182e4:	20003ba8 	.word	0x20003ba8
   182e8:	0001608d 	.word	0x0001608d
   182ec:	00017921 	.word	0x00017921
   182f0:	20003c24 	.word	0x20003c24
   182f4:	000165f1 	.word	0x000165f1
   182f8:	20003c18 	.word	0x20003c18
   182fc:	000180e5 	.word	0x000180e5

00018300 <vTaskPlaceOnEventList>:
{
   18300:	b510      	push	{r4, lr}
   18302:	000c      	movs	r4, r1
	configASSERT( pxEventList );
   18304:	2800      	cmp	r0, #0
   18306:	d101      	bne.n	1830c <vTaskPlaceOnEventList+0xc>
   18308:	b672      	cpsid	i
   1830a:	e7fe      	b.n	1830a <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1830c:	4b04      	ldr	r3, [pc, #16]	; (18320 <vTaskPlaceOnEventList+0x20>)
   1830e:	6819      	ldr	r1, [r3, #0]
   18310:	3118      	adds	r1, #24
   18312:	4b04      	ldr	r3, [pc, #16]	; (18324 <vTaskPlaceOnEventList+0x24>)
   18314:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   18316:	2101      	movs	r1, #1
   18318:	0020      	movs	r0, r4
   1831a:	4b03      	ldr	r3, [pc, #12]	; (18328 <vTaskPlaceOnEventList+0x28>)
   1831c:	4798      	blx	r3
}
   1831e:	bd10      	pop	{r4, pc}
   18320:	20003ba8 	.word	0x20003ba8
   18324:	000164a5 	.word	0x000164a5
   18328:	000179cd 	.word	0x000179cd

0001832c <vTaskPlaceOnEventListRestricted>:
	{
   1832c:	b570      	push	{r4, r5, r6, lr}
   1832e:	000c      	movs	r4, r1
   18330:	0015      	movs	r5, r2
		configASSERT( pxEventList );
   18332:	2800      	cmp	r0, #0
   18334:	d031      	beq.n	1839a <vTaskPlaceOnEventListRestricted+0x6e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   18336:	4b1a      	ldr	r3, [pc, #104]	; (183a0 <vTaskPlaceOnEventListRestricted+0x74>)
   18338:	6819      	ldr	r1, [r3, #0]
   1833a:	3118      	adds	r1, #24
   1833c:	4b19      	ldr	r3, [pc, #100]	; (183a4 <vTaskPlaceOnEventListRestricted+0x78>)
   1833e:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
   18340:	2d00      	cmp	r5, #0
   18342:	d001      	beq.n	18348 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
   18344:	2401      	movs	r4, #1
   18346:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   18348:	4b15      	ldr	r3, [pc, #84]	; (183a0 <vTaskPlaceOnEventListRestricted+0x74>)
   1834a:	6818      	ldr	r0, [r3, #0]
   1834c:	4b16      	ldr	r3, [pc, #88]	; (183a8 <vTaskPlaceOnEventListRestricted+0x7c>)
   1834e:	4798      	blx	r3
   18350:	4b16      	ldr	r3, [pc, #88]	; (183ac <vTaskPlaceOnEventListRestricted+0x80>)
   18352:	881b      	ldrh	r3, [r3, #0]
   18354:	4203      	tst	r3, r0
   18356:	d00c      	beq.n	18372 <vTaskPlaceOnEventListRestricted+0x46>
   18358:	4b15      	ldr	r3, [pc, #84]	; (183b0 <vTaskPlaceOnEventListRestricted+0x84>)
   1835a:	6819      	ldr	r1, [r3, #0]
   1835c:	1861      	adds	r1, r4, r1
   1835e:	2088      	movs	r0, #136	; 0x88
   18360:	4b14      	ldr	r3, [pc, #80]	; (183b4 <vTaskPlaceOnEventListRestricted+0x88>)
   18362:	4798      	blx	r3
   18364:	4b0e      	ldr	r3, [pc, #56]	; (183a0 <vTaskPlaceOnEventListRestricted+0x74>)
   18366:	6818      	ldr	r0, [r3, #0]
   18368:	4b13      	ldr	r3, [pc, #76]	; (183b8 <vTaskPlaceOnEventListRestricted+0x8c>)
   1836a:	4798      	blx	r3
   1836c:	b2c0      	uxtb	r0, r0
   1836e:	4b13      	ldr	r3, [pc, #76]	; (183bc <vTaskPlaceOnEventListRestricted+0x90>)
   18370:	4798      	blx	r3
   18372:	4b13      	ldr	r3, [pc, #76]	; (183c0 <vTaskPlaceOnEventListRestricted+0x94>)
   18374:	4798      	blx	r3
   18376:	4b0c      	ldr	r3, [pc, #48]	; (183a8 <vTaskPlaceOnEventListRestricted+0x7c>)
   18378:	4798      	blx	r3
   1837a:	4b0c      	ldr	r3, [pc, #48]	; (183ac <vTaskPlaceOnEventListRestricted+0x80>)
   1837c:	881b      	ldrh	r3, [r3, #0]
   1837e:	4203      	tst	r3, r0
   18380:	d006      	beq.n	18390 <vTaskPlaceOnEventListRestricted+0x64>
   18382:	4b0f      	ldr	r3, [pc, #60]	; (183c0 <vTaskPlaceOnEventListRestricted+0x94>)
   18384:	4798      	blx	r3
   18386:	4b0c      	ldr	r3, [pc, #48]	; (183b8 <vTaskPlaceOnEventListRestricted+0x8c>)
   18388:	4798      	blx	r3
   1838a:	b2c0      	uxtb	r0, r0
   1838c:	4b0b      	ldr	r3, [pc, #44]	; (183bc <vTaskPlaceOnEventListRestricted+0x90>)
   1838e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   18390:	0029      	movs	r1, r5
   18392:	0020      	movs	r0, r4
   18394:	4b0b      	ldr	r3, [pc, #44]	; (183c4 <vTaskPlaceOnEventListRestricted+0x98>)
   18396:	4798      	blx	r3
	}
   18398:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
   1839a:	b672      	cpsid	i
   1839c:	e7fe      	b.n	1839c <vTaskPlaceOnEventListRestricted+0x70>
   1839e:	46c0      	nop			; (mov r8, r8)
   183a0:	20003ba8 	.word	0x20003ba8
   183a4:	0001648d 	.word	0x0001648d
   183a8:	00015255 	.word	0x00015255
   183ac:	200000ac 	.word	0x200000ac
   183b0:	20003ca4 	.word	0x20003ca4
   183b4:	00016229 	.word	0x00016229
   183b8:	00015245 	.word	0x00015245
   183bc:	00015bb9 	.word	0x00015bb9
   183c0:	00015409 	.word	0x00015409
   183c4:	000179cd 	.word	0x000179cd

000183c8 <xTaskRemoveFromEventList>:
{
   183c8:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   183ca:	68c3      	ldr	r3, [r0, #12]
   183cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   183ce:	2c00      	cmp	r4, #0
   183d0:	d02e      	beq.n	18430 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   183d2:	0025      	movs	r5, r4
   183d4:	3518      	adds	r5, #24
   183d6:	0028      	movs	r0, r5
   183d8:	4b1c      	ldr	r3, [pc, #112]	; (1844c <xTaskRemoveFromEventList+0x84>)
   183da:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   183dc:	4b1c      	ldr	r3, [pc, #112]	; (18450 <xTaskRemoveFromEventList+0x88>)
   183de:	681b      	ldr	r3, [r3, #0]
   183e0:	2b00      	cmp	r3, #0
   183e2:	d12e      	bne.n	18442 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   183e4:	1d25      	adds	r5, r4, #4
   183e6:	0028      	movs	r0, r5
   183e8:	4b18      	ldr	r3, [pc, #96]	; (1844c <xTaskRemoveFromEventList+0x84>)
   183ea:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   183ec:	0020      	movs	r0, r4
   183ee:	4b19      	ldr	r3, [pc, #100]	; (18454 <xTaskRemoveFromEventList+0x8c>)
   183f0:	4798      	blx	r3
   183f2:	4b19      	ldr	r3, [pc, #100]	; (18458 <xTaskRemoveFromEventList+0x90>)
   183f4:	881b      	ldrh	r3, [r3, #0]
   183f6:	4203      	tst	r3, r0
   183f8:	d11c      	bne.n	18434 <xTaskRemoveFromEventList+0x6c>
   183fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   183fc:	4a17      	ldr	r2, [pc, #92]	; (1845c <xTaskRemoveFromEventList+0x94>)
   183fe:	6812      	ldr	r2, [r2, #0]
   18400:	4293      	cmp	r3, r2
   18402:	d901      	bls.n	18408 <xTaskRemoveFromEventList+0x40>
   18404:	4a15      	ldr	r2, [pc, #84]	; (1845c <xTaskRemoveFromEventList+0x94>)
   18406:	6013      	str	r3, [r2, #0]
   18408:	0098      	lsls	r0, r3, #2
   1840a:	18c0      	adds	r0, r0, r3
   1840c:	0080      	lsls	r0, r0, #2
   1840e:	4b14      	ldr	r3, [pc, #80]	; (18460 <xTaskRemoveFromEventList+0x98>)
   18410:	1818      	adds	r0, r3, r0
   18412:	0029      	movs	r1, r5
   18414:	4b13      	ldr	r3, [pc, #76]	; (18464 <xTaskRemoveFromEventList+0x9c>)
   18416:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   18418:	4b13      	ldr	r3, [pc, #76]	; (18468 <xTaskRemoveFromEventList+0xa0>)
   1841a:	681b      	ldr	r3, [r3, #0]
   1841c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
   18420:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   18422:	429a      	cmp	r2, r3
   18424:	d903      	bls.n	1842e <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
   18426:	2201      	movs	r2, #1
   18428:	4b10      	ldr	r3, [pc, #64]	; (1846c <xTaskRemoveFromEventList+0xa4>)
   1842a:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
   1842c:	3001      	adds	r0, #1
}
   1842e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
   18430:	b672      	cpsid	i
   18432:	e7fe      	b.n	18432 <xTaskRemoveFromEventList+0x6a>
		prvAddTaskToReadyList( pxUnblockedTCB );
   18434:	0020      	movs	r0, r4
   18436:	4b0e      	ldr	r3, [pc, #56]	; (18470 <xTaskRemoveFromEventList+0xa8>)
   18438:	4798      	blx	r3
   1843a:	b2c0      	uxtb	r0, r0
   1843c:	4b0d      	ldr	r3, [pc, #52]	; (18474 <xTaskRemoveFromEventList+0xac>)
   1843e:	4798      	blx	r3
   18440:	e7db      	b.n	183fa <xTaskRemoveFromEventList+0x32>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   18442:	0029      	movs	r1, r5
   18444:	480c      	ldr	r0, [pc, #48]	; (18478 <xTaskRemoveFromEventList+0xb0>)
   18446:	4b07      	ldr	r3, [pc, #28]	; (18464 <xTaskRemoveFromEventList+0x9c>)
   18448:	4798      	blx	r3
   1844a:	e7e5      	b.n	18418 <xTaskRemoveFromEventList+0x50>
   1844c:	000164d3 	.word	0x000164d3
   18450:	20003c24 	.word	0x20003c24
   18454:	00015255 	.word	0x00015255
   18458:	200000ac 	.word	0x200000ac
   1845c:	20003c2c 	.word	0x20003c2c
   18460:	20003bb4 	.word	0x20003bb4
   18464:	0001648d 	.word	0x0001648d
   18468:	20003ba8 	.word	0x20003ba8
   1846c:	20003ca8 	.word	0x20003ca8
   18470:	00015245 	.word	0x00015245
   18474:	00015f25 	.word	0x00015f25
   18478:	20003c64 	.word	0x20003c64

0001847c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1847c:	4b03      	ldr	r3, [pc, #12]	; (1848c <vTaskInternalSetTimeOutState+0x10>)
   1847e:	681b      	ldr	r3, [r3, #0]
   18480:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   18482:	4b03      	ldr	r3, [pc, #12]	; (18490 <vTaskInternalSetTimeOutState+0x14>)
   18484:	681b      	ldr	r3, [r3, #0]
   18486:	6043      	str	r3, [r0, #4]
}
   18488:	4770      	bx	lr
   1848a:	46c0      	nop			; (mov r8, r8)
   1848c:	20003c60 	.word	0x20003c60
   18490:	20003ca4 	.word	0x20003ca4

00018494 <xTaskCheckForTimeOut>:
{
   18494:	b570      	push	{r4, r5, r6, lr}
   18496:	0006      	movs	r6, r0
   18498:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
   1849a:	2800      	cmp	r0, #0
   1849c:	d01b      	beq.n	184d6 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
   1849e:	2900      	cmp	r1, #0
   184a0:	d01b      	beq.n	184da <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
   184a2:	4b13      	ldr	r3, [pc, #76]	; (184f0 <xTaskCheckForTimeOut+0x5c>)
   184a4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   184a6:	4b13      	ldr	r3, [pc, #76]	; (184f4 <xTaskCheckForTimeOut+0x60>)
   184a8:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   184aa:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
   184ac:	682b      	ldr	r3, [r5, #0]
   184ae:	1c58      	adds	r0, r3, #1
   184b0:	d01c      	beq.n	184ec <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   184b2:	4811      	ldr	r0, [pc, #68]	; (184f8 <xTaskCheckForTimeOut+0x64>)
   184b4:	6800      	ldr	r0, [r0, #0]
   184b6:	6834      	ldr	r4, [r6, #0]
   184b8:	4284      	cmp	r4, r0
   184ba:	d002      	beq.n	184c2 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
   184bc:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   184be:	428a      	cmp	r2, r1
   184c0:	d205      	bcs.n	184ce <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   184c2:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   184c4:	429a      	cmp	r2, r3
   184c6:	d30a      	bcc.n	184de <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
   184c8:	2300      	movs	r3, #0
   184ca:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
   184cc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   184ce:	4b0b      	ldr	r3, [pc, #44]	; (184fc <xTaskCheckForTimeOut+0x68>)
   184d0:	4798      	blx	r3
}
   184d2:	0020      	movs	r0, r4
   184d4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
   184d6:	b672      	cpsid	i
   184d8:	e7fe      	b.n	184d8 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   184da:	b672      	cpsid	i
   184dc:	e7fe      	b.n	184dc <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
   184de:	1a9b      	subs	r3, r3, r2
   184e0:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   184e2:	0030      	movs	r0, r6
   184e4:	4b06      	ldr	r3, [pc, #24]	; (18500 <xTaskCheckForTimeOut+0x6c>)
   184e6:	4798      	blx	r3
			xReturn = pdFALSE;
   184e8:	2400      	movs	r4, #0
   184ea:	e7f0      	b.n	184ce <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
   184ec:	2400      	movs	r4, #0
   184ee:	e7ee      	b.n	184ce <xTaskCheckForTimeOut+0x3a>
   184f0:	00016601 	.word	0x00016601
   184f4:	20003ca4 	.word	0x20003ca4
   184f8:	20003c60 	.word	0x20003c60
   184fc:	00016619 	.word	0x00016619
   18500:	0001847d 	.word	0x0001847d

00018504 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   18504:	2201      	movs	r2, #1
   18506:	4b01      	ldr	r3, [pc, #4]	; (1850c <vTaskMissedYield+0x8>)
   18508:	601a      	str	r2, [r3, #0]
}
   1850a:	4770      	bx	lr
   1850c:	20003ca8 	.word	0x20003ca8

00018510 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
   18510:	2800      	cmp	r0, #0
   18512:	d001      	beq.n	18518 <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
   18514:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
   18516:	4770      	bx	lr
			uxReturn = 0U;
   18518:	2000      	movs	r0, #0
		return uxReturn;
   1851a:	e7fc      	b.n	18516 <uxTaskGetTaskNumber+0x6>

0001851c <vTaskSetTaskNumber>:
		if( xTask != NULL )
   1851c:	2800      	cmp	r0, #0
   1851e:	d000      	beq.n	18522 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
   18520:	6401      	str	r1, [r0, #64]	; 0x40
	}
   18522:	4770      	bx	lr

00018524 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
   18524:	1e03      	subs	r3, r0, #0
   18526:	d00b      	beq.n	18540 <uxTaskGetStackHighWaterMark+0x1c>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   18528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1852a:	7813      	ldrb	r3, [r2, #0]
   1852c:	2ba5      	cmp	r3, #165	; 0xa5
   1852e:	d10a      	bne.n	18546 <uxTaskGetStackHighWaterMark+0x22>
   18530:	2000      	movs	r0, #0
			ulCount++;
   18532:	3001      	adds	r0, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   18534:	5c13      	ldrb	r3, [r2, r0]
   18536:	2ba5      	cmp	r3, #165	; 0xa5
   18538:	d0fb      	beq.n	18532 <uxTaskGetStackHighWaterMark+0xe>
		return uxReturn;
   1853a:	0380      	lsls	r0, r0, #14
   1853c:	0c00      	lsrs	r0, r0, #16
	}
   1853e:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
   18540:	4b02      	ldr	r3, [pc, #8]	; (1854c <uxTaskGetStackHighWaterMark+0x28>)
   18542:	681b      	ldr	r3, [r3, #0]
   18544:	e7f0      	b.n	18528 <uxTaskGetStackHighWaterMark+0x4>
	uint32_t ulCount = 0U;
   18546:	2000      	movs	r0, #0
   18548:	e7f7      	b.n	1853a <uxTaskGetStackHighWaterMark+0x16>
   1854a:	46c0      	nop			; (mov r8, r8)
   1854c:	20003ba8 	.word	0x20003ba8

00018550 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
   18550:	4b01      	ldr	r3, [pc, #4]	; (18558 <xTaskGetCurrentTaskHandle+0x8>)
   18552:	6818      	ldr	r0, [r3, #0]
	}
   18554:	4770      	bx	lr
   18556:	46c0      	nop			; (mov r8, r8)
   18558:	20003ba8 	.word	0x20003ba8

0001855c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   1855c:	4b05      	ldr	r3, [pc, #20]	; (18574 <xTaskGetSchedulerState+0x18>)
   1855e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
   18560:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
   18562:	2b00      	cmp	r3, #0
   18564:	d004      	beq.n	18570 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   18566:	4b04      	ldr	r3, [pc, #16]	; (18578 <xTaskGetSchedulerState+0x1c>)
   18568:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   1856a:	4243      	negs	r3, r0
   1856c:	4158      	adcs	r0, r3
   1856e:	0040      	lsls	r0, r0, #1
	}
   18570:	4770      	bx	lr
   18572:	46c0      	nop			; (mov r8, r8)
   18574:	20003c78 	.word	0x20003c78
   18578:	20003c24 	.word	0x20003c24

0001857c <xTaskPriorityInherit>:
	{
   1857c:	b570      	push	{r4, r5, r6, lr}
   1857e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   18580:	d100      	bne.n	18584 <xTaskPriorityInherit+0x8>
   18582:	e06d      	b.n	18660 <xTaskPriorityInherit+0xe4>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   18584:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   18586:	4b37      	ldr	r3, [pc, #220]	; (18664 <xTaskPriorityInherit+0xe8>)
   18588:	681b      	ldr	r3, [r3, #0]
   1858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1858c:	429a      	cmp	r2, r3
   1858e:	d25f      	bcs.n	18650 <xTaskPriorityInherit+0xd4>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   18590:	6983      	ldr	r3, [r0, #24]
   18592:	2b00      	cmp	r3, #0
   18594:	db05      	blt.n	185a2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18596:	4b33      	ldr	r3, [pc, #204]	; (18664 <xTaskPriorityInherit+0xe8>)
   18598:	681b      	ldr	r3, [r3, #0]
   1859a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1859c:	2305      	movs	r3, #5
   1859e:	1a5b      	subs	r3, r3, r1
   185a0:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   185a2:	0093      	lsls	r3, r2, #2
   185a4:	189b      	adds	r3, r3, r2
   185a6:	009b      	lsls	r3, r3, #2
   185a8:	4a2f      	ldr	r2, [pc, #188]	; (18668 <xTaskPriorityInherit+0xec>)
   185aa:	18d3      	adds	r3, r2, r3
   185ac:	6962      	ldr	r2, [r4, #20]
   185ae:	429a      	cmp	r2, r3
   185b0:	d028      	beq.n	18604 <xTaskPriorityInherit+0x88>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   185b2:	4b2c      	ldr	r3, [pc, #176]	; (18664 <xTaskPriorityInherit+0xe8>)
   185b4:	681b      	ldr	r3, [r3, #0]
   185b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   185b8:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   185ba:	0020      	movs	r0, r4
   185bc:	4b2b      	ldr	r3, [pc, #172]	; (1866c <xTaskPriorityInherit+0xf0>)
   185be:	4798      	blx	r3
   185c0:	0003      	movs	r3, r0
   185c2:	4a2b      	ldr	r2, [pc, #172]	; (18670 <xTaskPriorityInherit+0xf4>)
   185c4:	8812      	ldrh	r2, [r2, #0]
				xReturn = pdTRUE;
   185c6:	2001      	movs	r0, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   185c8:	421a      	tst	r2, r3
   185ca:	d048      	beq.n	1865e <xTaskPriorityInherit+0xe2>
   185cc:	0020      	movs	r0, r4
   185ce:	4d29      	ldr	r5, [pc, #164]	; (18674 <xTaskPriorityInherit+0xf8>)
   185d0:	47a8      	blx	r5
   185d2:	0006      	movs	r6, r0
   185d4:	0020      	movs	r0, r4
   185d6:	47a8      	blx	r5
   185d8:	b2c1      	uxtb	r1, r0
   185da:	2003      	movs	r0, #3
   185dc:	4b26      	ldr	r3, [pc, #152]	; (18678 <xTaskPriorityInherit+0xfc>)
   185de:	4798      	blx	r3
   185e0:	0003      	movs	r3, r0
   185e2:	b2f2      	uxtb	r2, r6
   185e4:	2103      	movs	r1, #3
   185e6:	208e      	movs	r0, #142	; 0x8e
   185e8:	4e24      	ldr	r6, [pc, #144]	; (1867c <xTaskPriorityInherit+0x100>)
   185ea:	47b0      	blx	r6
   185ec:	0020      	movs	r0, r4
   185ee:	47a8      	blx	r5
   185f0:	4b1c      	ldr	r3, [pc, #112]	; (18664 <xTaskPriorityInherit+0xe8>)
   185f2:	681b      	ldr	r3, [r3, #0]
   185f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   185f6:	b2d2      	uxtb	r2, r2
   185f8:	b2c1      	uxtb	r1, r0
   185fa:	2003      	movs	r0, #3
   185fc:	4b20      	ldr	r3, [pc, #128]	; (18680 <xTaskPriorityInherit+0x104>)
   185fe:	4798      	blx	r3
				xReturn = pdTRUE;
   18600:	2001      	movs	r0, #1
   18602:	e02c      	b.n	1865e <xTaskPriorityInherit+0xe2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   18604:	1d25      	adds	r5, r4, #4
   18606:	0028      	movs	r0, r5
   18608:	4b1e      	ldr	r3, [pc, #120]	; (18684 <xTaskPriorityInherit+0x108>)
   1860a:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1860c:	4b15      	ldr	r3, [pc, #84]	; (18664 <xTaskPriorityInherit+0xe8>)
   1860e:	681b      	ldr	r3, [r3, #0]
   18610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18612:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   18614:	0020      	movs	r0, r4
   18616:	4b15      	ldr	r3, [pc, #84]	; (1866c <xTaskPriorityInherit+0xf0>)
   18618:	4798      	blx	r3
   1861a:	4b15      	ldr	r3, [pc, #84]	; (18670 <xTaskPriorityInherit+0xf4>)
   1861c:	881b      	ldrh	r3, [r3, #0]
   1861e:	4203      	tst	r3, r0
   18620:	d10f      	bne.n	18642 <xTaskPriorityInherit+0xc6>
   18622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18624:	4a18      	ldr	r2, [pc, #96]	; (18688 <xTaskPriorityInherit+0x10c>)
   18626:	6812      	ldr	r2, [r2, #0]
   18628:	4293      	cmp	r3, r2
   1862a:	d901      	bls.n	18630 <xTaskPriorityInherit+0xb4>
   1862c:	4a16      	ldr	r2, [pc, #88]	; (18688 <xTaskPriorityInherit+0x10c>)
   1862e:	6013      	str	r3, [r2, #0]
   18630:	0098      	lsls	r0, r3, #2
   18632:	18c0      	adds	r0, r0, r3
   18634:	0080      	lsls	r0, r0, #2
   18636:	4b0c      	ldr	r3, [pc, #48]	; (18668 <xTaskPriorityInherit+0xec>)
   18638:	1818      	adds	r0, r3, r0
   1863a:	0029      	movs	r1, r5
   1863c:	4b13      	ldr	r3, [pc, #76]	; (1868c <xTaskPriorityInherit+0x110>)
   1863e:	4798      	blx	r3
   18640:	e7bb      	b.n	185ba <xTaskPriorityInherit+0x3e>
   18642:	0020      	movs	r0, r4
   18644:	4b0b      	ldr	r3, [pc, #44]	; (18674 <xTaskPriorityInherit+0xf8>)
   18646:	4798      	blx	r3
   18648:	b2c0      	uxtb	r0, r0
   1864a:	4b11      	ldr	r3, [pc, #68]	; (18690 <xTaskPriorityInherit+0x114>)
   1864c:	4798      	blx	r3
   1864e:	e7e8      	b.n	18622 <xTaskPriorityInherit+0xa6>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   18650:	4b04      	ldr	r3, [pc, #16]	; (18664 <xTaskPriorityInherit+0xe8>)
   18652:	681b      	ldr	r3, [r3, #0]
   18654:	6c40      	ldr	r0, [r0, #68]	; 0x44
   18656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18658:	4298      	cmp	r0, r3
   1865a:	4180      	sbcs	r0, r0
   1865c:	4240      	negs	r0, r0
	}
   1865e:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
   18660:	2000      	movs	r0, #0
   18662:	e7fc      	b.n	1865e <xTaskPriorityInherit+0xe2>
   18664:	20003ba8 	.word	0x20003ba8
   18668:	20003bb4 	.word	0x20003bb4
   1866c:	00015255 	.word	0x00015255
   18670:	200000ac 	.word	0x200000ac
   18674:	00015245 	.word	0x00015245
   18678:	00015b05 	.word	0x00015b05
   1867c:	00016151 	.word	0x00016151
   18680:	00015aad 	.word	0x00015aad
   18684:	000164d3 	.word	0x000164d3
   18688:	20003c2c 	.word	0x20003c2c
   1868c:	0001648d 	.word	0x0001648d
   18690:	00015f25 	.word	0x00015f25

00018694 <xTaskPriorityDisinherit>:
	{
   18694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18696:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   18698:	d05a      	beq.n	18750 <xTaskPriorityDisinherit+0xbc>
			configASSERT( pxTCB == pxCurrentTCB );
   1869a:	4b2f      	ldr	r3, [pc, #188]	; (18758 <xTaskPriorityDisinherit+0xc4>)
   1869c:	681b      	ldr	r3, [r3, #0]
   1869e:	4298      	cmp	r0, r3
   186a0:	d001      	beq.n	186a6 <xTaskPriorityDisinherit+0x12>
   186a2:	b672      	cpsid	i
   186a4:	e7fe      	b.n	186a4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
   186a6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   186a8:	2b00      	cmp	r3, #0
   186aa:	d101      	bne.n	186b0 <xTaskPriorityDisinherit+0x1c>
   186ac:	b672      	cpsid	i
   186ae:	e7fe      	b.n	186ae <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
   186b0:	3b01      	subs	r3, #1
   186b2:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   186b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   186b6:	6c41      	ldr	r1, [r0, #68]	; 0x44
   186b8:	428a      	cmp	r2, r1
   186ba:	d04b      	beq.n	18754 <xTaskPriorityDisinherit+0xc0>
	BaseType_t xReturn = pdFALSE;
   186bc:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   186be:	2b00      	cmp	r3, #0
   186c0:	d145      	bne.n	1874e <xTaskPriorityDisinherit+0xba>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   186c2:	1d25      	adds	r5, r4, #4
   186c4:	0028      	movs	r0, r5
   186c6:	4b25      	ldr	r3, [pc, #148]	; (1875c <xTaskPriorityDisinherit+0xc8>)
   186c8:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   186ca:	0020      	movs	r0, r4
   186cc:	4b24      	ldr	r3, [pc, #144]	; (18760 <xTaskPriorityDisinherit+0xcc>)
   186ce:	4798      	blx	r3
   186d0:	4b24      	ldr	r3, [pc, #144]	; (18764 <xTaskPriorityDisinherit+0xd0>)
   186d2:	881b      	ldrh	r3, [r3, #0]
   186d4:	4203      	tst	r3, r0
   186d6:	d018      	beq.n	1870a <xTaskPriorityDisinherit+0x76>
   186d8:	0020      	movs	r0, r4
   186da:	4e23      	ldr	r6, [pc, #140]	; (18768 <xTaskPriorityDisinherit+0xd4>)
   186dc:	47b0      	blx	r6
   186de:	0007      	movs	r7, r0
   186e0:	0020      	movs	r0, r4
   186e2:	47b0      	blx	r6
   186e4:	b2c1      	uxtb	r1, r0
   186e6:	2003      	movs	r0, #3
   186e8:	4b20      	ldr	r3, [pc, #128]	; (1876c <xTaskPriorityDisinherit+0xd8>)
   186ea:	4798      	blx	r3
   186ec:	0003      	movs	r3, r0
   186ee:	b2fa      	uxtb	r2, r7
   186f0:	2103      	movs	r1, #3
   186f2:	208f      	movs	r0, #143	; 0x8f
   186f4:	4f1e      	ldr	r7, [pc, #120]	; (18770 <xTaskPriorityDisinherit+0xdc>)
   186f6:	47b8      	blx	r7
   186f8:	0020      	movs	r0, r4
   186fa:	47b0      	blx	r6
   186fc:	2344      	movs	r3, #68	; 0x44
   186fe:	18e3      	adds	r3, r4, r3
   18700:	781a      	ldrb	r2, [r3, #0]
   18702:	b2c1      	uxtb	r1, r0
   18704:	2003      	movs	r0, #3
   18706:	4b1b      	ldr	r3, [pc, #108]	; (18774 <xTaskPriorityDisinherit+0xe0>)
   18708:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1870a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1870c:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1870e:	2305      	movs	r3, #5
   18710:	1a9b      	subs	r3, r3, r2
   18712:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
   18714:	0020      	movs	r0, r4
   18716:	4b12      	ldr	r3, [pc, #72]	; (18760 <xTaskPriorityDisinherit+0xcc>)
   18718:	4798      	blx	r3
   1871a:	4b12      	ldr	r3, [pc, #72]	; (18764 <xTaskPriorityDisinherit+0xd0>)
   1871c:	881b      	ldrh	r3, [r3, #0]
   1871e:	4203      	tst	r3, r0
   18720:	d005      	beq.n	1872e <xTaskPriorityDisinherit+0x9a>
   18722:	0020      	movs	r0, r4
   18724:	4b10      	ldr	r3, [pc, #64]	; (18768 <xTaskPriorityDisinherit+0xd4>)
   18726:	4798      	blx	r3
   18728:	b2c0      	uxtb	r0, r0
   1872a:	4b13      	ldr	r3, [pc, #76]	; (18778 <xTaskPriorityDisinherit+0xe4>)
   1872c:	4798      	blx	r3
   1872e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   18730:	4a12      	ldr	r2, [pc, #72]	; (1877c <xTaskPriorityDisinherit+0xe8>)
   18732:	6812      	ldr	r2, [r2, #0]
   18734:	4293      	cmp	r3, r2
   18736:	d901      	bls.n	1873c <xTaskPriorityDisinherit+0xa8>
   18738:	4a10      	ldr	r2, [pc, #64]	; (1877c <xTaskPriorityDisinherit+0xe8>)
   1873a:	6013      	str	r3, [r2, #0]
   1873c:	0098      	lsls	r0, r3, #2
   1873e:	18c0      	adds	r0, r0, r3
   18740:	0080      	lsls	r0, r0, #2
   18742:	4b0f      	ldr	r3, [pc, #60]	; (18780 <xTaskPriorityDisinherit+0xec>)
   18744:	1818      	adds	r0, r3, r0
   18746:	0029      	movs	r1, r5
   18748:	4b0e      	ldr	r3, [pc, #56]	; (18784 <xTaskPriorityDisinherit+0xf0>)
   1874a:	4798      	blx	r3
					xReturn = pdTRUE;
   1874c:	2001      	movs	r0, #1
	}
   1874e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
   18750:	2000      	movs	r0, #0
   18752:	e7fc      	b.n	1874e <xTaskPriorityDisinherit+0xba>
   18754:	2000      	movs	r0, #0
   18756:	e7fa      	b.n	1874e <xTaskPriorityDisinherit+0xba>
   18758:	20003ba8 	.word	0x20003ba8
   1875c:	000164d3 	.word	0x000164d3
   18760:	00015255 	.word	0x00015255
   18764:	200000ac 	.word	0x200000ac
   18768:	00015245 	.word	0x00015245
   1876c:	00015b05 	.word	0x00015b05
   18770:	00016151 	.word	0x00016151
   18774:	00015aad 	.word	0x00015aad
   18778:	00015f25 	.word	0x00015f25
   1877c:	20003c2c 	.word	0x20003c2c
   18780:	20003bb4 	.word	0x20003bb4
   18784:	0001648d 	.word	0x0001648d

00018788 <vTaskPriorityDisinheritAfterTimeout>:
	{
   18788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1878a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   1878c:	d00d      	beq.n	187aa <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   1878e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18790:	2b00      	cmp	r3, #0
   18792:	d101      	bne.n	18798 <vTaskPriorityDisinheritAfterTimeout+0x10>
   18794:	b672      	cpsid	i
   18796:	e7fe      	b.n	18796 <vTaskPriorityDisinheritAfterTimeout+0xe>
   18798:	6c45      	ldr	r5, [r0, #68]	; 0x44
   1879a:	428d      	cmp	r5, r1
   1879c:	d200      	bcs.n	187a0 <vTaskPriorityDisinheritAfterTimeout+0x18>
   1879e:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
   187a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   187a2:	42aa      	cmp	r2, r5
   187a4:	d001      	beq.n	187aa <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   187a6:	2b01      	cmp	r3, #1
   187a8:	d000      	beq.n	187ac <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
   187aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
   187ac:	4b2b      	ldr	r3, [pc, #172]	; (1885c <vTaskPriorityDisinheritAfterTimeout+0xd4>)
   187ae:	681b      	ldr	r3, [r3, #0]
   187b0:	429c      	cmp	r4, r3
   187b2:	d101      	bne.n	187b8 <vTaskPriorityDisinheritAfterTimeout+0x30>
   187b4:	b672      	cpsid	i
   187b6:	e7fe      	b.n	187b6 <vTaskPriorityDisinheritAfterTimeout+0x2e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   187b8:	0020      	movs	r0, r4
   187ba:	4b29      	ldr	r3, [pc, #164]	; (18860 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
   187bc:	4798      	blx	r3
   187be:	4b29      	ldr	r3, [pc, #164]	; (18864 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   187c0:	881b      	ldrh	r3, [r3, #0]
   187c2:	4203      	tst	r3, r0
   187c4:	d018      	beq.n	187f8 <vTaskPriorityDisinheritAfterTimeout+0x70>
   187c6:	0020      	movs	r0, r4
   187c8:	4e27      	ldr	r6, [pc, #156]	; (18868 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   187ca:	47b0      	blx	r6
   187cc:	0007      	movs	r7, r0
   187ce:	0020      	movs	r0, r4
   187d0:	47b0      	blx	r6
   187d2:	b2c1      	uxtb	r1, r0
   187d4:	2003      	movs	r0, #3
   187d6:	4b25      	ldr	r3, [pc, #148]	; (1886c <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   187d8:	4798      	blx	r3
   187da:	0003      	movs	r3, r0
   187dc:	b2fa      	uxtb	r2, r7
   187de:	2103      	movs	r1, #3
   187e0:	208f      	movs	r0, #143	; 0x8f
   187e2:	4f23      	ldr	r7, [pc, #140]	; (18870 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   187e4:	47b8      	blx	r7
   187e6:	0020      	movs	r0, r4
   187e8:	47b0      	blx	r6
   187ea:	2344      	movs	r3, #68	; 0x44
   187ec:	18e3      	adds	r3, r4, r3
   187ee:	781a      	ldrb	r2, [r3, #0]
   187f0:	b2c1      	uxtb	r1, r0
   187f2:	2003      	movs	r0, #3
   187f4:	4b1f      	ldr	r3, [pc, #124]	; (18874 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   187f6:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   187f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
   187fa:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   187fc:	69a3      	ldr	r3, [r4, #24]
   187fe:	2b00      	cmp	r3, #0
   18800:	db02      	blt.n	18808 <vTaskPriorityDisinheritAfterTimeout+0x80>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18802:	2205      	movs	r2, #5
   18804:	1b55      	subs	r5, r2, r5
   18806:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   18808:	008b      	lsls	r3, r1, #2
   1880a:	185b      	adds	r3, r3, r1
   1880c:	009b      	lsls	r3, r3, #2
   1880e:	4a1a      	ldr	r2, [pc, #104]	; (18878 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
   18810:	18d3      	adds	r3, r2, r3
   18812:	6962      	ldr	r2, [r4, #20]
   18814:	429a      	cmp	r2, r3
   18816:	d1c8      	bne.n	187aa <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   18818:	1d25      	adds	r5, r4, #4
   1881a:	0028      	movs	r0, r5
   1881c:	4b17      	ldr	r3, [pc, #92]	; (1887c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
   1881e:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
   18820:	0020      	movs	r0, r4
   18822:	4b0f      	ldr	r3, [pc, #60]	; (18860 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
   18824:	4798      	blx	r3
   18826:	4b0f      	ldr	r3, [pc, #60]	; (18864 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   18828:	881b      	ldrh	r3, [r3, #0]
   1882a:	4203      	tst	r3, r0
   1882c:	d005      	beq.n	1883a <vTaskPriorityDisinheritAfterTimeout+0xb2>
   1882e:	0020      	movs	r0, r4
   18830:	4b0d      	ldr	r3, [pc, #52]	; (18868 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   18832:	4798      	blx	r3
   18834:	b2c0      	uxtb	r0, r0
   18836:	4b12      	ldr	r3, [pc, #72]	; (18880 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
   18838:	4798      	blx	r3
   1883a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1883c:	4a11      	ldr	r2, [pc, #68]	; (18884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
   1883e:	6812      	ldr	r2, [r2, #0]
   18840:	4293      	cmp	r3, r2
   18842:	d901      	bls.n	18848 <vTaskPriorityDisinheritAfterTimeout+0xc0>
   18844:	4a0f      	ldr	r2, [pc, #60]	; (18884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
   18846:	6013      	str	r3, [r2, #0]
   18848:	0098      	lsls	r0, r3, #2
   1884a:	18c0      	adds	r0, r0, r3
   1884c:	0080      	lsls	r0, r0, #2
   1884e:	4b0a      	ldr	r3, [pc, #40]	; (18878 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
   18850:	1818      	adds	r0, r3, r0
   18852:	0029      	movs	r1, r5
   18854:	4b0c      	ldr	r3, [pc, #48]	; (18888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
   18856:	4798      	blx	r3
	}
   18858:	e7a7      	b.n	187aa <vTaskPriorityDisinheritAfterTimeout+0x22>
   1885a:	46c0      	nop			; (mov r8, r8)
   1885c:	20003ba8 	.word	0x20003ba8
   18860:	00015255 	.word	0x00015255
   18864:	200000ac 	.word	0x200000ac
   18868:	00015245 	.word	0x00015245
   1886c:	00015b05 	.word	0x00015b05
   18870:	00016151 	.word	0x00016151
   18874:	00015aad 	.word	0x00015aad
   18878:	20003bb4 	.word	0x20003bb4
   1887c:	000164d3 	.word	0x000164d3
   18880:	00015f25 	.word	0x00015f25
   18884:	20003c2c 	.word	0x20003c2c
   18888:	0001648d 	.word	0x0001648d

0001888c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
   1888c:	4b05      	ldr	r3, [pc, #20]	; (188a4 <pvTaskIncrementMutexHeldCount+0x18>)
   1888e:	681b      	ldr	r3, [r3, #0]
   18890:	2b00      	cmp	r3, #0
   18892:	d004      	beq.n	1889e <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
   18894:	4b03      	ldr	r3, [pc, #12]	; (188a4 <pvTaskIncrementMutexHeldCount+0x18>)
   18896:	681a      	ldr	r2, [r3, #0]
   18898:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1889a:	3301      	adds	r3, #1
   1889c:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
   1889e:	4b01      	ldr	r3, [pc, #4]	; (188a4 <pvTaskIncrementMutexHeldCount+0x18>)
   188a0:	6818      	ldr	r0, [r3, #0]
	}
   188a2:	4770      	bx	lr
   188a4:	20003ba8 	.word	0x20003ba8

000188a8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   188a8:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   188aa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   188ac:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   188ae:	4291      	cmp	r1, r2
   188b0:	d80b      	bhi.n	188ca <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   188b2:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   188b4:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   188b6:	6983      	ldr	r3, [r0, #24]
   188b8:	429a      	cmp	r2, r3
   188ba:	d211      	bcs.n	188e0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   188bc:	1d01      	adds	r1, r0, #4
   188be:	4b09      	ldr	r3, [pc, #36]	; (188e4 <prvInsertTimerInActiveList+0x3c>)
   188c0:	6818      	ldr	r0, [r3, #0]
   188c2:	4b09      	ldr	r3, [pc, #36]	; (188e8 <prvInsertTimerInActiveList+0x40>)
   188c4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   188c6:	2400      	movs	r4, #0
   188c8:	e00a      	b.n	188e0 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   188ca:	429a      	cmp	r2, r3
   188cc:	d202      	bcs.n	188d4 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   188ce:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   188d0:	4299      	cmp	r1, r3
   188d2:	d205      	bcs.n	188e0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   188d4:	1d01      	adds	r1, r0, #4
   188d6:	4b05      	ldr	r3, [pc, #20]	; (188ec <prvInsertTimerInActiveList+0x44>)
   188d8:	6818      	ldr	r0, [r3, #0]
   188da:	4b03      	ldr	r3, [pc, #12]	; (188e8 <prvInsertTimerInActiveList+0x40>)
   188dc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   188de:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
   188e0:	0020      	movs	r0, r4
   188e2:	bd10      	pop	{r4, pc}
   188e4:	20003cb0 	.word	0x20003cb0
   188e8:	000164a5 	.word	0x000164a5
   188ec:	20003cac 	.word	0x20003cac

000188f0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   188f0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   188f2:	4b0e      	ldr	r3, [pc, #56]	; (1892c <prvCheckForValidListAndQueue+0x3c>)
   188f4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   188f6:	4b0e      	ldr	r3, [pc, #56]	; (18930 <prvCheckForValidListAndQueue+0x40>)
   188f8:	681b      	ldr	r3, [r3, #0]
   188fa:	2b00      	cmp	r3, #0
   188fc:	d002      	beq.n	18904 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   188fe:	4b0d      	ldr	r3, [pc, #52]	; (18934 <prvCheckForValidListAndQueue+0x44>)
   18900:	4798      	blx	r3
}
   18902:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   18904:	4d0c      	ldr	r5, [pc, #48]	; (18938 <prvCheckForValidListAndQueue+0x48>)
   18906:	0028      	movs	r0, r5
   18908:	4e0c      	ldr	r6, [pc, #48]	; (1893c <prvCheckForValidListAndQueue+0x4c>)
   1890a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   1890c:	4c0c      	ldr	r4, [pc, #48]	; (18940 <prvCheckForValidListAndQueue+0x50>)
   1890e:	0020      	movs	r0, r4
   18910:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   18912:	4b0c      	ldr	r3, [pc, #48]	; (18944 <prvCheckForValidListAndQueue+0x54>)
   18914:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   18916:	4b0c      	ldr	r3, [pc, #48]	; (18948 <prvCheckForValidListAndQueue+0x58>)
   18918:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1891a:	2200      	movs	r2, #0
   1891c:	210c      	movs	r1, #12
   1891e:	2002      	movs	r0, #2
   18920:	4b0a      	ldr	r3, [pc, #40]	; (1894c <prvCheckForValidListAndQueue+0x5c>)
   18922:	4798      	blx	r3
   18924:	4b02      	ldr	r3, [pc, #8]	; (18930 <prvCheckForValidListAndQueue+0x40>)
   18926:	6018      	str	r0, [r3, #0]
   18928:	e7e9      	b.n	188fe <prvCheckForValidListAndQueue+0xe>
   1892a:	46c0      	nop			; (mov r8, r8)
   1892c:	00016601 	.word	0x00016601
   18930:	20003ce0 	.word	0x20003ce0
   18934:	00016619 	.word	0x00016619
   18938:	20003cb4 	.word	0x20003cb4
   1893c:	00016471 	.word	0x00016471
   18940:	20003cc8 	.word	0x20003cc8
   18944:	20003cac 	.word	0x20003cac
   18948:	20003cb0 	.word	0x20003cb0
   1894c:	00016a7d 	.word	0x00016a7d

00018950 <xTimerCreateTimerTask>:
{
   18950:	b510      	push	{r4, lr}
   18952:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
   18954:	4b0a      	ldr	r3, [pc, #40]	; (18980 <xTimerCreateTimerTask+0x30>)
   18956:	4798      	blx	r3
	if( xTimerQueue != NULL )
   18958:	4b0a      	ldr	r3, [pc, #40]	; (18984 <xTimerCreateTimerTask+0x34>)
   1895a:	681b      	ldr	r3, [r3, #0]
   1895c:	2b00      	cmp	r3, #0
   1895e:	d00d      	beq.n	1897c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
   18960:	4b09      	ldr	r3, [pc, #36]	; (18988 <xTimerCreateTimerTask+0x38>)
   18962:	9301      	str	r3, [sp, #4]
   18964:	2302      	movs	r3, #2
   18966:	9300      	str	r3, [sp, #0]
   18968:	2300      	movs	r3, #0
   1896a:	2280      	movs	r2, #128	; 0x80
   1896c:	4907      	ldr	r1, [pc, #28]	; (1898c <xTimerCreateTimerTask+0x3c>)
   1896e:	4808      	ldr	r0, [pc, #32]	; (18990 <xTimerCreateTimerTask+0x40>)
   18970:	4c08      	ldr	r4, [pc, #32]	; (18994 <xTimerCreateTimerTask+0x44>)
   18972:	47a0      	blx	r4
	configASSERT( xReturn );
   18974:	2800      	cmp	r0, #0
   18976:	d001      	beq.n	1897c <xTimerCreateTimerTask+0x2c>
}
   18978:	b002      	add	sp, #8
   1897a:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   1897c:	b672      	cpsid	i
   1897e:	e7fe      	b.n	1897e <xTimerCreateTimerTask+0x2e>
   18980:	000188f1 	.word	0x000188f1
   18984:	20003ce0 	.word	0x20003ce0
   18988:	20003ce4 	.word	0x20003ce4
   1898c:	00029308 	.word	0x00029308
   18990:	00018abd 	.word	0x00018abd
   18994:	00017a55 	.word	0x00017a55

00018998 <xTimerGenericCommand>:
{
   18998:	b530      	push	{r4, r5, lr}
   1899a:	b085      	sub	sp, #20
   1899c:	0004      	movs	r4, r0
   1899e:	001d      	movs	r5, r3
	configASSERT( xTimer );
   189a0:	2800      	cmp	r0, #0
   189a2:	d014      	beq.n	189ce <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
   189a4:	4b13      	ldr	r3, [pc, #76]	; (189f4 <xTimerGenericCommand+0x5c>)
   189a6:	6818      	ldr	r0, [r3, #0]
   189a8:	2800      	cmp	r0, #0
   189aa:	d021      	beq.n	189f0 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
   189ac:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   189ae:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   189b0:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   189b2:	2905      	cmp	r1, #5
   189b4:	dc15      	bgt.n	189e2 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   189b6:	4b10      	ldr	r3, [pc, #64]	; (189f8 <xTimerGenericCommand+0x60>)
   189b8:	4798      	blx	r3
   189ba:	2802      	cmp	r0, #2
   189bc:	d009      	beq.n	189d2 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   189be:	4b0d      	ldr	r3, [pc, #52]	; (189f4 <xTimerGenericCommand+0x5c>)
   189c0:	6818      	ldr	r0, [r3, #0]
   189c2:	2300      	movs	r3, #0
   189c4:	2200      	movs	r2, #0
   189c6:	a901      	add	r1, sp, #4
   189c8:	4c0c      	ldr	r4, [pc, #48]	; (189fc <xTimerGenericCommand+0x64>)
   189ca:	47a0      	blx	r4
   189cc:	e00e      	b.n	189ec <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
   189ce:	b672      	cpsid	i
   189d0:	e7fe      	b.n	189d0 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   189d2:	4b08      	ldr	r3, [pc, #32]	; (189f4 <xTimerGenericCommand+0x5c>)
   189d4:	6818      	ldr	r0, [r3, #0]
   189d6:	2300      	movs	r3, #0
   189d8:	9a08      	ldr	r2, [sp, #32]
   189da:	a901      	add	r1, sp, #4
   189dc:	4c07      	ldr	r4, [pc, #28]	; (189fc <xTimerGenericCommand+0x64>)
   189de:	47a0      	blx	r4
   189e0:	e004      	b.n	189ec <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   189e2:	2300      	movs	r3, #0
   189e4:	002a      	movs	r2, r5
   189e6:	a901      	add	r1, sp, #4
   189e8:	4c05      	ldr	r4, [pc, #20]	; (18a00 <xTimerGenericCommand+0x68>)
   189ea:	47a0      	blx	r4
}
   189ec:	b005      	add	sp, #20
   189ee:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
   189f0:	2000      	movs	r0, #0
	return xReturn;
   189f2:	e7fb      	b.n	189ec <xTimerGenericCommand+0x54>
   189f4:	20003ce0 	.word	0x20003ce0
   189f8:	0001855d 	.word	0x0001855d
   189fc:	00016bb9 	.word	0x00016bb9
   18a00:	00016f0d 	.word	0x00016f0d

00018a04 <prvSampleTimeNow>:
{
   18a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a06:	46d6      	mov	lr, sl
   18a08:	464f      	mov	r7, r9
   18a0a:	4646      	mov	r6, r8
   18a0c:	b5c0      	push	{r6, r7, lr}
   18a0e:	b082      	sub	sp, #8
   18a10:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
   18a12:	4b23      	ldr	r3, [pc, #140]	; (18aa0 <prvSampleTimeNow+0x9c>)
   18a14:	4798      	blx	r3
   18a16:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
   18a18:	4b22      	ldr	r3, [pc, #136]	; (18aa4 <prvSampleTimeNow+0xa0>)
   18a1a:	681b      	ldr	r3, [r3, #0]
   18a1c:	4298      	cmp	r0, r3
   18a1e:	d317      	bcc.n	18a50 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
   18a20:	2300      	movs	r3, #0
   18a22:	4642      	mov	r2, r8
   18a24:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
   18a26:	4b1f      	ldr	r3, [pc, #124]	; (18aa4 <prvSampleTimeNow+0xa0>)
   18a28:	4652      	mov	r2, sl
   18a2a:	601a      	str	r2, [r3, #0]
}
   18a2c:	4650      	mov	r0, sl
   18a2e:	b002      	add	sp, #8
   18a30:	bc1c      	pop	{r2, r3, r4}
   18a32:	4690      	mov	r8, r2
   18a34:	4699      	mov	r9, r3
   18a36:	46a2      	mov	sl, r4
   18a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   18a3a:	2300      	movs	r3, #0
   18a3c:	9300      	str	r3, [sp, #0]
   18a3e:	003a      	movs	r2, r7
   18a40:	2100      	movs	r1, #0
   18a42:	0020      	movs	r0, r4
   18a44:	4c18      	ldr	r4, [pc, #96]	; (18aa8 <prvSampleTimeNow+0xa4>)
   18a46:	47a0      	blx	r4
				configASSERT( xResult );
   18a48:	2800      	cmp	r0, #0
   18a4a:	d104      	bne.n	18a56 <prvSampleTimeNow+0x52>
   18a4c:	b672      	cpsid	i
   18a4e:	e7fe      	b.n	18a4e <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   18a50:	4d16      	ldr	r5, [pc, #88]	; (18aac <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18a52:	4b17      	ldr	r3, [pc, #92]	; (18ab0 <prvSampleTimeNow+0xac>)
   18a54:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   18a56:	682b      	ldr	r3, [r5, #0]
   18a58:	681a      	ldr	r2, [r3, #0]
   18a5a:	2a00      	cmp	r2, #0
   18a5c:	d017      	beq.n	18a8e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   18a5e:	68db      	ldr	r3, [r3, #12]
   18a60:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   18a62:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18a64:	1d26      	adds	r6, r4, #4
   18a66:	0030      	movs	r0, r6
   18a68:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18a6a:	0020      	movs	r0, r4
   18a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18a6e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18a70:	69e3      	ldr	r3, [r4, #28]
   18a72:	2b01      	cmp	r3, #1
   18a74:	d1ef      	bne.n	18a56 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   18a76:	69a3      	ldr	r3, [r4, #24]
   18a78:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
   18a7a:	429f      	cmp	r7, r3
   18a7c:	d2dd      	bcs.n	18a3a <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   18a7e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   18a80:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   18a82:	4b0a      	ldr	r3, [pc, #40]	; (18aac <prvSampleTimeNow+0xa8>)
   18a84:	6818      	ldr	r0, [r3, #0]
   18a86:	0031      	movs	r1, r6
   18a88:	4b0a      	ldr	r3, [pc, #40]	; (18ab4 <prvSampleTimeNow+0xb0>)
   18a8a:	4798      	blx	r3
   18a8c:	e7e3      	b.n	18a56 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
   18a8e:	4a0a      	ldr	r2, [pc, #40]	; (18ab8 <prvSampleTimeNow+0xb4>)
   18a90:	4906      	ldr	r1, [pc, #24]	; (18aac <prvSampleTimeNow+0xa8>)
   18a92:	6810      	ldr	r0, [r2, #0]
   18a94:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   18a96:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   18a98:	2301      	movs	r3, #1
   18a9a:	4642      	mov	r2, r8
   18a9c:	6013      	str	r3, [r2, #0]
   18a9e:	e7c2      	b.n	18a26 <prvSampleTimeNow+0x22>
   18aa0:	00017d81 	.word	0x00017d81
   18aa4:	20003cdc 	.word	0x20003cdc
   18aa8:	00018999 	.word	0x00018999
   18aac:	20003cac 	.word	0x20003cac
   18ab0:	000164d3 	.word	0x000164d3
   18ab4:	000164a5 	.word	0x000164a5
   18ab8:	20003cb0 	.word	0x20003cb0

00018abc <prvTimerTask>:
{
   18abc:	b5f0      	push	{r4, r5, r6, r7, lr}
   18abe:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
   18ac0:	4b53      	ldr	r3, [pc, #332]	; (18c10 <prvTimerTask+0x154>)
   18ac2:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18ac4:	4f53      	ldr	r7, [pc, #332]	; (18c14 <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   18ac6:	4b54      	ldr	r3, [pc, #336]	; (18c18 <prvTimerTask+0x15c>)
   18ac8:	681b      	ldr	r3, [r3, #0]
   18aca:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   18acc:	2a00      	cmp	r2, #0
   18ace:	d00e      	beq.n	18aee <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   18ad0:	68db      	ldr	r3, [r3, #12]
   18ad2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
   18ad4:	4b51      	ldr	r3, [pc, #324]	; (18c1c <prvTimerTask+0x160>)
   18ad6:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18ad8:	a805      	add	r0, sp, #20
   18ada:	4b51      	ldr	r3, [pc, #324]	; (18c20 <prvTimerTask+0x164>)
   18adc:	4798      	blx	r3
   18ade:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   18ae0:	9b05      	ldr	r3, [sp, #20]
   18ae2:	2b00      	cmp	r3, #0
   18ae4:	d15f      	bne.n	18ba6 <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   18ae6:	4284      	cmp	r4, r0
   18ae8:	d936      	bls.n	18b58 <prvTimerTask+0x9c>
   18aea:	2200      	movs	r2, #0
   18aec:	e00f      	b.n	18b0e <prvTimerTask+0x52>
	vTaskSuspendAll();
   18aee:	4b4b      	ldr	r3, [pc, #300]	; (18c1c <prvTimerTask+0x160>)
   18af0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18af2:	a805      	add	r0, sp, #20
   18af4:	4b4a      	ldr	r3, [pc, #296]	; (18c20 <prvTimerTask+0x164>)
   18af6:	4798      	blx	r3
   18af8:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
   18afa:	9b05      	ldr	r3, [sp, #20]
   18afc:	2b00      	cmp	r3, #0
   18afe:	d152      	bne.n	18ba6 <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   18b00:	4b48      	ldr	r3, [pc, #288]	; (18c24 <prvTimerTask+0x168>)
   18b02:	681b      	ldr	r3, [r3, #0]
   18b04:	681b      	ldr	r3, [r3, #0]
   18b06:	425a      	negs	r2, r3
   18b08:	415a      	adcs	r2, r3
   18b0a:	b2d2      	uxtb	r2, r2
   18b0c:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   18b0e:	1b61      	subs	r1, r4, r5
   18b10:	4b45      	ldr	r3, [pc, #276]	; (18c28 <prvTimerTask+0x16c>)
   18b12:	6818      	ldr	r0, [r3, #0]
   18b14:	4b45      	ldr	r3, [pc, #276]	; (18c2c <prvTimerTask+0x170>)
   18b16:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   18b18:	4b45      	ldr	r3, [pc, #276]	; (18c30 <prvTimerTask+0x174>)
   18b1a:	4798      	blx	r3
   18b1c:	2800      	cmp	r0, #0
   18b1e:	d03f      	beq.n	18ba0 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   18b20:	4d41      	ldr	r5, [pc, #260]	; (18c28 <prvTimerTask+0x16c>)
   18b22:	4c44      	ldr	r4, [pc, #272]	; (18c34 <prvTimerTask+0x178>)
   18b24:	2200      	movs	r2, #0
   18b26:	a905      	add	r1, sp, #20
   18b28:	6828      	ldr	r0, [r5, #0]
   18b2a:	47a0      	blx	r4
   18b2c:	2800      	cmp	r0, #0
   18b2e:	d0ca      	beq.n	18ac6 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   18b30:	9b05      	ldr	r3, [sp, #20]
   18b32:	9303      	str	r3, [sp, #12]
   18b34:	2b00      	cmp	r3, #0
   18b36:	dbf5      	blt.n	18b24 <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   18b38:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   18b3a:	6973      	ldr	r3, [r6, #20]
   18b3c:	2b00      	cmp	r3, #0
   18b3e:	d001      	beq.n	18b44 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18b40:	1d30      	adds	r0, r6, #4
   18b42:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   18b44:	a804      	add	r0, sp, #16
   18b46:	4b36      	ldr	r3, [pc, #216]	; (18c20 <prvTimerTask+0x164>)
   18b48:	4798      	blx	r3
			switch( xMessage.xMessageID )
   18b4a:	9b05      	ldr	r3, [sp, #20]
   18b4c:	2b09      	cmp	r3, #9
   18b4e:	d8e9      	bhi.n	18b24 <prvTimerTask+0x68>
   18b50:	009b      	lsls	r3, r3, #2
   18b52:	4a39      	ldr	r2, [pc, #228]	; (18c38 <prvTimerTask+0x17c>)
   18b54:	58d3      	ldr	r3, [r2, r3]
   18b56:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
   18b58:	4b35      	ldr	r3, [pc, #212]	; (18c30 <prvTimerTask+0x174>)
   18b5a:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   18b5c:	4b2e      	ldr	r3, [pc, #184]	; (18c18 <prvTimerTask+0x15c>)
   18b5e:	681b      	ldr	r3, [r3, #0]
   18b60:	68db      	ldr	r3, [r3, #12]
   18b62:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   18b64:	1d30      	adds	r0, r6, #4
   18b66:	4b2b      	ldr	r3, [pc, #172]	; (18c14 <prvTimerTask+0x158>)
   18b68:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18b6a:	69f3      	ldr	r3, [r6, #28]
   18b6c:	2b01      	cmp	r3, #1
   18b6e:	d003      	beq.n	18b78 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18b70:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18b72:	0030      	movs	r0, r6
   18b74:	4798      	blx	r3
   18b76:	e7d3      	b.n	18b20 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   18b78:	69b3      	ldr	r3, [r6, #24]
   18b7a:	18e1      	adds	r1, r4, r3
   18b7c:	0023      	movs	r3, r4
   18b7e:	002a      	movs	r2, r5
   18b80:	0030      	movs	r0, r6
   18b82:	4d2e      	ldr	r5, [pc, #184]	; (18c3c <prvTimerTask+0x180>)
   18b84:	47a8      	blx	r5
   18b86:	2800      	cmp	r0, #0
   18b88:	d0f2      	beq.n	18b70 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   18b8a:	2300      	movs	r3, #0
   18b8c:	9300      	str	r3, [sp, #0]
   18b8e:	0022      	movs	r2, r4
   18b90:	2100      	movs	r1, #0
   18b92:	0030      	movs	r0, r6
   18b94:	4c2a      	ldr	r4, [pc, #168]	; (18c40 <prvTimerTask+0x184>)
   18b96:	47a0      	blx	r4
			configASSERT( xResult );
   18b98:	2800      	cmp	r0, #0
   18b9a:	d1e9      	bne.n	18b70 <prvTimerTask+0xb4>
   18b9c:	b672      	cpsid	i
   18b9e:	e7fe      	b.n	18b9e <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
   18ba0:	4b28      	ldr	r3, [pc, #160]	; (18c44 <prvTimerTask+0x188>)
   18ba2:	4798      	blx	r3
   18ba4:	e7bc      	b.n	18b20 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
   18ba6:	4b22      	ldr	r3, [pc, #136]	; (18c30 <prvTimerTask+0x174>)
   18ba8:	4798      	blx	r3
   18baa:	e7b9      	b.n	18b20 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   18bac:	9b06      	ldr	r3, [sp, #24]
   18bae:	69b2      	ldr	r2, [r6, #24]
   18bb0:	4694      	mov	ip, r2
   18bb2:	4463      	add	r3, ip
   18bb4:	0019      	movs	r1, r3
   18bb6:	9b06      	ldr	r3, [sp, #24]
   18bb8:	0002      	movs	r2, r0
   18bba:	0030      	movs	r0, r6
   18bbc:	4c1f      	ldr	r4, [pc, #124]	; (18c3c <prvTimerTask+0x180>)
   18bbe:	47a0      	blx	r4
   18bc0:	2800      	cmp	r0, #0
   18bc2:	d0ae      	beq.n	18b22 <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   18bc4:	0030      	movs	r0, r6
   18bc6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18bc8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   18bca:	69f3      	ldr	r3, [r6, #28]
   18bcc:	2b01      	cmp	r3, #1
   18bce:	d1a8      	bne.n	18b22 <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   18bd0:	9b06      	ldr	r3, [sp, #24]
   18bd2:	69b1      	ldr	r1, [r6, #24]
   18bd4:	468c      	mov	ip, r1
   18bd6:	4463      	add	r3, ip
   18bd8:	001a      	movs	r2, r3
   18bda:	2300      	movs	r3, #0
   18bdc:	9300      	str	r3, [sp, #0]
   18bde:	2100      	movs	r1, #0
   18be0:	0030      	movs	r0, r6
   18be2:	4c17      	ldr	r4, [pc, #92]	; (18c40 <prvTimerTask+0x184>)
   18be4:	47a0      	blx	r4
							configASSERT( xResult );
   18be6:	2800      	cmp	r0, #0
   18be8:	d19b      	bne.n	18b22 <prvTimerTask+0x66>
   18bea:	b672      	cpsid	i
   18bec:	e7fe      	b.n	18bec <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   18bee:	9906      	ldr	r1, [sp, #24]
   18bf0:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   18bf2:	2900      	cmp	r1, #0
   18bf4:	d006      	beq.n	18c04 <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   18bf6:	1841      	adds	r1, r0, r1
   18bf8:	0003      	movs	r3, r0
   18bfa:	0002      	movs	r2, r0
   18bfc:	0030      	movs	r0, r6
   18bfe:	4c0f      	ldr	r4, [pc, #60]	; (18c3c <prvTimerTask+0x180>)
   18c00:	47a0      	blx	r4
   18c02:	e78e      	b.n	18b22 <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   18c04:	b672      	cpsid	i
   18c06:	e7fe      	b.n	18c06 <prvTimerTask+0x14a>
						vPortFree( pxTimer );
   18c08:	0030      	movs	r0, r6
   18c0a:	4b0f      	ldr	r3, [pc, #60]	; (18c48 <prvTimerTask+0x18c>)
   18c0c:	4798      	blx	r3
   18c0e:	e788      	b.n	18b22 <prvTimerTask+0x66>
   18c10:	00023d89 	.word	0x00023d89
   18c14:	000164d3 	.word	0x000164d3
   18c18:	20003cac 	.word	0x20003cac
   18c1c:	00017d71 	.word	0x00017d71
   18c20:	00018a05 	.word	0x00018a05
   18c24:	20003cb0 	.word	0x20003cb0
   18c28:	20003ce0 	.word	0x20003ce0
   18c2c:	000178c1 	.word	0x000178c1
   18c30:	00017f19 	.word	0x00017f19
   18c34:	00017255 	.word	0x00017255
   18c38:	000292e0 	.word	0x000292e0
   18c3c:	000188a9 	.word	0x000188a9
   18c40:	00018999 	.word	0x00018999
   18c44:	000165f1 	.word	0x000165f1
   18c48:	00016755 	.word	0x00016755

00018c4c <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   18c4c:	b510      	push	{r4, lr}
   18c4e:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
   18c50:	7c03      	ldrb	r3, [r0, #16]
   18c52:	2b00      	cmp	r3, #0
   18c54:	d005      	beq.n	18c62 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   18c56:	6883      	ldr	r3, [r0, #8]
   18c58:	1c58      	adds	r0, r3, #1
   18c5a:	68e1      	ldr	r1, [r4, #12]
   18c5c:	4b07      	ldr	r3, [pc, #28]	; (18c7c <advance_pointer+0x30>)
   18c5e:	4798      	blx	r3
   18c60:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   18c62:	6863      	ldr	r3, [r4, #4]
   18c64:	1c58      	adds	r0, r3, #1
   18c66:	68e1      	ldr	r1, [r4, #12]
   18c68:	4b04      	ldr	r3, [pc, #16]	; (18c7c <advance_pointer+0x30>)
   18c6a:	4798      	blx	r3
   18c6c:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   18c6e:	68a3      	ldr	r3, [r4, #8]
   18c70:	1a59      	subs	r1, r3, r1
   18c72:	424a      	negs	r2, r1
   18c74:	414a      	adcs	r2, r1
   18c76:	7422      	strb	r2, [r4, #16]
 }
   18c78:	bd10      	pop	{r4, pc}
   18c7a:	46c0      	nop			; (mov r8, r8)
   18c7c:	000240ed 	.word	0x000240ed

00018c80 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   18c80:	b570      	push	{r4, r5, r6, lr}
   18c82:	0005      	movs	r5, r0
   18c84:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   18c86:	2014      	movs	r0, #20
   18c88:	4b04      	ldr	r3, [pc, #16]	; (18c9c <circular_buf_init+0x1c>)
   18c8a:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   18c8c:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
   18c8e:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
   18c90:	2300      	movs	r3, #0
   18c92:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
   18c94:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
   18c96:	7403      	strb	r3, [r0, #16]
 }
   18c98:	bd70      	pop	{r4, r5, r6, pc}
   18c9a:	46c0      	nop			; (mov r8, r8)
   18c9c:	000261ed 	.word	0x000261ed

00018ca0 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   18ca0:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   18ca2:	6803      	ldr	r3, [r0, #0]
   18ca4:	6842      	ldr	r2, [r0, #4]
   18ca6:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
   18ca8:	4b01      	ldr	r3, [pc, #4]	; (18cb0 <circular_buf_put+0x10>)
   18caa:	4798      	blx	r3
 }
   18cac:	bd10      	pop	{r4, pc}
   18cae:	46c0      	nop			; (mov r8, r8)
   18cb0:	00018c4d 	.word	0x00018c4d

00018cb4 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   18cb4:	7c02      	ldrb	r2, [r0, #16]
   18cb6:	2300      	movs	r3, #0
   18cb8:	2a00      	cmp	r2, #0
   18cba:	d105      	bne.n	18cc8 <circular_buf_empty+0x14>
   18cbc:	6843      	ldr	r3, [r0, #4]
   18cbe:	6880      	ldr	r0, [r0, #8]
   18cc0:	1a1b      	subs	r3, r3, r0
   18cc2:	4258      	negs	r0, r3
   18cc4:	4143      	adcs	r3, r0
   18cc6:	b2db      	uxtb	r3, r3
   18cc8:	0018      	movs	r0, r3
 }
   18cca:	4770      	bx	lr

00018ccc <circular_buf_get>:
 {
   18ccc:	b570      	push	{r4, r5, r6, lr}
   18cce:	0004      	movs	r4, r0
   18cd0:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
   18cd2:	4b0a      	ldr	r3, [pc, #40]	; (18cfc <circular_buf_get+0x30>)
   18cd4:	4798      	blx	r3
   18cd6:	2800      	cmp	r0, #0
   18cd8:	d10d      	bne.n	18cf6 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
   18cda:	6823      	ldr	r3, [r4, #0]
   18cdc:	68a2      	ldr	r2, [r4, #8]
   18cde:	5c9b      	ldrb	r3, [r3, r2]
   18ce0:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
   18ce2:	2300      	movs	r3, #0
   18ce4:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   18ce6:	68a3      	ldr	r3, [r4, #8]
   18ce8:	1c58      	adds	r0, r3, #1
   18cea:	68e1      	ldr	r1, [r4, #12]
   18cec:	4b04      	ldr	r3, [pc, #16]	; (18d00 <circular_buf_get+0x34>)
   18cee:	4798      	blx	r3
   18cf0:	60a1      	str	r1, [r4, #8]
		 r = 0;
   18cf2:	2000      	movs	r0, #0
 }
   18cf4:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
   18cf6:	2001      	movs	r0, #1
   18cf8:	4240      	negs	r0, r0
	 return r;
   18cfa:	e7fb      	b.n	18cf4 <circular_buf_get+0x28>
   18cfc:	00018cb5 	.word	0x00018cb5
   18d00:	000240ed 	.word	0x000240ed

00018d04 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
   18d04:	b510      	push	{r4, lr}

	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
   18d06:	4c06      	ldr	r4, [pc, #24]	; (18d20 <usart_read_callback+0x1c>)
   18d08:	7821      	ldrb	r1, [r4, #0]
   18d0a:	4b06      	ldr	r3, [pc, #24]	; (18d24 <usart_read_callback+0x20>)
   18d0c:	6818      	ldr	r0, [r3, #0]
   18d0e:	4b06      	ldr	r3, [pc, #24]	; (18d28 <usart_read_callback+0x24>)
   18d10:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
   18d12:	2201      	movs	r2, #1
   18d14:	0021      	movs	r1, r4
   18d16:	4805      	ldr	r0, [pc, #20]	; (18d2c <usart_read_callback+0x28>)
   18d18:	4b05      	ldr	r3, [pc, #20]	; (18d30 <usart_read_callback+0x2c>)
   18d1a:	4798      	blx	r3
	
}
   18d1c:	bd10      	pop	{r4, pc}
   18d1e:	46c0      	nop			; (mov r8, r8)
   18d20:	200050d4 	.word	0x200050d4
   18d24:	200050d0 	.word	0x200050d0
   18d28:	00018ca1 	.word	0x00018ca1
   18d2c:	2000509c 	.word	0x2000509c
   18d30:	0001e909 	.word	0x0001e909

00018d34 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
   18d34:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
   18d36:	4b06      	ldr	r3, [pc, #24]	; (18d50 <usart_write_callback+0x1c>)
   18d38:	6818      	ldr	r0, [r3, #0]
   18d3a:	4906      	ldr	r1, [pc, #24]	; (18d54 <usart_write_callback+0x20>)
   18d3c:	4b06      	ldr	r3, [pc, #24]	; (18d58 <usart_write_callback+0x24>)
   18d3e:	4798      	blx	r3
   18d40:	1c43      	adds	r3, r0, #1
   18d42:	d004      	beq.n	18d4e <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   18d44:	2201      	movs	r2, #1
   18d46:	4903      	ldr	r1, [pc, #12]	; (18d54 <usart_write_callback+0x20>)
   18d48:	4804      	ldr	r0, [pc, #16]	; (18d5c <usart_write_callback+0x28>)
   18d4a:	4b05      	ldr	r3, [pc, #20]	; (18d60 <usart_write_callback+0x2c>)
   18d4c:	4798      	blx	r3
	}
	
}
   18d4e:	bd10      	pop	{r4, pc}
   18d50:	200053dc 	.word	0x200053dc
   18d54:	200053d8 	.word	0x200053d8
   18d58:	00018ccd 	.word	0x00018ccd
   18d5c:	2000509c 	.word	0x2000509c
   18d60:	0001e8e9 	.word	0x0001e8e9

00018d64 <InitializeSerialConsole>:
{
   18d64:	b530      	push	{r4, r5, lr}
   18d66:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
   18d68:	2580      	movs	r5, #128	; 0x80
   18d6a:	006d      	lsls	r5, r5, #1
   18d6c:	0029      	movs	r1, r5
   18d6e:	4836      	ldr	r0, [pc, #216]	; (18e48 <InitializeSerialConsole+0xe4>)
   18d70:	4c36      	ldr	r4, [pc, #216]	; (18e4c <InitializeSerialConsole+0xe8>)
   18d72:	47a0      	blx	r4
   18d74:	4b36      	ldr	r3, [pc, #216]	; (18e50 <InitializeSerialConsole+0xec>)
   18d76:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
   18d78:	0029      	movs	r1, r5
   18d7a:	4836      	ldr	r0, [pc, #216]	; (18e54 <InitializeSerialConsole+0xf0>)
   18d7c:	47a0      	blx	r4
   18d7e:	4b36      	ldr	r3, [pc, #216]	; (18e58 <InitializeSerialConsole+0xf4>)
   18d80:	6018      	str	r0, [r3, #0]
	config->data_order       = USART_DATAORDER_LSB;
   18d82:	2380      	movs	r3, #128	; 0x80
   18d84:	05db      	lsls	r3, r3, #23
   18d86:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   18d88:	2300      	movs	r3, #0
   18d8a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
   18d8c:	22ff      	movs	r2, #255	; 0xff
   18d8e:	4669      	mov	r1, sp
   18d90:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
   18d92:	2200      	movs	r2, #0
   18d94:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   18d96:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
   18d98:	2101      	movs	r1, #1
   18d9a:	2024      	movs	r0, #36	; 0x24
   18d9c:	466c      	mov	r4, sp
   18d9e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
   18da0:	3001      	adds	r0, #1
   18da2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
   18da4:	3125      	adds	r1, #37	; 0x25
   18da6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
   18da8:	3101      	adds	r1, #1
   18daa:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
   18dac:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
   18dae:	3105      	adds	r1, #5
   18db0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
   18db2:	3101      	adds	r1, #1
   18db4:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   18db6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   18db8:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
   18dba:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
   18dbc:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
   18dbe:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
   18dc0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
   18dc2:	2313      	movs	r3, #19
   18dc4:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
   18dc6:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
   18dc8:	23e1      	movs	r3, #225	; 0xe1
   18dca:	025b      	lsls	r3, r3, #9
   18dcc:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   18dce:	23c4      	movs	r3, #196	; 0xc4
   18dd0:	039b      	lsls	r3, r3, #14
   18dd2:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   18dd4:	2301      	movs	r3, #1
   18dd6:	425b      	negs	r3, r3
   18dd8:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   18dda:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   18ddc:	4b1f      	ldr	r3, [pc, #124]	; (18e5c <InitializeSerialConsole+0xf8>)
   18dde:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   18de0:	4b1f      	ldr	r3, [pc, #124]	; (18e60 <InitializeSerialConsole+0xfc>)
   18de2:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
   18de4:	4d1f      	ldr	r5, [pc, #124]	; (18e64 <InitializeSerialConsole+0x100>)
   18de6:	4c20      	ldr	r4, [pc, #128]	; (18e68 <InitializeSerialConsole+0x104>)
   18de8:	466a      	mov	r2, sp
   18dea:	4920      	ldr	r1, [pc, #128]	; (18e6c <InitializeSerialConsole+0x108>)
   18dec:	0028      	movs	r0, r5
   18dee:	47a0      	blx	r4
   18df0:	2800      	cmp	r0, #0
   18df2:	d1f9      	bne.n	18de8 <InitializeSerialConsole+0x84>
	SercomUsart *const usart_hw = &(module->hw->USART);
   18df4:	4d1b      	ldr	r5, [pc, #108]	; (18e64 <InitializeSerialConsole+0x100>)
   18df6:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   18df8:	0020      	movs	r0, r4
   18dfa:	4b1d      	ldr	r3, [pc, #116]	; (18e70 <InitializeSerialConsole+0x10c>)
   18dfc:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18dfe:	231f      	movs	r3, #31
   18e00:	4018      	ands	r0, r3
   18e02:	3b1e      	subs	r3, #30
   18e04:	4083      	lsls	r3, r0
   18e06:	4a1b      	ldr	r2, [pc, #108]	; (18e74 <InitializeSerialConsole+0x110>)
   18e08:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   18e0a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   18e0c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   18e0e:	2b00      	cmp	r3, #0
   18e10:	d1fc      	bne.n	18e0c <InitializeSerialConsole+0xa8>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   18e12:	6823      	ldr	r3, [r4, #0]
   18e14:	2202      	movs	r2, #2
   18e16:	4313      	orrs	r3, r2
   18e18:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
   18e1a:	4c12      	ldr	r4, [pc, #72]	; (18e64 <InitializeSerialConsole+0x100>)
   18e1c:	2200      	movs	r2, #0
   18e1e:	4916      	ldr	r1, [pc, #88]	; (18e78 <InitializeSerialConsole+0x114>)
   18e20:	0020      	movs	r0, r4
   18e22:	4d16      	ldr	r5, [pc, #88]	; (18e7c <InitializeSerialConsole+0x118>)
   18e24:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
   18e26:	2201      	movs	r2, #1
   18e28:	4915      	ldr	r1, [pc, #84]	; (18e80 <InitializeSerialConsole+0x11c>)
   18e2a:	0020      	movs	r0, r4
   18e2c:	47a8      	blx	r5
   18e2e:	2231      	movs	r2, #49	; 0x31
   18e30:	5ca3      	ldrb	r3, [r4, r2]
   18e32:	2103      	movs	r1, #3
   18e34:	430b      	orrs	r3, r1
   18e36:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
   18e38:	3a30      	subs	r2, #48	; 0x30
   18e3a:	4912      	ldr	r1, [pc, #72]	; (18e84 <InitializeSerialConsole+0x120>)
   18e3c:	0020      	movs	r0, r4
   18e3e:	4b12      	ldr	r3, [pc, #72]	; (18e88 <InitializeSerialConsole+0x124>)
   18e40:	4798      	blx	r3
}
   18e42:	b011      	add	sp, #68	; 0x44
   18e44:	bd30      	pop	{r4, r5, pc}
   18e46:	46c0      	nop			; (mov r8, r8)
   18e48:	200052d8 	.word	0x200052d8
   18e4c:	00018c81 	.word	0x00018c81
   18e50:	200050d0 	.word	0x200050d0
   18e54:	200050d8 	.word	0x200050d8
   18e58:	200053dc 	.word	0x200053dc
   18e5c:	002a0003 	.word	0x002a0003
   18e60:	002b0003 	.word	0x002b0003
   18e64:	2000509c 	.word	0x2000509c
   18e68:	0001e501 	.word	0x0001e501
   18e6c:	42001800 	.word	0x42001800
   18e70:	0001dd7d 	.word	0x0001dd7d
   18e74:	e000e100 	.word	0xe000e100
   18e78:	00018d35 	.word	0x00018d35
   18e7c:	0001e8d1 	.word	0x0001e8d1
   18e80:	00018d05 	.word	0x00018d05
   18e84:	200050d4 	.word	0x200050d4
   18e88:	0001e909 	.word	0x0001e909

00018e8c <SerialConsoleWriteString>:
{
   18e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e8e:	46c6      	mov	lr, r8
   18e90:	b500      	push	{lr}
   18e92:	0005      	movs	r5, r0
vTaskSuspendAll();
   18e94:	4b14      	ldr	r3, [pc, #80]	; (18ee8 <SerialConsoleWriteString+0x5c>)
   18e96:	4798      	blx	r3
   18e98:	2400      	movs	r4, #0
	if(string != NULL)
   18e9a:	2d00      	cmp	r5, #0
   18e9c:	d012      	beq.n	18ec4 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
   18e9e:	4e13      	ldr	r6, [pc, #76]	; (18eec <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
   18ea0:	4f13      	ldr	r7, [pc, #76]	; (18ef0 <SerialConsoleWriteString+0x64>)
   18ea2:	4b14      	ldr	r3, [pc, #80]	; (18ef4 <SerialConsoleWriteString+0x68>)
   18ea4:	4698      	mov	r8, r3
   18ea6:	e003      	b.n	18eb0 <SerialConsoleWriteString+0x24>
   18ea8:	5d29      	ldrb	r1, [r5, r4]
   18eaa:	6838      	ldr	r0, [r7, #0]
   18eac:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
   18eae:	3401      	adds	r4, #1
   18eb0:	0028      	movs	r0, r5
   18eb2:	47b0      	blx	r6
   18eb4:	4284      	cmp	r4, r0
   18eb6:	d3f7      	bcc.n	18ea8 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
   18eb8:	2101      	movs	r1, #1
   18eba:	480f      	ldr	r0, [pc, #60]	; (18ef8 <SerialConsoleWriteString+0x6c>)
   18ebc:	4b0f      	ldr	r3, [pc, #60]	; (18efc <SerialConsoleWriteString+0x70>)
   18ebe:	4798      	blx	r3
   18ec0:	2800      	cmp	r0, #0
   18ec2:	d004      	beq.n	18ece <SerialConsoleWriteString+0x42>
xTaskResumeAll();
   18ec4:	4b0e      	ldr	r3, [pc, #56]	; (18f00 <SerialConsoleWriteString+0x74>)
   18ec6:	4798      	blx	r3
}
   18ec8:	bc04      	pop	{r2}
   18eca:	4690      	mov	r8, r2
   18ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
   18ece:	4c0d      	ldr	r4, [pc, #52]	; (18f04 <SerialConsoleWriteString+0x78>)
   18ed0:	4b07      	ldr	r3, [pc, #28]	; (18ef0 <SerialConsoleWriteString+0x64>)
   18ed2:	6818      	ldr	r0, [r3, #0]
   18ed4:	0021      	movs	r1, r4
   18ed6:	4b0c      	ldr	r3, [pc, #48]	; (18f08 <SerialConsoleWriteString+0x7c>)
   18ed8:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   18eda:	2201      	movs	r2, #1
   18edc:	0021      	movs	r1, r4
   18ede:	4806      	ldr	r0, [pc, #24]	; (18ef8 <SerialConsoleWriteString+0x6c>)
   18ee0:	4b0a      	ldr	r3, [pc, #40]	; (18f0c <SerialConsoleWriteString+0x80>)
   18ee2:	4798      	blx	r3
   18ee4:	e7ee      	b.n	18ec4 <SerialConsoleWriteString+0x38>
   18ee6:	46c0      	nop			; (mov r8, r8)
   18ee8:	00017d71 	.word	0x00017d71
   18eec:	00026603 	.word	0x00026603
   18ef0:	200053dc 	.word	0x200053dc
   18ef4:	00018ca1 	.word	0x00018ca1
   18ef8:	2000509c 	.word	0x2000509c
   18efc:	0001e929 	.word	0x0001e929
   18f00:	00017f19 	.word	0x00017f19
   18f04:	200053d8 	.word	0x200053d8
   18f08:	00018ccd 	.word	0x00018ccd
   18f0c:	0001e8e9 	.word	0x0001e8e9

00018f10 <SerialConsoleReadCharacter>:
{
   18f10:	b510      	push	{r4, lr}
   18f12:	0004      	movs	r4, r0
	vTaskSuspendAll();
   18f14:	4b05      	ldr	r3, [pc, #20]	; (18f2c <SerialConsoleReadCharacter+0x1c>)
   18f16:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
   18f18:	4b05      	ldr	r3, [pc, #20]	; (18f30 <SerialConsoleReadCharacter+0x20>)
   18f1a:	6818      	ldr	r0, [r3, #0]
   18f1c:	0021      	movs	r1, r4
   18f1e:	4b05      	ldr	r3, [pc, #20]	; (18f34 <SerialConsoleReadCharacter+0x24>)
   18f20:	4798      	blx	r3
   18f22:	0004      	movs	r4, r0
	xTaskResumeAll();
   18f24:	4b04      	ldr	r3, [pc, #16]	; (18f38 <SerialConsoleReadCharacter+0x28>)
   18f26:	4798      	blx	r3
}
   18f28:	0020      	movs	r0, r4
   18f2a:	bd10      	pop	{r4, pc}
   18f2c:	00017d71 	.word	0x00017d71
   18f30:	200050d0 	.word	0x200050d0
   18f34:	00018ccd 	.word	0x00018ccd
   18f38:	00017f19 	.word	0x00017f19

00018f3c <LogMessage>:
{
   18f3c:	b40e      	push	{r1, r2, r3}
   18f3e:	b530      	push	{r4, r5, lr}
   18f40:	b082      	sub	sp, #8
return currentDebugLevel;
   18f42:	4b0a      	ldr	r3, [pc, #40]	; (18f6c <LogMessage+0x30>)
if(getLogLevel() <= level){
   18f44:	781b      	ldrb	r3, [r3, #0]
   18f46:	4283      	cmp	r3, r0
   18f48:	d904      	bls.n	18f54 <LogMessage+0x18>
};
   18f4a:	b002      	add	sp, #8
   18f4c:	bc30      	pop	{r4, r5}
   18f4e:	bc08      	pop	{r3}
   18f50:	b003      	add	sp, #12
   18f52:	4718      	bx	r3
	va_start(ap, format);
   18f54:	ab06      	add	r3, sp, #24
   18f56:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
   18f58:	4c05      	ldr	r4, [pc, #20]	; (18f70 <LogMessage+0x34>)
   18f5a:	9a05      	ldr	r2, [sp, #20]
   18f5c:	217f      	movs	r1, #127	; 0x7f
   18f5e:	0020      	movs	r0, r4
   18f60:	4d04      	ldr	r5, [pc, #16]	; (18f74 <LogMessage+0x38>)
   18f62:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
   18f64:	0020      	movs	r0, r4
   18f66:	4b04      	ldr	r3, [pc, #16]	; (18f78 <LogMessage+0x3c>)
   18f68:	4798      	blx	r3
};
   18f6a:	e7ee      	b.n	18f4a <LogMessage+0xe>
   18f6c:	20003ce8 	.word	0x20003ce8
   18f70:	2000501c 	.word	0x2000501c
   18f74:	0002683d 	.word	0x0002683d
   18f78:	00018e8d 	.word	0x00018e8d

00018f7c <LogMessageDebug>:
{
   18f7c:	b40f      	push	{r0, r1, r2, r3}
   18f7e:	b510      	push	{r4, lr}
LogMessage(LOG_DEBUG_LVL, format);
   18f80:	9902      	ldr	r1, [sp, #8]
   18f82:	2001      	movs	r0, #1
   18f84:	4b02      	ldr	r3, [pc, #8]	; (18f90 <LogMessageDebug+0x14>)
   18f86:	4798      	blx	r3
};
   18f88:	bc10      	pop	{r4}
   18f8a:	bc08      	pop	{r3}
   18f8c:	b004      	add	sp, #16
   18f8e:	4718      	bx	r3
   18f90:	00018f3d 	.word	0x00018f3d

00018f94 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   18f94:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   18f96:	4b06      	ldr	r3, [pc, #24]	; (18fb0 <sd_mmc_configure_slot+0x1c>)
   18f98:	6819      	ldr	r1, [r3, #0]
   18f9a:	7f8b      	ldrb	r3, [r1, #30]
   18f9c:	1e5a      	subs	r2, r3, #1
   18f9e:	4193      	sbcs	r3, r2
   18fa0:	b2db      	uxtb	r3, r3
   18fa2:	7b4a      	ldrb	r2, [r1, #13]
   18fa4:	6809      	ldr	r1, [r1, #0]
   18fa6:	4803      	ldr	r0, [pc, #12]	; (18fb4 <sd_mmc_configure_slot+0x20>)
   18fa8:	7800      	ldrb	r0, [r0, #0]
   18faa:	4c03      	ldr	r4, [pc, #12]	; (18fb8 <sd_mmc_configure_slot+0x24>)
   18fac:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
   18fae:	bd10      	pop	{r4, pc}
   18fb0:	20003cec 	.word	0x20003cec
   18fb4:	20003d14 	.word	0x20003d14
   18fb8:	00019c3d 	.word	0x00019c3d

00018fbc <sd_mmc_select_slot>:
{
   18fbc:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
   18fbe:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
   18fc0:	2800      	cmp	r0, #0
   18fc2:	d001      	beq.n	18fc8 <sd_mmc_select_slot+0xc>
}
   18fc4:	0018      	movs	r0, r3
   18fc6:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   18fc8:	4b0e      	ldr	r3, [pc, #56]	; (19004 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   18fca:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   18fcc:	3b03      	subs	r3, #3
   18fce:	2b01      	cmp	r3, #1
   18fd0:	d90d      	bls.n	18fee <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
   18fd2:	2200      	movs	r2, #0
   18fd4:	4b0c      	ldr	r3, [pc, #48]	; (19008 <sd_mmc_select_slot+0x4c>)
   18fd6:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   18fd8:	4c0a      	ldr	r4, [pc, #40]	; (19004 <sd_mmc_select_slot+0x48>)
   18fda:	4b0c      	ldr	r3, [pc, #48]	; (1900c <sd_mmc_select_slot+0x50>)
   18fdc:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
   18fde:	4b0c      	ldr	r3, [pc, #48]	; (19010 <sd_mmc_select_slot+0x54>)
   18fe0:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   18fe2:	7aa3      	ldrb	r3, [r4, #10]
   18fe4:	3b02      	subs	r3, #2
   18fe6:	4258      	negs	r0, r3
   18fe8:	4143      	adcs	r3, r0
   18fea:	b2db      	uxtb	r3, r3
   18fec:	e7ea      	b.n	18fc4 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   18fee:	4b05      	ldr	r3, [pc, #20]	; (19004 <sd_mmc_select_slot+0x48>)
   18ff0:	2202      	movs	r2, #2
   18ff2:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   18ff4:	4a07      	ldr	r2, [pc, #28]	; (19014 <sd_mmc_select_slot+0x58>)
   18ff6:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
   18ff8:	2201      	movs	r2, #1
   18ffa:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
   18ffc:	2200      	movs	r2, #0
   18ffe:	779a      	strb	r2, [r3, #30]
   19000:	e7e7      	b.n	18fd2 <sd_mmc_select_slot+0x16>
   19002:	46c0      	nop			; (mov r8, r8)
   19004:	20003cf0 	.word	0x20003cf0
   19008:	20003d14 	.word	0x20003d14
   1900c:	20003cec 	.word	0x20003cec
   19010:	00018f95 	.word	0x00018f95
   19014:	00061a80 	.word	0x00061a80

00019018 <sd_mmc_cmd13>:
{
   19018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1901a:	4d09      	ldr	r5, [pc, #36]	; (19040 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1901c:	4f09      	ldr	r7, [pc, #36]	; (19044 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
   1901e:	4e0a      	ldr	r6, [pc, #40]	; (19048 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   19020:	2100      	movs	r1, #0
   19022:	480a      	ldr	r0, [pc, #40]	; (1904c <sd_mmc_cmd13+0x34>)
   19024:	47b8      	blx	r7
   19026:	1e04      	subs	r4, r0, #0
   19028:	d007      	beq.n	1903a <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
   1902a:	47b0      	blx	r6
   1902c:	23ff      	movs	r3, #255	; 0xff
   1902e:	4203      	tst	r3, r0
   19030:	d003      	beq.n	1903a <sd_mmc_cmd13+0x22>
   19032:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
   19034:	2d00      	cmp	r5, #0
   19036:	d1f3      	bne.n	19020 <sd_mmc_cmd13+0x8>
			return false;
   19038:	2400      	movs	r4, #0
}
   1903a:	0020      	movs	r0, r4
   1903c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1903e:	46c0      	nop			; (mov r8, r8)
   19040:	00030d41 	.word	0x00030d41
   19044:	00019e81 	.word	0x00019e81
   19048:	00019e99 	.word	0x00019e99
   1904c:	00001b0d 	.word	0x00001b0d

00019050 <sd_mmc_cmd9_spi>:
{
   19050:	b510      	push	{r4, lr}
   19052:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   19054:	4b0c      	ldr	r3, [pc, #48]	; (19088 <sd_mmc_cmd9_spi+0x38>)
   19056:	681b      	ldr	r3, [r3, #0]
   19058:	8919      	ldrh	r1, [r3, #8]
   1905a:	0409      	lsls	r1, r1, #16
   1905c:	2301      	movs	r3, #1
   1905e:	9300      	str	r3, [sp, #0]
   19060:	2210      	movs	r2, #16
   19062:	480a      	ldr	r0, [pc, #40]	; (1908c <sd_mmc_cmd9_spi+0x3c>)
   19064:	4c0a      	ldr	r4, [pc, #40]	; (19090 <sd_mmc_cmd9_spi+0x40>)
   19066:	47a0      	blx	r4
   19068:	2800      	cmp	r0, #0
   1906a:	d101      	bne.n	19070 <sd_mmc_cmd9_spi+0x20>
}
   1906c:	b002      	add	sp, #8
   1906e:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   19070:	4b05      	ldr	r3, [pc, #20]	; (19088 <sd_mmc_cmd9_spi+0x38>)
   19072:	6818      	ldr	r0, [r3, #0]
   19074:	300e      	adds	r0, #14
   19076:	2101      	movs	r1, #1
   19078:	4b06      	ldr	r3, [pc, #24]	; (19094 <sd_mmc_cmd9_spi+0x44>)
   1907a:	4798      	blx	r3
   1907c:	2800      	cmp	r0, #0
   1907e:	d0f5      	beq.n	1906c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
   19080:	4b05      	ldr	r3, [pc, #20]	; (19098 <sd_mmc_cmd9_spi+0x48>)
   19082:	4798      	blx	r3
   19084:	e7f2      	b.n	1906c <sd_mmc_cmd9_spi+0x1c>
   19086:	46c0      	nop			; (mov r8, r8)
   19088:	20003cec 	.word	0x20003cec
   1908c:	00081109 	.word	0x00081109
   19090:	00019cf1 	.word	0x00019cf1
   19094:	00019f1d 	.word	0x00019f1d
   19098:	00019fa9 	.word	0x00019fa9

0001909c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1909c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1909e:	4b04      	ldr	r3, [pc, #16]	; (190b0 <sd_mmc_deselect_slot+0x14>)
   190a0:	781b      	ldrb	r3, [r3, #0]
   190a2:	2b00      	cmp	r3, #0
   190a4:	d000      	beq.n	190a8 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
   190a6:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
   190a8:	2000      	movs	r0, #0
   190aa:	4b02      	ldr	r3, [pc, #8]	; (190b4 <sd_mmc_deselect_slot+0x18>)
   190ac:	4798      	blx	r3
}
   190ae:	e7fa      	b.n	190a6 <sd_mmc_deselect_slot+0xa>
   190b0:	20003d14 	.word	0x20003d14
   190b4:	00019c91 	.word	0x00019c91

000190b8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   190b8:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   190ba:	2204      	movs	r2, #4
   190bc:	4b03      	ldr	r3, [pc, #12]	; (190cc <sd_mmc_init+0x14>)
   190be:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   190c0:	32fb      	adds	r2, #251	; 0xfb
   190c2:	4b03      	ldr	r3, [pc, #12]	; (190d0 <sd_mmc_init+0x18>)
   190c4:	701a      	strb	r2, [r3, #0]
	driver_init();
   190c6:	4b03      	ldr	r3, [pc, #12]	; (190d4 <sd_mmc_init+0x1c>)
   190c8:	4798      	blx	r3
}
   190ca:	bd10      	pop	{r4, pc}
   190cc:	20003cf0 	.word	0x20003cf0
   190d0:	20003d14 	.word	0x20003d14
   190d4:	00019b3d 	.word	0x00019b3d

000190d8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   190d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   190da:	46c6      	mov	lr, r8
   190dc:	b500      	push	{lr}
   190de:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   190e0:	4bcb      	ldr	r3, [pc, #812]	; (19410 <sd_mmc_check+0x338>)
   190e2:	4798      	blx	r3
   190e4:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   190e6:	2801      	cmp	r0, #1
   190e8:	d006      	beq.n	190f8 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
   190ea:	4bca      	ldr	r3, [pc, #808]	; (19414 <sd_mmc_check+0x33c>)
   190ec:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
   190ee:	0020      	movs	r0, r4
   190f0:	b008      	add	sp, #32
   190f2:	bc04      	pop	{r2}
   190f4:	4690      	mov	r8, r2
   190f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
   190f8:	4bc7      	ldr	r3, [pc, #796]	; (19418 <sd_mmc_check+0x340>)
   190fa:	681b      	ldr	r3, [r3, #0]
   190fc:	2201      	movs	r2, #1
   190fe:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   19100:	2200      	movs	r2, #0
   19102:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   19104:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
   19106:	4bc5      	ldr	r3, [pc, #788]	; (1941c <sd_mmc_check+0x344>)
   19108:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1910a:	2100      	movs	r1, #0
   1910c:	2088      	movs	r0, #136	; 0x88
   1910e:	0140      	lsls	r0, r0, #5
   19110:	4bc3      	ldr	r3, [pc, #780]	; (19420 <sd_mmc_check+0x348>)
   19112:	4798      	blx	r3
   19114:	2800      	cmp	r0, #0
   19116:	d107      	bne.n	19128 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   19118:	4bbf      	ldr	r3, [pc, #764]	; (19418 <sd_mmc_check+0x340>)
   1911a:	681b      	ldr	r3, [r3, #0]
   1911c:	2203      	movs	r2, #3
   1911e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   19120:	4bbc      	ldr	r3, [pc, #752]	; (19414 <sd_mmc_check+0x33c>)
   19122:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   19124:	2403      	movs	r4, #3
   19126:	e7e2      	b.n	190ee <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   19128:	21d5      	movs	r1, #213	; 0xd5
   1912a:	0049      	lsls	r1, r1, #1
   1912c:	48bd      	ldr	r0, [pc, #756]	; (19424 <sd_mmc_check+0x34c>)
   1912e:	4bbc      	ldr	r3, [pc, #752]	; (19420 <sd_mmc_check+0x348>)
   19130:	4798      	blx	r3
	*v2 = 0;
   19132:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   19134:	2800      	cmp	r0, #0
   19136:	d125      	bne.n	19184 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   19138:	4bb7      	ldr	r3, [pc, #732]	; (19418 <sd_mmc_check+0x340>)
   1913a:	681b      	ldr	r3, [r3, #0]
   1913c:	7adb      	ldrb	r3, [r3, #11]
   1913e:	07db      	lsls	r3, r3, #31
   19140:	d500      	bpl.n	19144 <sd_mmc_check+0x6c>
   19142:	e1eb      	b.n	1951c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   19144:	4bb4      	ldr	r3, [pc, #720]	; (19418 <sd_mmc_check+0x340>)
   19146:	681b      	ldr	r3, [r3, #0]
   19148:	7ada      	ldrb	r2, [r3, #11]
   1914a:	2309      	movs	r3, #9
   1914c:	4013      	ands	r3, r2
   1914e:	2b01      	cmp	r3, #1
   19150:	d10f      	bne.n	19172 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   19152:	2180      	movs	r1, #128	; 0x80
   19154:	0089      	lsls	r1, r1, #2
   19156:	48b4      	ldr	r0, [pc, #720]	; (19428 <sd_mmc_check+0x350>)
   19158:	4bb1      	ldr	r3, [pc, #708]	; (19420 <sd_mmc_check+0x348>)
   1915a:	4798      	blx	r3
   1915c:	2800      	cmp	r0, #0
   1915e:	d0db      	beq.n	19118 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   19160:	4bad      	ldr	r3, [pc, #692]	; (19418 <sd_mmc_check+0x340>)
   19162:	681b      	ldr	r3, [r3, #0]
   19164:	7adb      	ldrb	r3, [r3, #11]
   19166:	07db      	lsls	r3, r3, #31
   19168:	d503      	bpl.n	19172 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
   1916a:	4bb0      	ldr	r3, [pc, #704]	; (1942c <sd_mmc_check+0x354>)
   1916c:	4798      	blx	r3
   1916e:	2800      	cmp	r0, #0
   19170:	d0d2      	beq.n	19118 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
   19172:	4baf      	ldr	r3, [pc, #700]	; (19430 <sd_mmc_check+0x358>)
   19174:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   19176:	4ba8      	ldr	r3, [pc, #672]	; (19418 <sd_mmc_check+0x340>)
   19178:	681b      	ldr	r3, [r3, #0]
   1917a:	2200      	movs	r2, #0
   1917c:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1917e:	4ba5      	ldr	r3, [pc, #660]	; (19414 <sd_mmc_check+0x33c>)
   19180:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
   19182:	e7b4      	b.n	190ee <sd_mmc_check+0x16>
	resp = driver_get_response();
   19184:	4bab      	ldr	r3, [pc, #684]	; (19434 <sd_mmc_check+0x35c>)
   19186:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
   19188:	1c43      	adds	r3, r0, #1
   1918a:	d100      	bne.n	1918e <sd_mmc_check+0xb6>
   1918c:	e1c4      	b.n	19518 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1918e:	0500      	lsls	r0, r0, #20
   19190:	0d00      	lsrs	r0, r0, #20
   19192:	23d5      	movs	r3, #213	; 0xd5
   19194:	005b      	lsls	r3, r3, #1
	*v2 = 1;
   19196:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   19198:	4298      	cmp	r0, r3
   1919a:	d1bd      	bne.n	19118 <sd_mmc_check+0x40>
   1919c:	e7cc      	b.n	19138 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1919e:	2100      	movs	r1, #0
   191a0:	48a5      	ldr	r0, [pc, #660]	; (19438 <sd_mmc_check+0x360>)
   191a2:	4b9f      	ldr	r3, [pc, #636]	; (19420 <sd_mmc_check+0x348>)
   191a4:	4798      	blx	r3
   191a6:	2800      	cmp	r0, #0
   191a8:	d119      	bne.n	191de <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
   191aa:	4b9b      	ldr	r3, [pc, #620]	; (19418 <sd_mmc_check+0x340>)
   191ac:	681b      	ldr	r3, [r3, #0]
   191ae:	2202      	movs	r2, #2
   191b0:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   191b2:	2100      	movs	r1, #0
   191b4:	2088      	movs	r0, #136	; 0x88
   191b6:	0140      	lsls	r0, r0, #5
   191b8:	4b99      	ldr	r3, [pc, #612]	; (19420 <sd_mmc_check+0x348>)
   191ba:	4798      	blx	r3
   191bc:	2800      	cmp	r0, #0
   191be:	d0ab      	beq.n	19118 <sd_mmc_check+0x40>
   191c0:	4d9e      	ldr	r5, [pc, #632]	; (1943c <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   191c2:	4f97      	ldr	r7, [pc, #604]	; (19420 <sd_mmc_check+0x348>)
		resp = driver_get_response();
   191c4:	4e9b      	ldr	r6, [pc, #620]	; (19434 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   191c6:	2100      	movs	r1, #0
   191c8:	489d      	ldr	r0, [pc, #628]	; (19440 <sd_mmc_check+0x368>)
   191ca:	47b8      	blx	r7
   191cc:	2800      	cmp	r0, #0
   191ce:	d0a3      	beq.n	19118 <sd_mmc_check+0x40>
		resp = driver_get_response();
   191d0:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
   191d2:	07c3      	lsls	r3, r0, #31
   191d4:	d57d      	bpl.n	192d2 <sd_mmc_check+0x1fa>
   191d6:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   191d8:	2d00      	cmp	r5, #0
   191da:	d1f4      	bne.n	191c6 <sd_mmc_check+0xee>
   191dc:	e79c      	b.n	19118 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
   191de:	4b95      	ldr	r3, [pc, #596]	; (19434 <sd_mmc_check+0x35c>)
   191e0:	4798      	blx	r3
   191e2:	0043      	lsls	r3, r0, #1
   191e4:	d505      	bpl.n	191f2 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
   191e6:	4b8c      	ldr	r3, [pc, #560]	; (19418 <sd_mmc_check+0x340>)
   191e8:	681a      	ldr	r2, [r3, #0]
   191ea:	7ad3      	ldrb	r3, [r2, #11]
   191ec:	2108      	movs	r1, #8
   191ee:	430b      	orrs	r3, r1
   191f0:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   191f2:	2100      	movs	r1, #0
   191f4:	4893      	ldr	r0, [pc, #588]	; (19444 <sd_mmc_check+0x36c>)
   191f6:	4b8a      	ldr	r3, [pc, #552]	; (19420 <sd_mmc_check+0x348>)
   191f8:	4798      	blx	r3
   191fa:	2800      	cmp	r0, #0
   191fc:	d08c      	beq.n	19118 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   191fe:	4b86      	ldr	r3, [pc, #536]	; (19418 <sd_mmc_check+0x340>)
   19200:	681b      	ldr	r3, [r3, #0]
   19202:	7adb      	ldrb	r3, [r3, #11]
   19204:	07da      	lsls	r2, r3, #31
   19206:	d400      	bmi.n	1920a <sd_mmc_check+0x132>
   19208:	e1a4      	b.n	19554 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
   1920a:	4b8f      	ldr	r3, [pc, #572]	; (19448 <sd_mmc_check+0x370>)
   1920c:	4798      	blx	r3
   1920e:	2800      	cmp	r0, #0
   19210:	d082      	beq.n	19118 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   19212:	4b81      	ldr	r3, [pc, #516]	; (19418 <sd_mmc_check+0x340>)
   19214:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   19216:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   19218:	2107      	movs	r1, #7
   1921a:	4019      	ands	r1, r3
   1921c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
   1921e:	488b      	ldr	r0, [pc, #556]	; (1944c <sd_mmc_check+0x374>)
   19220:	5808      	ldr	r0, [r1, r0]
   19222:	21fa      	movs	r1, #250	; 0xfa
   19224:	0089      	lsls	r1, r1, #2
   19226:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   19228:	065b      	lsls	r3, r3, #25
   1922a:	0f1b      	lsrs	r3, r3, #28
   1922c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   1922e:	4888      	ldr	r0, [pc, #544]	; (19450 <sd_mmc_check+0x378>)
   19230:	581b      	ldr	r3, [r3, r0]
   19232:	434b      	muls	r3, r1
   19234:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   19236:	7b93      	ldrb	r3, [r2, #14]
   19238:	099b      	lsrs	r3, r3, #6
   1923a:	d000      	beq.n	1923e <sd_mmc_check+0x166>
   1923c:	e13c      	b.n	194b8 <sd_mmc_check+0x3e0>
   1923e:	7d91      	ldrb	r1, [r2, #22]
   19240:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19242:	7d53      	ldrb	r3, [r2, #21]
   19244:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   19246:	7d10      	ldrb	r0, [r2, #20]
   19248:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1924a:	4303      	orrs	r3, r0
   1924c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1924e:	7e10      	ldrb	r0, [r2, #24]
   19250:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19252:	7dd1      	ldrb	r1, [r2, #23]
   19254:	0049      	lsls	r1, r1, #1
   19256:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
   19258:	051b      	lsls	r3, r3, #20
   1925a:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1925c:	3301      	adds	r3, #1
   1925e:	2107      	movs	r1, #7
   19260:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   19262:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   19264:	408b      	lsls	r3, r1
   19266:	7cd0      	ldrb	r0, [r2, #19]
   19268:	210f      	movs	r1, #15
   1926a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   1926c:	408b      	lsls	r3, r1
				/ 1024;
   1926e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   19270:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   19272:	8911      	ldrh	r1, [r2, #8]
   19274:	0409      	lsls	r1, r1, #16
   19276:	4877      	ldr	r0, [pc, #476]	; (19454 <sd_mmc_check+0x37c>)
   19278:	4b69      	ldr	r3, [pc, #420]	; (19420 <sd_mmc_check+0x348>)
   1927a:	4798      	blx	r3
   1927c:	2800      	cmp	r0, #0
   1927e:	d100      	bne.n	19282 <sd_mmc_check+0x1aa>
   19280:	e74a      	b.n	19118 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   19282:	2301      	movs	r3, #1
   19284:	9300      	str	r3, [sp, #0]
   19286:	2208      	movs	r2, #8
   19288:	2100      	movs	r1, #0
   1928a:	4873      	ldr	r0, [pc, #460]	; (19458 <sd_mmc_check+0x380>)
   1928c:	4d73      	ldr	r5, [pc, #460]	; (1945c <sd_mmc_check+0x384>)
   1928e:	47a8      	blx	r5
   19290:	2800      	cmp	r0, #0
   19292:	d100      	bne.n	19296 <sd_mmc_check+0x1be>
   19294:	e740      	b.n	19118 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
   19296:	2101      	movs	r1, #1
   19298:	a806      	add	r0, sp, #24
   1929a:	4b71      	ldr	r3, [pc, #452]	; (19460 <sd_mmc_check+0x388>)
   1929c:	4798      	blx	r3
   1929e:	2800      	cmp	r0, #0
   192a0:	d100      	bne.n	192a4 <sd_mmc_check+0x1cc>
   192a2:	e739      	b.n	19118 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
   192a4:	4b6f      	ldr	r3, [pc, #444]	; (19464 <sd_mmc_check+0x38c>)
   192a6:	4798      	blx	r3
   192a8:	2800      	cmp	r0, #0
   192aa:	d100      	bne.n	192ae <sd_mmc_check+0x1d6>
   192ac:	e734      	b.n	19118 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   192ae:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
   192b0:	781b      	ldrb	r3, [r3, #0]
   192b2:	220f      	movs	r2, #15
   192b4:	4013      	ands	r3, r2
   192b6:	2b01      	cmp	r3, #1
   192b8:	d100      	bne.n	192bc <sd_mmc_check+0x1e4>
   192ba:	e119      	b.n	194f0 <sd_mmc_check+0x418>
   192bc:	2b00      	cmp	r3, #0
   192be:	d100      	bne.n	192c2 <sd_mmc_check+0x1ea>
   192c0:	e109      	b.n	194d6 <sd_mmc_check+0x3fe>
   192c2:	2b02      	cmp	r3, #2
   192c4:	d100      	bne.n	192c8 <sd_mmc_check+0x1f0>
   192c6:	e118      	b.n	194fa <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   192c8:	4b53      	ldr	r3, [pc, #332]	; (19418 <sd_mmc_check+0x340>)
   192ca:	681b      	ldr	r3, [r3, #0]
   192cc:	2210      	movs	r2, #16
   192ce:	731a      	strb	r2, [r3, #12]
   192d0:	e105      	b.n	194de <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   192d2:	2100      	movs	r1, #0
   192d4:	4858      	ldr	r0, [pc, #352]	; (19438 <sd_mmc_check+0x360>)
   192d6:	4b52      	ldr	r3, [pc, #328]	; (19420 <sd_mmc_check+0x348>)
   192d8:	4798      	blx	r3
   192da:	2800      	cmp	r0, #0
   192dc:	d100      	bne.n	192e0 <sd_mmc_check+0x208>
   192de:	e71b      	b.n	19118 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   192e0:	4b54      	ldr	r3, [pc, #336]	; (19434 <sd_mmc_check+0x35c>)
   192e2:	4798      	blx	r3
   192e4:	23c0      	movs	r3, #192	; 0xc0
   192e6:	05db      	lsls	r3, r3, #23
   192e8:	4018      	ands	r0, r3
   192ea:	2380      	movs	r3, #128	; 0x80
   192ec:	05db      	lsls	r3, r3, #23
   192ee:	4298      	cmp	r0, r3
   192f0:	d105      	bne.n	192fe <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
   192f2:	4b49      	ldr	r3, [pc, #292]	; (19418 <sd_mmc_check+0x340>)
   192f4:	681a      	ldr	r2, [r3, #0]
   192f6:	7ad1      	ldrb	r1, [r2, #11]
   192f8:	2308      	movs	r3, #8
   192fa:	430b      	orrs	r3, r1
   192fc:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   192fe:	2100      	movs	r1, #0
   19300:	4850      	ldr	r0, [pc, #320]	; (19444 <sd_mmc_check+0x36c>)
   19302:	4b47      	ldr	r3, [pc, #284]	; (19420 <sd_mmc_check+0x348>)
   19304:	4798      	blx	r3
   19306:	2800      	cmp	r0, #0
   19308:	d100      	bne.n	1930c <sd_mmc_check+0x234>
   1930a:	e705      	b.n	19118 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
   1930c:	4b4e      	ldr	r3, [pc, #312]	; (19448 <sd_mmc_check+0x370>)
   1930e:	4798      	blx	r3
   19310:	2800      	cmp	r0, #0
   19312:	d100      	bne.n	19316 <sd_mmc_check+0x23e>
   19314:	e700      	b.n	19118 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   19316:	4b40      	ldr	r3, [pc, #256]	; (19418 <sd_mmc_check+0x340>)
   19318:	681a      	ldr	r2, [r3, #0]
   1931a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
   1931c:	069b      	lsls	r3, r3, #26
   1931e:	0f1b      	lsrs	r3, r3, #28
   19320:	2b02      	cmp	r3, #2
   19322:	d100      	bne.n	19326 <sd_mmc_check+0x24e>
   19324:	e0a8      	b.n	19478 <sd_mmc_check+0x3a0>
   19326:	d907      	bls.n	19338 <sd_mmc_check+0x260>
   19328:	2b03      	cmp	r3, #3
   1932a:	d100      	bne.n	1932e <sd_mmc_check+0x256>
   1932c:	e0a7      	b.n	1947e <sd_mmc_check+0x3a6>
   1932e:	2b04      	cmp	r3, #4
   19330:	d104      	bne.n	1933c <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
   19332:	2340      	movs	r3, #64	; 0x40
   19334:	7313      	strb	r3, [r2, #12]
   19336:	e003      	b.n	19340 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   19338:	2b01      	cmp	r3, #1
   1933a:	d066      	beq.n	1940a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1933c:	2312      	movs	r3, #18
   1933e:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   19340:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   19342:	0659      	lsls	r1, r3, #25
   19344:	0f09      	lsrs	r1, r1, #28
   19346:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   19348:	2007      	movs	r0, #7
   1934a:	4003      	ands	r3, r0
   1934c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
   1934e:	483f      	ldr	r0, [pc, #252]	; (1944c <sd_mmc_check+0x374>)
   19350:	5818      	ldr	r0, [r3, r0]
   19352:	23fa      	movs	r3, #250	; 0xfa
   19354:	009b      	lsls	r3, r3, #2
   19356:	4343      	muls	r3, r0
   19358:	4843      	ldr	r0, [pc, #268]	; (19468 <sd_mmc_check+0x390>)
   1935a:	5809      	ldr	r1, [r1, r0]
   1935c:	434b      	muls	r3, r1
   1935e:	6013      	str	r3, [r2, #0]
   19360:	7d91      	ldrb	r1, [r2, #22]
   19362:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   19364:	7d53      	ldrb	r3, [r2, #21]
   19366:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   19368:	7d10      	ldrb	r0, [r2, #20]
   1936a:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1936c:	4303      	orrs	r3, r0
   1936e:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
   19370:	051b      	lsls	r3, r3, #20
   19372:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   19374:	493d      	ldr	r1, [pc, #244]	; (1946c <sd_mmc_check+0x394>)
   19376:	428b      	cmp	r3, r1
   19378:	d00f      	beq.n	1939a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1937a:	7e10      	ldrb	r0, [r2, #24]
   1937c:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1937e:	7dd1      	ldrb	r1, [r2, #23]
   19380:	0049      	lsls	r1, r1, #1
   19382:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   19384:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
   19386:	2007      	movs	r0, #7
   19388:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1938a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1938c:	408b      	lsls	r3, r1
   1938e:	7cd1      	ldrb	r1, [r2, #19]
   19390:	3008      	adds	r0, #8
   19392:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
   19394:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   19396:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   19398:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1939a:	7b13      	ldrb	r3, [r2, #12]
   1939c:	2b3f      	cmp	r3, #63	; 0x3f
   1939e:	d97b      	bls.n	19498 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   193a0:	2100      	movs	r1, #0
   193a2:	9100      	str	r1, [sp, #0]
   193a4:	2301      	movs	r3, #1
   193a6:	2280      	movs	r2, #128	; 0x80
   193a8:	0092      	lsls	r2, r2, #2
   193aa:	4831      	ldr	r0, [pc, #196]	; (19470 <sd_mmc_check+0x398>)
   193ac:	4d2b      	ldr	r5, [pc, #172]	; (1945c <sd_mmc_check+0x384>)
   193ae:	47a8      	blx	r5
   193b0:	2800      	cmp	r0, #0
   193b2:	d100      	bne.n	193b6 <sd_mmc_check+0x2de>
   193b4:	e6b0      	b.n	19118 <sd_mmc_check+0x40>
   193b6:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
   193b8:	4e2e      	ldr	r6, [pc, #184]	; (19474 <sd_mmc_check+0x39c>)
   193ba:	a805      	add	r0, sp, #20
   193bc:	47b0      	blx	r6
   193be:	2800      	cmp	r0, #0
   193c0:	d100      	bne.n	193c4 <sd_mmc_check+0x2ec>
   193c2:	e6a9      	b.n	19118 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   193c4:	3501      	adds	r5, #1
   193c6:	b2ad      	uxth	r5, r5
   193c8:	2d32      	cmp	r5, #50	; 0x32
   193ca:	d1f6      	bne.n	193ba <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   193cc:	4b12      	ldr	r3, [pc, #72]	; (19418 <sd_mmc_check+0x340>)
   193ce:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   193d0:	7d8a      	ldrb	r2, [r1, #22]
   193d2:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   193d4:	7d4b      	ldrb	r3, [r1, #21]
   193d6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   193d8:	7d09      	ldrb	r1, [r1, #20]
   193da:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   193dc:	430b      	orrs	r3, r1
   193de:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
   193e0:	051b      	lsls	r3, r3, #20
   193e2:	0d1b      	lsrs	r3, r3, #20
   193e4:	4a21      	ldr	r2, [pc, #132]	; (1946c <sd_mmc_check+0x394>)
   193e6:	4293      	cmp	r3, r2
   193e8:	d154      	bne.n	19494 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
   193ea:	4e22      	ldr	r6, [pc, #136]	; (19474 <sd_mmc_check+0x39c>)
   193ec:	a806      	add	r0, sp, #24
   193ee:	47b0      	blx	r6
   193f0:	2800      	cmp	r0, #0
   193f2:	d100      	bne.n	193f6 <sd_mmc_check+0x31e>
   193f4:	e690      	b.n	19118 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   193f6:	3501      	adds	r5, #1
   193f8:	b2ad      	uxth	r5, r5
   193fa:	2d35      	cmp	r5, #53	; 0x35
   193fc:	d9f6      	bls.n	193ec <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
   193fe:	4b06      	ldr	r3, [pc, #24]	; (19418 <sd_mmc_check+0x340>)
   19400:	681a      	ldr	r2, [r3, #0]
   19402:	9b06      	ldr	r3, [sp, #24]
   19404:	085b      	lsrs	r3, r3, #1
   19406:	6053      	str	r3, [r2, #4]
   19408:	e044      	b.n	19494 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1940a:	2314      	movs	r3, #20
   1940c:	7313      	strb	r3, [r2, #12]
   1940e:	e797      	b.n	19340 <sd_mmc_check+0x268>
   19410:	00018fbd 	.word	0x00018fbd
   19414:	0001909d 	.word	0x0001909d
   19418:	20003cec 	.word	0x20003cec
   1941c:	00019cb9 	.word	0x00019cb9
   19420:	00019e81 	.word	0x00019e81
   19424:	00005508 	.word	0x00005508
   19428:	00001110 	.word	0x00001110
   1942c:	00019019 	.word	0x00019019
   19430:	00018f95 	.word	0x00018f95
   19434:	00019e99 	.word	0x00019e99
   19438:	0000053a 	.word	0x0000053a
   1943c:	00001bef 	.word	0x00001bef
   19440:	00001101 	.word	0x00001101
   19444:	0000113b 	.word	0x0000113b
   19448:	00019051 	.word	0x00019051
   1944c:	00029350 	.word	0x00029350
   19450:	0002936c 	.word	0x0002936c
   19454:	00001137 	.word	0x00001137
   19458:	00081133 	.word	0x00081133
   1945c:	00019cf1 	.word	0x00019cf1
   19460:	00019f1d 	.word	0x00019f1d
   19464:	00019fa9 	.word	0x00019fa9
   19468:	00029310 	.word	0x00029310
   1946c:	00000fff 	.word	0x00000fff
   19470:	00081108 	.word	0x00081108
   19474:	00019ea5 	.word	0x00019ea5
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   19478:	2322      	movs	r3, #34	; 0x22
   1947a:	7313      	strb	r3, [r2, #12]
   1947c:	e760      	b.n	19340 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
   1947e:	2330      	movs	r3, #48	; 0x30
   19480:	7313      	strb	r3, [r2, #12]
   19482:	e75d      	b.n	19340 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
   19484:	a806      	add	r0, sp, #24
   19486:	4b36      	ldr	r3, [pc, #216]	; (19560 <sd_mmc_check+0x488>)
   19488:	4798      	blx	r3
   1948a:	2800      	cmp	r0, #0
   1948c:	d100      	bne.n	19490 <sd_mmc_check+0x3b8>
   1948e:	e643      	b.n	19118 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   19490:	3501      	adds	r5, #1
   19492:	b2ad      	uxth	r5, r5
   19494:	2d7f      	cmp	r5, #127	; 0x7f
   19496:	d9f5      	bls.n	19484 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   19498:	2180      	movs	r1, #128	; 0x80
   1949a:	0089      	lsls	r1, r1, #2
   1949c:	4831      	ldr	r0, [pc, #196]	; (19564 <sd_mmc_check+0x48c>)
   1949e:	4b32      	ldr	r3, [pc, #200]	; (19568 <sd_mmc_check+0x490>)
   194a0:	4798      	blx	r3
   194a2:	2800      	cmp	r0, #0
   194a4:	d100      	bne.n	194a8 <sd_mmc_check+0x3d0>
   194a6:	e637      	b.n	19118 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
   194a8:	4b30      	ldr	r3, [pc, #192]	; (1956c <sd_mmc_check+0x494>)
   194aa:	4798      	blx	r3
   194ac:	2800      	cmp	r0, #0
   194ae:	d100      	bne.n	194b2 <sd_mmc_check+0x3da>
   194b0:	e632      	b.n	19118 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
   194b2:	4b2f      	ldr	r3, [pc, #188]	; (19570 <sd_mmc_check+0x498>)
   194b4:	4798      	blx	r3
   194b6:	e65e      	b.n	19176 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   194b8:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   194ba:	7d93      	ldrb	r3, [r2, #22]
   194bc:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   194be:	7d51      	ldrb	r1, [r2, #21]
   194c0:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   194c2:	430b      	orrs	r3, r1
   194c4:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
   194c6:	029b      	lsls	r3, r3, #10
				* 512;
   194c8:	085b      	lsrs	r3, r3, #1
   194ca:	2180      	movs	r1, #128	; 0x80
   194cc:	0089      	lsls	r1, r1, #2
   194ce:	468c      	mov	ip, r1
   194d0:	4463      	add	r3, ip
		sd_mmc_card->capacity =
   194d2:	6053      	str	r3, [r2, #4]
   194d4:	e6cd      	b.n	19272 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
   194d6:	4b27      	ldr	r3, [pc, #156]	; (19574 <sd_mmc_check+0x49c>)
   194d8:	681b      	ldr	r3, [r3, #0]
   194da:	2210      	movs	r2, #16
   194dc:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   194de:	4b25      	ldr	r3, [pc, #148]	; (19574 <sd_mmc_check+0x49c>)
   194e0:	681b      	ldr	r3, [r3, #0]
   194e2:	7adb      	ldrb	r3, [r3, #11]
   194e4:	2209      	movs	r2, #9
   194e6:	4013      	ands	r3, r2
   194e8:	2b01      	cmp	r3, #1
   194ea:	d000      	beq.n	194ee <sd_mmc_check+0x416>
   194ec:	e638      	b.n	19160 <sd_mmc_check+0x88>
   194ee:	e630      	b.n	19152 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
   194f0:	4b20      	ldr	r3, [pc, #128]	; (19574 <sd_mmc_check+0x49c>)
   194f2:	681b      	ldr	r3, [r3, #0]
   194f4:	221a      	movs	r2, #26
   194f6:	731a      	strb	r2, [r3, #12]
   194f8:	e7f1      	b.n	194de <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   194fa:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   194fc:	789b      	ldrb	r3, [r3, #2]
   194fe:	09db      	lsrs	r3, r3, #7
   19500:	2b01      	cmp	r3, #1
   19502:	d104      	bne.n	1950e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   19504:	4b1b      	ldr	r3, [pc, #108]	; (19574 <sd_mmc_check+0x49c>)
   19506:	681b      	ldr	r3, [r3, #0]
   19508:	2230      	movs	r2, #48	; 0x30
   1950a:	731a      	strb	r2, [r3, #12]
   1950c:	e7e7      	b.n	194de <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1950e:	4b19      	ldr	r3, [pc, #100]	; (19574 <sd_mmc_check+0x49c>)
   19510:	681b      	ldr	r3, [r3, #0]
   19512:	2220      	movs	r2, #32
   19514:	731a      	strb	r2, [r3, #12]
   19516:	e7e2      	b.n	194de <sd_mmc_check+0x406>
	*v2 = 0;
   19518:	2600      	movs	r6, #0
   1951a:	e60d      	b.n	19138 <sd_mmc_check+0x60>
   1951c:	1e73      	subs	r3, r6, #1
   1951e:	419e      	sbcs	r6, r3
   19520:	07b3      	lsls	r3, r6, #30
   19522:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   19524:	4d14      	ldr	r5, [pc, #80]	; (19578 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   19526:	4f10      	ldr	r7, [pc, #64]	; (19568 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   19528:	46b8      	mov	r8, r7
		resp = driver_get_response();
   1952a:	4e14      	ldr	r6, [pc, #80]	; (1957c <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1952c:	2100      	movs	r1, #0
   1952e:	4814      	ldr	r0, [pc, #80]	; (19580 <sd_mmc_check+0x4a8>)
   19530:	47b8      	blx	r7
   19532:	2800      	cmp	r0, #0
   19534:	d100      	bne.n	19538 <sd_mmc_check+0x460>
   19536:	e638      	b.n	191aa <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   19538:	9903      	ldr	r1, [sp, #12]
   1953a:	4812      	ldr	r0, [pc, #72]	; (19584 <sd_mmc_check+0x4ac>)
   1953c:	47c0      	blx	r8
   1953e:	2800      	cmp	r0, #0
   19540:	d100      	bne.n	19544 <sd_mmc_check+0x46c>
   19542:	e632      	b.n	191aa <sd_mmc_check+0xd2>
		resp = driver_get_response();
   19544:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
   19546:	07c3      	lsls	r3, r0, #31
   19548:	d400      	bmi.n	1954c <sd_mmc_check+0x474>
   1954a:	e628      	b.n	1919e <sd_mmc_check+0xc6>
   1954c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
   1954e:	2d00      	cmp	r5, #0
   19550:	d1ec      	bne.n	1952c <sd_mmc_check+0x454>
   19552:	e62a      	b.n	191aa <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   19554:	2209      	movs	r2, #9
   19556:	4013      	ands	r3, r2
   19558:	2b01      	cmp	r3, #1
   1955a:	d000      	beq.n	1955e <sd_mmc_check+0x486>
   1955c:	e609      	b.n	19172 <sd_mmc_check+0x9a>
   1955e:	e5f8      	b.n	19152 <sd_mmc_check+0x7a>
   19560:	00019ea5 	.word	0x00019ea5
   19564:	00001110 	.word	0x00001110
   19568:	00019e81 	.word	0x00019e81
   1956c:	00019019 	.word	0x00019019
   19570:	00018f95 	.word	0x00018f95
   19574:	20003cec 	.word	0x20003cec
   19578:	00001bef 	.word	0x00001bef
   1957c:	00019e99 	.word	0x00019e99
   19580:	00001137 	.word	0x00001137
   19584:	00001129 	.word	0x00001129

00019588 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   19588:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1958a:	4b06      	ldr	r3, [pc, #24]	; (195a4 <sd_mmc_get_type+0x1c>)
   1958c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
   1958e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   19590:	2800      	cmp	r0, #0
   19592:	d001      	beq.n	19598 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
   19594:	0018      	movs	r0, r3
   19596:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
   19598:	4b03      	ldr	r3, [pc, #12]	; (195a8 <sd_mmc_get_type+0x20>)
   1959a:	4798      	blx	r3
	return sd_mmc_card->type;
   1959c:	4b03      	ldr	r3, [pc, #12]	; (195ac <sd_mmc_get_type+0x24>)
   1959e:	681b      	ldr	r3, [r3, #0]
   195a0:	7adb      	ldrb	r3, [r3, #11]
   195a2:	e7f7      	b.n	19594 <sd_mmc_get_type+0xc>
   195a4:	00018fbd 	.word	0x00018fbd
   195a8:	0001909d 	.word	0x0001909d
   195ac:	20003cec 	.word	0x20003cec

000195b0 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   195b0:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   195b2:	4b06      	ldr	r3, [pc, #24]	; (195cc <sd_mmc_get_capacity+0x1c>)
   195b4:	4798      	blx	r3
		return 0;
   195b6:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   195b8:	2800      	cmp	r0, #0
   195ba:	d001      	beq.n	195c0 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
   195bc:	0018      	movs	r0, r3
   195be:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
   195c0:	4b03      	ldr	r3, [pc, #12]	; (195d0 <sd_mmc_get_capacity+0x20>)
   195c2:	4798      	blx	r3
	return sd_mmc_card->capacity;
   195c4:	4b03      	ldr	r3, [pc, #12]	; (195d4 <sd_mmc_get_capacity+0x24>)
   195c6:	681b      	ldr	r3, [r3, #0]
   195c8:	685b      	ldr	r3, [r3, #4]
   195ca:	e7f7      	b.n	195bc <sd_mmc_get_capacity+0xc>
   195cc:	00018fbd 	.word	0x00018fbd
   195d0:	0001909d 	.word	0x0001909d
   195d4:	20003cec 	.word	0x20003cec

000195d8 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
   195d8:	2000      	movs	r0, #0
   195da:	4770      	bx	lr

000195dc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   195dc:	b570      	push	{r4, r5, r6, lr}
   195de:	b082      	sub	sp, #8
   195e0:	000e      	movs	r6, r1
   195e2:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   195e4:	4b16      	ldr	r3, [pc, #88]	; (19640 <sd_mmc_init_read_blocks+0x64>)
   195e6:	4798      	blx	r3
   195e8:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
   195ea:	d002      	beq.n	195f2 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
   195ec:	0020      	movs	r0, r4
   195ee:	b002      	add	sp, #8
   195f0:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
   195f2:	4b14      	ldr	r3, [pc, #80]	; (19644 <sd_mmc_init_read_blocks+0x68>)
   195f4:	4798      	blx	r3
   195f6:	2800      	cmp	r0, #0
   195f8:	d017      	beq.n	1962a <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
   195fa:	2d01      	cmp	r5, #1
   195fc:	d919      	bls.n	19632 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   195fe:	4812      	ldr	r0, [pc, #72]	; (19648 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   19600:	4b12      	ldr	r3, [pc, #72]	; (1964c <sd_mmc_init_read_blocks+0x70>)
   19602:	681b      	ldr	r3, [r3, #0]
   19604:	7adb      	ldrb	r3, [r3, #11]
   19606:	071b      	lsls	r3, r3, #28
   19608:	d400      	bmi.n	1960c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
   1960a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1960c:	2301      	movs	r3, #1
   1960e:	9300      	str	r3, [sp, #0]
   19610:	002b      	movs	r3, r5
   19612:	2280      	movs	r2, #128	; 0x80
   19614:	0092      	lsls	r2, r2, #2
   19616:	0031      	movs	r1, r6
   19618:	4e0d      	ldr	r6, [pc, #52]	; (19650 <sd_mmc_init_read_blocks+0x74>)
   1961a:	47b0      	blx	r6
   1961c:	2800      	cmp	r0, #0
   1961e:	d00a      	beq.n	19636 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
   19620:	4b0c      	ldr	r3, [pc, #48]	; (19654 <sd_mmc_init_read_blocks+0x78>)
   19622:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   19624:	4b0c      	ldr	r3, [pc, #48]	; (19658 <sd_mmc_init_read_blocks+0x7c>)
   19626:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
   19628:	e7e0      	b.n	195ec <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
   1962a:	4b0c      	ldr	r3, [pc, #48]	; (1965c <sd_mmc_init_read_blocks+0x80>)
   1962c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1962e:	3405      	adds	r4, #5
   19630:	e7dc      	b.n	195ec <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   19632:	480b      	ldr	r0, [pc, #44]	; (19660 <sd_mmc_init_read_blocks+0x84>)
   19634:	e7e4      	b.n	19600 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
   19636:	4b09      	ldr	r3, [pc, #36]	; (1965c <sd_mmc_init_read_blocks+0x80>)
   19638:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1963a:	2405      	movs	r4, #5
   1963c:	e7d6      	b.n	195ec <sd_mmc_init_read_blocks+0x10>
   1963e:	46c0      	nop			; (mov r8, r8)
   19640:	00018fbd 	.word	0x00018fbd
   19644:	00019019 	.word	0x00019019
   19648:	00101112 	.word	0x00101112
   1964c:	20003cec 	.word	0x20003cec
   19650:	00019cf1 	.word	0x00019cf1
   19654:	20003d10 	.word	0x20003d10
   19658:	20003d12 	.word	0x20003d12
   1965c:	0001909d 	.word	0x0001909d
   19660:	00081111 	.word	0x00081111

00019664 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   19664:	b510      	push	{r4, lr}
   19666:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   19668:	4b07      	ldr	r3, [pc, #28]	; (19688 <sd_mmc_start_read_blocks+0x24>)
   1966a:	4798      	blx	r3
   1966c:	2800      	cmp	r0, #0
   1966e:	d104      	bne.n	1967a <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   19670:	2200      	movs	r2, #0
   19672:	4b06      	ldr	r3, [pc, #24]	; (1968c <sd_mmc_start_read_blocks+0x28>)
   19674:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   19676:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   19678:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   1967a:	4a04      	ldr	r2, [pc, #16]	; (1968c <sd_mmc_start_read_blocks+0x28>)
   1967c:	8813      	ldrh	r3, [r2, #0]
   1967e:	1b1c      	subs	r4, r3, r4
   19680:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
   19682:	2000      	movs	r0, #0
   19684:	e7f8      	b.n	19678 <sd_mmc_start_read_blocks+0x14>
   19686:	46c0      	nop			; (mov r8, r8)
   19688:	00019f1d 	.word	0x00019f1d
   1968c:	20003d10 	.word	0x20003d10

00019690 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   19690:	b510      	push	{r4, lr}
   19692:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
   19694:	4b14      	ldr	r3, [pc, #80]	; (196e8 <sd_mmc_wait_end_of_read_blocks+0x58>)
   19696:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   19698:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
   1969a:	2800      	cmp	r0, #0
   1969c:	d101      	bne.n	196a2 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   1969e:	0018      	movs	r0, r3
   196a0:	bd10      	pop	{r4, pc}
	if (abort) {
   196a2:	2c00      	cmp	r4, #0
   196a4:	d010      	beq.n	196c8 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
   196a6:	2200      	movs	r2, #0
   196a8:	4b10      	ldr	r3, [pc, #64]	; (196ec <sd_mmc_wait_end_of_read_blocks+0x5c>)
   196aa:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
   196ac:	4b10      	ldr	r3, [pc, #64]	; (196f0 <sd_mmc_wait_end_of_read_blocks+0x60>)
   196ae:	881b      	ldrh	r3, [r3, #0]
   196b0:	2b01      	cmp	r3, #1
   196b2:	d00f      	beq.n	196d4 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   196b4:	2100      	movs	r1, #0
   196b6:	480f      	ldr	r0, [pc, #60]	; (196f4 <sd_mmc_wait_end_of_read_blocks+0x64>)
   196b8:	4b0f      	ldr	r3, [pc, #60]	; (196f8 <sd_mmc_wait_end_of_read_blocks+0x68>)
   196ba:	4798      	blx	r3
   196bc:	2800      	cmp	r0, #0
   196be:	d00d      	beq.n	196dc <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
   196c0:	4b0e      	ldr	r3, [pc, #56]	; (196fc <sd_mmc_wait_end_of_read_blocks+0x6c>)
   196c2:	4798      	blx	r3
	return SD_MMC_OK;
   196c4:	2300      	movs	r3, #0
   196c6:	e7ea      	b.n	1969e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
   196c8:	4b08      	ldr	r3, [pc, #32]	; (196ec <sd_mmc_wait_end_of_read_blocks+0x5c>)
   196ca:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
   196cc:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
   196ce:	2a00      	cmp	r2, #0
   196d0:	d0ec      	beq.n	196ac <sd_mmc_wait_end_of_read_blocks+0x1c>
   196d2:	e7e4      	b.n	1969e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
   196d4:	4b09      	ldr	r3, [pc, #36]	; (196fc <sd_mmc_wait_end_of_read_blocks+0x6c>)
   196d6:	4798      	blx	r3
		return SD_MMC_OK;
   196d8:	2300      	movs	r3, #0
   196da:	e7e0      	b.n	1969e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   196dc:	2100      	movs	r1, #0
   196de:	4805      	ldr	r0, [pc, #20]	; (196f4 <sd_mmc_wait_end_of_read_blocks+0x64>)
   196e0:	4b05      	ldr	r3, [pc, #20]	; (196f8 <sd_mmc_wait_end_of_read_blocks+0x68>)
   196e2:	4798      	blx	r3
   196e4:	e7ec      	b.n	196c0 <sd_mmc_wait_end_of_read_blocks+0x30>
   196e6:	46c0      	nop			; (mov r8, r8)
   196e8:	00019fa9 	.word	0x00019fa9
   196ec:	20003d10 	.word	0x20003d10
   196f0:	20003d12 	.word	0x20003d12
   196f4:	0000310c 	.word	0x0000310c
   196f8:	00019e81 	.word	0x00019e81
   196fc:	0001909d 	.word	0x0001909d

00019700 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   19700:	b570      	push	{r4, r5, r6, lr}
   19702:	b082      	sub	sp, #8
   19704:	000e      	movs	r6, r1
   19706:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   19708:	4b11      	ldr	r3, [pc, #68]	; (19750 <sd_mmc_init_write_blocks+0x50>)
   1970a:	4798      	blx	r3
   1970c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
   1970e:	d116      	bne.n	1973e <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
   19710:	2d01      	cmp	r5, #1
   19712:	d917      	bls.n	19744 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   19714:	480f      	ldr	r0, [pc, #60]	; (19754 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   19716:	4b10      	ldr	r3, [pc, #64]	; (19758 <sd_mmc_init_write_blocks+0x58>)
   19718:	681b      	ldr	r3, [r3, #0]
   1971a:	7adb      	ldrb	r3, [r3, #11]
   1971c:	071b      	lsls	r3, r3, #28
   1971e:	d400      	bmi.n	19722 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   19720:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   19722:	2301      	movs	r3, #1
   19724:	9300      	str	r3, [sp, #0]
   19726:	002b      	movs	r3, r5
   19728:	2280      	movs	r2, #128	; 0x80
   1972a:	0092      	lsls	r2, r2, #2
   1972c:	0031      	movs	r1, r6
   1972e:	4e0b      	ldr	r6, [pc, #44]	; (1975c <sd_mmc_init_write_blocks+0x5c>)
   19730:	47b0      	blx	r6
   19732:	2800      	cmp	r0, #0
   19734:	d008      	beq.n	19748 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   19736:	4b0a      	ldr	r3, [pc, #40]	; (19760 <sd_mmc_init_write_blocks+0x60>)
   19738:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1973a:	4b0a      	ldr	r3, [pc, #40]	; (19764 <sd_mmc_init_write_blocks+0x64>)
   1973c:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
   1973e:	0020      	movs	r0, r4
   19740:	b002      	add	sp, #8
   19742:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   19744:	4808      	ldr	r0, [pc, #32]	; (19768 <sd_mmc_init_write_blocks+0x68>)
   19746:	e7e6      	b.n	19716 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
   19748:	4b08      	ldr	r3, [pc, #32]	; (1976c <sd_mmc_init_write_blocks+0x6c>)
   1974a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1974c:	2405      	movs	r4, #5
   1974e:	e7f6      	b.n	1973e <sd_mmc_init_write_blocks+0x3e>
   19750:	00018fbd 	.word	0x00018fbd
   19754:	00109119 	.word	0x00109119
   19758:	20003cec 	.word	0x20003cec
   1975c:	00019cf1 	.word	0x00019cf1
   19760:	20003d10 	.word	0x20003d10
   19764:	20003d12 	.word	0x20003d12
   19768:	00089118 	.word	0x00089118
   1976c:	0001909d 	.word	0x0001909d

00019770 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   19770:	b510      	push	{r4, lr}
   19772:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   19774:	4b07      	ldr	r3, [pc, #28]	; (19794 <sd_mmc_start_write_blocks+0x24>)
   19776:	4798      	blx	r3
   19778:	2800      	cmp	r0, #0
   1977a:	d104      	bne.n	19786 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
   1977c:	2200      	movs	r2, #0
   1977e:	4b06      	ldr	r3, [pc, #24]	; (19798 <sd_mmc_start_write_blocks+0x28>)
   19780:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   19782:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
   19784:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
   19786:	4a04      	ldr	r2, [pc, #16]	; (19798 <sd_mmc_start_write_blocks+0x28>)
   19788:	8813      	ldrh	r3, [r2, #0]
   1978a:	1b1c      	subs	r4, r3, r4
   1978c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
   1978e:	2000      	movs	r0, #0
   19790:	e7f8      	b.n	19784 <sd_mmc_start_write_blocks+0x14>
   19792:	46c0      	nop			; (mov r8, r8)
   19794:	00019fad 	.word	0x00019fad
   19798:	20003d10 	.word	0x20003d10

0001979c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1979c:	b510      	push	{r4, lr}
   1979e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
   197a0:	4b0e      	ldr	r3, [pc, #56]	; (197dc <sd_mmc_wait_end_of_write_blocks+0x40>)
   197a2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   197a4:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
   197a6:	2800      	cmp	r0, #0
   197a8:	d101      	bne.n	197ae <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
   197aa:	0018      	movs	r0, r3
   197ac:	bd10      	pop	{r4, pc}
	if (abort) {
   197ae:	2c00      	cmp	r4, #0
   197b0:	d00a      	beq.n	197c8 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
   197b2:	2200      	movs	r2, #0
   197b4:	4b0a      	ldr	r3, [pc, #40]	; (197e0 <sd_mmc_wait_end_of_write_blocks+0x44>)
   197b6:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
   197b8:	4b0a      	ldr	r3, [pc, #40]	; (197e4 <sd_mmc_wait_end_of_write_blocks+0x48>)
   197ba:	881b      	ldrh	r3, [r3, #0]
   197bc:	2b01      	cmp	r3, #1
   197be:	d009      	beq.n	197d4 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
   197c0:	4b09      	ldr	r3, [pc, #36]	; (197e8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
   197c2:	4798      	blx	r3
	return SD_MMC_OK;
   197c4:	2300      	movs	r3, #0
   197c6:	e7f0      	b.n	197aa <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
   197c8:	4b05      	ldr	r3, [pc, #20]	; (197e0 <sd_mmc_wait_end_of_write_blocks+0x44>)
   197ca:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
   197cc:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
   197ce:	2a00      	cmp	r2, #0
   197d0:	d0f2      	beq.n	197b8 <sd_mmc_wait_end_of_write_blocks+0x1c>
   197d2:	e7ea      	b.n	197aa <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
   197d4:	4b04      	ldr	r3, [pc, #16]	; (197e8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
   197d6:	4798      	blx	r3
		return SD_MMC_OK;
   197d8:	2300      	movs	r3, #0
   197da:	e7e6      	b.n	197aa <sd_mmc_wait_end_of_write_blocks+0xe>
   197dc:	0001a02d 	.word	0x0001a02d
   197e0:	20003d10 	.word	0x20003d10
   197e4:	20003d12 	.word	0x20003d12
   197e8:	0001909d 	.word	0x0001909d

000197ec <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   197ec:	b510      	push	{r4, lr}
   197ee:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
   197f0:	4b0f      	ldr	r3, [pc, #60]	; (19830 <sd_mmc_test_unit_ready+0x44>)
   197f2:	4798      	blx	r3
   197f4:	2801      	cmp	r0, #1
   197f6:	d019      	beq.n	1982c <sd_mmc_test_unit_ready+0x40>
   197f8:	2800      	cmp	r0, #0
   197fa:	d003      	beq.n	19804 <sd_mmc_test_unit_ready+0x18>
   197fc:	2802      	cmp	r0, #2
   197fe:	d010      	beq.n	19822 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
   19800:	2001      	movs	r0, #1
	}
}
   19802:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
   19804:	4b0b      	ldr	r3, [pc, #44]	; (19834 <sd_mmc_test_unit_ready+0x48>)
   19806:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
   19808:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
   1980a:	2b00      	cmp	r3, #0
   1980c:	d1f9      	bne.n	19802 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1980e:	0020      	movs	r0, r4
   19810:	4b09      	ldr	r3, [pc, #36]	; (19838 <sd_mmc_test_unit_ready+0x4c>)
   19812:	4798      	blx	r3
   19814:	0003      	movs	r3, r0
   19816:	2003      	movs	r0, #3
   19818:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
   1981a:	4243      	negs	r3, r0
   1981c:	4158      	adcs	r0, r3
   1981e:	0040      	lsls	r0, r0, #1
   19820:	e7ef      	b.n	19802 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
   19822:	2200      	movs	r2, #0
   19824:	4b03      	ldr	r3, [pc, #12]	; (19834 <sd_mmc_test_unit_ready+0x48>)
   19826:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
   19828:	2002      	movs	r0, #2
   1982a:	e7ea      	b.n	19802 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
   1982c:	2003      	movs	r0, #3
   1982e:	e7e8      	b.n	19802 <sd_mmc_test_unit_ready+0x16>
   19830:	000190d9 	.word	0x000190d9
   19834:	20003d18 	.word	0x20003d18
   19838:	00019589 	.word	0x00019589

0001983c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1983c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
   1983e:	2000      	movs	r0, #0
   19840:	4b01      	ldr	r3, [pc, #4]	; (19848 <sd_mmc_test_unit_ready_0+0xc>)
   19842:	4798      	blx	r3
}
   19844:	bd10      	pop	{r4, pc}
   19846:	46c0      	nop			; (mov r8, r8)
   19848:	000197ed 	.word	0x000197ed

0001984c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1984c:	b570      	push	{r4, r5, r6, lr}
   1984e:	0004      	movs	r4, r0
   19850:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   19852:	4b04      	ldr	r3, [pc, #16]	; (19864 <sd_mmc_read_capacity+0x18>)
   19854:	4798      	blx	r3
   19856:	0040      	lsls	r0, r0, #1
   19858:	3801      	subs	r0, #1
   1985a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
   1985c:	0020      	movs	r0, r4
   1985e:	4b02      	ldr	r3, [pc, #8]	; (19868 <sd_mmc_read_capacity+0x1c>)
   19860:	4798      	blx	r3
}
   19862:	bd70      	pop	{r4, r5, r6, pc}
   19864:	000195b1 	.word	0x000195b1
   19868:	000197ed 	.word	0x000197ed

0001986c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1986c:	b510      	push	{r4, lr}
   1986e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
   19870:	2000      	movs	r0, #0
   19872:	4b01      	ldr	r3, [pc, #4]	; (19878 <sd_mmc_read_capacity_0+0xc>)
   19874:	4798      	blx	r3
}
   19876:	bd10      	pop	{r4, pc}
   19878:	0001984d 	.word	0x0001984d

0001987c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
   1987c:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
   1987e:	2000      	movs	r0, #0
   19880:	4b01      	ldr	r3, [pc, #4]	; (19888 <sd_mmc_wr_protect_0+0xc>)
   19882:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
   19884:	bd10      	pop	{r4, pc}
   19886:	46c0      	nop			; (mov r8, r8)
   19888:	000195d9 	.word	0x000195d9

0001988c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1988c:	b510      	push	{r4, lr}
   1988e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   19890:	2201      	movs	r2, #1
   19892:	4b0c      	ldr	r3, [pc, #48]	; (198c4 <sd_mmc_mem_2_ram+0x38>)
   19894:	4798      	blx	r3
   19896:	2800      	cmp	r0, #0
   19898:	d004      	beq.n	198a4 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   1989a:	3802      	subs	r0, #2
   1989c:	4243      	negs	r3, r0
   1989e:	4158      	adcs	r0, r3
   198a0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   198a2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   198a4:	2101      	movs	r1, #1
   198a6:	0020      	movs	r0, r4
   198a8:	4b07      	ldr	r3, [pc, #28]	; (198c8 <sd_mmc_mem_2_ram+0x3c>)
   198aa:	4798      	blx	r3
   198ac:	0003      	movs	r3, r0
		return CTRL_FAIL;
   198ae:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   198b0:	2b00      	cmp	r3, #0
   198b2:	d1f6      	bne.n	198a2 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   198b4:	2000      	movs	r0, #0
   198b6:	4b05      	ldr	r3, [pc, #20]	; (198cc <sd_mmc_mem_2_ram+0x40>)
   198b8:	4798      	blx	r3
   198ba:	1e43      	subs	r3, r0, #1
   198bc:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   198be:	b2c0      	uxtb	r0, r0
   198c0:	e7ef      	b.n	198a2 <sd_mmc_mem_2_ram+0x16>
   198c2:	46c0      	nop			; (mov r8, r8)
   198c4:	000195dd 	.word	0x000195dd
   198c8:	00019665 	.word	0x00019665
   198cc:	00019691 	.word	0x00019691

000198d0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   198d0:	b510      	push	{r4, lr}
   198d2:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
   198d4:	0001      	movs	r1, r0
   198d6:	2000      	movs	r0, #0
   198d8:	4b01      	ldr	r3, [pc, #4]	; (198e0 <sd_mmc_mem_2_ram_0+0x10>)
   198da:	4798      	blx	r3
}
   198dc:	bd10      	pop	{r4, pc}
   198de:	46c0      	nop			; (mov r8, r8)
   198e0:	0001988d 	.word	0x0001988d

000198e4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   198e4:	b510      	push	{r4, lr}
   198e6:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   198e8:	2201      	movs	r2, #1
   198ea:	4b0c      	ldr	r3, [pc, #48]	; (1991c <sd_mmc_ram_2_mem+0x38>)
   198ec:	4798      	blx	r3
   198ee:	2800      	cmp	r0, #0
   198f0:	d004      	beq.n	198fc <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
   198f2:	3802      	subs	r0, #2
   198f4:	4243      	negs	r3, r0
   198f6:	4158      	adcs	r0, r3
   198f8:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
   198fa:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   198fc:	2101      	movs	r1, #1
   198fe:	0020      	movs	r0, r4
   19900:	4b07      	ldr	r3, [pc, #28]	; (19920 <sd_mmc_ram_2_mem+0x3c>)
   19902:	4798      	blx	r3
   19904:	0003      	movs	r3, r0
		return CTRL_FAIL;
   19906:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   19908:	2b00      	cmp	r3, #0
   1990a:	d1f6      	bne.n	198fa <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1990c:	2000      	movs	r0, #0
   1990e:	4b05      	ldr	r3, [pc, #20]	; (19924 <sd_mmc_ram_2_mem+0x40>)
   19910:	4798      	blx	r3
   19912:	1e43      	subs	r3, r0, #1
   19914:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
   19916:	b2c0      	uxtb	r0, r0
   19918:	e7ef      	b.n	198fa <sd_mmc_ram_2_mem+0x16>
   1991a:	46c0      	nop			; (mov r8, r8)
   1991c:	00019701 	.word	0x00019701
   19920:	00019771 	.word	0x00019771
   19924:	0001979d 	.word	0x0001979d

00019928 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   19928:	b510      	push	{r4, lr}
   1992a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
   1992c:	0001      	movs	r1, r0
   1992e:	2000      	movs	r0, #0
   19930:	4b01      	ldr	r3, [pc, #4]	; (19938 <sd_mmc_ram_2_mem_0+0x10>)
   19932:	4798      	blx	r3
}
   19934:	bd10      	pop	{r4, pc}
   19936:	46c0      	nop			; (mov r8, r8)
   19938:	000198e5 	.word	0x000198e5

0001993c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1993c:	b500      	push	{lr}
   1993e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
   19940:	466b      	mov	r3, sp
   19942:	1dd9      	adds	r1, r3, #7
   19944:	23ff      	movs	r3, #255	; 0xff
   19946:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   19948:	2201      	movs	r2, #1
   1994a:	480b      	ldr	r0, [pc, #44]	; (19978 <sd_mmc_spi_start_write_block+0x3c>)
   1994c:	4b0b      	ldr	r3, [pc, #44]	; (1997c <sd_mmc_spi_start_write_block+0x40>)
   1994e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   19950:	4b0b      	ldr	r3, [pc, #44]	; (19980 <sd_mmc_spi_start_write_block+0x44>)
   19952:	881b      	ldrh	r3, [r3, #0]
   19954:	2b01      	cmp	r3, #1
   19956:	d00a      	beq.n	1996e <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   19958:	22fc      	movs	r2, #252	; 0xfc
   1995a:	466b      	mov	r3, sp
   1995c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1995e:	2201      	movs	r2, #1
   19960:	466b      	mov	r3, sp
   19962:	1d99      	adds	r1, r3, #6
   19964:	4804      	ldr	r0, [pc, #16]	; (19978 <sd_mmc_spi_start_write_block+0x3c>)
   19966:	4b05      	ldr	r3, [pc, #20]	; (1997c <sd_mmc_spi_start_write_block+0x40>)
   19968:	4798      	blx	r3
}
   1996a:	b003      	add	sp, #12
   1996c:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
   1996e:	22fe      	movs	r2, #254	; 0xfe
   19970:	466b      	mov	r3, sp
   19972:	719a      	strb	r2, [r3, #6]
   19974:	e7f3      	b.n	1995e <sd_mmc_spi_start_write_block+0x22>
   19976:	46c0      	nop			; (mov r8, r8)
   19978:	20003d1c 	.word	0x20003d1c
   1997c:	0001e265 	.word	0x0001e265
   19980:	20003d60 	.word	0x20003d60

00019984 <sd_mmc_spi_wait_busy>:
{
   19984:	b5f0      	push	{r4, r5, r6, r7, lr}
   19986:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
   19988:	466b      	mov	r3, sp
   1998a:	1ddc      	adds	r4, r3, #7
   1998c:	23ff      	movs	r3, #255	; 0xff
   1998e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   19990:	4e12      	ldr	r6, [pc, #72]	; (199dc <sd_mmc_spi_wait_busy+0x58>)
   19992:	2201      	movs	r2, #1
   19994:	0021      	movs	r1, r4
   19996:	0030      	movs	r0, r6
   19998:	4d11      	ldr	r5, [pc, #68]	; (199e0 <sd_mmc_spi_wait_busy+0x5c>)
   1999a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1999c:	23ff      	movs	r3, #255	; 0xff
   1999e:	2201      	movs	r2, #1
   199a0:	0021      	movs	r1, r4
   199a2:	0030      	movs	r0, r6
   199a4:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   199a6:	23ff      	movs	r3, #255	; 0xff
   199a8:	2201      	movs	r2, #1
   199aa:	0021      	movs	r1, r4
   199ac:	0030      	movs	r0, r6
   199ae:	47a8      	blx	r5
   199b0:	4c0c      	ldr	r4, [pc, #48]	; (199e4 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
   199b2:	466b      	mov	r3, sp
   199b4:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   199b6:	4e09      	ldr	r6, [pc, #36]	; (199dc <sd_mmc_spi_wait_busy+0x58>)
   199b8:	4f09      	ldr	r7, [pc, #36]	; (199e0 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
   199ba:	782b      	ldrb	r3, [r5, #0]
   199bc:	2bff      	cmp	r3, #255	; 0xff
   199be:	d009      	beq.n	199d4 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   199c0:	23ff      	movs	r3, #255	; 0xff
   199c2:	2201      	movs	r2, #1
   199c4:	0029      	movs	r1, r5
   199c6:	0030      	movs	r0, r6
   199c8:	47b8      	blx	r7
   199ca:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
   199cc:	2c00      	cmp	r4, #0
   199ce:	d1f4      	bne.n	199ba <sd_mmc_spi_wait_busy+0x36>
			return false;
   199d0:	2000      	movs	r0, #0
   199d2:	e000      	b.n	199d6 <sd_mmc_spi_wait_busy+0x52>
	return true;
   199d4:	2001      	movs	r0, #1
}
   199d6:	b003      	add	sp, #12
   199d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   199da:	46c0      	nop			; (mov r8, r8)
   199dc:	20003d1c 	.word	0x20003d1c
   199e0:	0001e09d 	.word	0x0001e09d
   199e4:	00030d40 	.word	0x00030d40

000199e8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   199e8:	b570      	push	{r4, r5, r6, lr}
   199ea:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   199ec:	4b14      	ldr	r3, [pc, #80]	; (19a40 <sd_mmc_spi_stop_multiwrite_block+0x58>)
   199ee:	881c      	ldrh	r4, [r3, #0]
   199f0:	2c01      	cmp	r4, #1
   199f2:	d023      	beq.n	19a3c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   199f4:	4b13      	ldr	r3, [pc, #76]	; (19a44 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
   199f6:	8819      	ldrh	r1, [r3, #0]
   199f8:	4b13      	ldr	r3, [pc, #76]	; (19a48 <sd_mmc_spi_stop_multiwrite_block+0x60>)
   199fa:	6818      	ldr	r0, [r3, #0]
   199fc:	4b13      	ldr	r3, [pc, #76]	; (19a4c <sd_mmc_spi_stop_multiwrite_block+0x64>)
   199fe:	4798      	blx	r3
		return true; // It is not the End of multi write
   19a00:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
   19a02:	4284      	cmp	r4, r0
   19a04:	d902      	bls.n	19a0c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
   19a06:	0018      	movs	r0, r3
   19a08:	b002      	add	sp, #8
   19a0a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
   19a0c:	466b      	mov	r3, sp
   19a0e:	1ddc      	adds	r4, r3, #7
   19a10:	23ff      	movs	r3, #255	; 0xff
   19a12:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   19a14:	4e0e      	ldr	r6, [pc, #56]	; (19a50 <sd_mmc_spi_stop_multiwrite_block+0x68>)
   19a16:	2201      	movs	r2, #1
   19a18:	0021      	movs	r1, r4
   19a1a:	0030      	movs	r0, r6
   19a1c:	4d0d      	ldr	r5, [pc, #52]	; (19a54 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
   19a1e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
   19a20:	23fd      	movs	r3, #253	; 0xfd
   19a22:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   19a24:	2201      	movs	r2, #1
   19a26:	0021      	movs	r1, r4
   19a28:	0030      	movs	r0, r6
   19a2a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
   19a2c:	4b0a      	ldr	r3, [pc, #40]	; (19a58 <sd_mmc_spi_stop_multiwrite_block+0x70>)
   19a2e:	4798      	blx	r3
   19a30:	1e03      	subs	r3, r0, #0
   19a32:	d1e8      	bne.n	19a06 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   19a34:	2105      	movs	r1, #5
   19a36:	4a09      	ldr	r2, [pc, #36]	; (19a5c <sd_mmc_spi_stop_multiwrite_block+0x74>)
   19a38:	7011      	strb	r1, [r2, #0]
		return false;
   19a3a:	e7e4      	b.n	19a06 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
   19a3c:	2301      	movs	r3, #1
   19a3e:	e7e2      	b.n	19a06 <sd_mmc_spi_stop_multiwrite_block+0x1e>
   19a40:	20003d60 	.word	0x20003d60
   19a44:	20003d58 	.word	0x20003d58
   19a48:	20003d68 	.word	0x20003d68
   19a4c:	00023fe1 	.word	0x00023fe1
   19a50:	20003d1c 	.word	0x20003d1c
   19a54:	0001e265 	.word	0x0001e265
   19a58:	00019985 	.word	0x00019985
   19a5c:	20003d5f 	.word	0x20003d5f

00019a60 <sd_mmc_spi_start_read_block>:
{
   19a60:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a62:	b083      	sub	sp, #12
	token = 0;
   19a64:	2200      	movs	r2, #0
   19a66:	466b      	mov	r3, sp
   19a68:	71da      	strb	r2, [r3, #7]
   19a6a:	4c14      	ldr	r4, [pc, #80]	; (19abc <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   19a6c:	466b      	mov	r3, sp
   19a6e:	1ddd      	adds	r5, r3, #7
   19a70:	4e13      	ldr	r6, [pc, #76]	; (19ac0 <sd_mmc_spi_start_read_block+0x60>)
   19a72:	4f14      	ldr	r7, [pc, #80]	; (19ac4 <sd_mmc_spi_start_read_block+0x64>)
   19a74:	23ff      	movs	r3, #255	; 0xff
   19a76:	2201      	movs	r2, #1
   19a78:	0029      	movs	r1, r5
   19a7a:	0030      	movs	r0, r6
   19a7c:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   19a7e:	782b      	ldrb	r3, [r5, #0]
   19a80:	220f      	movs	r2, #15
   19a82:	0019      	movs	r1, r3
   19a84:	4391      	bics	r1, r2
   19a86:	1e0a      	subs	r2, r1, #0
   19a88:	d009      	beq.n	19a9e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   19a8a:	2bfe      	cmp	r3, #254	; 0xfe
   19a8c:	d013      	beq.n	19ab6 <sd_mmc_spi_start_read_block+0x56>
   19a8e:	3c01      	subs	r4, #1
		if (i-- == 0) {
   19a90:	2c00      	cmp	r4, #0
   19a92:	d1ef      	bne.n	19a74 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   19a94:	2204      	movs	r2, #4
   19a96:	4b0c      	ldr	r3, [pc, #48]	; (19ac8 <sd_mmc_spi_start_read_block+0x68>)
   19a98:	701a      	strb	r2, [r3, #0]
			return false;
   19a9a:	2000      	movs	r0, #0
   19a9c:	e00c      	b.n	19ab8 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   19a9e:	075b      	lsls	r3, r3, #29
   19aa0:	d004      	beq.n	19aac <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   19aa2:	3207      	adds	r2, #7
   19aa4:	4b08      	ldr	r3, [pc, #32]	; (19ac8 <sd_mmc_spi_start_read_block+0x68>)
   19aa6:	701a      	strb	r2, [r3, #0]
			return false;
   19aa8:	2000      	movs	r0, #0
   19aaa:	e005      	b.n	19ab8 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   19aac:	220b      	movs	r2, #11
   19aae:	4b06      	ldr	r3, [pc, #24]	; (19ac8 <sd_mmc_spi_start_read_block+0x68>)
   19ab0:	701a      	strb	r2, [r3, #0]
			return false;
   19ab2:	2000      	movs	r0, #0
   19ab4:	e000      	b.n	19ab8 <sd_mmc_spi_start_read_block+0x58>
	return true;
   19ab6:	2001      	movs	r0, #1
}
   19ab8:	b003      	add	sp, #12
   19aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19abc:	0007a120 	.word	0x0007a120
   19ac0:	20003d1c 	.word	0x20003d1c
   19ac4:	0001e09d 	.word	0x0001e09d
   19ac8:	20003d5f 	.word	0x20003d5f

00019acc <sd_mmc_spi_stop_write_block>:
{
   19acc:	b530      	push	{r4, r5, lr}
   19ace:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   19ad0:	a901      	add	r1, sp, #4
   19ad2:	2301      	movs	r3, #1
   19ad4:	425b      	negs	r3, r3
   19ad6:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   19ad8:	4d14      	ldr	r5, [pc, #80]	; (19b2c <sd_mmc_spi_stop_write_block+0x60>)
   19ada:	2202      	movs	r2, #2
   19adc:	0028      	movs	r0, r5
   19ade:	4b14      	ldr	r3, [pc, #80]	; (19b30 <sd_mmc_spi_stop_write_block+0x64>)
   19ae0:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   19ae2:	466b      	mov	r3, sp
   19ae4:	1ddc      	adds	r4, r3, #7
   19ae6:	23ff      	movs	r3, #255	; 0xff
   19ae8:	2201      	movs	r2, #1
   19aea:	0021      	movs	r1, r4
   19aec:	0028      	movs	r0, r5
   19aee:	4d11      	ldr	r5, [pc, #68]	; (19b34 <sd_mmc_spi_stop_write_block+0x68>)
   19af0:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   19af2:	7822      	ldrb	r2, [r4, #0]
   19af4:	2311      	movs	r3, #17
   19af6:	4013      	ands	r3, r2
   19af8:	2b01      	cmp	r3, #1
   19afa:	d005      	beq.n	19b08 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   19afc:	2201      	movs	r2, #1
   19afe:	4b0e      	ldr	r3, [pc, #56]	; (19b38 <sd_mmc_spi_stop_write_block+0x6c>)
   19b00:	701a      	strb	r2, [r3, #0]
		return false;
   19b02:	2000      	movs	r0, #0
}
   19b04:	b003      	add	sp, #12
   19b06:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   19b08:	231e      	movs	r3, #30
   19b0a:	401a      	ands	r2, r3
   19b0c:	2a04      	cmp	r2, #4
   19b0e:	d00b      	beq.n	19b28 <sd_mmc_spi_stop_write_block+0x5c>
   19b10:	2a0a      	cmp	r2, #10
   19b12:	d104      	bne.n	19b1e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   19b14:	3a02      	subs	r2, #2
   19b16:	4b08      	ldr	r3, [pc, #32]	; (19b38 <sd_mmc_spi_stop_write_block+0x6c>)
   19b18:	701a      	strb	r2, [r3, #0]
		return false;
   19b1a:	2000      	movs	r0, #0
   19b1c:	e7f2      	b.n	19b04 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   19b1e:	220a      	movs	r2, #10
   19b20:	4b05      	ldr	r3, [pc, #20]	; (19b38 <sd_mmc_spi_stop_write_block+0x6c>)
   19b22:	701a      	strb	r2, [r3, #0]
		return false;
   19b24:	2000      	movs	r0, #0
   19b26:	e7ed      	b.n	19b04 <sd_mmc_spi_stop_write_block+0x38>
	return true;
   19b28:	2001      	movs	r0, #1
   19b2a:	e7eb      	b.n	19b04 <sd_mmc_spi_stop_write_block+0x38>
   19b2c:	20003d1c 	.word	0x20003d1c
   19b30:	0001e265 	.word	0x0001e265
   19b34:	0001e09d 	.word	0x0001e09d
   19b38:	20003d5f 	.word	0x20003d5f

00019b3c <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   19b3c:	b570      	push	{r4, r5, r6, lr}
   19b3e:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19b40:	2300      	movs	r3, #0
   19b42:	4a2d      	ldr	r2, [pc, #180]	; (19bf8 <sd_mmc_spi_init+0xbc>)
   19b44:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   19b46:	ac02      	add	r4, sp, #8
   19b48:	2501      	movs	r5, #1
   19b4a:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   19b4c:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   19b4e:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   19b50:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
   19b52:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
   19b54:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   19b56:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   19b58:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   19b5a:	2224      	movs	r2, #36	; 0x24
   19b5c:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   19b5e:	3a18      	subs	r2, #24
   19b60:	2100      	movs	r1, #0
   19b62:	a808      	add	r0, sp, #32
   19b64:	4b25      	ldr	r3, [pc, #148]	; (19bfc <sd_mmc_spi_init+0xc0>)
   19b66:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   19b68:	2380      	movs	r3, #128	; 0x80
   19b6a:	025b      	lsls	r3, r3, #9
   19b6c:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   19b6e:	4b24      	ldr	r3, [pc, #144]	; (19c00 <sd_mmc_spi_init+0xc4>)
   19b70:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   19b72:	4b24      	ldr	r3, [pc, #144]	; (19c04 <sd_mmc_spi_init+0xc8>)
   19b74:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   19b76:	4b24      	ldr	r3, [pc, #144]	; (19c08 <sd_mmc_spi_init+0xcc>)
   19b78:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   19b7a:	4b24      	ldr	r3, [pc, #144]	; (19c0c <sd_mmc_spi_init+0xd0>)
   19b7c:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   19b7e:	4b24      	ldr	r3, [pc, #144]	; (19c10 <sd_mmc_spi_init+0xd4>)
   19b80:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   19b82:	4e24      	ldr	r6, [pc, #144]	; (19c14 <sd_mmc_spi_init+0xd8>)
   19b84:	0022      	movs	r2, r4
   19b86:	4924      	ldr	r1, [pc, #144]	; (19c18 <sd_mmc_spi_init+0xdc>)
   19b88:	0030      	movs	r0, r6
   19b8a:	4b24      	ldr	r3, [pc, #144]	; (19c1c <sd_mmc_spi_init+0xe0>)
   19b8c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   19b8e:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   19b90:	0020      	movs	r0, r4
   19b92:	4b23      	ldr	r3, [pc, #140]	; (19c20 <sd_mmc_spi_init+0xe4>)
   19b94:	4798      	blx	r3
   19b96:	231f      	movs	r3, #31
   19b98:	4018      	ands	r0, r3
   19b9a:	4085      	lsls	r5, r0
   19b9c:	4b21      	ldr	r3, [pc, #132]	; (19c24 <sd_mmc_spi_init+0xe8>)
   19b9e:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   19ba0:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
   19ba2:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
   19ba4:	2b00      	cmp	r3, #0
   19ba6:	d1fc      	bne.n	19ba2 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   19ba8:	6823      	ldr	r3, [r4, #0]
   19baa:	2202      	movs	r2, #2
   19bac:	4313      	orrs	r3, r2
   19bae:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
   19bb0:	4a1d      	ldr	r2, [pc, #116]	; (19c28 <sd_mmc_spi_init+0xec>)
   19bb2:	2300      	movs	r3, #0
   19bb4:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
   19bb6:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
   19bb8:	491c      	ldr	r1, [pc, #112]	; (19c2c <sd_mmc_spi_init+0xf0>)
   19bba:	7808      	ldrb	r0, [r1, #0]
   19bbc:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
   19bbe:	4c1c      	ldr	r4, [pc, #112]	; (19c30 <sd_mmc_spi_init+0xf4>)
   19bc0:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
   19bc2:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
   19bc4:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   19bc6:	a901      	add	r1, sp, #4
   19bc8:	2201      	movs	r2, #1
   19bca:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
   19bcc:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   19bce:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   19bd0:	4b18      	ldr	r3, [pc, #96]	; (19c34 <sd_mmc_spi_init+0xf8>)
   19bd2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   19bd4:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   19bd6:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
   19bd8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   19bda:	2900      	cmp	r1, #0
   19bdc:	d104      	bne.n	19be8 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
   19bde:	0953      	lsrs	r3, r2, #5
   19be0:	01db      	lsls	r3, r3, #7
   19be2:	4915      	ldr	r1, [pc, #84]	; (19c38 <sd_mmc_spi_init+0xfc>)
   19be4:	468c      	mov	ip, r1
   19be6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   19be8:	211f      	movs	r1, #31
   19bea:	4011      	ands	r1, r2
   19bec:	2201      	movs	r2, #1
   19bee:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   19bf0:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
   19bf2:	b010      	add	sp, #64	; 0x40
   19bf4:	bd70      	pop	{r4, r5, r6, pc}
   19bf6:	46c0      	nop			; (mov r8, r8)
   19bf8:	20003d5f 	.word	0x20003d5f
   19bfc:	0002624b 	.word	0x0002624b
   19c00:	00100002 	.word	0x00100002
   19c04:	00110002 	.word	0x00110002
   19c08:	00120002 	.word	0x00120002
   19c0c:	00130002 	.word	0x00130002
   19c10:	00061a80 	.word	0x00061a80
   19c14:	20003d1c 	.word	0x20003d1c
   19c18:	42000c00 	.word	0x42000c00
   19c1c:	0001dec5 	.word	0x0001dec5
   19c20:	0001dd7d 	.word	0x0001dd7d
   19c24:	e000e100 	.word	0xe000e100
   19c28:	20003d6c 	.word	0x20003d6c
   19c2c:	200000b8 	.word	0x200000b8
   19c30:	20003d5c 	.word	0x20003d5c
   19c34:	0001d769 	.word	0x0001d769
   19c38:	41004400 	.word	0x41004400

00019c3c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   19c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c3e:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19c40:	2200      	movs	r2, #0
   19c42:	4b0d      	ldr	r3, [pc, #52]	; (19c78 <sd_mmc_spi_select_device+0x3c>)
   19c44:	701a      	strb	r2, [r3, #0]
   19c46:	000c      	movs	r4, r1
   19c48:	4b0c      	ldr	r3, [pc, #48]	; (19c7c <sd_mmc_spi_select_device+0x40>)
   19c4a:	4299      	cmp	r1, r3
   19c4c:	d900      	bls.n	19c50 <sd_mmc_spi_select_device+0x14>
   19c4e:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   19c50:	4d0b      	ldr	r5, [pc, #44]	; (19c80 <sd_mmc_spi_select_device+0x44>)
   19c52:	4e0c      	ldr	r6, [pc, #48]	; (19c84 <sd_mmc_spi_select_device+0x48>)
   19c54:	e001      	b.n	19c5a <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
   19c56:	08e3      	lsrs	r3, r4, #3
   19c58:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   19c5a:	0021      	movs	r1, r4
   19c5c:	0028      	movs	r0, r5
   19c5e:	47b0      	blx	r6
   19c60:	2817      	cmp	r0, #23
   19c62:	d0f8      	beq.n	19c56 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   19c64:	0079      	lsls	r1, r7, #1
   19c66:	19cf      	adds	r7, r1, r7
   19c68:	4907      	ldr	r1, [pc, #28]	; (19c88 <sd_mmc_spi_select_device+0x4c>)
   19c6a:	19c9      	adds	r1, r1, r7
   19c6c:	2201      	movs	r2, #1
   19c6e:	4804      	ldr	r0, [pc, #16]	; (19c80 <sd_mmc_spi_select_device+0x44>)
   19c70:	4b06      	ldr	r3, [pc, #24]	; (19c8c <sd_mmc_spi_select_device+0x50>)
   19c72:	4798      	blx	r3
}
   19c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19c76:	46c0      	nop			; (mov r8, r8)
   19c78:	20003d5f 	.word	0x20003d5f
   19c7c:	00989680 	.word	0x00989680
   19c80:	20003d1c 	.word	0x20003d1c
   19c84:	0001de0d 	.word	0x0001de0d
   19c88:	20003d5c 	.word	0x20003d5c
   19c8c:	0001e171 	.word	0x0001e171

00019c90 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   19c90:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19c92:	2200      	movs	r2, #0
   19c94:	4b04      	ldr	r3, [pc, #16]	; (19ca8 <sd_mmc_spi_deselect_device+0x18>)
   19c96:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   19c98:	0041      	lsls	r1, r0, #1
   19c9a:	1808      	adds	r0, r1, r0
   19c9c:	4903      	ldr	r1, [pc, #12]	; (19cac <sd_mmc_spi_deselect_device+0x1c>)
   19c9e:	1809      	adds	r1, r1, r0
   19ca0:	4803      	ldr	r0, [pc, #12]	; (19cb0 <sd_mmc_spi_deselect_device+0x20>)
   19ca2:	4b04      	ldr	r3, [pc, #16]	; (19cb4 <sd_mmc_spi_deselect_device+0x24>)
   19ca4:	4798      	blx	r3
}
   19ca6:	bd10      	pop	{r4, pc}
   19ca8:	20003d5f 	.word	0x20003d5f
   19cac:	20003d5c 	.word	0x20003d5c
   19cb0:	20003d1c 	.word	0x20003d1c
   19cb4:	0001e171 	.word	0x0001e171

00019cb8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   19cb8:	b570      	push	{r4, r5, r6, lr}
   19cba:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
   19cbc:	22ff      	movs	r2, #255	; 0xff
   19cbe:	466b      	mov	r3, sp
   19cc0:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19cc2:	2200      	movs	r2, #0
   19cc4:	4b07      	ldr	r3, [pc, #28]	; (19ce4 <sd_mmc_spi_send_clock+0x2c>)
   19cc6:	701a      	strb	r2, [r3, #0]
   19cc8:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   19cca:	4e07      	ldr	r6, [pc, #28]	; (19ce8 <sd_mmc_spi_send_clock+0x30>)
   19ccc:	4d07      	ldr	r5, [pc, #28]	; (19cec <sd_mmc_spi_send_clock+0x34>)
   19cce:	2201      	movs	r2, #1
   19cd0:	466b      	mov	r3, sp
   19cd2:	1dd9      	adds	r1, r3, #7
   19cd4:	0030      	movs	r0, r6
   19cd6:	47a8      	blx	r5
   19cd8:	3c01      	subs	r4, #1
   19cda:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
   19cdc:	2c00      	cmp	r4, #0
   19cde:	d1f6      	bne.n	19cce <sd_mmc_spi_send_clock+0x16>
	}
}
   19ce0:	b002      	add	sp, #8
   19ce2:	bd70      	pop	{r4, r5, r6, pc}
   19ce4:	20003d5f 	.word	0x20003d5f
   19ce8:	20003d1c 	.word	0x20003d1c
   19cec:	0001e265 	.word	0x0001e265

00019cf0 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   19cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19cf2:	46c6      	mov	lr, r8
   19cf4:	b500      	push	{lr}
   19cf6:	b086      	sub	sp, #24
   19cf8:	4680      	mov	r8, r0
   19cfa:	9200      	str	r2, [sp, #0]
   19cfc:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
   19cfe:	22ff      	movs	r2, #255	; 0xff
   19d00:	230f      	movs	r3, #15
   19d02:	a802      	add	r0, sp, #8
   19d04:	4684      	mov	ip, r0
   19d06:	4463      	add	r3, ip
   19d08:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19d0a:	2200      	movs	r2, #0
   19d0c:	4b53      	ldr	r3, [pc, #332]	; (19e5c <sd_mmc_spi_adtc_start+0x16c>)
   19d0e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   19d10:	ab04      	add	r3, sp, #16
   19d12:	323f      	adds	r2, #63	; 0x3f
   19d14:	4640      	mov	r0, r8
   19d16:	4002      	ands	r2, r0
   19d18:	2040      	movs	r0, #64	; 0x40
   19d1a:	4302      	orrs	r2, r0
   19d1c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   19d1e:	0e0a      	lsrs	r2, r1, #24
   19d20:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   19d22:	0c0a      	lsrs	r2, r1, #16
   19d24:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   19d26:	0a0a      	lsrs	r2, r1, #8
   19d28:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   19d2a:	7119      	strb	r1, [r3, #4]
   19d2c:	2700      	movs	r7, #0
	crc = 0;
   19d2e:	2300      	movs	r3, #0
		value = *buf++;
   19d30:	a904      	add	r1, sp, #16
   19d32:	2208      	movs	r2, #8
				crc ^= 0x09;
   19d34:	2409      	movs	r4, #9
   19d36:	e011      	b.n	19d5c <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
   19d38:	0076      	lsls	r6, r6, #1
   19d3a:	b2f6      	uxtb	r6, r6
   19d3c:	3801      	subs	r0, #1
   19d3e:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
   19d40:	2800      	cmp	r0, #0
   19d42:	d008      	beq.n	19d56 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
   19d44:	005b      	lsls	r3, r3, #1
   19d46:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
   19d48:	001d      	movs	r5, r3
   19d4a:	4075      	eors	r5, r6
   19d4c:	062d      	lsls	r5, r5, #24
   19d4e:	d5f3      	bpl.n	19d38 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
   19d50:	4063      	eors	r3, r4
   19d52:	b2db      	uxtb	r3, r3
   19d54:	e7f0      	b.n	19d38 <sd_mmc_spi_adtc_start+0x48>
   19d56:	3701      	adds	r7, #1
	while (size--) {
   19d58:	2f05      	cmp	r7, #5
   19d5a:	d002      	beq.n	19d62 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
   19d5c:	5c7e      	ldrb	r6, [r7, r1]
   19d5e:	0010      	movs	r0, r2
   19d60:	e7f0      	b.n	19d44 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
   19d62:	005b      	lsls	r3, r3, #1
   19d64:	2201      	movs	r2, #1
   19d66:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   19d68:	ac04      	add	r4, sp, #16
   19d6a:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   19d6c:	4e3c      	ldr	r6, [pc, #240]	; (19e60 <sd_mmc_spi_adtc_start+0x170>)
   19d6e:	2201      	movs	r2, #1
   19d70:	210f      	movs	r1, #15
   19d72:	ab02      	add	r3, sp, #8
   19d74:	469c      	mov	ip, r3
   19d76:	4461      	add	r1, ip
   19d78:	0030      	movs	r0, r6
   19d7a:	4f3a      	ldr	r7, [pc, #232]	; (19e64 <sd_mmc_spi_adtc_start+0x174>)
   19d7c:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   19d7e:	2206      	movs	r2, #6
   19d80:	0021      	movs	r1, r4
   19d82:	0030      	movs	r0, r6
   19d84:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   19d86:	ab02      	add	r3, sp, #8
   19d88:	1dd9      	adds	r1, r3, #7
   19d8a:	23ff      	movs	r3, #255	; 0xff
   19d8c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   19d8e:	2201      	movs	r2, #1
   19d90:	0030      	movs	r0, r6
   19d92:	4e35      	ldr	r6, [pc, #212]	; (19e68 <sd_mmc_spi_adtc_start+0x178>)
   19d94:	47b0      	blx	r6
   19d96:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   19d98:	ab02      	add	r3, sp, #8
   19d9a:	1dde      	adds	r6, r3, #7
   19d9c:	4f30      	ldr	r7, [pc, #192]	; (19e60 <sd_mmc_spi_adtc_start+0x170>)
   19d9e:	4d32      	ldr	r5, [pc, #200]	; (19e68 <sd_mmc_spi_adtc_start+0x178>)
   19da0:	23ff      	movs	r3, #255	; 0xff
   19da2:	2201      	movs	r2, #1
   19da4:	0031      	movs	r1, r6
   19da6:	0038      	movs	r0, r7
   19da8:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   19daa:	7833      	ldrb	r3, [r6, #0]
   19dac:	b25a      	sxtb	r2, r3
   19dae:	2a00      	cmp	r2, #0
   19db0:	da0b      	bge.n	19dca <sd_mmc_spi_adtc_start+0xda>
   19db2:	3c01      	subs	r4, #1
   19db4:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   19db6:	2c00      	cmp	r4, #0
   19db8:	d1f2      	bne.n	19da0 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   19dba:	2202      	movs	r2, #2
   19dbc:	4b27      	ldr	r3, [pc, #156]	; (19e5c <sd_mmc_spi_adtc_start+0x16c>)
   19dbe:	701a      	strb	r2, [r3, #0]
			return false;
   19dc0:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
   19dc2:	b006      	add	sp, #24
   19dc4:	bc04      	pop	{r2}
   19dc6:	4690      	mov	r8, r2
   19dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
   19dca:	4a28      	ldr	r2, [pc, #160]	; (19e6c <sd_mmc_spi_adtc_start+0x17c>)
   19dcc:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
   19dce:	071a      	lsls	r2, r3, #28
   19dd0:	d41a      	bmi.n	19e08 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   19dd2:	075a      	lsls	r2, r3, #29
   19dd4:	d41d      	bmi.n	19e12 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
   19dd6:	2201      	movs	r2, #1
   19dd8:	4393      	bics	r3, r2
   19dda:	d11f      	bne.n	19e1c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
   19ddc:	4643      	mov	r3, r8
   19dde:	049b      	lsls	r3, r3, #18
   19de0:	d420      	bmi.n	19e24 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
   19de2:	4643      	mov	r3, r8
   19de4:	059b      	lsls	r3, r3, #22
   19de6:	d425      	bmi.n	19e34 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
   19de8:	4643      	mov	r3, r8
   19dea:	055b      	lsls	r3, r3, #21
   19dec:	d42b      	bmi.n	19e46 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
   19dee:	4b20      	ldr	r3, [pc, #128]	; (19e70 <sd_mmc_spi_adtc_start+0x180>)
   19df0:	466a      	mov	r2, sp
   19df2:	8812      	ldrh	r2, [r2, #0]
   19df4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   19df6:	4b1f      	ldr	r3, [pc, #124]	; (19e74 <sd_mmc_spi_adtc_start+0x184>)
   19df8:	466a      	mov	r2, sp
   19dfa:	8892      	ldrh	r2, [r2, #4]
   19dfc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   19dfe:	2200      	movs	r2, #0
   19e00:	4b1d      	ldr	r3, [pc, #116]	; (19e78 <sd_mmc_spi_adtc_start+0x188>)
   19e02:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   19e04:	2001      	movs	r0, #1
   19e06:	e7dc      	b.n	19dc2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   19e08:	2206      	movs	r2, #6
   19e0a:	4b14      	ldr	r3, [pc, #80]	; (19e5c <sd_mmc_spi_adtc_start+0x16c>)
   19e0c:	701a      	strb	r2, [r3, #0]
		return false;
   19e0e:	2000      	movs	r0, #0
   19e10:	e7d7      	b.n	19dc2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   19e12:	2209      	movs	r2, #9
   19e14:	4b11      	ldr	r3, [pc, #68]	; (19e5c <sd_mmc_spi_adtc_start+0x16c>)
   19e16:	701a      	strb	r2, [r3, #0]
		return false;
   19e18:	2000      	movs	r0, #0
   19e1a:	e7d2      	b.n	19dc2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   19e1c:	4b0f      	ldr	r3, [pc, #60]	; (19e5c <sd_mmc_spi_adtc_start+0x16c>)
   19e1e:	701a      	strb	r2, [r3, #0]
		return false;
   19e20:	2000      	movs	r0, #0
   19e22:	e7ce      	b.n	19dc2 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
   19e24:	4b15      	ldr	r3, [pc, #84]	; (19e7c <sd_mmc_spi_adtc_start+0x18c>)
   19e26:	4798      	blx	r3
   19e28:	2800      	cmp	r0, #0
   19e2a:	d1da      	bne.n	19de2 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   19e2c:	2203      	movs	r2, #3
   19e2e:	4b0b      	ldr	r3, [pc, #44]	; (19e5c <sd_mmc_spi_adtc_start+0x16c>)
   19e30:	701a      	strb	r2, [r3, #0]
			return false;
   19e32:	e7c6      	b.n	19dc2 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
   19e34:	490d      	ldr	r1, [pc, #52]	; (19e6c <sd_mmc_spi_adtc_start+0x17c>)
   19e36:	2300      	movs	r3, #0
   19e38:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   19e3a:	33ff      	adds	r3, #255	; 0xff
   19e3c:	2201      	movs	r2, #1
   19e3e:	4808      	ldr	r0, [pc, #32]	; (19e60 <sd_mmc_spi_adtc_start+0x170>)
   19e40:	4e09      	ldr	r6, [pc, #36]	; (19e68 <sd_mmc_spi_adtc_start+0x178>)
   19e42:	47b0      	blx	r6
   19e44:	e7d0      	b.n	19de8 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   19e46:	4e09      	ldr	r6, [pc, #36]	; (19e6c <sd_mmc_spi_adtc_start+0x17c>)
   19e48:	23ff      	movs	r3, #255	; 0xff
   19e4a:	2204      	movs	r2, #4
   19e4c:	0031      	movs	r1, r6
   19e4e:	4804      	ldr	r0, [pc, #16]	; (19e60 <sd_mmc_spi_adtc_start+0x170>)
   19e50:	4f05      	ldr	r7, [pc, #20]	; (19e68 <sd_mmc_spi_adtc_start+0x178>)
   19e52:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   19e54:	6833      	ldr	r3, [r6, #0]
   19e56:	ba1b      	rev	r3, r3
   19e58:	6033      	str	r3, [r6, #0]
   19e5a:	e7c8      	b.n	19dee <sd_mmc_spi_adtc_start+0xfe>
   19e5c:	20003d5f 	.word	0x20003d5f
   19e60:	20003d1c 	.word	0x20003d1c
   19e64:	0001e265 	.word	0x0001e265
   19e68:	0001e09d 	.word	0x0001e09d
   19e6c:	20003d64 	.word	0x20003d64
   19e70:	20003d58 	.word	0x20003d58
   19e74:	20003d60 	.word	0x20003d60
   19e78:	20003d68 	.word	0x20003d68
   19e7c:	00019985 	.word	0x00019985

00019e80 <sd_mmc_spi_send_cmd>:
{
   19e80:	b510      	push	{r4, lr}
   19e82:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   19e84:	2300      	movs	r3, #0
   19e86:	9300      	str	r3, [sp, #0]
   19e88:	2200      	movs	r2, #0
   19e8a:	4c02      	ldr	r4, [pc, #8]	; (19e94 <sd_mmc_spi_send_cmd+0x14>)
   19e8c:	47a0      	blx	r4
}
   19e8e:	b002      	add	sp, #8
   19e90:	bd10      	pop	{r4, pc}
   19e92:	46c0      	nop			; (mov r8, r8)
   19e94:	00019cf1 	.word	0x00019cf1

00019e98 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
   19e98:	4b01      	ldr	r3, [pc, #4]	; (19ea0 <sd_mmc_spi_get_response+0x8>)
   19e9a:	6818      	ldr	r0, [r3, #0]
}
   19e9c:	4770      	bx	lr
   19e9e:	46c0      	nop			; (mov r8, r8)
   19ea0:	20003d64 	.word	0x20003d64

00019ea4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   19ea4:	b510      	push	{r4, lr}
   19ea6:	b084      	sub	sp, #16
   19ea8:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19eaa:	2200      	movs	r2, #0
   19eac:	4b14      	ldr	r3, [pc, #80]	; (19f00 <sd_mmc_spi_read_word+0x5c>)
   19eae:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   19eb0:	4b14      	ldr	r3, [pc, #80]	; (19f04 <sd_mmc_spi_read_word+0x60>)
   19eb2:	8819      	ldrh	r1, [r3, #0]
   19eb4:	4b14      	ldr	r3, [pc, #80]	; (19f08 <sd_mmc_spi_read_word+0x64>)
   19eb6:	6818      	ldr	r0, [r3, #0]
   19eb8:	4b14      	ldr	r3, [pc, #80]	; (19f0c <sd_mmc_spi_read_word+0x68>)
   19eba:	4798      	blx	r3
   19ebc:	2900      	cmp	r1, #0
   19ebe:	d103      	bne.n	19ec8 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   19ec0:	4b13      	ldr	r3, [pc, #76]	; (19f10 <sd_mmc_spi_read_word+0x6c>)
   19ec2:	4798      	blx	r3
   19ec4:	2800      	cmp	r0, #0
   19ec6:	d010      	beq.n	19eea <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   19ec8:	23ff      	movs	r3, #255	; 0xff
   19eca:	2204      	movs	r2, #4
   19ecc:	a901      	add	r1, sp, #4
   19ece:	4811      	ldr	r0, [pc, #68]	; (19f14 <sd_mmc_spi_read_word+0x70>)
   19ed0:	4c11      	ldr	r4, [pc, #68]	; (19f18 <sd_mmc_spi_read_word+0x74>)
   19ed2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
   19ed4:	4b0c      	ldr	r3, [pc, #48]	; (19f08 <sd_mmc_spi_read_word+0x64>)
   19ed6:	681a      	ldr	r2, [r3, #0]
   19ed8:	1d10      	adds	r0, r2, #4
   19eda:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   19edc:	4b09      	ldr	r3, [pc, #36]	; (19f04 <sd_mmc_spi_read_word+0x60>)
   19ede:	8819      	ldrh	r1, [r3, #0]
   19ee0:	4b0a      	ldr	r3, [pc, #40]	; (19f0c <sd_mmc_spi_read_word+0x68>)
   19ee2:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
   19ee4:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   19ee6:	2900      	cmp	r1, #0
   19ee8:	d001      	beq.n	19eee <sd_mmc_spi_read_word+0x4a>
}
   19eea:	b004      	add	sp, #16
   19eec:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   19eee:	23ff      	movs	r3, #255	; 0xff
   19ef0:	2202      	movs	r2, #2
   19ef2:	a903      	add	r1, sp, #12
   19ef4:	4807      	ldr	r0, [pc, #28]	; (19f14 <sd_mmc_spi_read_word+0x70>)
   19ef6:	4c08      	ldr	r4, [pc, #32]	; (19f18 <sd_mmc_spi_read_word+0x74>)
   19ef8:	47a0      	blx	r4
	return true;
   19efa:	2001      	movs	r0, #1
   19efc:	e7f5      	b.n	19eea <sd_mmc_spi_read_word+0x46>
   19efe:	46c0      	nop			; (mov r8, r8)
   19f00:	20003d5f 	.word	0x20003d5f
   19f04:	20003d58 	.word	0x20003d58
   19f08:	20003d68 	.word	0x20003d68
   19f0c:	000240ed 	.word	0x000240ed
   19f10:	00019a61 	.word	0x00019a61
   19f14:	20003d1c 	.word	0x20003d1c
   19f18:	0001e09d 	.word	0x0001e09d

00019f1c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   19f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f1e:	46de      	mov	lr, fp
   19f20:	4657      	mov	r7, sl
   19f22:	4646      	mov	r6, r8
   19f24:	b5c0      	push	{r6, r7, lr}
   19f26:	b082      	sub	sp, #8
   19f28:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19f2a:	2200      	movs	r2, #0
   19f2c:	4b17      	ldr	r3, [pc, #92]	; (19f8c <sd_mmc_spi_start_read_blocks+0x70>)
   19f2e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
   19f30:	1e4c      	subs	r4, r1, #1
   19f32:	b2a4      	uxth	r4, r4
   19f34:	2900      	cmp	r1, #0
   19f36:	d026      	beq.n	19f86 <sd_mmc_spi_start_read_blocks+0x6a>
   19f38:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   19f3a:	4b15      	ldr	r3, [pc, #84]	; (19f90 <sd_mmc_spi_start_read_blocks+0x74>)
   19f3c:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   19f3e:	4f15      	ldr	r7, [pc, #84]	; (19f94 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
   19f40:	47d0      	blx	sl
   19f42:	4680      	mov	r8, r0
   19f44:	2800      	cmp	r0, #0
   19f46:	d017      	beq.n	19f78 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   19f48:	883a      	ldrh	r2, [r7, #0]
   19f4a:	465b      	mov	r3, fp
   19f4c:	1999      	adds	r1, r3, r6
   19f4e:	23ff      	movs	r3, #255	; 0xff
   19f50:	4811      	ldr	r0, [pc, #68]	; (19f98 <sd_mmc_spi_start_read_blocks+0x7c>)
   19f52:	4d12      	ldr	r5, [pc, #72]	; (19f9c <sd_mmc_spi_start_read_blocks+0x80>)
   19f54:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   19f56:	883b      	ldrh	r3, [r7, #0]
   19f58:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   19f5a:	4a11      	ldr	r2, [pc, #68]	; (19fa0 <sd_mmc_spi_start_read_blocks+0x84>)
   19f5c:	6811      	ldr	r1, [r2, #0]
   19f5e:	468c      	mov	ip, r1
   19f60:	4463      	add	r3, ip
   19f62:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   19f64:	23ff      	movs	r3, #255	; 0xff
   19f66:	2202      	movs	r2, #2
   19f68:	a901      	add	r1, sp, #4
   19f6a:	480b      	ldr	r0, [pc, #44]	; (19f98 <sd_mmc_spi_start_read_blocks+0x7c>)
   19f6c:	47a8      	blx	r5
	while (nb_block--) {
   19f6e:	3c01      	subs	r4, #1
   19f70:	b2a4      	uxth	r4, r4
   19f72:	4b0c      	ldr	r3, [pc, #48]	; (19fa4 <sd_mmc_spi_start_read_blocks+0x88>)
   19f74:	429c      	cmp	r4, r3
   19f76:	d1e3      	bne.n	19f40 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
   19f78:	4640      	mov	r0, r8
   19f7a:	b002      	add	sp, #8
   19f7c:	bc1c      	pop	{r2, r3, r4}
   19f7e:	4690      	mov	r8, r2
   19f80:	469a      	mov	sl, r3
   19f82:	46a3      	mov	fp, r4
   19f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   19f86:	2301      	movs	r3, #1
   19f88:	4698      	mov	r8, r3
   19f8a:	e7f5      	b.n	19f78 <sd_mmc_spi_start_read_blocks+0x5c>
   19f8c:	20003d5f 	.word	0x20003d5f
   19f90:	00019a61 	.word	0x00019a61
   19f94:	20003d58 	.word	0x20003d58
   19f98:	20003d1c 	.word	0x20003d1c
   19f9c:	0001e09d 	.word	0x0001e09d
   19fa0:	20003d68 	.word	0x20003d68
   19fa4:	0000ffff 	.word	0x0000ffff

00019fa8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
   19fa8:	2001      	movs	r0, #1
   19faa:	4770      	bx	lr

00019fac <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   19fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   19fae:	46c6      	mov	lr, r8
   19fb0:	b500      	push	{lr}
   19fb2:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   19fb4:	2200      	movs	r2, #0
   19fb6:	4b15      	ldr	r3, [pc, #84]	; (1a00c <sd_mmc_spi_start_write_blocks+0x60>)
   19fb8:	701a      	strb	r2, [r3, #0]
	pos = 0;
   19fba:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   19fbc:	4f14      	ldr	r7, [pc, #80]	; (1a010 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   19fbe:	4e15      	ldr	r6, [pc, #84]	; (1a014 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
   19fc0:	e000      	b.n	19fc4 <sd_mmc_spi_start_write_blocks+0x18>
{
   19fc2:	0021      	movs	r1, r4
	while (nb_block--) {
   19fc4:	1e4c      	subs	r4, r1, #1
   19fc6:	b2a4      	uxth	r4, r4
   19fc8:	2900      	cmp	r1, #0
   19fca:	d01b      	beq.n	1a004 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
   19fcc:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   19fce:	8832      	ldrh	r2, [r6, #0]
   19fd0:	4643      	mov	r3, r8
   19fd2:	1959      	adds	r1, r3, r5
   19fd4:	4810      	ldr	r0, [pc, #64]	; (1a018 <sd_mmc_spi_start_write_blocks+0x6c>)
   19fd6:	4b11      	ldr	r3, [pc, #68]	; (1a01c <sd_mmc_spi_start_write_blocks+0x70>)
   19fd8:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   19fda:	8833      	ldrh	r3, [r6, #0]
   19fdc:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   19fde:	4a10      	ldr	r2, [pc, #64]	; (1a020 <sd_mmc_spi_start_write_blocks+0x74>)
   19fe0:	6811      	ldr	r1, [r2, #0]
   19fe2:	468c      	mov	ip, r1
   19fe4:	4463      	add	r3, ip
   19fe6:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   19fe8:	4b0e      	ldr	r3, [pc, #56]	; (1a024 <sd_mmc_spi_start_write_blocks+0x78>)
   19fea:	4798      	blx	r3
   19fec:	2800      	cmp	r0, #0
   19fee:	d00a      	beq.n	1a006 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   19ff0:	2c00      	cmp	r4, #0
   19ff2:	d0e6      	beq.n	19fc2 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   19ff4:	4b0c      	ldr	r3, [pc, #48]	; (1a028 <sd_mmc_spi_start_write_blocks+0x7c>)
   19ff6:	4798      	blx	r3
   19ff8:	2800      	cmp	r0, #0
   19ffa:	d1e2      	bne.n	19fc2 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   19ffc:	2205      	movs	r2, #5
   19ffe:	4b03      	ldr	r3, [pc, #12]	; (1a00c <sd_mmc_spi_start_write_blocks+0x60>)
   1a000:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1a002:	e000      	b.n	1a006 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
   1a004:	2001      	movs	r0, #1
}
   1a006:	bc04      	pop	{r2}
   1a008:	4690      	mov	r8, r2
   1a00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a00c:	20003d5f 	.word	0x20003d5f
   1a010:	0001993d 	.word	0x0001993d
   1a014:	20003d58 	.word	0x20003d58
   1a018:	20003d1c 	.word	0x20003d1c
   1a01c:	0001e265 	.word	0x0001e265
   1a020:	20003d68 	.word	0x20003d68
   1a024:	00019acd 	.word	0x00019acd
   1a028:	00019985 	.word	0x00019985

0001a02c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1a02c:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1a02e:	4b05      	ldr	r3, [pc, #20]	; (1a044 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
   1a030:	4798      	blx	r3
   1a032:	2800      	cmp	r0, #0
   1a034:	d103      	bne.n	1a03e <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1a036:	2205      	movs	r2, #5
   1a038:	4b03      	ldr	r3, [pc, #12]	; (1a048 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
   1a03a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
   1a03c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
   1a03e:	4b03      	ldr	r3, [pc, #12]	; (1a04c <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
   1a040:	4798      	blx	r3
   1a042:	e7fb      	b.n	1a03c <sd_mmc_spi_wait_end_of_write_blocks+0x10>
   1a044:	00019985 	.word	0x00019985
   1a048:	20003d5f 	.word	0x20003d5f
   1a04c:	000199e9 	.word	0x000199e9

0001a050 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1a050:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1a052:	2000      	movs	r0, #0
   1a054:	4b08      	ldr	r3, [pc, #32]	; (1a078 <delay_init+0x28>)
   1a056:	4798      	blx	r3
   1a058:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
   1a05a:	4c08      	ldr	r4, [pc, #32]	; (1a07c <delay_init+0x2c>)
   1a05c:	21fa      	movs	r1, #250	; 0xfa
   1a05e:	0089      	lsls	r1, r1, #2
   1a060:	47a0      	blx	r4
   1a062:	4b07      	ldr	r3, [pc, #28]	; (1a080 <delay_init+0x30>)
   1a064:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1a066:	4907      	ldr	r1, [pc, #28]	; (1a084 <delay_init+0x34>)
   1a068:	0028      	movs	r0, r5
   1a06a:	47a0      	blx	r4
   1a06c:	4b06      	ldr	r3, [pc, #24]	; (1a088 <delay_init+0x38>)
   1a06e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1a070:	2205      	movs	r2, #5
   1a072:	4b06      	ldr	r3, [pc, #24]	; (1a08c <delay_init+0x3c>)
   1a074:	601a      	str	r2, [r3, #0]
}
   1a076:	bd70      	pop	{r4, r5, r6, pc}
   1a078:	0001ef8d 	.word	0x0001ef8d
   1a07c:	00023fe1 	.word	0x00023fe1
   1a080:	200000bc 	.word	0x200000bc
   1a084:	000f4240 	.word	0x000f4240
   1a088:	200000c0 	.word	0x200000c0
   1a08c:	e000e010 	.word	0xe000e010

0001a090 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   1a090:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1a092:	4b08      	ldr	r3, [pc, #32]	; (1a0b4 <delay_cycles_ms+0x24>)
   1a094:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
   1a096:	4a08      	ldr	r2, [pc, #32]	; (1a0b8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
   1a098:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1a09a:	2180      	movs	r1, #128	; 0x80
   1a09c:	0249      	lsls	r1, r1, #9
	while (n--) {
   1a09e:	3801      	subs	r0, #1
   1a0a0:	d307      	bcc.n	1a0b2 <delay_cycles_ms+0x22>
	if (n > 0) {
   1a0a2:	2c00      	cmp	r4, #0
   1a0a4:	d0fb      	beq.n	1a09e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
   1a0a6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
   1a0a8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1a0aa:	6813      	ldr	r3, [r2, #0]
   1a0ac:	420b      	tst	r3, r1
   1a0ae:	d0fc      	beq.n	1a0aa <delay_cycles_ms+0x1a>
   1a0b0:	e7f5      	b.n	1a09e <delay_cycles_ms+0xe>
	}
}
   1a0b2:	bd30      	pop	{r4, r5, pc}
   1a0b4:	200000bc 	.word	0x200000bc
   1a0b8:	e000e010 	.word	0xe000e010

0001a0bc <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1a0bc:	b510      	push	{r4, lr}
	if (gpfIsr) {
   1a0be:	4b03      	ldr	r3, [pc, #12]	; (1a0cc <chip_isr+0x10>)
   1a0c0:	681b      	ldr	r3, [r3, #0]
   1a0c2:	2b00      	cmp	r3, #0
   1a0c4:	d000      	beq.n	1a0c8 <chip_isr+0xc>
		gpfIsr();
   1a0c6:	4798      	blx	r3
	}
}
   1a0c8:	bd10      	pop	{r4, pc}
   1a0ca:	46c0      	nop			; (mov r8, r8)
   1a0cc:	20003d70 	.word	0x20003d70

0001a0d0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1a0d0:	b570      	push	{r4, r5, r6, lr}
   1a0d2:	b082      	sub	sp, #8
	gpfIsr = NULL;
   1a0d4:	2300      	movs	r3, #0
   1a0d6:	4a15      	ldr	r2, [pc, #84]	; (1a12c <nm_bsp_init+0x5c>)
   1a0d8:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1a0da:	ac01      	add	r4, sp, #4
   1a0dc:	2501      	movs	r5, #1
   1a0de:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1a0e0:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1a0e2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1a0e4:	0021      	movs	r1, r4
   1a0e6:	201b      	movs	r0, #27
   1a0e8:	4e11      	ldr	r6, [pc, #68]	; (1a130 <nm_bsp_init+0x60>)
   1a0ea:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1a0ec:	0021      	movs	r1, r4
   1a0ee:	201c      	movs	r0, #28
   1a0f0:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1a0f2:	0021      	movs	r1, r4
   1a0f4:	2028      	movs	r0, #40	; 0x28
   1a0f6:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
   1a0f8:	4b0e      	ldr	r3, [pc, #56]	; (1a134 <nm_bsp_init+0x64>)
   1a0fa:	2280      	movs	r2, #128	; 0x80
   1a0fc:	0552      	lsls	r2, r2, #21
   1a0fe:	615a      	str	r2, [r3, #20]
   1a100:	2280      	movs	r2, #128	; 0x80
   1a102:	0512      	lsls	r2, r2, #20
   1a104:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1a106:	4b0c      	ldr	r3, [pc, #48]	; (1a138 <nm_bsp_init+0x68>)
   1a108:	681b      	ldr	r3, [r3, #0]
   1a10a:	421d      	tst	r5, r3
   1a10c:	d003      	beq.n	1a116 <nm_bsp_init+0x46>
   1a10e:	4b0a      	ldr	r3, [pc, #40]	; (1a138 <nm_bsp_init+0x68>)
   1a110:	681b      	ldr	r3, [r3, #0]
   1a112:	079b      	lsls	r3, r3, #30
   1a114:	d401      	bmi.n	1a11a <nm_bsp_init+0x4a>
	    delay_init();
   1a116:	4b09      	ldr	r3, [pc, #36]	; (1a13c <nm_bsp_init+0x6c>)
   1a118:	4798      	blx	r3
	cpu_irq_enable();
   1a11a:	2201      	movs	r2, #1
   1a11c:	4b08      	ldr	r3, [pc, #32]	; (1a140 <nm_bsp_init+0x70>)
   1a11e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1a120:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1a124:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
   1a126:	2000      	movs	r0, #0
   1a128:	b002      	add	sp, #8
   1a12a:	bd70      	pop	{r4, r5, r6, pc}
   1a12c:	20003d70 	.word	0x20003d70
   1a130:	0001d769 	.word	0x0001d769
   1a134:	41004400 	.word	0x41004400
   1a138:	e000e010 	.word	0xe000e010
   1a13c:	0001a051 	.word	0x0001a051
   1a140:	200000c6 	.word	0x200000c6

0001a144 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1a144:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
   1a146:	1e44      	subs	r4, r0, #1
   1a148:	2800      	cmp	r0, #0
   1a14a:	d004      	beq.n	1a156 <nm_bsp_sleep+0x12>
		delay_ms(1);
   1a14c:	4d02      	ldr	r5, [pc, #8]	; (1a158 <nm_bsp_sleep+0x14>)
   1a14e:	2001      	movs	r0, #1
   1a150:	47a8      	blx	r5
	while (u32TimeMsec--) {
   1a152:	3c01      	subs	r4, #1
   1a154:	d2fb      	bcs.n	1a14e <nm_bsp_sleep+0xa>
	}
}
   1a156:	bd70      	pop	{r4, r5, r6, pc}
   1a158:	0001a091 	.word	0x0001a091

0001a15c <nm_bsp_reset>:
{
   1a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a15e:	4c07      	ldr	r4, [pc, #28]	; (1a17c <nm_bsp_reset+0x20>)
   1a160:	2780      	movs	r7, #128	; 0x80
   1a162:	057f      	lsls	r7, r7, #21
   1a164:	6167      	str	r7, [r4, #20]
   1a166:	2580      	movs	r5, #128	; 0x80
   1a168:	052d      	lsls	r5, r5, #20
   1a16a:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
   1a16c:	2001      	movs	r0, #1
   1a16e:	4e04      	ldr	r6, [pc, #16]	; (1a180 <nm_bsp_reset+0x24>)
   1a170:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
   1a172:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
   1a174:	200a      	movs	r0, #10
   1a176:	47b0      	blx	r6
   1a178:	61a5      	str	r5, [r4, #24]
}
   1a17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a17c:	41004400 	.word	0x41004400
   1a180:	0001a145 	.word	0x0001a145

0001a184 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1a184:	b510      	push	{r4, lr}
   1a186:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1a188:	4b0e      	ldr	r3, [pc, #56]	; (1a1c4 <nm_bsp_register_isr+0x40>)
   1a18a:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1a18c:	ac01      	add	r4, sp, #4
   1a18e:	0020      	movs	r0, r4
   1a190:	4b0d      	ldr	r3, [pc, #52]	; (1a1c8 <nm_bsp_register_isr+0x44>)
   1a192:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1a194:	2329      	movs	r3, #41	; 0x29
   1a196:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1a198:	2300      	movs	r3, #0
   1a19a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1a19c:	3301      	adds	r3, #1
   1a19e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1a1a0:	3301      	adds	r3, #1
   1a1a2:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1a1a4:	0021      	movs	r1, r4
   1a1a6:	2009      	movs	r0, #9
   1a1a8:	4b08      	ldr	r3, [pc, #32]	; (1a1cc <nm_bsp_register_isr+0x48>)
   1a1aa:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1a1ac:	2200      	movs	r2, #0
   1a1ae:	2109      	movs	r1, #9
   1a1b0:	4807      	ldr	r0, [pc, #28]	; (1a1d0 <nm_bsp_register_isr+0x4c>)
   1a1b2:	4b08      	ldr	r3, [pc, #32]	; (1a1d4 <nm_bsp_register_isr+0x50>)
   1a1b4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1a1b6:	2100      	movs	r1, #0
   1a1b8:	2009      	movs	r0, #9
   1a1ba:	4b07      	ldr	r3, [pc, #28]	; (1a1d8 <nm_bsp_register_isr+0x54>)
   1a1bc:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1a1be:	b004      	add	sp, #16
   1a1c0:	bd10      	pop	{r4, pc}
   1a1c2:	46c0      	nop			; (mov r8, r8)
   1a1c4:	20003d70 	.word	0x20003d70
   1a1c8:	0001d6dd 	.word	0x0001d6dd
   1a1cc:	0001d6f1 	.word	0x0001d6f1
   1a1d0:	0001a0bd 	.word	0x0001a0bd
   1a1d4:	0001d599 	.word	0x0001d599
   1a1d8:	0001d5c5 	.word	0x0001d5c5

0001a1dc <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1a1dc:	b510      	push	{r4, lr}
	if (u8Enable) {
   1a1de:	2800      	cmp	r0, #0
   1a1e0:	d104      	bne.n	1a1ec <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1a1e2:	2100      	movs	r1, #0
   1a1e4:	2009      	movs	r0, #9
   1a1e6:	4b04      	ldr	r3, [pc, #16]	; (1a1f8 <nm_bsp_interrupt_ctrl+0x1c>)
   1a1e8:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1a1ea:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1a1ec:	2100      	movs	r1, #0
   1a1ee:	2009      	movs	r0, #9
   1a1f0:	4b02      	ldr	r3, [pc, #8]	; (1a1fc <nm_bsp_interrupt_ctrl+0x20>)
   1a1f2:	4798      	blx	r3
   1a1f4:	e7f9      	b.n	1a1ea <nm_bsp_interrupt_ctrl+0xe>
   1a1f6:	46c0      	nop			; (mov r8, r8)
   1a1f8:	0001d5e5 	.word	0x0001d5e5
   1a1fc:	0001d5c5 	.word	0x0001d5c5

0001a200 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1a200:	b530      	push	{r4, r5, lr}
   1a202:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
   1a204:	4c30      	ldr	r4, [pc, #192]	; (1a2c8 <nm_bus_init+0xc8>)
   1a206:	230e      	movs	r3, #14
   1a208:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
   1a20a:	2300      	movs	r3, #0
   1a20c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
   1a20e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
   1a210:	a901      	add	r1, sp, #4
   1a212:	2201      	movs	r2, #1
   1a214:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
   1a216:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1a218:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1a21a:	200e      	movs	r0, #14
   1a21c:	4b2b      	ldr	r3, [pc, #172]	; (1a2cc <nm_bus_init+0xcc>)
   1a21e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1a220:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
   1a222:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1a224:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1a226:	2900      	cmp	r1, #0
   1a228:	d104      	bne.n	1a234 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
   1a22a:	0953      	lsrs	r3, r2, #5
   1a22c:	01db      	lsls	r3, r3, #7
   1a22e:	4928      	ldr	r1, [pc, #160]	; (1a2d0 <nm_bus_init+0xd0>)
   1a230:	468c      	mov	ip, r1
   1a232:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1a234:	211f      	movs	r1, #31
   1a236:	4011      	ands	r1, r2
   1a238:	2201      	movs	r2, #1
   1a23a:	0010      	movs	r0, r2
   1a23c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
   1a23e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
   1a240:	ac02      	add	r4, sp, #8
   1a242:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1a244:	2300      	movs	r3, #0
   1a246:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1a248:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1a24a:	21c0      	movs	r1, #192	; 0xc0
   1a24c:	0389      	lsls	r1, r1, #14
   1a24e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1a250:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
   1a252:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
   1a254:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
   1a256:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
   1a258:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1a25a:	3223      	adds	r2, #35	; 0x23
   1a25c:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1a25e:	3a18      	subs	r2, #24
   1a260:	2100      	movs	r1, #0
   1a262:	a808      	add	r0, sp, #32
   1a264:	4b1b      	ldr	r3, [pc, #108]	; (1a2d4 <nm_bus_init+0xd4>)
   1a266:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1a268:	4b1b      	ldr	r3, [pc, #108]	; (1a2d8 <nm_bus_init+0xd8>)
   1a26a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1a26c:	4b1b      	ldr	r3, [pc, #108]	; (1a2dc <nm_bus_init+0xdc>)
   1a26e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1a270:	2301      	movs	r3, #1
   1a272:	425b      	negs	r3, r3
   1a274:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1a276:	4b1a      	ldr	r3, [pc, #104]	; (1a2e0 <nm_bus_init+0xe0>)
   1a278:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1a27a:	4b1a      	ldr	r3, [pc, #104]	; (1a2e4 <nm_bus_init+0xe4>)
   1a27c:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1a27e:	0022      	movs	r2, r4
   1a280:	4919      	ldr	r1, [pc, #100]	; (1a2e8 <nm_bus_init+0xe8>)
   1a282:	481a      	ldr	r0, [pc, #104]	; (1a2ec <nm_bus_init+0xec>)
   1a284:	4b1a      	ldr	r3, [pc, #104]	; (1a2f0 <nm_bus_init+0xf0>)
   1a286:	4798      	blx	r3
   1a288:	2800      	cmp	r0, #0
   1a28a:	d11a      	bne.n	1a2c2 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a28c:	4d17      	ldr	r5, [pc, #92]	; (1a2ec <nm_bus_init+0xec>)
   1a28e:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1a290:	0020      	movs	r0, r4
   1a292:	4b18      	ldr	r3, [pc, #96]	; (1a2f4 <nm_bus_init+0xf4>)
   1a294:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a296:	231f      	movs	r3, #31
   1a298:	4018      	ands	r0, r3
   1a29a:	3b1e      	subs	r3, #30
   1a29c:	4083      	lsls	r3, r0
   1a29e:	4a16      	ldr	r2, [pc, #88]	; (1a2f8 <nm_bus_init+0xf8>)
   1a2a0:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a2a2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1a2a4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1a2a6:	2b00      	cmp	r3, #0
   1a2a8:	d1fc      	bne.n	1a2a4 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1a2aa:	6823      	ldr	r3, [r4, #0]
   1a2ac:	2202      	movs	r2, #2
   1a2ae:	4313      	orrs	r3, r2
   1a2b0:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
   1a2b2:	4b12      	ldr	r3, [pc, #72]	; (1a2fc <nm_bus_init+0xfc>)
   1a2b4:	4798      	blx	r3
	nm_bsp_sleep(1);
   1a2b6:	2001      	movs	r0, #1
   1a2b8:	4b11      	ldr	r3, [pc, #68]	; (1a300 <nm_bus_init+0x100>)
   1a2ba:	4798      	blx	r3
#endif
	return result;
   1a2bc:	2000      	movs	r0, #0
}
   1a2be:	b011      	add	sp, #68	; 0x44
   1a2c0:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
   1a2c2:	2006      	movs	r0, #6
   1a2c4:	4240      	negs	r0, r0
   1a2c6:	e7fa      	b.n	1a2be <nm_bus_init+0xbe>
   1a2c8:	200053e0 	.word	0x200053e0
   1a2cc:	0001d769 	.word	0x0001d769
   1a2d0:	41004400 	.word	0x41004400
   1a2d4:	0002624b 	.word	0x0002624b
   1a2d8:	000c0002 	.word	0x000c0002
   1a2dc:	000d0002 	.word	0x000d0002
   1a2e0:	000f0002 	.word	0x000f0002
   1a2e4:	00124f80 	.word	0x00124f80
   1a2e8:	42001000 	.word	0x42001000
   1a2ec:	200053e4 	.word	0x200053e4
   1a2f0:	0001dec5 	.word	0x0001dec5
   1a2f4:	0001dd7d 	.word	0x0001dd7d
   1a2f8:	e000e100 	.word	0xe000e100
   1a2fc:	0001a15d 	.word	0x0001a15d
   1a300:	0001a145 	.word	0x0001a145

0001a304 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1a304:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a306:	46de      	mov	lr, fp
   1a308:	4657      	mov	r7, sl
   1a30a:	464e      	mov	r6, r9
   1a30c:	4645      	mov	r5, r8
   1a30e:	b5e0      	push	{r5, r6, r7, lr}
   1a310:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
   1a312:	2803      	cmp	r0, #3
   1a314:	d000      	beq.n	1a318 <nm_bus_ioctl+0x14>
   1a316:	e075      	b.n	1a404 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1a318:	680e      	ldr	r6, [r1, #0]
   1a31a:	684d      	ldr	r5, [r1, #4]
   1a31c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0xFF;
   1a31e:	22ff      	movs	r2, #255	; 0xff
   1a320:	466b      	mov	r3, sp
   1a322:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1a324:	2d00      	cmp	r5, #0
   1a326:	d027      	beq.n	1a378 <nm_bus_ioctl+0x74>
   1a328:	2c00      	cmp	r4, #0
   1a32a:	d065      	beq.n	1a3f8 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
   1a32c:	2e00      	cmp	r6, #0
   1a32e:	d100      	bne.n	1a332 <nm_bus_ioctl+0x2e>
   1a330:	e075      	b.n	1a41e <nm_bus_ioctl+0x11a>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1a332:	2300      	movs	r3, #0
   1a334:	4698      	mov	r8, r3
   1a336:	2300      	movs	r3, #0
   1a338:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
   1a33a:	2201      	movs	r2, #1
   1a33c:	493a      	ldr	r1, [pc, #232]	; (1a428 <nm_bus_ioctl+0x124>)
   1a33e:	483b      	ldr	r0, [pc, #236]	; (1a42c <nm_bus_ioctl+0x128>)
   1a340:	4b3b      	ldr	r3, [pc, #236]	; (1a430 <nm_bus_ioctl+0x12c>)
   1a342:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1a344:	4b39      	ldr	r3, [pc, #228]	; (1a42c <nm_bus_ioctl+0x128>)
   1a346:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
   1a348:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
   1a34a:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1a34c:	4699      	mov	r9, r3
			pu8Miso++;
   1a34e:	4659      	mov	r1, fp
   1a350:	424b      	negs	r3, r1
   1a352:	4159      	adcs	r1, r3
   1a354:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
   1a356:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a358:	4653      	mov	r3, sl
   1a35a:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1a35c:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
   1a35e:	4239      	tst	r1, r7
   1a360:	d0fc      	beq.n	1a35c <nm_bus_ioctl+0x58>
   1a362:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   1a364:	4239      	tst	r1, r7
   1a366:	d0fc      	beq.n	1a362 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1a368:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1a36a:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
   1a36c:	4211      	tst	r1, r2
   1a36e:	d0fc      	beq.n	1a36a <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1a370:	4649      	mov	r1, r9
   1a372:	7989      	ldrb	r1, [r1, #6]
   1a374:	468c      	mov	ip, r1
   1a376:	e011      	b.n	1a39c <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1a378:	2e00      	cmp	r6, #0
   1a37a:	d03a      	beq.n	1a3f2 <nm_bus_ioctl+0xee>
   1a37c:	2c00      	cmp	r4, #0
   1a37e:	d03e      	beq.n	1a3fe <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1a380:	2300      	movs	r3, #0
   1a382:	4698      	mov	r8, r3
		u8SkipMiso = 1;
   1a384:	3301      	adds	r3, #1
   1a386:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
   1a388:	466b      	mov	r3, sp
   1a38a:	1ddd      	adds	r5, r3, #7
   1a38c:	e7d5      	b.n	1a33a <nm_bus_ioctl+0x36>
   1a38e:	4660      	mov	r0, ip
   1a390:	2801      	cmp	r0, #1
   1a392:	d00d      	beq.n	1a3b0 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1a394:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1a396:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1a398:	2900      	cmp	r1, #0
   1a39a:	d00d      	beq.n	1a3b8 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1a39c:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
   1a39e:	4211      	tst	r1, r2
   1a3a0:	d0fc      	beq.n	1a39c <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1a3a2:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
   1a3a4:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1a3a6:	4210      	tst	r0, r2
   1a3a8:	d0f1      	beq.n	1a38e <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1a3aa:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
   1a3ac:	311e      	adds	r1, #30
   1a3ae:	e7ee      	b.n	1a38e <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1a3b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1a3b2:	05c0      	lsls	r0, r0, #23
   1a3b4:	0dc0      	lsrs	r0, r0, #23
   1a3b6:	e7ef      	b.n	1a398 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
   1a3b8:	7028      	strb	r0, [r5, #0]
		u16Sz--;
   1a3ba:	3c01      	subs	r4, #1
   1a3bc:	b2a4      	uxth	r4, r4
			pu8Miso++;
   1a3be:	445d      	add	r5, fp
			pu8Mosi++;
   1a3c0:	4643      	mov	r3, r8
   1a3c2:	4259      	negs	r1, r3
   1a3c4:	414b      	adcs	r3, r1
   1a3c6:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
   1a3c8:	2c00      	cmp	r4, #0
   1a3ca:	d1c4      	bne.n	1a356 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a3cc:	4b17      	ldr	r3, [pc, #92]	; (1a42c <nm_bus_ioctl+0x128>)
   1a3ce:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
   1a3d0:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1a3d2:	7e0b      	ldrb	r3, [r1, #24]
   1a3d4:	4213      	tst	r3, r2
   1a3d6:	d0fc      	beq.n	1a3d2 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
   1a3d8:	2200      	movs	r2, #0
   1a3da:	4913      	ldr	r1, [pc, #76]	; (1a428 <nm_bus_ioctl+0x124>)
   1a3dc:	4813      	ldr	r0, [pc, #76]	; (1a42c <nm_bus_ioctl+0x128>)
   1a3de:	4b14      	ldr	r3, [pc, #80]	; (1a430 <nm_bus_ioctl+0x12c>)
   1a3e0:	4798      	blx	r3
	return M2M_SUCCESS;
   1a3e2:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
   1a3e4:	b003      	add	sp, #12
   1a3e6:	bc3c      	pop	{r2, r3, r4, r5}
   1a3e8:	4690      	mov	r8, r2
   1a3ea:	4699      	mov	r9, r3
   1a3ec:	46a2      	mov	sl, r4
   1a3ee:	46ab      	mov	fp, r5
   1a3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
   1a3f2:	200f      	movs	r0, #15
   1a3f4:	4240      	negs	r0, r0
   1a3f6:	e7f5      	b.n	1a3e4 <nm_bus_ioctl+0xe0>
   1a3f8:	200f      	movs	r0, #15
   1a3fa:	4240      	negs	r0, r0
   1a3fc:	e7f2      	b.n	1a3e4 <nm_bus_ioctl+0xe0>
   1a3fe:	200f      	movs	r0, #15
   1a400:	4240      	negs	r0, r0
		break;
   1a402:	e7ef      	b.n	1a3e4 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
   1a404:	2283      	movs	r2, #131	; 0x83
   1a406:	0052      	lsls	r2, r2, #1
   1a408:	490a      	ldr	r1, [pc, #40]	; (1a434 <nm_bus_ioctl+0x130>)
   1a40a:	480b      	ldr	r0, [pc, #44]	; (1a438 <nm_bus_ioctl+0x134>)
   1a40c:	4c0b      	ldr	r4, [pc, #44]	; (1a43c <nm_bus_ioctl+0x138>)
   1a40e:	47a0      	blx	r4
   1a410:	480b      	ldr	r0, [pc, #44]	; (1a440 <nm_bus_ioctl+0x13c>)
   1a412:	47a0      	blx	r4
   1a414:	480b      	ldr	r0, [pc, #44]	; (1a444 <nm_bus_ioctl+0x140>)
   1a416:	47a0      	blx	r4
			s8Ret = -1;
   1a418:	2001      	movs	r0, #1
   1a41a:	4240      	negs	r0, r0
	return s8Ret;
   1a41c:	e7e2      	b.n	1a3e4 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
   1a41e:	2301      	movs	r3, #1
   1a420:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
   1a422:	466b      	mov	r3, sp
   1a424:	1dde      	adds	r6, r3, #7
   1a426:	e786      	b.n	1a336 <nm_bus_ioctl+0x32>
   1a428:	200053e0 	.word	0x200053e0
   1a42c:	200053e4 	.word	0x200053e4
   1a430:	0001e171 	.word	0x0001e171
   1a434:	000293ac 	.word	0x000293ac
   1a438:	000293bc 	.word	0x000293bc
   1a43c:	00018f7d 	.word	0x00018f7d
   1a440:	000293d0 	.word	0x000293d0
   1a444:	000293e4 	.word	0x000293e4

0001a448 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1a448:	b530      	push	{r4, r5, lr}
   1a44a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
   1a44c:	ab01      	add	r3, sp, #4
   1a44e:	2200      	movs	r2, #0
   1a450:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
   1a452:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1a454:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a456:	4d13      	ldr	r5, [pc, #76]	; (1a4a4 <nm_bus_deinit+0x5c>)
   1a458:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1a45a:	0020      	movs	r0, r4
   1a45c:	4b12      	ldr	r3, [pc, #72]	; (1a4a8 <nm_bus_deinit+0x60>)
   1a45e:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a460:	231f      	movs	r3, #31
   1a462:	4018      	ands	r0, r3
   1a464:	3b1e      	subs	r3, #30
   1a466:	4083      	lsls	r3, r0
   1a468:	2280      	movs	r2, #128	; 0x80
   1a46a:	4910      	ldr	r1, [pc, #64]	; (1a4ac <nm_bus_deinit+0x64>)
   1a46c:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1a46e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1a470:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1a472:	2b00      	cmp	r3, #0
   1a474:	d1fc      	bne.n	1a470 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1a476:	338f      	adds	r3, #143	; 0x8f
   1a478:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1a47a:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1a47c:	6823      	ldr	r3, [r4, #0]
   1a47e:	2202      	movs	r2, #2
   1a480:	4393      	bics	r3, r2
   1a482:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1a484:	a901      	add	r1, sp, #4
   1a486:	200c      	movs	r0, #12
   1a488:	4c09      	ldr	r4, [pc, #36]	; (1a4b0 <nm_bus_deinit+0x68>)
   1a48a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1a48c:	a901      	add	r1, sp, #4
   1a48e:	200f      	movs	r0, #15
   1a490:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1a492:	a901      	add	r1, sp, #4
   1a494:	200d      	movs	r0, #13
   1a496:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1a498:	a901      	add	r1, sp, #4
   1a49a:	200e      	movs	r0, #14
   1a49c:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
   1a49e:	2000      	movs	r0, #0
   1a4a0:	b003      	add	sp, #12
   1a4a2:	bd30      	pop	{r4, r5, pc}
   1a4a4:	200053e4 	.word	0x200053e4
   1a4a8:	0001dd7d 	.word	0x0001dd7d
   1a4ac:	e000e100 	.word	0xe000e100
   1a4b0:	0001d769 	.word	0x0001d769

0001a4b4 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
   1a4b4:	2a00      	cmp	r2, #0
   1a4b6:	d006      	beq.n	1a4c6 <m2m_memcpy+0x12>
   1a4b8:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
   1a4ba:	780b      	ldrb	r3, [r1, #0]
   1a4bc:	7003      	strb	r3, [r0, #0]
		pDst++;
   1a4be:	3001      	adds	r0, #1
		pSrc++;
   1a4c0:	3101      	adds	r1, #1
	}while(--sz);
   1a4c2:	4290      	cmp	r0, r2
   1a4c4:	d1f9      	bne.n	1a4ba <m2m_memcpy+0x6>
}
   1a4c6:	4770      	bx	lr

0001a4c8 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
   1a4c8:	2a00      	cmp	r2, #0
   1a4ca:	d004      	beq.n	1a4d6 <m2m_memset+0xe>
   1a4cc:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
   1a4ce:	7001      	strb	r1, [r0, #0]
		pBuf++;
   1a4d0:	3001      	adds	r0, #1
	}while(--sz);
   1a4d2:	4290      	cmp	r0, r2
   1a4d4:	d1fb      	bne.n	1a4ce <m2m_memset+0x6>
}
   1a4d6:	4770      	bx	lr

0001a4d8 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1a4d8:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
   1a4da:	7802      	ldrb	r2, [r0, #0]
   1a4dc:	2a00      	cmp	r2, #0
   1a4de:	d007      	beq.n	1a4f0 <m2m_strlen+0x18>
   1a4e0:	2000      	movs	r0, #0
	{
		u16StrLen ++;
   1a4e2:	3001      	adds	r0, #1
   1a4e4:	b280      	uxth	r0, r0
		pcStr++;
   1a4e6:	3301      	adds	r3, #1
	while(*pcStr)
   1a4e8:	781a      	ldrb	r2, [r3, #0]
   1a4ea:	2a00      	cmp	r2, #0
   1a4ec:	d1f9      	bne.n	1a4e2 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
   1a4ee:	4770      	bx	lr
	uint16	u16StrLen = 0;
   1a4f0:	2000      	movs	r0, #0
   1a4f2:	e7fc      	b.n	1a4ee <m2m_strlen+0x16>

0001a4f4 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
   1a4f4:	4a02      	ldr	r2, [pc, #8]	; (1a500 <isr+0xc>)
   1a4f6:	78d3      	ldrb	r3, [r2, #3]
   1a4f8:	3301      	adds	r3, #1
   1a4fa:	b2db      	uxtb	r3, r3
   1a4fc:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1a4fe:	4770      	bx	lr
   1a500:	20005420 	.word	0x20005420

0001a504 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
   1a504:	4770      	bx	lr
	...

0001a508 <hif_set_rx_done>:
{
   1a508:	b500      	push	{lr}
   1a50a:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
   1a50c:	2200      	movs	r2, #0
   1a50e:	4b0a      	ldr	r3, [pc, #40]	; (1a538 <hif_set_rx_done+0x30>)
   1a510:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
   1a512:	2001      	movs	r0, #1
   1a514:	4b09      	ldr	r3, [pc, #36]	; (1a53c <hif_set_rx_done+0x34>)
   1a516:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1a518:	a901      	add	r1, sp, #4
   1a51a:	4809      	ldr	r0, [pc, #36]	; (1a540 <hif_set_rx_done+0x38>)
   1a51c:	4b09      	ldr	r3, [pc, #36]	; (1a544 <hif_set_rx_done+0x3c>)
   1a51e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1a520:	2800      	cmp	r0, #0
   1a522:	d001      	beq.n	1a528 <hif_set_rx_done+0x20>
}
   1a524:	b003      	add	sp, #12
   1a526:	bd00      	pop	{pc}
	reg |= NBIT1;
   1a528:	2102      	movs	r1, #2
   1a52a:	9b01      	ldr	r3, [sp, #4]
   1a52c:	4319      	orrs	r1, r3
   1a52e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1a530:	4803      	ldr	r0, [pc, #12]	; (1a540 <hif_set_rx_done+0x38>)
   1a532:	4b05      	ldr	r3, [pc, #20]	; (1a548 <hif_set_rx_done+0x40>)
   1a534:	4798      	blx	r3
   1a536:	e7f5      	b.n	1a524 <hif_set_rx_done+0x1c>
   1a538:	20005420 	.word	0x20005420
   1a53c:	0001a1dd 	.word	0x0001a1dd
   1a540:	00001070 	.word	0x00001070
   1a544:	0001b885 	.word	0x0001b885
   1a548:	0001b891 	.word	0x0001b891

0001a54c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1a54c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
   1a54e:	4b0c      	ldr	r3, [pc, #48]	; (1a580 <hif_chip_wake+0x34>)
   1a550:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1a552:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
   1a554:	2b00      	cmp	r3, #0
   1a556:	d10d      	bne.n	1a574 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1a558:	4b09      	ldr	r3, [pc, #36]	; (1a580 <hif_chip_wake+0x34>)
   1a55a:	785b      	ldrb	r3, [r3, #1]
   1a55c:	2b00      	cmp	r3, #0
   1a55e:	d103      	bne.n	1a568 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1a560:	4b07      	ldr	r3, [pc, #28]	; (1a580 <hif_chip_wake+0x34>)
   1a562:	781b      	ldrb	r3, [r3, #0]
   1a564:	2b00      	cmp	r3, #0
   1a566:	d106      	bne.n	1a576 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1a568:	4a05      	ldr	r2, [pc, #20]	; (1a580 <hif_chip_wake+0x34>)
   1a56a:	7853      	ldrb	r3, [r2, #1]
   1a56c:	3301      	adds	r3, #1
   1a56e:	b2db      	uxtb	r3, r3
   1a570:	7053      	strb	r3, [r2, #1]
   1a572:	2000      	movs	r0, #0
ERR1:
	return ret;
}
   1a574:	bd10      	pop	{r4, pc}
			ret = chip_wake();
   1a576:	4b03      	ldr	r3, [pc, #12]	; (1a584 <hif_chip_wake+0x38>)
   1a578:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
   1a57a:	2800      	cmp	r0, #0
   1a57c:	d0f4      	beq.n	1a568 <hif_chip_wake+0x1c>
   1a57e:	e7f9      	b.n	1a574 <hif_chip_wake+0x28>
   1a580:	20005420 	.word	0x20005420
   1a584:	0001b585 	.word	0x0001b585

0001a588 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
   1a588:	4b05      	ldr	r3, [pc, #20]	; (1a5a0 <hif_chip_sleep_sc+0x18>)
   1a58a:	785b      	ldrb	r3, [r3, #1]
   1a58c:	2b00      	cmp	r3, #0
   1a58e:	d004      	beq.n	1a59a <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
   1a590:	4a03      	ldr	r2, [pc, #12]	; (1a5a0 <hif_chip_sleep_sc+0x18>)
   1a592:	7853      	ldrb	r3, [r2, #1]
   1a594:	3b01      	subs	r3, #1
   1a596:	b2db      	uxtb	r3, r3
   1a598:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
   1a59a:	2000      	movs	r0, #0
   1a59c:	4770      	bx	lr
   1a59e:	46c0      	nop			; (mov r8, r8)
   1a5a0:	20005420 	.word	0x20005420

0001a5a4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1a5a4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
   1a5a6:	4b0b      	ldr	r3, [pc, #44]	; (1a5d4 <hif_chip_sleep+0x30>)
   1a5a8:	785b      	ldrb	r3, [r3, #1]
   1a5aa:	2b00      	cmp	r3, #0
   1a5ac:	d004      	beq.n	1a5b8 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
   1a5ae:	4a09      	ldr	r2, [pc, #36]	; (1a5d4 <hif_chip_sleep+0x30>)
   1a5b0:	7853      	ldrb	r3, [r2, #1]
   1a5b2:	3b01      	subs	r3, #1
   1a5b4:	b2db      	uxtb	r3, r3
   1a5b6:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1a5b8:	4b06      	ldr	r3, [pc, #24]	; (1a5d4 <hif_chip_sleep+0x30>)
   1a5ba:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
   1a5bc:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
   1a5be:	2b00      	cmp	r3, #0
   1a5c0:	d103      	bne.n	1a5ca <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1a5c2:	4b04      	ldr	r3, [pc, #16]	; (1a5d4 <hif_chip_sleep+0x30>)
   1a5c4:	781b      	ldrb	r3, [r3, #0]
   1a5c6:	2b00      	cmp	r3, #0
   1a5c8:	d100      	bne.n	1a5cc <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
   1a5ca:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
   1a5cc:	4b02      	ldr	r3, [pc, #8]	; (1a5d8 <hif_chip_sleep+0x34>)
   1a5ce:	4798      	blx	r3
   1a5d0:	e7fb      	b.n	1a5ca <hif_chip_sleep+0x26>
   1a5d2:	46c0      	nop			; (mov r8, r8)
   1a5d4:	20005420 	.word	0x20005420
   1a5d8:	0001b51d 	.word	0x0001b51d

0001a5dc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1a5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a5de:	46de      	mov	lr, fp
   1a5e0:	4657      	mov	r7, sl
   1a5e2:	b580      	push	{r7, lr}
   1a5e4:	b089      	sub	sp, #36	; 0x24
   1a5e6:	4683      	mov	fp, r0
   1a5e8:	468a      	mov	sl, r1
   1a5ea:	9201      	str	r2, [sp, #4]
   1a5ec:	9300      	str	r3, [sp, #0]
   1a5ee:	ab10      	add	r3, sp, #64	; 0x40
   1a5f0:	cb80      	ldmia	r3!, {r7}
   1a5f2:	881e      	ldrh	r6, [r3, #0]
   1a5f4:	ab12      	add	r3, sp, #72	; 0x48
   1a5f6:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1a5f8:	227f      	movs	r2, #127	; 0x7f
   1a5fa:	400a      	ands	r2, r1
   1a5fc:	ab07      	add	r3, sp, #28
   1a5fe:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1a600:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1a602:	2208      	movs	r2, #8
   1a604:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1a606:	2f00      	cmp	r7, #0
   1a608:	d03d      	beq.n	1a686 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1a60a:	885a      	ldrh	r2, [r3, #2]
   1a60c:	1992      	adds	r2, r2, r6
   1a60e:	18aa      	adds	r2, r5, r2
   1a610:	b292      	uxth	r2, r2
   1a612:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
   1a614:	4b68      	ldr	r3, [pc, #416]	; (1a7b8 <hif_send+0x1dc>)
   1a616:	4798      	blx	r3
   1a618:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
   1a61a:	d000      	beq.n	1a61e <hif_send+0x42>
   1a61c:	e0c0      	b.n	1a7a0 <hif_send+0x1c4>
	{
		volatile uint32 reg, dma_addr = 0;
   1a61e:	2300      	movs	r3, #0
   1a620:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
   1a622:	aa02      	add	r2, sp, #8
   1a624:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1a626:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
   1a628:	9b04      	ldr	r3, [sp, #16]
   1a62a:	465a      	mov	r2, fp
   1a62c:	431a      	orrs	r2, r3
   1a62e:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
   1a630:	9a04      	ldr	r2, [sp, #16]
   1a632:	4653      	mov	r3, sl
   1a634:	021b      	lsls	r3, r3, #8
   1a636:	4313      	orrs	r3, r2
   1a638:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
   1a63a:	ab07      	add	r3, sp, #28
   1a63c:	885b      	ldrh	r3, [r3, #2]
   1a63e:	9a04      	ldr	r2, [sp, #16]
   1a640:	041b      	lsls	r3, r3, #16
   1a642:	4313      	orrs	r3, r2
   1a644:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1a646:	9904      	ldr	r1, [sp, #16]
   1a648:	485c      	ldr	r0, [pc, #368]	; (1a7bc <hif_send+0x1e0>)
   1a64a:	4b5d      	ldr	r3, [pc, #372]	; (1a7c0 <hif_send+0x1e4>)
   1a64c:	4798      	blx	r3
   1a64e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
   1a650:	d156      	bne.n	1a700 <hif_send+0x124>

		reg = 0UL;
   1a652:	2300      	movs	r3, #0
   1a654:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
   1a656:	9b04      	ldr	r3, [sp, #16]
   1a658:	2202      	movs	r2, #2
   1a65a:	4313      	orrs	r3, r2
   1a65c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1a65e:	9904      	ldr	r1, [sp, #16]
   1a660:	4858      	ldr	r0, [pc, #352]	; (1a7c4 <hif_send+0x1e8>)
   1a662:	4b57      	ldr	r3, [pc, #348]	; (1a7c0 <hif_send+0x1e4>)
   1a664:	4798      	blx	r3
   1a666:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
   1a668:	d14a      	bne.n	1a700 <hif_send+0x124>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   1a66a:	2200      	movs	r2, #0
   1a66c:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   1a66e:	ab02      	add	r3, sp, #8
   1a670:	80da      	strh	r2, [r3, #6]
   1a672:	3306      	adds	r3, #6
   1a674:	881b      	ldrh	r3, [r3, #0]
   1a676:	b29b      	uxth	r3, r3
   1a678:	4a53      	ldr	r2, [pc, #332]	; (1a7c8 <hif_send+0x1ec>)
   1a67a:	4293      	cmp	r3, r2
   1a67c:	d848      	bhi.n	1a710 <hif_send+0x134>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1a67e:	4c53      	ldr	r4, [pc, #332]	; (1a7cc <hif_send+0x1f0>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
   1a680:	4b53      	ldr	r3, [pc, #332]	; (1a7d0 <hif_send+0x1f4>)
   1a682:	469a      	mov	sl, r3
   1a684:	e017      	b.n	1a6b6 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
   1a686:	ab07      	add	r3, sp, #28
   1a688:	885a      	ldrh	r2, [r3, #2]
   1a68a:	9900      	ldr	r1, [sp, #0]
   1a68c:	468c      	mov	ip, r1
   1a68e:	4462      	add	r2, ip
   1a690:	b292      	uxth	r2, r2
   1a692:	805a      	strh	r2, [r3, #2]
   1a694:	e7be      	b.n	1a614 <hif_send+0x38>
				nm_bsp_sleep(1);
   1a696:	2001      	movs	r0, #1
   1a698:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
   1a69a:	9b04      	ldr	r3, [sp, #16]
   1a69c:	079b      	lsls	r3, r3, #30
   1a69e:	d527      	bpl.n	1a6f0 <hif_send+0x114>
		for(cnt = 0; cnt < 1000; cnt ++)
   1a6a0:	ab02      	add	r3, sp, #8
   1a6a2:	88da      	ldrh	r2, [r3, #6]
   1a6a4:	3201      	adds	r2, #1
   1a6a6:	b292      	uxth	r2, r2
   1a6a8:	80da      	strh	r2, [r3, #6]
   1a6aa:	3306      	adds	r3, #6
   1a6ac:	881b      	ldrh	r3, [r3, #0]
   1a6ae:	b29b      	uxth	r3, r3
   1a6b0:	4a45      	ldr	r2, [pc, #276]	; (1a7c8 <hif_send+0x1ec>)
   1a6b2:	4293      	cmp	r3, r2
   1a6b4:	d82c      	bhi.n	1a710 <hif_send+0x134>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1a6b6:	a904      	add	r1, sp, #16
   1a6b8:	4842      	ldr	r0, [pc, #264]	; (1a7c4 <hif_send+0x1e8>)
   1a6ba:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
   1a6bc:	2800      	cmp	r0, #0
   1a6be:	d127      	bne.n	1a710 <hif_send+0x134>
			if(cnt >= 500) {
   1a6c0:	ab02      	add	r3, sp, #8
   1a6c2:	3306      	adds	r3, #6
   1a6c4:	881b      	ldrh	r3, [r3, #0]
   1a6c6:	b29b      	uxth	r3, r3
   1a6c8:	22f4      	movs	r2, #244	; 0xf4
   1a6ca:	32ff      	adds	r2, #255	; 0xff
   1a6cc:	4293      	cmp	r3, r2
   1a6ce:	d9e4      	bls.n	1a69a <hif_send+0xbe>
				if(cnt < 501) {
   1a6d0:	ab02      	add	r3, sp, #8
   1a6d2:	3306      	adds	r3, #6
   1a6d4:	881b      	ldrh	r3, [r3, #0]
   1a6d6:	b29b      	uxth	r3, r3
   1a6d8:	3201      	adds	r2, #1
   1a6da:	4293      	cmp	r3, r2
   1a6dc:	d8db      	bhi.n	1a696 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
   1a6de:	483d      	ldr	r0, [pc, #244]	; (1a7d4 <hif_send+0x1f8>)
   1a6e0:	4b3d      	ldr	r3, [pc, #244]	; (1a7d8 <hif_send+0x1fc>)
   1a6e2:	469b      	mov	fp, r3
   1a6e4:	4798      	blx	r3
   1a6e6:	483d      	ldr	r0, [pc, #244]	; (1a7dc <hif_send+0x200>)
   1a6e8:	47d8      	blx	fp
   1a6ea:	483d      	ldr	r0, [pc, #244]	; (1a7e0 <hif_send+0x204>)
   1a6ec:	47d8      	blx	fp
   1a6ee:	e7d2      	b.n	1a696 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   1a6f0:	a905      	add	r1, sp, #20
   1a6f2:	483c      	ldr	r0, [pc, #240]	; (1a7e4 <hif_send+0x208>)
   1a6f4:	4b35      	ldr	r3, [pc, #212]	; (1a7cc <hif_send+0x1f0>)
   1a6f6:	4798      	blx	r3
   1a6f8:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
   1a6fa:	d009      	beq.n	1a710 <hif_send+0x134>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   1a6fc:	2300      	movs	r3, #0
   1a6fe:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   1a700:	4b39      	ldr	r3, [pc, #228]	; (1a7e8 <hif_send+0x20c>)
   1a702:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
   1a704:	0020      	movs	r0, r4
   1a706:	b009      	add	sp, #36	; 0x24
   1a708:	bc0c      	pop	{r2, r3}
   1a70a:	4692      	mov	sl, r2
   1a70c:	469b      	mov	fp, r3
   1a70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
   1a710:	9b05      	ldr	r3, [sp, #20]
   1a712:	2b00      	cmp	r3, #0
   1a714:	d03f      	beq.n	1a796 <hif_send+0x1ba>
			u32CurrAddr = dma_addr;
   1a716:	9b05      	ldr	r3, [sp, #20]
   1a718:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   1a71a:	a907      	add	r1, sp, #28
   1a71c:	884b      	ldrh	r3, [r1, #2]
   1a71e:	b29b      	uxth	r3, r3
   1a720:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1a722:	9806      	ldr	r0, [sp, #24]
   1a724:	2208      	movs	r2, #8
   1a726:	4b31      	ldr	r3, [pc, #196]	; (1a7ec <hif_send+0x210>)
   1a728:	4798      	blx	r3
   1a72a:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
   1a72c:	d1e8      	bne.n	1a700 <hif_send+0x124>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   1a72e:	9b06      	ldr	r3, [sp, #24]
   1a730:	3308      	adds	r3, #8
   1a732:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
   1a734:	9b01      	ldr	r3, [sp, #4]
   1a736:	2b00      	cmp	r3, #0
   1a738:	d00b      	beq.n	1a752 <hif_send+0x176>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   1a73a:	9806      	ldr	r0, [sp, #24]
   1a73c:	9a00      	ldr	r2, [sp, #0]
   1a73e:	0019      	movs	r1, r3
   1a740:	4b2a      	ldr	r3, [pc, #168]	; (1a7ec <hif_send+0x210>)
   1a742:	4798      	blx	r3
   1a744:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
   1a746:	d1db      	bne.n	1a700 <hif_send+0x124>
				u32CurrAddr += u16CtrlBufSize;
   1a748:	9b06      	ldr	r3, [sp, #24]
   1a74a:	9a00      	ldr	r2, [sp, #0]
   1a74c:	4694      	mov	ip, r2
   1a74e:	4463      	add	r3, ip
   1a750:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
   1a752:	2f00      	cmp	r7, #0
   1a754:	d00e      	beq.n	1a774 <hif_send+0x198>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   1a756:	9b06      	ldr	r3, [sp, #24]
   1a758:	9a00      	ldr	r2, [sp, #0]
   1a75a:	1aad      	subs	r5, r5, r2
   1a75c:	18ed      	adds	r5, r5, r3
   1a75e:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   1a760:	9806      	ldr	r0, [sp, #24]
   1a762:	0032      	movs	r2, r6
   1a764:	0039      	movs	r1, r7
   1a766:	4b21      	ldr	r3, [pc, #132]	; (1a7ec <hif_send+0x210>)
   1a768:	4798      	blx	r3
   1a76a:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
   1a76c:	d1c8      	bne.n	1a700 <hif_send+0x124>
				u32CurrAddr += u16DataSize;
   1a76e:	9b06      	ldr	r3, [sp, #24]
   1a770:	18f3      	adds	r3, r6, r3
   1a772:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
   1a774:	9b05      	ldr	r3, [sp, #20]
   1a776:	009b      	lsls	r3, r3, #2
   1a778:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
   1a77a:	9b04      	ldr	r3, [sp, #16]
   1a77c:	2202      	movs	r2, #2
   1a77e:	4313      	orrs	r3, r2
   1a780:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   1a782:	9904      	ldr	r1, [sp, #16]
   1a784:	481a      	ldr	r0, [pc, #104]	; (1a7f0 <hif_send+0x214>)
   1a786:	4b0e      	ldr	r3, [pc, #56]	; (1a7c0 <hif_send+0x1e4>)
   1a788:	4798      	blx	r3
   1a78a:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
   1a78c:	d1b8      	bne.n	1a700 <hif_send+0x124>
 	ret = hif_chip_sleep();
   1a78e:	4b19      	ldr	r3, [pc, #100]	; (1a7f4 <hif_send+0x218>)
   1a790:	4798      	blx	r3
   1a792:	0004      	movs	r4, r0
	return ret;
   1a794:	e7b6      	b.n	1a704 <hif_send+0x128>
			ret = hif_chip_sleep();
   1a796:	4b17      	ldr	r3, [pc, #92]	; (1a7f4 <hif_send+0x218>)
   1a798:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
   1a79a:	2403      	movs	r4, #3
   1a79c:	4264      	negs	r4, r4
			goto ERR2;
   1a79e:	e7b1      	b.n	1a704 <hif_send+0x128>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   1a7a0:	2298      	movs	r2, #152	; 0x98
   1a7a2:	32ff      	adds	r2, #255	; 0xff
   1a7a4:	4914      	ldr	r1, [pc, #80]	; (1a7f8 <hif_send+0x21c>)
   1a7a6:	4815      	ldr	r0, [pc, #84]	; (1a7fc <hif_send+0x220>)
   1a7a8:	4d0b      	ldr	r5, [pc, #44]	; (1a7d8 <hif_send+0x1fc>)
   1a7aa:	47a8      	blx	r5
   1a7ac:	4814      	ldr	r0, [pc, #80]	; (1a800 <hif_send+0x224>)
   1a7ae:	47a8      	blx	r5
   1a7b0:	480b      	ldr	r0, [pc, #44]	; (1a7e0 <hif_send+0x204>)
   1a7b2:	47a8      	blx	r5
		goto ERR2;
   1a7b4:	e7a6      	b.n	1a704 <hif_send+0x128>
   1a7b6:	46c0      	nop			; (mov r8, r8)
   1a7b8:	0001a54d 	.word	0x0001a54d
   1a7bc:	0000108c 	.word	0x0000108c
   1a7c0:	0001b891 	.word	0x0001b891
   1a7c4:	00001078 	.word	0x00001078
   1a7c8:	000003e7 	.word	0x000003e7
   1a7cc:	0001b885 	.word	0x0001b885
   1a7d0:	0001a145 	.word	0x0001a145
   1a7d4:	000296f8 	.word	0x000296f8
   1a7d8:	00018f7d 	.word	0x00018f7d
   1a7dc:	00029704 	.word	0x00029704
   1a7e0:	000293e4 	.word	0x000293e4
   1a7e4:	00150400 	.word	0x00150400
   1a7e8:	0001a589 	.word	0x0001a589
   1a7ec:	0001b905 	.word	0x0001b905
   1a7f0:	0000106c 	.word	0x0000106c
   1a7f4:	0001a5a5 	.word	0x0001a5a5
   1a7f8:	00029408 	.word	0x00029408
   1a7fc:	000293bc 	.word	0x000293bc
   1a800:	00029718 	.word	0x00029718

0001a804 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   1a804:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a806:	46ce      	mov	lr, r9
   1a808:	4647      	mov	r7, r8
   1a80a:	b580      	push	{r7, lr}
   1a80c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
   1a80e:	2200      	movs	r2, #0
   1a810:	4bc8      	ldr	r3, [pc, #800]	; (1ab34 <hif_handle_isr+0x330>)
   1a812:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1a814:	4699      	mov	r9, r3
   1a816:	4698      	mov	r8, r3
   1a818:	e07c      	b.n	1a914 <hif_handle_isr+0x110>
				gstrHifCxt.u32RxAddr = address;
   1a81a:	4bc6      	ldr	r3, [pc, #792]	; (1ab34 <hif_handle_isr+0x330>)
   1a81c:	9a05      	ldr	r2, [sp, #20]
   1a81e:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   1a820:	60df      	str	r7, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   1a822:	ad04      	add	r5, sp, #16
   1a824:	2204      	movs	r2, #4
   1a826:	0029      	movs	r1, r5
   1a828:	9805      	ldr	r0, [sp, #20]
   1a82a:	4bc3      	ldr	r3, [pc, #780]	; (1ab38 <hif_handle_isr+0x334>)
   1a82c:	4798      	blx	r3
   1a82e:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   1a830:	886b      	ldrh	r3, [r5, #2]
   1a832:	b29b      	uxth	r3, r3
   1a834:	806b      	strh	r3, [r5, #2]
				if(M2M_SUCCESS != ret)
   1a836:	2800      	cmp	r0, #0
   1a838:	d132      	bne.n	1a8a0 <hif_handle_isr+0x9c>
				if(strHif.u16Length != size)
   1a83a:	ab04      	add	r3, sp, #16
   1a83c:	885b      	ldrh	r3, [r3, #2]
   1a83e:	b29b      	uxth	r3, r3
   1a840:	429f      	cmp	r7, r3
   1a842:	d004      	beq.n	1a84e <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
   1a844:	ab04      	add	r3, sp, #16
   1a846:	885b      	ldrh	r3, [r3, #2]
   1a848:	1afb      	subs	r3, r7, r3
   1a84a:	2b04      	cmp	r3, #4
   1a84c:	dc36      	bgt.n	1a8bc <hif_handle_isr+0xb8>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   1a84e:	ab04      	add	r3, sp, #16
   1a850:	781b      	ldrb	r3, [r3, #0]
   1a852:	2b01      	cmp	r3, #1
   1a854:	d04a      	beq.n	1a8ec <hif_handle_isr+0xe8>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   1a856:	ab04      	add	r3, sp, #16
   1a858:	781b      	ldrb	r3, [r3, #0]
   1a85a:	2b02      	cmp	r3, #2
   1a85c:	d076      	beq.n	1a94c <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   1a85e:	ab04      	add	r3, sp, #16
   1a860:	781b      	ldrb	r3, [r3, #0]
   1a862:	2b04      	cmp	r3, #4
   1a864:	d100      	bne.n	1a868 <hif_handle_isr+0x64>
   1a866:	e08c      	b.n	1a982 <hif_handle_isr+0x17e>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   1a868:	ab04      	add	r3, sp, #16
   1a86a:	781b      	ldrb	r3, [r3, #0]
   1a86c:	2b06      	cmp	r3, #6
   1a86e:	d100      	bne.n	1a872 <hif_handle_isr+0x6e>
   1a870:	e0a2      	b.n	1a9b8 <hif_handle_isr+0x1b4>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   1a872:	ab04      	add	r3, sp, #16
   1a874:	781b      	ldrb	r3, [r3, #0]
   1a876:	2b07      	cmp	r3, #7
   1a878:	d100      	bne.n	1a87c <hif_handle_isr+0x78>
   1a87a:	e0b8      	b.n	1a9ee <hif_handle_isr+0x1ea>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   1a87c:	ab04      	add	r3, sp, #16
   1a87e:	781b      	ldrb	r3, [r3, #0]
   1a880:	2b05      	cmp	r3, #5
   1a882:	d100      	bne.n	1a886 <hif_handle_isr+0x82>
   1a884:	e0cd      	b.n	1aa22 <hif_handle_isr+0x21e>
					M2M_ERR("(hif) invalid group ID\n");
   1a886:	2284      	movs	r2, #132	; 0x84
   1a888:	0092      	lsls	r2, r2, #2
   1a88a:	49ac      	ldr	r1, [pc, #688]	; (1ab3c <hif_handle_isr+0x338>)
   1a88c:	48ac      	ldr	r0, [pc, #688]	; (1ab40 <hif_handle_isr+0x33c>)
   1a88e:	4cad      	ldr	r4, [pc, #692]	; (1ab44 <hif_handle_isr+0x340>)
   1a890:	47a0      	blx	r4
   1a892:	48ad      	ldr	r0, [pc, #692]	; (1ab48 <hif_handle_isr+0x344>)
   1a894:	47a0      	blx	r4
   1a896:	48ad      	ldr	r0, [pc, #692]	; (1ab4c <hif_handle_isr+0x348>)
   1a898:	47a0      	blx	r4
					ret = M2M_ERR_BUS_FAIL;
   1a89a:	2406      	movs	r4, #6
   1a89c:	4264      	negs	r4, r4
   1a89e:	e106      	b.n	1aaae <hif_handle_isr+0x2aa>
					M2M_ERR("(hif) address bus fail\n");
   1a8a0:	22e9      	movs	r2, #233	; 0xe9
   1a8a2:	0052      	lsls	r2, r2, #1
   1a8a4:	49a5      	ldr	r1, [pc, #660]	; (1ab3c <hif_handle_isr+0x338>)
   1a8a6:	48a6      	ldr	r0, [pc, #664]	; (1ab40 <hif_handle_isr+0x33c>)
   1a8a8:	4da6      	ldr	r5, [pc, #664]	; (1ab44 <hif_handle_isr+0x340>)
   1a8aa:	47a8      	blx	r5
   1a8ac:	48a8      	ldr	r0, [pc, #672]	; (1ab50 <hif_handle_isr+0x34c>)
   1a8ae:	47a8      	blx	r5
   1a8b0:	48a6      	ldr	r0, [pc, #664]	; (1ab4c <hif_handle_isr+0x348>)
   1a8b2:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
   1a8b4:	2001      	movs	r0, #1
   1a8b6:	4ba7      	ldr	r3, [pc, #668]	; (1ab54 <hif_handle_isr+0x350>)
   1a8b8:	4798      	blx	r3
   1a8ba:	e0f8      	b.n	1aaae <hif_handle_isr+0x2aa>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   1a8bc:	22dc      	movs	r2, #220	; 0xdc
   1a8be:	32ff      	adds	r2, #255	; 0xff
   1a8c0:	499e      	ldr	r1, [pc, #632]	; (1ab3c <hif_handle_isr+0x338>)
   1a8c2:	489f      	ldr	r0, [pc, #636]	; (1ab40 <hif_handle_isr+0x33c>)
   1a8c4:	4c9f      	ldr	r4, [pc, #636]	; (1ab44 <hif_handle_isr+0x340>)
   1a8c6:	47a0      	blx	r4
   1a8c8:	a904      	add	r1, sp, #16
   1a8ca:	884a      	ldrh	r2, [r1, #2]
   1a8cc:	b292      	uxth	r2, r2
   1a8ce:	780b      	ldrb	r3, [r1, #0]
   1a8d0:	b2db      	uxtb	r3, r3
   1a8d2:	7849      	ldrb	r1, [r1, #1]
   1a8d4:	9100      	str	r1, [sp, #0]
   1a8d6:	0039      	movs	r1, r7
   1a8d8:	489f      	ldr	r0, [pc, #636]	; (1ab58 <hif_handle_isr+0x354>)
   1a8da:	47a0      	blx	r4
   1a8dc:	489b      	ldr	r0, [pc, #620]	; (1ab4c <hif_handle_isr+0x348>)
   1a8de:	47a0      	blx	r4
						nm_bsp_interrupt_ctrl(1);
   1a8e0:	2001      	movs	r0, #1
   1a8e2:	4b9c      	ldr	r3, [pc, #624]	; (1ab54 <hif_handle_isr+0x350>)
   1a8e4:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   1a8e6:	2406      	movs	r4, #6
   1a8e8:	4264      	negs	r4, r4
   1a8ea:	e0e0      	b.n	1aaae <hif_handle_isr+0x2aa>
					if(gstrHifCxt.pfWifiCb)
   1a8ec:	4b91      	ldr	r3, [pc, #580]	; (1ab34 <hif_handle_isr+0x330>)
   1a8ee:	691b      	ldr	r3, [r3, #16]
   1a8f0:	2b00      	cmp	r3, #0
   1a8f2:	d020      	beq.n	1a936 <hif_handle_isr+0x132>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1a8f4:	4b8f      	ldr	r3, [pc, #572]	; (1ab34 <hif_handle_isr+0x330>)
   1a8f6:	691b      	ldr	r3, [r3, #16]
   1a8f8:	aa04      	add	r2, sp, #16
   1a8fa:	7850      	ldrb	r0, [r2, #1]
   1a8fc:	b2c0      	uxtb	r0, r0
   1a8fe:	8851      	ldrh	r1, [r2, #2]
   1a900:	9a05      	ldr	r2, [sp, #20]
   1a902:	3208      	adds	r2, #8
   1a904:	3908      	subs	r1, #8
   1a906:	b289      	uxth	r1, r1
   1a908:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
   1a90a:	4b8a      	ldr	r3, [pc, #552]	; (1ab34 <hif_handle_isr+0x330>)
   1a90c:	789b      	ldrb	r3, [r3, #2]
   1a90e:	2b00      	cmp	r3, #0
   1a910:	d000      	beq.n	1a914 <hif_handle_isr+0x110>
   1a912:	e097      	b.n	1aa44 <hif_handle_isr+0x240>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   1a914:	464b      	mov	r3, r9
   1a916:	78db      	ldrb	r3, [r3, #3]
   1a918:	2b00      	cmp	r3, #0
   1a91a:	d100      	bne.n	1a91e <hif_handle_isr+0x11a>
   1a91c:	e103      	b.n	1ab26 <hif_handle_isr+0x322>
   1a91e:	4643      	mov	r3, r8
   1a920:	791b      	ldrb	r3, [r3, #4]
   1a922:	2b00      	cmp	r3, #0
   1a924:	d000      	beq.n	1a928 <hif_handle_isr+0x124>
   1a926:	e0fe      	b.n	1ab26 <hif_handle_isr+0x322>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   1a928:	4a82      	ldr	r2, [pc, #520]	; (1ab34 <hif_handle_isr+0x330>)
   1a92a:	78d3      	ldrb	r3, [r2, #3]
   1a92c:	3b01      	subs	r3, #1
   1a92e:	b2db      	uxtb	r3, r3
   1a930:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1a932:	4e8a      	ldr	r6, [pc, #552]	; (1ab5c <hif_handle_isr+0x358>)
   1a934:	e0c5      	b.n	1aac2 <hif_handle_isr+0x2be>
						M2M_ERR("WIFI callback is not registered\n");
   1a936:	22e8      	movs	r2, #232	; 0xe8
   1a938:	32ff      	adds	r2, #255	; 0xff
   1a93a:	4980      	ldr	r1, [pc, #512]	; (1ab3c <hif_handle_isr+0x338>)
   1a93c:	4880      	ldr	r0, [pc, #512]	; (1ab40 <hif_handle_isr+0x33c>)
   1a93e:	4c81      	ldr	r4, [pc, #516]	; (1ab44 <hif_handle_isr+0x340>)
   1a940:	47a0      	blx	r4
   1a942:	4887      	ldr	r0, [pc, #540]	; (1ab60 <hif_handle_isr+0x35c>)
   1a944:	47a0      	blx	r4
   1a946:	4881      	ldr	r0, [pc, #516]	; (1ab4c <hif_handle_isr+0x348>)
   1a948:	47a0      	blx	r4
   1a94a:	e7de      	b.n	1a90a <hif_handle_isr+0x106>
					if(gstrHifCxt.pfIpCb)
   1a94c:	4b79      	ldr	r3, [pc, #484]	; (1ab34 <hif_handle_isr+0x330>)
   1a94e:	695b      	ldr	r3, [r3, #20]
   1a950:	2b00      	cmp	r3, #0
   1a952:	d00b      	beq.n	1a96c <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1a954:	4b77      	ldr	r3, [pc, #476]	; (1ab34 <hif_handle_isr+0x330>)
   1a956:	695b      	ldr	r3, [r3, #20]
   1a958:	aa04      	add	r2, sp, #16
   1a95a:	7850      	ldrb	r0, [r2, #1]
   1a95c:	b2c0      	uxtb	r0, r0
   1a95e:	8851      	ldrh	r1, [r2, #2]
   1a960:	9a05      	ldr	r2, [sp, #20]
   1a962:	3208      	adds	r2, #8
   1a964:	3908      	subs	r1, #8
   1a966:	b289      	uxth	r1, r1
   1a968:	4798      	blx	r3
   1a96a:	e7ce      	b.n	1a90a <hif_handle_isr+0x106>
						M2M_ERR("Scoket callback is not registered\n");
   1a96c:	22f0      	movs	r2, #240	; 0xf0
   1a96e:	32ff      	adds	r2, #255	; 0xff
   1a970:	4972      	ldr	r1, [pc, #456]	; (1ab3c <hif_handle_isr+0x338>)
   1a972:	4873      	ldr	r0, [pc, #460]	; (1ab40 <hif_handle_isr+0x33c>)
   1a974:	4c73      	ldr	r4, [pc, #460]	; (1ab44 <hif_handle_isr+0x340>)
   1a976:	47a0      	blx	r4
   1a978:	487a      	ldr	r0, [pc, #488]	; (1ab64 <hif_handle_isr+0x360>)
   1a97a:	47a0      	blx	r4
   1a97c:	4873      	ldr	r0, [pc, #460]	; (1ab4c <hif_handle_isr+0x348>)
   1a97e:	47a0      	blx	r4
   1a980:	e7c3      	b.n	1a90a <hif_handle_isr+0x106>
					if(gstrHifCxt.pfOtaCb)
   1a982:	4b6c      	ldr	r3, [pc, #432]	; (1ab34 <hif_handle_isr+0x330>)
   1a984:	699b      	ldr	r3, [r3, #24]
   1a986:	2b00      	cmp	r3, #0
   1a988:	d00b      	beq.n	1a9a2 <hif_handle_isr+0x19e>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1a98a:	4b6a      	ldr	r3, [pc, #424]	; (1ab34 <hif_handle_isr+0x330>)
   1a98c:	699b      	ldr	r3, [r3, #24]
   1a98e:	aa04      	add	r2, sp, #16
   1a990:	7850      	ldrb	r0, [r2, #1]
   1a992:	b2c0      	uxtb	r0, r0
   1a994:	8851      	ldrh	r1, [r2, #2]
   1a996:	9a05      	ldr	r2, [sp, #20]
   1a998:	3208      	adds	r2, #8
   1a99a:	3908      	subs	r1, #8
   1a99c:	b289      	uxth	r1, r1
   1a99e:	4798      	blx	r3
   1a9a0:	e7b3      	b.n	1a90a <hif_handle_isr+0x106>
						M2M_ERR("Ota callback is not registered\n");
   1a9a2:	22f8      	movs	r2, #248	; 0xf8
   1a9a4:	32ff      	adds	r2, #255	; 0xff
   1a9a6:	4965      	ldr	r1, [pc, #404]	; (1ab3c <hif_handle_isr+0x338>)
   1a9a8:	4865      	ldr	r0, [pc, #404]	; (1ab40 <hif_handle_isr+0x33c>)
   1a9aa:	4c66      	ldr	r4, [pc, #408]	; (1ab44 <hif_handle_isr+0x340>)
   1a9ac:	47a0      	blx	r4
   1a9ae:	486e      	ldr	r0, [pc, #440]	; (1ab68 <hif_handle_isr+0x364>)
   1a9b0:	47a0      	blx	r4
   1a9b2:	4866      	ldr	r0, [pc, #408]	; (1ab4c <hif_handle_isr+0x348>)
   1a9b4:	47a0      	blx	r4
   1a9b6:	e7a8      	b.n	1a90a <hif_handle_isr+0x106>
					if(gstrHifCxt.pfCryptoCb)
   1a9b8:	4b5e      	ldr	r3, [pc, #376]	; (1ab34 <hif_handle_isr+0x330>)
   1a9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a9bc:	2b00      	cmp	r3, #0
   1a9be:	d00b      	beq.n	1a9d8 <hif_handle_isr+0x1d4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1a9c0:	4b5c      	ldr	r3, [pc, #368]	; (1ab34 <hif_handle_isr+0x330>)
   1a9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a9c4:	aa04      	add	r2, sp, #16
   1a9c6:	7850      	ldrb	r0, [r2, #1]
   1a9c8:	b2c0      	uxtb	r0, r0
   1a9ca:	8851      	ldrh	r1, [r2, #2]
   1a9cc:	9a05      	ldr	r2, [sp, #20]
   1a9ce:	3208      	adds	r2, #8
   1a9d0:	3908      	subs	r1, #8
   1a9d2:	b289      	uxth	r1, r1
   1a9d4:	4798      	blx	r3
   1a9d6:	e798      	b.n	1a90a <hif_handle_isr+0x106>
						M2M_ERR("Crypto callback is not registered\n");
   1a9d8:	2280      	movs	r2, #128	; 0x80
   1a9da:	0092      	lsls	r2, r2, #2
   1a9dc:	4957      	ldr	r1, [pc, #348]	; (1ab3c <hif_handle_isr+0x338>)
   1a9de:	4858      	ldr	r0, [pc, #352]	; (1ab40 <hif_handle_isr+0x33c>)
   1a9e0:	4c58      	ldr	r4, [pc, #352]	; (1ab44 <hif_handle_isr+0x340>)
   1a9e2:	47a0      	blx	r4
   1a9e4:	4861      	ldr	r0, [pc, #388]	; (1ab6c <hif_handle_isr+0x368>)
   1a9e6:	47a0      	blx	r4
   1a9e8:	4858      	ldr	r0, [pc, #352]	; (1ab4c <hif_handle_isr+0x348>)
   1a9ea:	47a0      	blx	r4
   1a9ec:	e78d      	b.n	1a90a <hif_handle_isr+0x106>
					if(gstrHifCxt.pfSigmaCb)
   1a9ee:	4b51      	ldr	r3, [pc, #324]	; (1ab34 <hif_handle_isr+0x330>)
   1a9f0:	69db      	ldr	r3, [r3, #28]
   1a9f2:	2b00      	cmp	r3, #0
   1a9f4:	d00b      	beq.n	1aa0e <hif_handle_isr+0x20a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1a9f6:	4b4f      	ldr	r3, [pc, #316]	; (1ab34 <hif_handle_isr+0x330>)
   1a9f8:	69db      	ldr	r3, [r3, #28]
   1a9fa:	aa04      	add	r2, sp, #16
   1a9fc:	7850      	ldrb	r0, [r2, #1]
   1a9fe:	b2c0      	uxtb	r0, r0
   1aa00:	8851      	ldrh	r1, [r2, #2]
   1aa02:	9a05      	ldr	r2, [sp, #20]
   1aa04:	3208      	adds	r2, #8
   1aa06:	3908      	subs	r1, #8
   1aa08:	b289      	uxth	r1, r1
   1aa0a:	4798      	blx	r3
   1aa0c:	e77d      	b.n	1a90a <hif_handle_isr+0x106>
						M2M_ERR("Sigma callback is not registered\n");
   1aa0e:	4a58      	ldr	r2, [pc, #352]	; (1ab70 <hif_handle_isr+0x36c>)
   1aa10:	494a      	ldr	r1, [pc, #296]	; (1ab3c <hif_handle_isr+0x338>)
   1aa12:	484b      	ldr	r0, [pc, #300]	; (1ab40 <hif_handle_isr+0x33c>)
   1aa14:	4c4b      	ldr	r4, [pc, #300]	; (1ab44 <hif_handle_isr+0x340>)
   1aa16:	47a0      	blx	r4
   1aa18:	4856      	ldr	r0, [pc, #344]	; (1ab74 <hif_handle_isr+0x370>)
   1aa1a:	47a0      	blx	r4
   1aa1c:	484b      	ldr	r0, [pc, #300]	; (1ab4c <hif_handle_isr+0x348>)
   1aa1e:	47a0      	blx	r4
   1aa20:	e773      	b.n	1a90a <hif_handle_isr+0x106>
				    if(gstrHifCxt.pfSslCb)
   1aa22:	4b44      	ldr	r3, [pc, #272]	; (1ab34 <hif_handle_isr+0x330>)
   1aa24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1aa26:	2b00      	cmp	r3, #0
   1aa28:	d100      	bne.n	1aa2c <hif_handle_isr+0x228>
   1aa2a:	e76e      	b.n	1a90a <hif_handle_isr+0x106>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1aa2c:	4b41      	ldr	r3, [pc, #260]	; (1ab34 <hif_handle_isr+0x330>)
   1aa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1aa30:	aa04      	add	r2, sp, #16
   1aa32:	7850      	ldrb	r0, [r2, #1]
   1aa34:	b2c0      	uxtb	r0, r0
   1aa36:	8851      	ldrh	r1, [r2, #2]
   1aa38:	9a05      	ldr	r2, [sp, #20]
   1aa3a:	3208      	adds	r2, #8
   1aa3c:	3908      	subs	r1, #8
   1aa3e:	b289      	uxth	r1, r1
   1aa40:	4798      	blx	r3
   1aa42:	e762      	b.n	1a90a <hif_handle_isr+0x106>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   1aa44:	4a4c      	ldr	r2, [pc, #304]	; (1ab78 <hif_handle_isr+0x374>)
   1aa46:	493d      	ldr	r1, [pc, #244]	; (1ab3c <hif_handle_isr+0x338>)
   1aa48:	483d      	ldr	r0, [pc, #244]	; (1ab40 <hif_handle_isr+0x33c>)
   1aa4a:	4c3e      	ldr	r4, [pc, #248]	; (1ab44 <hif_handle_isr+0x340>)
   1aa4c:	47a0      	blx	r4
   1aa4e:	ab04      	add	r3, sp, #16
   1aa50:	7819      	ldrb	r1, [r3, #0]
   1aa52:	b2c9      	uxtb	r1, r1
   1aa54:	785a      	ldrb	r2, [r3, #1]
   1aa56:	b2d2      	uxtb	r2, r2
   1aa58:	4848      	ldr	r0, [pc, #288]	; (1ab7c <hif_handle_isr+0x378>)
   1aa5a:	47a0      	blx	r4
   1aa5c:	483b      	ldr	r0, [pc, #236]	; (1ab4c <hif_handle_isr+0x348>)
   1aa5e:	47a0      	blx	r4
					ret = hif_set_rx_done();
   1aa60:	4b47      	ldr	r3, [pc, #284]	; (1ab80 <hif_handle_isr+0x37c>)
   1aa62:	4798      	blx	r3
   1aa64:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
   1aa66:	d122      	bne.n	1aaae <hif_handle_isr+0x2aa>
   1aa68:	e754      	b.n	1a914 <hif_handle_isr+0x110>
				M2M_ERR("(hif) Wrong Size\n");
   1aa6a:	4a46      	ldr	r2, [pc, #280]	; (1ab84 <hif_handle_isr+0x380>)
   1aa6c:	4933      	ldr	r1, [pc, #204]	; (1ab3c <hif_handle_isr+0x338>)
   1aa6e:	4834      	ldr	r0, [pc, #208]	; (1ab40 <hif_handle_isr+0x33c>)
   1aa70:	4c34      	ldr	r4, [pc, #208]	; (1ab44 <hif_handle_isr+0x340>)
   1aa72:	47a0      	blx	r4
   1aa74:	4844      	ldr	r0, [pc, #272]	; (1ab88 <hif_handle_isr+0x384>)
   1aa76:	47a0      	blx	r4
   1aa78:	4834      	ldr	r0, [pc, #208]	; (1ab4c <hif_handle_isr+0x348>)
   1aa7a:	47a0      	blx	r4
				ret = M2M_ERR_RCV;
   1aa7c:	2402      	movs	r4, #2
   1aa7e:	4264      	negs	r4, r4
   1aa80:	e015      	b.n	1aaae <hif_handle_isr+0x2aa>
			M2M_ERR("(hif) False interrupt %lx",reg);
   1aa82:	4a42      	ldr	r2, [pc, #264]	; (1ab8c <hif_handle_isr+0x388>)
   1aa84:	492d      	ldr	r1, [pc, #180]	; (1ab3c <hif_handle_isr+0x338>)
   1aa86:	482e      	ldr	r0, [pc, #184]	; (1ab40 <hif_handle_isr+0x33c>)
   1aa88:	4c2e      	ldr	r4, [pc, #184]	; (1ab44 <hif_handle_isr+0x340>)
   1aa8a:	47a0      	blx	r4
   1aa8c:	9903      	ldr	r1, [sp, #12]
   1aa8e:	4840      	ldr	r0, [pc, #256]	; (1ab90 <hif_handle_isr+0x38c>)
   1aa90:	47a0      	blx	r4
   1aa92:	482e      	ldr	r0, [pc, #184]	; (1ab4c <hif_handle_isr+0x348>)
   1aa94:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1aa96:	240c      	movs	r4, #12
   1aa98:	4264      	negs	r4, r4
   1aa9a:	e008      	b.n	1aaae <hif_handle_isr+0x2aa>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   1aa9c:	4a3d      	ldr	r2, [pc, #244]	; (1ab94 <hif_handle_isr+0x390>)
   1aa9e:	4927      	ldr	r1, [pc, #156]	; (1ab3c <hif_handle_isr+0x338>)
   1aaa0:	4827      	ldr	r0, [pc, #156]	; (1ab40 <hif_handle_isr+0x33c>)
   1aaa2:	4d28      	ldr	r5, [pc, #160]	; (1ab44 <hif_handle_isr+0x340>)
   1aaa4:	47a8      	blx	r5
   1aaa6:	483c      	ldr	r0, [pc, #240]	; (1ab98 <hif_handle_isr+0x394>)
   1aaa8:	47a8      	blx	r5
   1aaaa:	4828      	ldr	r0, [pc, #160]	; (1ab4c <hif_handle_isr+0x348>)
   1aaac:	47a8      	blx	r5
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   1aaae:	4a3b      	ldr	r2, [pc, #236]	; (1ab9c <hif_handle_isr+0x398>)
   1aab0:	493b      	ldr	r1, [pc, #236]	; (1aba0 <hif_handle_isr+0x39c>)
   1aab2:	4823      	ldr	r0, [pc, #140]	; (1ab40 <hif_handle_isr+0x33c>)
   1aab4:	4d23      	ldr	r5, [pc, #140]	; (1ab44 <hif_handle_isr+0x340>)
   1aab6:	47a8      	blx	r5
   1aab8:	0021      	movs	r1, r4
   1aaba:	483a      	ldr	r0, [pc, #232]	; (1aba4 <hif_handle_isr+0x3a0>)
   1aabc:	47a8      	blx	r5
   1aabe:	4823      	ldr	r0, [pc, #140]	; (1ab4c <hif_handle_isr+0x348>)
   1aac0:	47a8      	blx	r5
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1aac2:	a903      	add	r1, sp, #12
   1aac4:	4838      	ldr	r0, [pc, #224]	; (1aba8 <hif_handle_isr+0x3a4>)
   1aac6:	47b0      	blx	r6
   1aac8:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
   1aaca:	d1e7      	bne.n	1aa9c <hif_handle_isr+0x298>
		if(reg & 0x1)	/* New interrupt has been received */
   1aacc:	9b03      	ldr	r3, [sp, #12]
   1aace:	07db      	lsls	r3, r3, #31
   1aad0:	d5d7      	bpl.n	1aa82 <hif_handle_isr+0x27e>
			nm_bsp_interrupt_ctrl(0);
   1aad2:	2000      	movs	r0, #0
   1aad4:	4b1f      	ldr	r3, [pc, #124]	; (1ab54 <hif_handle_isr+0x350>)
   1aad6:	4798      	blx	r3
			reg &= ~NBIT0;
   1aad8:	2301      	movs	r3, #1
   1aada:	9903      	ldr	r1, [sp, #12]
   1aadc:	4399      	bics	r1, r3
   1aade:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1aae0:	4831      	ldr	r0, [pc, #196]	; (1aba8 <hif_handle_isr+0x3a4>)
   1aae2:	4b32      	ldr	r3, [pc, #200]	; (1abac <hif_handle_isr+0x3a8>)
   1aae4:	4798      	blx	r3
   1aae6:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
   1aae8:	d1e1      	bne.n	1aaae <hif_handle_isr+0x2aa>
			gstrHifCxt.u8HifRXDone = 1;
   1aaea:	2201      	movs	r2, #1
   1aaec:	4b11      	ldr	r3, [pc, #68]	; (1ab34 <hif_handle_isr+0x330>)
   1aaee:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   1aaf0:	9b03      	ldr	r3, [sp, #12]
   1aaf2:	049f      	lsls	r7, r3, #18
   1aaf4:	0d3f      	lsrs	r7, r7, #20
			if (size > 0) {
   1aaf6:	d0b8      	beq.n	1aa6a <hif_handle_isr+0x266>
				uint32 address = 0;
   1aaf8:	2300      	movs	r3, #0
   1aafa:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   1aafc:	a905      	add	r1, sp, #20
   1aafe:	482c      	ldr	r0, [pc, #176]	; (1abb0 <hif_handle_isr+0x3ac>)
   1ab00:	4b16      	ldr	r3, [pc, #88]	; (1ab5c <hif_handle_isr+0x358>)
   1ab02:	4798      	blx	r3
   1ab04:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
   1ab06:	d100      	bne.n	1ab0a <hif_handle_isr+0x306>
   1ab08:	e687      	b.n	1a81a <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   1ab0a:	22e4      	movs	r2, #228	; 0xe4
   1ab0c:	0052      	lsls	r2, r2, #1
   1ab0e:	490b      	ldr	r1, [pc, #44]	; (1ab3c <hif_handle_isr+0x338>)
   1ab10:	480b      	ldr	r0, [pc, #44]	; (1ab40 <hif_handle_isr+0x33c>)
   1ab12:	4d0c      	ldr	r5, [pc, #48]	; (1ab44 <hif_handle_isr+0x340>)
   1ab14:	47a8      	blx	r5
   1ab16:	4827      	ldr	r0, [pc, #156]	; (1abb4 <hif_handle_isr+0x3b0>)
   1ab18:	47a8      	blx	r5
   1ab1a:	480c      	ldr	r0, [pc, #48]	; (1ab4c <hif_handle_isr+0x348>)
   1ab1c:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
   1ab1e:	2001      	movs	r0, #1
   1ab20:	4b0c      	ldr	r3, [pc, #48]	; (1ab54 <hif_handle_isr+0x350>)
   1ab22:	4798      	blx	r3
   1ab24:	e7c3      	b.n	1aaae <hif_handle_isr+0x2aa>
			}
		}
	}

	return ret;
}
   1ab26:	2000      	movs	r0, #0
   1ab28:	b007      	add	sp, #28
   1ab2a:	bc0c      	pop	{r2, r3}
   1ab2c:	4690      	mov	r8, r2
   1ab2e:	4699      	mov	r9, r3
   1ab30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ab32:	46c0      	nop			; (mov r8, r8)
   1ab34:	20005420 	.word	0x20005420
   1ab38:	0001b89d 	.word	0x0001b89d
   1ab3c:	00029414 	.word	0x00029414
   1ab40:	000293bc 	.word	0x000293bc
   1ab44:	00018f7d 	.word	0x00018f7d
   1ab48:	00029578 	.word	0x00029578
   1ab4c:	000293e4 	.word	0x000293e4
   1ab50:	00029470 	.word	0x00029470
   1ab54:	0001a1dd 	.word	0x0001a1dd
   1ab58:	00029488 	.word	0x00029488
   1ab5c:	0001b885 	.word	0x0001b885
   1ab60:	000294c8 	.word	0x000294c8
   1ab64:	000294ec 	.word	0x000294ec
   1ab68:	00029510 	.word	0x00029510
   1ab6c:	00029530 	.word	0x00029530
   1ab70:	00000207 	.word	0x00000207
   1ab74:	00029554 	.word	0x00029554
   1ab78:	00000216 	.word	0x00000216
   1ab7c:	00029590 	.word	0x00029590
   1ab80:	0001a509 	.word	0x0001a509
   1ab84:	0000021d 	.word	0x0000021d
   1ab88:	000295bc 	.word	0x000295bc
   1ab8c:	00000225 	.word	0x00000225
   1ab90:	000295d0 	.word	0x000295d0
   1ab94:	0000022e 	.word	0x0000022e
   1ab98:	000295ec 	.word	0x000295ec
   1ab9c:	00000257 	.word	0x00000257
   1aba0:	0002941c 	.word	0x0002941c
   1aba4:	00029610 	.word	0x00029610
   1aba8:	00001070 	.word	0x00001070
   1abac:	0001b891 	.word	0x0001b891
   1abb0:	00001084 	.word	0x00001084
   1abb4:	00029448 	.word	0x00029448

0001abb8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   1abb8:	b570      	push	{r4, r5, r6, lr}
   1abba:	0014      	movs	r4, r2
   1abbc:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   1abbe:	2800      	cmp	r0, #0
   1abc0:	d003      	beq.n	1abca <hif_receive+0x12>
   1abc2:	2900      	cmp	r1, #0
   1abc4:	d001      	beq.n	1abca <hif_receive+0x12>
   1abc6:	2a00      	cmp	r2, #0
   1abc8:	d111      	bne.n	1abee <hif_receive+0x36>
	{
		if(isDone)
   1abca:	2d00      	cmp	r5, #0
   1abcc:	d002      	beq.n	1abd4 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   1abce:	4b25      	ldr	r3, [pc, #148]	; (1ac64 <hif_receive+0xac>)
   1abd0:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
   1abd2:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
   1abd4:	229e      	movs	r2, #158	; 0x9e
   1abd6:	0092      	lsls	r2, r2, #2
   1abd8:	4923      	ldr	r1, [pc, #140]	; (1ac68 <hif_receive+0xb0>)
   1abda:	4824      	ldr	r0, [pc, #144]	; (1ac6c <hif_receive+0xb4>)
   1abdc:	4c24      	ldr	r4, [pc, #144]	; (1ac70 <hif_receive+0xb8>)
   1abde:	47a0      	blx	r4
   1abe0:	4824      	ldr	r0, [pc, #144]	; (1ac74 <hif_receive+0xbc>)
   1abe2:	47a0      	blx	r4
   1abe4:	4824      	ldr	r0, [pc, #144]	; (1ac78 <hif_receive+0xc0>)
   1abe6:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1abe8:	200c      	movs	r0, #12
   1abea:	4240      	negs	r0, r0
   1abec:	e7f1      	b.n	1abd2 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
   1abee:	4b23      	ldr	r3, [pc, #140]	; (1ac7c <hif_receive+0xc4>)
   1abf0:	68db      	ldr	r3, [r3, #12]
   1abf2:	429a      	cmp	r2, r3
   1abf4:	d81a      	bhi.n	1ac2c <hif_receive+0x74>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   1abf6:	4b21      	ldr	r3, [pc, #132]	; (1ac7c <hif_receive+0xc4>)
   1abf8:	689b      	ldr	r3, [r3, #8]
   1abfa:	4298      	cmp	r0, r3
   1abfc:	d326      	bcc.n	1ac4c <hif_receive+0x94>
   1abfe:	1886      	adds	r6, r0, r2
   1ac00:	4a1e      	ldr	r2, [pc, #120]	; (1ac7c <hif_receive+0xc4>)
   1ac02:	6893      	ldr	r3, [r2, #8]
   1ac04:	68d2      	ldr	r2, [r2, #12]
   1ac06:	189b      	adds	r3, r3, r2
   1ac08:	429e      	cmp	r6, r3
   1ac0a:	d81f      	bhi.n	1ac4c <hif_receive+0x94>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   1ac0c:	0022      	movs	r2, r4
   1ac0e:	4b1c      	ldr	r3, [pc, #112]	; (1ac80 <hif_receive+0xc8>)
   1ac10:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1ac12:	2800      	cmp	r0, #0
   1ac14:	d1dd      	bne.n	1abd2 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   1ac16:	4a19      	ldr	r2, [pc, #100]	; (1ac7c <hif_receive+0xc4>)
   1ac18:	6893      	ldr	r3, [r2, #8]
   1ac1a:	68d2      	ldr	r2, [r2, #12]
   1ac1c:	189b      	adds	r3, r3, r2
   1ac1e:	429e      	cmp	r6, r3
   1ac20:	d001      	beq.n	1ac26 <hif_receive+0x6e>
   1ac22:	2d00      	cmp	r5, #0
   1ac24:	d0d5      	beq.n	1abd2 <hif_receive+0x1a>
		ret = hif_set_rx_done();
   1ac26:	4b0f      	ldr	r3, [pc, #60]	; (1ac64 <hif_receive+0xac>)
   1ac28:	4798      	blx	r3
   1ac2a:	e7d2      	b.n	1abd2 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   1ac2c:	22a0      	movs	r2, #160	; 0xa0
   1ac2e:	0092      	lsls	r2, r2, #2
   1ac30:	490d      	ldr	r1, [pc, #52]	; (1ac68 <hif_receive+0xb0>)
   1ac32:	480e      	ldr	r0, [pc, #56]	; (1ac6c <hif_receive+0xb4>)
   1ac34:	4d0e      	ldr	r5, [pc, #56]	; (1ac70 <hif_receive+0xb8>)
   1ac36:	47a8      	blx	r5
   1ac38:	4b10      	ldr	r3, [pc, #64]	; (1ac7c <hif_receive+0xc4>)
   1ac3a:	68da      	ldr	r2, [r3, #12]
   1ac3c:	0021      	movs	r1, r4
   1ac3e:	4811      	ldr	r0, [pc, #68]	; (1ac84 <hif_receive+0xcc>)
   1ac40:	47a8      	blx	r5
   1ac42:	480d      	ldr	r0, [pc, #52]	; (1ac78 <hif_receive+0xc0>)
   1ac44:	47a8      	blx	r5
		ret = M2M_ERR_FAIL;
   1ac46:	200c      	movs	r0, #12
   1ac48:	4240      	negs	r0, r0
		goto ERR1;
   1ac4a:	e7c2      	b.n	1abd2 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   1ac4c:	4a0e      	ldr	r2, [pc, #56]	; (1ac88 <hif_receive+0xd0>)
   1ac4e:	4906      	ldr	r1, [pc, #24]	; (1ac68 <hif_receive+0xb0>)
   1ac50:	4806      	ldr	r0, [pc, #24]	; (1ac6c <hif_receive+0xb4>)
   1ac52:	4c07      	ldr	r4, [pc, #28]	; (1ac70 <hif_receive+0xb8>)
   1ac54:	47a0      	blx	r4
   1ac56:	480d      	ldr	r0, [pc, #52]	; (1ac8c <hif_receive+0xd4>)
   1ac58:	47a0      	blx	r4
   1ac5a:	4807      	ldr	r0, [pc, #28]	; (1ac78 <hif_receive+0xc0>)
   1ac5c:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1ac5e:	200c      	movs	r0, #12
   1ac60:	4240      	negs	r0, r0
		goto ERR1;
   1ac62:	e7b6      	b.n	1abd2 <hif_receive+0x1a>
   1ac64:	0001a509 	.word	0x0001a509
   1ac68:	0002942c 	.word	0x0002942c
   1ac6c:	000293bc 	.word	0x000293bc
   1ac70:	00018f7d 	.word	0x00018f7d
   1ac74:	00029640 	.word	0x00029640
   1ac78:	000293e4 	.word	0x000293e4
   1ac7c:	20005420 	.word	0x20005420
   1ac80:	0001b89d 	.word	0x0001b89d
   1ac84:	00029660 	.word	0x00029660
   1ac88:	00000286 	.word	0x00000286
   1ac8c:	000296a8 	.word	0x000296a8

0001ac90 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   1ac90:	b570      	push	{r4, r5, r6, lr}
   1ac92:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
   1ac94:	2807      	cmp	r0, #7
   1ac96:	d81f      	bhi.n	1acd8 <hif_register_cb+0x48>
   1ac98:	0083      	lsls	r3, r0, #2
   1ac9a:	4a16      	ldr	r2, [pc, #88]	; (1acf4 <hif_register_cb+0x64>)
   1ac9c:	58d3      	ldr	r3, [r2, r3]
   1ac9e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   1aca0:	4b15      	ldr	r3, [pc, #84]	; (1acf8 <hif_register_cb+0x68>)
   1aca2:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
   1aca4:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
   1aca6:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
   1aca8:	4b13      	ldr	r3, [pc, #76]	; (1acf8 <hif_register_cb+0x68>)
   1acaa:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
   1acac:	2000      	movs	r0, #0
			break;
   1acae:	e7fa      	b.n	1aca6 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
   1acb0:	4b11      	ldr	r3, [pc, #68]	; (1acf8 <hif_register_cb+0x68>)
   1acb2:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
   1acb4:	2000      	movs	r0, #0
			break;
   1acb6:	e7f6      	b.n	1aca6 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
   1acb8:	4b0f      	ldr	r3, [pc, #60]	; (1acf8 <hif_register_cb+0x68>)
   1acba:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
   1acbc:	2000      	movs	r0, #0
			break;
   1acbe:	e7f2      	b.n	1aca6 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
   1acc0:	4b0d      	ldr	r3, [pc, #52]	; (1acf8 <hif_register_cb+0x68>)
   1acc2:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
   1acc4:	2000      	movs	r0, #0
			break;
   1acc6:	e7ee      	b.n	1aca6 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
   1acc8:	4b0b      	ldr	r3, [pc, #44]	; (1acf8 <hif_register_cb+0x68>)
   1acca:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
   1accc:	2000      	movs	r0, #0
			break;
   1acce:	e7ea      	b.n	1aca6 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
   1acd0:	4b09      	ldr	r3, [pc, #36]	; (1acf8 <hif_register_cb+0x68>)
   1acd2:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
   1acd4:	2000      	movs	r0, #0
			break;
   1acd6:	e7e6      	b.n	1aca6 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
   1acd8:	4a08      	ldr	r2, [pc, #32]	; (1acfc <hif_register_cb+0x6c>)
   1acda:	4909      	ldr	r1, [pc, #36]	; (1ad00 <hif_register_cb+0x70>)
   1acdc:	4809      	ldr	r0, [pc, #36]	; (1ad04 <hif_register_cb+0x74>)
   1acde:	4d0a      	ldr	r5, [pc, #40]	; (1ad08 <hif_register_cb+0x78>)
   1ace0:	47a8      	blx	r5
   1ace2:	0021      	movs	r1, r4
   1ace4:	4809      	ldr	r0, [pc, #36]	; (1ad0c <hif_register_cb+0x7c>)
   1ace6:	47a8      	blx	r5
   1ace8:	4809      	ldr	r0, [pc, #36]	; (1ad10 <hif_register_cb+0x80>)
   1acea:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
   1acec:	200c      	movs	r0, #12
   1acee:	4240      	negs	r0, r0
			break;
   1acf0:	e7d9      	b.n	1aca6 <hif_register_cb+0x16>
   1acf2:	46c0      	nop			; (mov r8, r8)
   1acf4:	000293e8 	.word	0x000293e8
   1acf8:	20005420 	.word	0x20005420
   1acfc:	000002be 	.word	0x000002be
   1ad00:	00029438 	.word	0x00029438
   1ad04:	000293bc 	.word	0x000293bc
   1ad08:	00018f7d 	.word	0x00018f7d
   1ad0c:	000296ec 	.word	0x000296ec
   1ad10:	000293e4 	.word	0x000293e4

0001ad14 <hif_init>:
{
   1ad14:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1ad16:	222c      	movs	r2, #44	; 0x2c
   1ad18:	2100      	movs	r1, #0
   1ad1a:	4806      	ldr	r0, [pc, #24]	; (1ad34 <hif_init+0x20>)
   1ad1c:	4b06      	ldr	r3, [pc, #24]	; (1ad38 <hif_init+0x24>)
   1ad1e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1ad20:	4806      	ldr	r0, [pc, #24]	; (1ad3c <hif_init+0x28>)
   1ad22:	4b07      	ldr	r3, [pc, #28]	; (1ad40 <hif_init+0x2c>)
   1ad24:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1ad26:	4907      	ldr	r1, [pc, #28]	; (1ad44 <hif_init+0x30>)
   1ad28:	2003      	movs	r0, #3
   1ad2a:	4b07      	ldr	r3, [pc, #28]	; (1ad48 <hif_init+0x34>)
   1ad2c:	4798      	blx	r3
}
   1ad2e:	2000      	movs	r0, #0
   1ad30:	bd10      	pop	{r4, pc}
   1ad32:	46c0      	nop			; (mov r8, r8)
   1ad34:	20005420 	.word	0x20005420
   1ad38:	0001a4c9 	.word	0x0001a4c9
   1ad3c:	0001a4f5 	.word	0x0001a4f5
   1ad40:	0001a185 	.word	0x0001a185
   1ad44:	0001a505 	.word	0x0001a505
   1ad48:	0001ac91 	.word	0x0001ac91

0001ad4c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1ad4c:	b530      	push	{r4, r5, lr}
   1ad4e:	b09f      	sub	sp, #124	; 0x7c
   1ad50:	0004      	movs	r4, r0
   1ad52:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   1ad54:	282c      	cmp	r0, #44	; 0x2c
   1ad56:	d02e      	beq.n	1adb6 <m2m_wifi_cb+0x6a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   1ad58:	281b      	cmp	r0, #27
   1ad5a:	d03c      	beq.n	1add6 <m2m_wifi_cb+0x8a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   1ad5c:	2806      	cmp	r0, #6
   1ad5e:	d04a      	beq.n	1adf6 <m2m_wifi_cb+0xaa>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   1ad60:	280e      	cmp	r0, #14
   1ad62:	d026      	beq.n	1adb2 <m2m_wifi_cb+0x66>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   1ad64:	2832      	cmp	r0, #50	; 0x32
   1ad66:	d056      	beq.n	1ae16 <m2m_wifi_cb+0xca>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   1ad68:	282f      	cmp	r0, #47	; 0x2f
   1ad6a:	d064      	beq.n	1ae36 <m2m_wifi_cb+0xea>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   1ad6c:	2834      	cmp	r0, #52	; 0x34
   1ad6e:	d100      	bne.n	1ad72 <m2m_wifi_cb+0x26>
   1ad70:	e076      	b.n	1ae60 <m2m_wifi_cb+0x114>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   1ad72:	2811      	cmp	r0, #17
   1ad74:	d100      	bne.n	1ad78 <m2m_wifi_cb+0x2c>
   1ad76:	e094      	b.n	1aea2 <m2m_wifi_cb+0x156>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   1ad78:	2813      	cmp	r0, #19
   1ad7a:	d100      	bne.n	1ad7e <m2m_wifi_cb+0x32>
   1ad7c:	e0aa      	b.n	1aed4 <m2m_wifi_cb+0x188>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   1ad7e:	2804      	cmp	r0, #4
   1ad80:	d100      	bne.n	1ad84 <m2m_wifi_cb+0x38>
   1ad82:	e0b9      	b.n	1aef8 <m2m_wifi_cb+0x1ac>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   1ad84:	2865      	cmp	r0, #101	; 0x65
   1ad86:	d100      	bne.n	1ad8a <m2m_wifi_cb+0x3e>
   1ad88:	e0c8      	b.n	1af1c <m2m_wifi_cb+0x1d0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   1ad8a:	2809      	cmp	r0, #9
   1ad8c:	d100      	bne.n	1ad90 <m2m_wifi_cb+0x44>
   1ad8e:	e0d7      	b.n	1af40 <m2m_wifi_cb+0x1f4>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   1ad90:	282a      	cmp	r0, #42	; 0x2a
   1ad92:	d100      	bne.n	1ad96 <m2m_wifi_cb+0x4a>
   1ad94:	e0e6      	b.n	1af64 <m2m_wifi_cb+0x218>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   1ad96:	2820      	cmp	r0, #32
   1ad98:	d100      	bne.n	1ad9c <m2m_wifi_cb+0x50>
   1ad9a:	e0f5      	b.n	1af88 <m2m_wifi_cb+0x23c>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   1ad9c:	2224      	movs	r2, #36	; 0x24
   1ad9e:	32ff      	adds	r2, #255	; 0xff
   1ada0:	4988      	ldr	r1, [pc, #544]	; (1afc4 <m2m_wifi_cb+0x278>)
   1ada2:	4889      	ldr	r0, [pc, #548]	; (1afc8 <m2m_wifi_cb+0x27c>)
   1ada4:	4d89      	ldr	r5, [pc, #548]	; (1afcc <m2m_wifi_cb+0x280>)
   1ada6:	47a8      	blx	r5
   1ada8:	0021      	movs	r1, r4
   1adaa:	4889      	ldr	r0, [pc, #548]	; (1afd0 <m2m_wifi_cb+0x284>)
   1adac:	47a8      	blx	r5
   1adae:	4889      	ldr	r0, [pc, #548]	; (1afd4 <m2m_wifi_cb+0x288>)
   1adb0:	47a8      	blx	r5
	}
}
   1adb2:	b01f      	add	sp, #124	; 0x7c
   1adb4:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   1adb6:	2300      	movs	r3, #0
   1adb8:	2204      	movs	r2, #4
   1adba:	a903      	add	r1, sp, #12
   1adbc:	0028      	movs	r0, r5
   1adbe:	4c86      	ldr	r4, [pc, #536]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1adc0:	47a0      	blx	r4
   1adc2:	2800      	cmp	r0, #0
   1adc4:	d1f5      	bne.n	1adb2 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1adc6:	4b85      	ldr	r3, [pc, #532]	; (1afdc <m2m_wifi_cb+0x290>)
   1adc8:	681b      	ldr	r3, [r3, #0]
   1adca:	2b00      	cmp	r3, #0
   1adcc:	d0f1      	beq.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   1adce:	a903      	add	r1, sp, #12
   1add0:	302c      	adds	r0, #44	; 0x2c
   1add2:	4798      	blx	r3
   1add4:	e7ed      	b.n	1adb2 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   1add6:	2300      	movs	r3, #0
   1add8:	2208      	movs	r2, #8
   1adda:	a903      	add	r1, sp, #12
   1addc:	0028      	movs	r0, r5
   1adde:	4c7e      	ldr	r4, [pc, #504]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1ade0:	47a0      	blx	r4
   1ade2:	2800      	cmp	r0, #0
   1ade4:	d1e5      	bne.n	1adb2 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1ade6:	4b7d      	ldr	r3, [pc, #500]	; (1afdc <m2m_wifi_cb+0x290>)
   1ade8:	681b      	ldr	r3, [r3, #0]
   1adea:	2b00      	cmp	r3, #0
   1adec:	d0e1      	beq.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   1adee:	a903      	add	r1, sp, #12
   1adf0:	301b      	adds	r0, #27
   1adf2:	4798      	blx	r3
   1adf4:	e7dd      	b.n	1adb2 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   1adf6:	2301      	movs	r3, #1
   1adf8:	2230      	movs	r2, #48	; 0x30
   1adfa:	a903      	add	r1, sp, #12
   1adfc:	0028      	movs	r0, r5
   1adfe:	4c76      	ldr	r4, [pc, #472]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1ae00:	47a0      	blx	r4
   1ae02:	2800      	cmp	r0, #0
   1ae04:	d1d5      	bne.n	1adb2 <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1ae06:	4b75      	ldr	r3, [pc, #468]	; (1afdc <m2m_wifi_cb+0x290>)
   1ae08:	681b      	ldr	r3, [r3, #0]
   1ae0a:	2b00      	cmp	r3, #0
   1ae0c:	d0d1      	beq.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   1ae0e:	a903      	add	r1, sp, #12
   1ae10:	3006      	adds	r0, #6
   1ae12:	4798      	blx	r3
   1ae14:	e7cd      	b.n	1adb2 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   1ae16:	2300      	movs	r3, #0
   1ae18:	2218      	movs	r2, #24
   1ae1a:	a903      	add	r1, sp, #12
   1ae1c:	0028      	movs	r0, r5
   1ae1e:	4c6e      	ldr	r4, [pc, #440]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1ae20:	47a0      	blx	r4
   1ae22:	2800      	cmp	r0, #0
   1ae24:	d1c5      	bne.n	1adb2 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1ae26:	4b6d      	ldr	r3, [pc, #436]	; (1afdc <m2m_wifi_cb+0x290>)
   1ae28:	681b      	ldr	r3, [r3, #0]
   1ae2a:	2b00      	cmp	r3, #0
   1ae2c:	d0c1      	beq.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   1ae2e:	a903      	add	r1, sp, #12
   1ae30:	3032      	adds	r0, #50	; 0x32
   1ae32:	4798      	blx	r3
   1ae34:	e7bd      	b.n	1adb2 <m2m_wifi_cb+0x66>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   1ae36:	2264      	movs	r2, #100	; 0x64
   1ae38:	2100      	movs	r1, #0
   1ae3a:	a803      	add	r0, sp, #12
   1ae3c:	4b68      	ldr	r3, [pc, #416]	; (1afe0 <m2m_wifi_cb+0x294>)
   1ae3e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   1ae40:	2300      	movs	r3, #0
   1ae42:	2264      	movs	r2, #100	; 0x64
   1ae44:	a903      	add	r1, sp, #12
   1ae46:	0028      	movs	r0, r5
   1ae48:	4c63      	ldr	r4, [pc, #396]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1ae4a:	47a0      	blx	r4
   1ae4c:	2800      	cmp	r0, #0
   1ae4e:	d1b0      	bne.n	1adb2 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1ae50:	4b62      	ldr	r3, [pc, #392]	; (1afdc <m2m_wifi_cb+0x290>)
   1ae52:	681b      	ldr	r3, [r3, #0]
   1ae54:	2b00      	cmp	r3, #0
   1ae56:	d0ac      	beq.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   1ae58:	a903      	add	r1, sp, #12
   1ae5a:	302f      	adds	r0, #47	; 0x2f
   1ae5c:	4798      	blx	r3
   1ae5e:	e7a8      	b.n	1adb2 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   1ae60:	2300      	movs	r3, #0
   1ae62:	2204      	movs	r2, #4
   1ae64:	a903      	add	r1, sp, #12
   1ae66:	0028      	movs	r0, r5
   1ae68:	4c5b      	ldr	r4, [pc, #364]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1ae6a:	47a0      	blx	r4
   1ae6c:	2800      	cmp	r0, #0
   1ae6e:	d1a0      	bne.n	1adb2 <m2m_wifi_cb+0x66>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   1ae70:	485c      	ldr	r0, [pc, #368]	; (1afe4 <m2m_wifi_cb+0x298>)
   1ae72:	4d56      	ldr	r5, [pc, #344]	; (1afcc <m2m_wifi_cb+0x280>)
   1ae74:	47a8      	blx	r5
   1ae76:	9c03      	ldr	r4, [sp, #12]
   1ae78:	0a23      	lsrs	r3, r4, #8
   1ae7a:	20ff      	movs	r0, #255	; 0xff
   1ae7c:	4003      	ands	r3, r0
   1ae7e:	0c22      	lsrs	r2, r4, #16
   1ae80:	4002      	ands	r2, r0
   1ae82:	0e21      	lsrs	r1, r4, #24
   1ae84:	4020      	ands	r0, r4
   1ae86:	9000      	str	r0, [sp, #0]
   1ae88:	4857      	ldr	r0, [pc, #348]	; (1afe8 <m2m_wifi_cb+0x29c>)
   1ae8a:	47a8      	blx	r5
   1ae8c:	4851      	ldr	r0, [pc, #324]	; (1afd4 <m2m_wifi_cb+0x288>)
   1ae8e:	47a8      	blx	r5
			if (gpfAppWifiCb)
   1ae90:	4b52      	ldr	r3, [pc, #328]	; (1afdc <m2m_wifi_cb+0x290>)
   1ae92:	681b      	ldr	r3, [r3, #0]
   1ae94:	2b00      	cmp	r3, #0
   1ae96:	d100      	bne.n	1ae9a <m2m_wifi_cb+0x14e>
   1ae98:	e78b      	b.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   1ae9a:	2100      	movs	r1, #0
   1ae9c:	2034      	movs	r0, #52	; 0x34
   1ae9e:	4798      	blx	r3
   1aea0:	e787      	b.n	1adb2 <m2m_wifi_cb+0x66>
		gu8scanInProgress = 0;
   1aea2:	2200      	movs	r2, #0
   1aea4:	4b51      	ldr	r3, [pc, #324]	; (1afec <m2m_wifi_cb+0x2a0>)
   1aea6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   1aea8:	2300      	movs	r3, #0
   1aeaa:	3204      	adds	r2, #4
   1aeac:	a903      	add	r1, sp, #12
   1aeae:	0028      	movs	r0, r5
   1aeb0:	4c49      	ldr	r4, [pc, #292]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1aeb2:	47a0      	blx	r4
   1aeb4:	2800      	cmp	r0, #0
   1aeb6:	d000      	beq.n	1aeba <m2m_wifi_cb+0x16e>
   1aeb8:	e77b      	b.n	1adb2 <m2m_wifi_cb+0x66>
			gu8ChNum = strState.u8NumofCh;
   1aeba:	ab03      	add	r3, sp, #12
   1aebc:	781a      	ldrb	r2, [r3, #0]
   1aebe:	4b4c      	ldr	r3, [pc, #304]	; (1aff0 <m2m_wifi_cb+0x2a4>)
   1aec0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   1aec2:	4b46      	ldr	r3, [pc, #280]	; (1afdc <m2m_wifi_cb+0x290>)
   1aec4:	681b      	ldr	r3, [r3, #0]
   1aec6:	2b00      	cmp	r3, #0
   1aec8:	d100      	bne.n	1aecc <m2m_wifi_cb+0x180>
   1aeca:	e772      	b.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   1aecc:	a903      	add	r1, sp, #12
   1aece:	3011      	adds	r0, #17
   1aed0:	4798      	blx	r3
   1aed2:	e76e      	b.n	1adb2 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   1aed4:	2300      	movs	r3, #0
   1aed6:	222c      	movs	r2, #44	; 0x2c
   1aed8:	a903      	add	r1, sp, #12
   1aeda:	0028      	movs	r0, r5
   1aedc:	4c3e      	ldr	r4, [pc, #248]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1aede:	47a0      	blx	r4
   1aee0:	2800      	cmp	r0, #0
   1aee2:	d000      	beq.n	1aee6 <m2m_wifi_cb+0x19a>
   1aee4:	e765      	b.n	1adb2 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1aee6:	4b3d      	ldr	r3, [pc, #244]	; (1afdc <m2m_wifi_cb+0x290>)
   1aee8:	681b      	ldr	r3, [r3, #0]
   1aeea:	2b00      	cmp	r3, #0
   1aeec:	d100      	bne.n	1aef0 <m2m_wifi_cb+0x1a4>
   1aeee:	e760      	b.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   1aef0:	a903      	add	r1, sp, #12
   1aef2:	3013      	adds	r0, #19
   1aef4:	4798      	blx	r3
   1aef6:	e75c      	b.n	1adb2 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1aef8:	2300      	movs	r3, #0
   1aefa:	2204      	movs	r2, #4
   1aefc:	a91c      	add	r1, sp, #112	; 0x70
   1aefe:	0028      	movs	r0, r5
   1af00:	4c35      	ldr	r4, [pc, #212]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1af02:	47a0      	blx	r4
   1af04:	2800      	cmp	r0, #0
   1af06:	d000      	beq.n	1af0a <m2m_wifi_cb+0x1be>
   1af08:	e753      	b.n	1adb2 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1af0a:	4b34      	ldr	r3, [pc, #208]	; (1afdc <m2m_wifi_cb+0x290>)
   1af0c:	681b      	ldr	r3, [r3, #0]
   1af0e:	2b00      	cmp	r3, #0
   1af10:	d100      	bne.n	1af14 <m2m_wifi_cb+0x1c8>
   1af12:	e74e      	b.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   1af14:	a91c      	add	r1, sp, #112	; 0x70
   1af16:	3004      	adds	r0, #4
   1af18:	4798      	blx	r3
   1af1a:	e74a      	b.n	1adb2 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   1af1c:	2300      	movs	r3, #0
   1af1e:	2204      	movs	r2, #4
   1af20:	a91c      	add	r1, sp, #112	; 0x70
   1af22:	0028      	movs	r0, r5
   1af24:	4c2c      	ldr	r4, [pc, #176]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1af26:	47a0      	blx	r4
   1af28:	2800      	cmp	r0, #0
   1af2a:	d000      	beq.n	1af2e <m2m_wifi_cb+0x1e2>
   1af2c:	e741      	b.n	1adb2 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
   1af2e:	4b2b      	ldr	r3, [pc, #172]	; (1afdc <m2m_wifi_cb+0x290>)
   1af30:	681b      	ldr	r3, [r3, #0]
   1af32:	2b00      	cmp	r3, #0
   1af34:	d100      	bne.n	1af38 <m2m_wifi_cb+0x1ec>
   1af36:	e73c      	b.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   1af38:	a91c      	add	r1, sp, #112	; 0x70
   1af3a:	3065      	adds	r0, #101	; 0x65
   1af3c:	4798      	blx	r3
   1af3e:	e738      	b.n	1adb2 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   1af40:	2301      	movs	r3, #1
   1af42:	2264      	movs	r2, #100	; 0x64
   1af44:	a903      	add	r1, sp, #12
   1af46:	0028      	movs	r0, r5
   1af48:	4c23      	ldr	r4, [pc, #140]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1af4a:	47a0      	blx	r4
   1af4c:	2800      	cmp	r0, #0
   1af4e:	d000      	beq.n	1af52 <m2m_wifi_cb+0x206>
   1af50:	e72f      	b.n	1adb2 <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1af52:	4b22      	ldr	r3, [pc, #136]	; (1afdc <m2m_wifi_cb+0x290>)
   1af54:	681b      	ldr	r3, [r3, #0]
   1af56:	2b00      	cmp	r3, #0
   1af58:	d100      	bne.n	1af5c <m2m_wifi_cb+0x210>
   1af5a:	e72a      	b.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   1af5c:	a903      	add	r1, sp, #12
   1af5e:	3009      	adds	r0, #9
   1af60:	4798      	blx	r3
   1af62:	e726      	b.n	1adb2 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   1af64:	2301      	movs	r3, #1
   1af66:	2204      	movs	r2, #4
   1af68:	a903      	add	r1, sp, #12
   1af6a:	0028      	movs	r0, r5
   1af6c:	4c1a      	ldr	r4, [pc, #104]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1af6e:	47a0      	blx	r4
   1af70:	2800      	cmp	r0, #0
   1af72:	d000      	beq.n	1af76 <m2m_wifi_cb+0x22a>
   1af74:	e71d      	b.n	1adb2 <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
   1af76:	4b19      	ldr	r3, [pc, #100]	; (1afdc <m2m_wifi_cb+0x290>)
   1af78:	681b      	ldr	r3, [r3, #0]
   1af7a:	2b00      	cmp	r3, #0
   1af7c:	d100      	bne.n	1af80 <m2m_wifi_cb+0x234>
   1af7e:	e718      	b.n	1adb2 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   1af80:	a903      	add	r1, sp, #12
   1af82:	302a      	adds	r0, #42	; 0x2a
   1af84:	4798      	blx	r3
   1af86:	e714      	b.n	1adb2 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   1af88:	2300      	movs	r3, #0
   1af8a:	2208      	movs	r2, #8
   1af8c:	a903      	add	r1, sp, #12
   1af8e:	0028      	movs	r0, r5
   1af90:	4c11      	ldr	r4, [pc, #68]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1af92:	47a0      	blx	r4
   1af94:	2800      	cmp	r0, #0
   1af96:	d000      	beq.n	1af9a <m2m_wifi_cb+0x24e>
   1af98:	e70b      	b.n	1adb2 <m2m_wifi_cb+0x66>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   1af9a:	ab03      	add	r3, sp, #12
   1af9c:	889a      	ldrh	r2, [r3, #4]
   1af9e:	0028      	movs	r0, r5
   1afa0:	3008      	adds	r0, #8
   1afa2:	2301      	movs	r3, #1
   1afa4:	9903      	ldr	r1, [sp, #12]
   1afa6:	4c0c      	ldr	r4, [pc, #48]	; (1afd8 <m2m_wifi_cb+0x28c>)
   1afa8:	47a0      	blx	r4
   1afaa:	2800      	cmp	r0, #0
   1afac:	d000      	beq.n	1afb0 <m2m_wifi_cb+0x264>
   1afae:	e700      	b.n	1adb2 <m2m_wifi_cb+0x66>
				if(gpfAppWifiCb)
   1afb0:	4b0a      	ldr	r3, [pc, #40]	; (1afdc <m2m_wifi_cb+0x290>)
   1afb2:	681b      	ldr	r3, [r3, #0]
   1afb4:	2b00      	cmp	r3, #0
   1afb6:	d100      	bne.n	1afba <m2m_wifi_cb+0x26e>
   1afb8:	e6fb      	b.n	1adb2 <m2m_wifi_cb+0x66>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   1afba:	a903      	add	r1, sp, #12
   1afbc:	3020      	adds	r0, #32
   1afbe:	4798      	blx	r3
   1afc0:	e6f7      	b.n	1adb2 <m2m_wifi_cb+0x66>
   1afc2:	46c0      	nop			; (mov r8, r8)
   1afc4:	00029738 	.word	0x00029738
   1afc8:	000293bc 	.word	0x000293bc
   1afcc:	00018f7d 	.word	0x00018f7d
   1afd0:	00029788 	.word	0x00029788
   1afd4:	000293e4 	.word	0x000293e4
   1afd8:	0001abb9 	.word	0x0001abb9
   1afdc:	20003d74 	.word	0x20003d74
   1afe0:	0001a4c9 	.word	0x0001a4c9
   1afe4:	000296f8 	.word	0x000296f8
   1afe8:	00029768 	.word	0x00029768
   1afec:	20003d79 	.word	0x20003d79
   1aff0:	20003d78 	.word	0x20003d78

0001aff4 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   1aff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aff6:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   1aff8:	2201      	movs	r2, #1
   1affa:	230f      	movs	r3, #15
   1affc:	446b      	add	r3, sp
   1affe:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   1b000:	2800      	cmp	r0, #0
   1b002:	d05f      	beq.n	1b0c4 <m2m_wifi_init+0xd0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   1b004:	6802      	ldr	r2, [r0, #0]
   1b006:	4b31      	ldr	r3, [pc, #196]	; (1b0cc <m2m_wifi_init+0xd8>)
   1b008:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   1b00a:	2200      	movs	r2, #0
   1b00c:	4b30      	ldr	r3, [pc, #192]	; (1b0d0 <m2m_wifi_init+0xdc>)
   1b00e:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   1b010:	200f      	movs	r0, #15
   1b012:	4468      	add	r0, sp
   1b014:	4b2f      	ldr	r3, [pc, #188]	; (1b0d4 <m2m_wifi_init+0xe0>)
   1b016:	4798      	blx	r3
   1b018:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   1b01a:	d002      	beq.n	1b022 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
   1b01c:	0020      	movs	r0, r4
   1b01e:	b00f      	add	sp, #60	; 0x3c
   1b020:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
   1b022:	2000      	movs	r0, #0
   1b024:	4b2c      	ldr	r3, [pc, #176]	; (1b0d8 <m2m_wifi_init+0xe4>)
   1b026:	4798      	blx	r3
   1b028:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   1b02a:	d147      	bne.n	1b0bc <m2m_wifi_init+0xc8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   1b02c:	492b      	ldr	r1, [pc, #172]	; (1b0dc <m2m_wifi_init+0xe8>)
   1b02e:	2001      	movs	r0, #1
   1b030:	4b2b      	ldr	r3, [pc, #172]	; (1b0e0 <m2m_wifi_init+0xec>)
   1b032:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
   1b034:	ad04      	add	r5, sp, #16
   1b036:	0028      	movs	r0, r5
   1b038:	4b2a      	ldr	r3, [pc, #168]	; (1b0e4 <m2m_wifi_init+0xf0>)
   1b03a:	4798      	blx	r3
   1b03c:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   1b03e:	4f2a      	ldr	r7, [pc, #168]	; (1b0e8 <m2m_wifi_init+0xf4>)
   1b040:	0038      	movs	r0, r7
   1b042:	4e2a      	ldr	r6, [pc, #168]	; (1b0ec <m2m_wifi_init+0xf8>)
   1b044:	47b0      	blx	r6
   1b046:	79ab      	ldrb	r3, [r5, #6]
   1b048:	796a      	ldrb	r2, [r5, #5]
   1b04a:	7929      	ldrb	r1, [r5, #4]
   1b04c:	8c28      	ldrh	r0, [r5, #32]
   1b04e:	9000      	str	r0, [sp, #0]
   1b050:	4827      	ldr	r0, [pc, #156]	; (1b0f0 <m2m_wifi_init+0xfc>)
   1b052:	47b0      	blx	r6
   1b054:	4827      	ldr	r0, [pc, #156]	; (1b0f4 <m2m_wifi_init+0x100>)
   1b056:	47b0      	blx	r6
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   1b058:	0038      	movs	r0, r7
   1b05a:	47b0      	blx	r6
   1b05c:	2226      	movs	r2, #38	; 0x26
   1b05e:	446a      	add	r2, sp
   1b060:	211a      	movs	r1, #26
   1b062:	4469      	add	r1, sp
   1b064:	4824      	ldr	r0, [pc, #144]	; (1b0f8 <m2m_wifi_init+0x104>)
   1b066:	47b0      	blx	r6
   1b068:	4822      	ldr	r0, [pc, #136]	; (1b0f4 <m2m_wifi_init+0x100>)
   1b06a:	47b0      	blx	r6
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   1b06c:	0038      	movs	r0, r7
   1b06e:	47b0      	blx	r6
   1b070:	7a6b      	ldrb	r3, [r5, #9]
   1b072:	7a2a      	ldrb	r2, [r5, #8]
   1b074:	79e9      	ldrb	r1, [r5, #7]
   1b076:	4821      	ldr	r0, [pc, #132]	; (1b0fc <m2m_wifi_init+0x108>)
   1b078:	47b0      	blx	r6
   1b07a:	481e      	ldr	r0, [pc, #120]	; (1b0f4 <m2m_wifi_init+0x100>)
   1b07c:	47b0      	blx	r6
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   1b07e:	0038      	movs	r0, r7
   1b080:	47b0      	blx	r6
   1b082:	2304      	movs	r3, #4
   1b084:	2205      	movs	r2, #5
   1b086:	2113      	movs	r1, #19
   1b088:	481d      	ldr	r0, [pc, #116]	; (1b100 <m2m_wifi_init+0x10c>)
   1b08a:	47b0      	blx	r6
   1b08c:	4819      	ldr	r0, [pc, #100]	; (1b0f4 <m2m_wifi_init+0x100>)
   1b08e:	47b0      	blx	r6
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   1b090:	0038      	movs	r0, r7
   1b092:	47b0      	blx	r6
   1b094:	4a1b      	ldr	r2, [pc, #108]	; (1b104 <m2m_wifi_init+0x110>)
   1b096:	491c      	ldr	r1, [pc, #112]	; (1b108 <m2m_wifi_init+0x114>)
   1b098:	481c      	ldr	r0, [pc, #112]	; (1b10c <m2m_wifi_init+0x118>)
   1b09a:	47b0      	blx	r6
   1b09c:	4815      	ldr	r0, [pc, #84]	; (1b0f4 <m2m_wifi_init+0x100>)
   1b09e:	47b0      	blx	r6
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   1b0a0:	0023      	movs	r3, r4
   1b0a2:	330d      	adds	r3, #13
   1b0a4:	d1ba      	bne.n	1b01c <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
   1b0a6:	22e8      	movs	r2, #232	; 0xe8
   1b0a8:	32ff      	adds	r2, #255	; 0xff
   1b0aa:	4919      	ldr	r1, [pc, #100]	; (1b110 <m2m_wifi_init+0x11c>)
   1b0ac:	4819      	ldr	r0, [pc, #100]	; (1b114 <m2m_wifi_init+0x120>)
   1b0ae:	4d0f      	ldr	r5, [pc, #60]	; (1b0ec <m2m_wifi_init+0xf8>)
   1b0b0:	47a8      	blx	r5
   1b0b2:	4819      	ldr	r0, [pc, #100]	; (1b118 <m2m_wifi_init+0x124>)
   1b0b4:	47a8      	blx	r5
   1b0b6:	480f      	ldr	r0, [pc, #60]	; (1b0f4 <m2m_wifi_init+0x100>)
   1b0b8:	47a8      	blx	r5
   1b0ba:	e7af      	b.n	1b01c <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
   1b0bc:	2000      	movs	r0, #0
   1b0be:	4b17      	ldr	r3, [pc, #92]	; (1b11c <m2m_wifi_init+0x128>)
   1b0c0:	4798      	blx	r3
   1b0c2:	e7ab      	b.n	1b01c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   1b0c4:	240c      	movs	r4, #12
   1b0c6:	4264      	negs	r4, r4
   1b0c8:	e7a8      	b.n	1b01c <m2m_wifi_init+0x28>
   1b0ca:	46c0      	nop			; (mov r8, r8)
   1b0cc:	20003d74 	.word	0x20003d74
   1b0d0:	20003d79 	.word	0x20003d79
   1b0d4:	0001ba51 	.word	0x0001ba51
   1b0d8:	0001ad15 	.word	0x0001ad15
   1b0dc:	0001ad4d 	.word	0x0001ad4d
   1b0e0:	0001ac91 	.word	0x0001ac91
   1b0e4:	0001b96d 	.word	0x0001b96d
   1b0e8:	000296f8 	.word	0x000296f8
   1b0ec:	00018f7d 	.word	0x00018f7d
   1b0f0:	00029848 	.word	0x00029848
   1b0f4:	000293e4 	.word	0x000293e4
   1b0f8:	00029870 	.word	0x00029870
   1b0fc:	0002988c 	.word	0x0002988c
   1b100:	000298b0 	.word	0x000298b0
   1b104:	000298c8 	.word	0x000298c8
   1b108:	000298d4 	.word	0x000298d4
   1b10c:	000298e0 	.word	0x000298e0
   1b110:	00029744 	.word	0x00029744
   1b114:	000293bc 	.word	0x000293bc
   1b118:	000298f8 	.word	0x000298f8
   1b11c:	0001bb19 	.word	0x0001bb19

0001b120 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   1b120:	b510      	push	{r4, lr}
	return hif_handle_isr();
   1b122:	4b01      	ldr	r3, [pc, #4]	; (1b128 <m2m_wifi_handle_events+0x8>)
   1b124:	4798      	blx	r3
}
   1b126:	bd10      	pop	{r4, pc}
   1b128:	0001a805 	.word	0x0001a805

0001b12c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   1b12c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b12e:	46ce      	mov	lr, r9
   1b130:	4647      	mov	r7, r8
   1b132:	b580      	push	{r7, lr}
   1b134:	b0a3      	sub	sp, #140	; 0x8c
   1b136:	9005      	str	r0, [sp, #20]
   1b138:	000c      	movs	r4, r1
   1b13a:	0015      	movs	r5, r2
   1b13c:	001f      	movs	r7, r3
   1b13e:	ab2a      	add	r3, sp, #168	; 0xa8
   1b140:	881b      	ldrh	r3, [r3, #0]
   1b142:	4699      	mov	r9, r3
   1b144:	ab2b      	add	r3, sp, #172	; 0xac
   1b146:	781b      	ldrb	r3, [r3, #0]
   1b148:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   1b14a:	2a01      	cmp	r2, #1
   1b14c:	d003      	beq.n	1b156 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
   1b14e:	2f00      	cmp	r7, #0
   1b150:	d03f      	beq.n	1b1d2 <m2m_wifi_connect_sc+0xa6>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1b152:	2a02      	cmp	r2, #2
   1b154:	d049      	beq.n	1b1ea <m2m_wifi_connect_sc+0xbe>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   1b156:	1e63      	subs	r3, r4, #1
   1b158:	2b1f      	cmp	r3, #31
   1b15a:	d900      	bls.n	1b15e <m2m_wifi_connect_sc+0x32>
   1b15c:	e073      	b.n	1b246 <m2m_wifi_connect_sc+0x11a>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   1b15e:	464b      	mov	r3, r9
   1b160:	3b01      	subs	r3, #1
   1b162:	b29b      	uxth	r3, r3
   1b164:	2b0d      	cmp	r3, #13
   1b166:	d903      	bls.n	1b170 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   1b168:	464b      	mov	r3, r9
   1b16a:	2bff      	cmp	r3, #255	; 0xff
   1b16c:	d000      	beq.n	1b170 <m2m_wifi_connect_sc+0x44>
   1b16e:	e077      	b.n	1b260 <m2m_wifi_connect_sc+0x134>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   1b170:	ae07      	add	r6, sp, #28
   1b172:	0022      	movs	r2, r4
   1b174:	9905      	ldr	r1, [sp, #20]
   1b176:	205a      	movs	r0, #90	; 0x5a
   1b178:	ab02      	add	r3, sp, #8
   1b17a:	469c      	mov	ip, r3
   1b17c:	4460      	add	r0, ip
   1b17e:	4b71      	ldr	r3, [pc, #452]	; (1b344 <m2m_wifi_connect_sc+0x218>)
   1b180:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   1b182:	1934      	adds	r4, r6, r4
   1b184:	3446      	adds	r4, #70	; 0x46
   1b186:	2300      	movs	r3, #0
   1b188:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   1b18a:	3344      	adds	r3, #68	; 0x44
   1b18c:	464a      	mov	r2, r9
   1b18e:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   1b190:	4643      	mov	r3, r8
   1b192:	1e5a      	subs	r2, r3, #1
   1b194:	4193      	sbcs	r3, r2
   1b196:	2267      	movs	r2, #103	; 0x67
   1b198:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
   1b19a:	2341      	movs	r3, #65	; 0x41
   1b19c:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   1b19e:	2d03      	cmp	r5, #3
   1b1a0:	d06a      	beq.n	1b278 <m2m_wifi_connect_sc+0x14c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   1b1a2:	2d02      	cmp	r5, #2
   1b1a4:	d100      	bne.n	1b1a8 <m2m_wifi_connect_sc+0x7c>
   1b1a6:	e0a2      	b.n	1b2ee <m2m_wifi_connect_sc+0x1c2>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   1b1a8:	2d04      	cmp	r5, #4
   1b1aa:	d100      	bne.n	1b1ae <m2m_wifi_connect_sc+0x82>
   1b1ac:	e0b8      	b.n	1b320 <m2m_wifi_connect_sc+0x1f4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   1b1ae:	2d01      	cmp	r5, #1
   1b1b0:	d000      	beq.n	1b1b4 <m2m_wifi_connect_sc+0x88>
   1b1b2:	e0bb      	b.n	1b32c <m2m_wifi_connect_sc+0x200>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   1b1b4:	2300      	movs	r3, #0
   1b1b6:	9302      	str	r3, [sp, #8]
   1b1b8:	9301      	str	r3, [sp, #4]
   1b1ba:	9300      	str	r3, [sp, #0]
   1b1bc:	336c      	adds	r3, #108	; 0x6c
   1b1be:	aa07      	add	r2, sp, #28
   1b1c0:	2128      	movs	r1, #40	; 0x28
   1b1c2:	2001      	movs	r0, #1
   1b1c4:	4c60      	ldr	r4, [pc, #384]	; (1b348 <m2m_wifi_connect_sc+0x21c>)
   1b1c6:	47a0      	blx	r4

ERR1:
	return ret;
}
   1b1c8:	b023      	add	sp, #140	; 0x8c
   1b1ca:	bc0c      	pop	{r2, r3}
   1b1cc:	4690      	mov	r8, r2
   1b1ce:	4699      	mov	r9, r3
   1b1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
   1b1d2:	4a5e      	ldr	r2, [pc, #376]	; (1b34c <m2m_wifi_connect_sc+0x220>)
   1b1d4:	495e      	ldr	r1, [pc, #376]	; (1b350 <m2m_wifi_connect_sc+0x224>)
   1b1d6:	485f      	ldr	r0, [pc, #380]	; (1b354 <m2m_wifi_connect_sc+0x228>)
   1b1d8:	4c5f      	ldr	r4, [pc, #380]	; (1b358 <m2m_wifi_connect_sc+0x22c>)
   1b1da:	47a0      	blx	r4
   1b1dc:	485f      	ldr	r0, [pc, #380]	; (1b35c <m2m_wifi_connect_sc+0x230>)
   1b1de:	47a0      	blx	r4
   1b1e0:	485f      	ldr	r0, [pc, #380]	; (1b360 <m2m_wifi_connect_sc+0x234>)
   1b1e2:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b1e4:	200c      	movs	r0, #12
   1b1e6:	4240      	negs	r0, r0
			goto ERR1;
   1b1e8:	e7ee      	b.n	1b1c8 <m2m_wifi_connect_sc+0x9c>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   1b1ea:	0038      	movs	r0, r7
   1b1ec:	4b5d      	ldr	r3, [pc, #372]	; (1b364 <m2m_wifi_connect_sc+0x238>)
   1b1ee:	4798      	blx	r3
   1b1f0:	2840      	cmp	r0, #64	; 0x40
   1b1f2:	d1b0      	bne.n	1b156 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   1b1f4:	783b      	ldrb	r3, [r7, #0]
   1b1f6:	001a      	movs	r2, r3
   1b1f8:	3a30      	subs	r2, #48	; 0x30
   1b1fa:	2a36      	cmp	r2, #54	; 0x36
   1b1fc:	d817      	bhi.n	1b22e <m2m_wifi_connect_sc+0x102>
   1b1fe:	3a0a      	subs	r2, #10
   1b200:	2a06      	cmp	r2, #6
   1b202:	d914      	bls.n	1b22e <m2m_wifi_connect_sc+0x102>
   1b204:	3b47      	subs	r3, #71	; 0x47
   1b206:	2b19      	cmp	r3, #25
   1b208:	d911      	bls.n	1b22e <m2m_wifi_connect_sc+0x102>
   1b20a:	1c7a      	adds	r2, r7, #1
   1b20c:	0038      	movs	r0, r7
   1b20e:	3040      	adds	r0, #64	; 0x40
   1b210:	7813      	ldrb	r3, [r2, #0]
   1b212:	0019      	movs	r1, r3
   1b214:	3930      	subs	r1, #48	; 0x30
   1b216:	2936      	cmp	r1, #54	; 0x36
   1b218:	d809      	bhi.n	1b22e <m2m_wifi_connect_sc+0x102>
   1b21a:	390a      	subs	r1, #10
   1b21c:	2906      	cmp	r1, #6
   1b21e:	d906      	bls.n	1b22e <m2m_wifi_connect_sc+0x102>
   1b220:	3b47      	subs	r3, #71	; 0x47
   1b222:	2b19      	cmp	r3, #25
   1b224:	d903      	bls.n	1b22e <m2m_wifi_connect_sc+0x102>
   1b226:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
   1b228:	4282      	cmp	r2, r0
   1b22a:	d1f1      	bne.n	1b210 <m2m_wifi_connect_sc+0xe4>
   1b22c:	e793      	b.n	1b156 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
   1b22e:	4a4e      	ldr	r2, [pc, #312]	; (1b368 <m2m_wifi_connect_sc+0x23c>)
   1b230:	4947      	ldr	r1, [pc, #284]	; (1b350 <m2m_wifi_connect_sc+0x224>)
   1b232:	4848      	ldr	r0, [pc, #288]	; (1b354 <m2m_wifi_connect_sc+0x228>)
   1b234:	4c48      	ldr	r4, [pc, #288]	; (1b358 <m2m_wifi_connect_sc+0x22c>)
   1b236:	47a0      	blx	r4
   1b238:	484c      	ldr	r0, [pc, #304]	; (1b36c <m2m_wifi_connect_sc+0x240>)
   1b23a:	47a0      	blx	r4
   1b23c:	4848      	ldr	r0, [pc, #288]	; (1b360 <m2m_wifi_connect_sc+0x234>)
   1b23e:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
   1b240:	200c      	movs	r0, #12
   1b242:	4240      	negs	r0, r0
					goto ERR1;
   1b244:	e7c0      	b.n	1b1c8 <m2m_wifi_connect_sc+0x9c>
		M2M_ERR("SSID LEN INVALID\n");
   1b246:	228c      	movs	r2, #140	; 0x8c
   1b248:	0092      	lsls	r2, r2, #2
   1b24a:	4941      	ldr	r1, [pc, #260]	; (1b350 <m2m_wifi_connect_sc+0x224>)
   1b24c:	4841      	ldr	r0, [pc, #260]	; (1b354 <m2m_wifi_connect_sc+0x228>)
   1b24e:	4c42      	ldr	r4, [pc, #264]	; (1b358 <m2m_wifi_connect_sc+0x22c>)
   1b250:	47a0      	blx	r4
   1b252:	4847      	ldr	r0, [pc, #284]	; (1b370 <m2m_wifi_connect_sc+0x244>)
   1b254:	47a0      	blx	r4
   1b256:	4842      	ldr	r0, [pc, #264]	; (1b360 <m2m_wifi_connect_sc+0x234>)
   1b258:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1b25a:	200c      	movs	r0, #12
   1b25c:	4240      	negs	r0, r0
		goto ERR1;
   1b25e:	e7b3      	b.n	1b1c8 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("CH INVALID\n");
   1b260:	4a44      	ldr	r2, [pc, #272]	; (1b374 <m2m_wifi_connect_sc+0x248>)
   1b262:	493b      	ldr	r1, [pc, #236]	; (1b350 <m2m_wifi_connect_sc+0x224>)
   1b264:	483b      	ldr	r0, [pc, #236]	; (1b354 <m2m_wifi_connect_sc+0x228>)
   1b266:	4c3c      	ldr	r4, [pc, #240]	; (1b358 <m2m_wifi_connect_sc+0x22c>)
   1b268:	47a0      	blx	r4
   1b26a:	4843      	ldr	r0, [pc, #268]	; (1b378 <m2m_wifi_connect_sc+0x24c>)
   1b26c:	47a0      	blx	r4
   1b26e:	483c      	ldr	r0, [pc, #240]	; (1b360 <m2m_wifi_connect_sc+0x234>)
   1b270:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b272:	200c      	movs	r0, #12
   1b274:	4240      	negs	r0, r0
			goto ERR1;
   1b276:	e7a7      	b.n	1b1c8 <m2m_wifi_connect_sc+0x9c>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   1b278:	783b      	ldrb	r3, [r7, #0]
   1b27a:	3b01      	subs	r3, #1
   1b27c:	b2db      	uxtb	r3, r3
   1b27e:	aa07      	add	r2, sp, #28
   1b280:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   1b282:	2b03      	cmp	r3, #3
   1b284:	d816      	bhi.n	1b2b4 <m2m_wifi_connect_sc+0x188>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   1b286:	787a      	ldrb	r2, [r7, #1]
   1b288:	1e51      	subs	r1, r2, #1
   1b28a:	ab07      	add	r3, sp, #28
   1b28c:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   1b28e:	2310      	movs	r3, #16
   1b290:	0011      	movs	r1, r2
   1b292:	4399      	bics	r1, r3
   1b294:	290b      	cmp	r1, #11
   1b296:	d01c      	beq.n	1b2d2 <m2m_wifi_connect_sc+0x1a6>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   1b298:	4a38      	ldr	r2, [pc, #224]	; (1b37c <m2m_wifi_connect_sc+0x250>)
   1b29a:	492d      	ldr	r1, [pc, #180]	; (1b350 <m2m_wifi_connect_sc+0x224>)
   1b29c:	482d      	ldr	r0, [pc, #180]	; (1b354 <m2m_wifi_connect_sc+0x228>)
   1b29e:	4c2e      	ldr	r4, [pc, #184]	; (1b358 <m2m_wifi_connect_sc+0x22c>)
   1b2a0:	47a0      	blx	r4
   1b2a2:	ab07      	add	r3, sp, #28
   1b2a4:	7859      	ldrb	r1, [r3, #1]
   1b2a6:	4836      	ldr	r0, [pc, #216]	; (1b380 <m2m_wifi_connect_sc+0x254>)
   1b2a8:	47a0      	blx	r4
   1b2aa:	482d      	ldr	r0, [pc, #180]	; (1b360 <m2m_wifi_connect_sc+0x234>)
   1b2ac:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b2ae:	200c      	movs	r0, #12
   1b2b0:	4240      	negs	r0, r0
			goto ERR1;
   1b2b2:	e789      	b.n	1b1c8 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   1b2b4:	2294      	movs	r2, #148	; 0x94
   1b2b6:	0092      	lsls	r2, r2, #2
   1b2b8:	4925      	ldr	r1, [pc, #148]	; (1b350 <m2m_wifi_connect_sc+0x224>)
   1b2ba:	4826      	ldr	r0, [pc, #152]	; (1b354 <m2m_wifi_connect_sc+0x228>)
   1b2bc:	4c26      	ldr	r4, [pc, #152]	; (1b358 <m2m_wifi_connect_sc+0x22c>)
   1b2be:	47a0      	blx	r4
   1b2c0:	ab07      	add	r3, sp, #28
   1b2c2:	7819      	ldrb	r1, [r3, #0]
   1b2c4:	482f      	ldr	r0, [pc, #188]	; (1b384 <m2m_wifi_connect_sc+0x258>)
   1b2c6:	47a0      	blx	r4
   1b2c8:	4825      	ldr	r0, [pc, #148]	; (1b360 <m2m_wifi_connect_sc+0x234>)
   1b2ca:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b2cc:	200c      	movs	r0, #12
   1b2ce:	4240      	negs	r0, r0
			goto ERR1;
   1b2d0:	e77a      	b.n	1b1c8 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   1b2d2:	1cb9      	adds	r1, r7, #2
   1b2d4:	2016      	movs	r0, #22
   1b2d6:	ab02      	add	r3, sp, #8
   1b2d8:	469c      	mov	ip, r3
   1b2da:	4460      	add	r0, ip
   1b2dc:	4b19      	ldr	r3, [pc, #100]	; (1b344 <m2m_wifi_connect_sc+0x218>)
   1b2de:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   1b2e0:	787b      	ldrb	r3, [r7, #1]
   1b2e2:	aa07      	add	r2, sp, #28
   1b2e4:	4694      	mov	ip, r2
   1b2e6:	4463      	add	r3, ip
   1b2e8:	2200      	movs	r2, #0
   1b2ea:	709a      	strb	r2, [r3, #2]
   1b2ec:	e762      	b.n	1b1b4 <m2m_wifi_connect_sc+0x88>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   1b2ee:	0038      	movs	r0, r7
   1b2f0:	4b1c      	ldr	r3, [pc, #112]	; (1b364 <m2m_wifi_connect_sc+0x238>)
   1b2f2:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   1b2f4:	1e43      	subs	r3, r0, #1
   1b2f6:	b29b      	uxth	r3, r3
   1b2f8:	2b3f      	cmp	r3, #63	; 0x3f
   1b2fa:	d805      	bhi.n	1b308 <m2m_wifi_connect_sc+0x1dc>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   1b2fc:	1c42      	adds	r2, r0, #1
   1b2fe:	0039      	movs	r1, r7
   1b300:	a807      	add	r0, sp, #28
   1b302:	4b10      	ldr	r3, [pc, #64]	; (1b344 <m2m_wifi_connect_sc+0x218>)
   1b304:	4798      	blx	r3
   1b306:	e755      	b.n	1b1b4 <m2m_wifi_connect_sc+0x88>
			M2M_ERR("Incorrect PSK key length\n");
   1b308:	4a1f      	ldr	r2, [pc, #124]	; (1b388 <m2m_wifi_connect_sc+0x25c>)
   1b30a:	4911      	ldr	r1, [pc, #68]	; (1b350 <m2m_wifi_connect_sc+0x224>)
   1b30c:	4811      	ldr	r0, [pc, #68]	; (1b354 <m2m_wifi_connect_sc+0x228>)
   1b30e:	4c12      	ldr	r4, [pc, #72]	; (1b358 <m2m_wifi_connect_sc+0x22c>)
   1b310:	47a0      	blx	r4
   1b312:	481e      	ldr	r0, [pc, #120]	; (1b38c <m2m_wifi_connect_sc+0x260>)
   1b314:	47a0      	blx	r4
   1b316:	4812      	ldr	r0, [pc, #72]	; (1b360 <m2m_wifi_connect_sc+0x234>)
   1b318:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
   1b31a:	200c      	movs	r0, #12
   1b31c:	4240      	negs	r0, r0
			goto ERR1;
   1b31e:	e753      	b.n	1b1c8 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   1b320:	223e      	movs	r2, #62	; 0x3e
   1b322:	0039      	movs	r1, r7
   1b324:	a807      	add	r0, sp, #28
   1b326:	4b07      	ldr	r3, [pc, #28]	; (1b344 <m2m_wifi_connect_sc+0x218>)
   1b328:	4798      	blx	r3
   1b32a:	e743      	b.n	1b1b4 <m2m_wifi_connect_sc+0x88>
		M2M_ERR("undefined sec type\n");
   1b32c:	4a18      	ldr	r2, [pc, #96]	; (1b390 <m2m_wifi_connect_sc+0x264>)
   1b32e:	4908      	ldr	r1, [pc, #32]	; (1b350 <m2m_wifi_connect_sc+0x224>)
   1b330:	4808      	ldr	r0, [pc, #32]	; (1b354 <m2m_wifi_connect_sc+0x228>)
   1b332:	4c09      	ldr	r4, [pc, #36]	; (1b358 <m2m_wifi_connect_sc+0x22c>)
   1b334:	47a0      	blx	r4
   1b336:	4817      	ldr	r0, [pc, #92]	; (1b394 <m2m_wifi_connect_sc+0x268>)
   1b338:	47a0      	blx	r4
   1b33a:	4809      	ldr	r0, [pc, #36]	; (1b360 <m2m_wifi_connect_sc+0x234>)
   1b33c:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
   1b33e:	200c      	movs	r0, #12
   1b340:	4240      	negs	r0, r0
		goto ERR1;
   1b342:	e741      	b.n	1b1c8 <m2m_wifi_connect_sc+0x9c>
   1b344:	0001a4b5 	.word	0x0001a4b5
   1b348:	0001a5dd 	.word	0x0001a5dd
   1b34c:	0000021a 	.word	0x0000021a
   1b350:	00029754 	.word	0x00029754
   1b354:	000293bc 	.word	0x000293bc
   1b358:	00018f7d 	.word	0x00018f7d
   1b35c:	0002979c 	.word	0x0002979c
   1b360:	000293e4 	.word	0x000293e4
   1b364:	0001a4d9 	.word	0x0001a4d9
   1b368:	00000226 	.word	0x00000226
   1b36c:	000297b0 	.word	0x000297b0
   1b370:	000297c0 	.word	0x000297c0
   1b374:	00000239 	.word	0x00000239
   1b378:	000297d4 	.word	0x000297d4
   1b37c:	00000257 	.word	0x00000257
   1b380:	000297fc 	.word	0x000297fc
   1b384:	000297e0 	.word	0x000297e0
   1b388:	00000266 	.word	0x00000266
   1b38c:	00029818 	.word	0x00029818
   1b390:	00000276 	.word	0x00000276
   1b394:	00029834 	.word	0x00029834

0001b398 <m2m_wifi_connect>:
{
   1b398:	b530      	push	{r4, r5, lr}
   1b39a:	b083      	sub	sp, #12
   1b39c:	ac06      	add	r4, sp, #24
   1b39e:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   1b3a0:	2500      	movs	r5, #0
   1b3a2:	9501      	str	r5, [sp, #4]
   1b3a4:	9400      	str	r4, [sp, #0]
   1b3a6:	4c02      	ldr	r4, [pc, #8]	; (1b3b0 <m2m_wifi_connect+0x18>)
   1b3a8:	47a0      	blx	r4
}
   1b3aa:	b003      	add	sp, #12
   1b3ac:	bd30      	pop	{r4, r5, pc}
   1b3ae:	46c0      	nop			; (mov r8, r8)
   1b3b0:	0001b12d 	.word	0x0001b12d

0001b3b4 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
   1b3b4:	2000      	movs	r0, #0
   1b3b6:	4770      	bx	lr

0001b3b8 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   1b3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3ba:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   1b3bc:	2580      	movs	r5, #128	; 0x80
   1b3be:	006d      	lsls	r5, r5, #1
   1b3c0:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   1b3c2:	24a5      	movs	r4, #165	; 0xa5
   1b3c4:	0164      	lsls	r4, r4, #5
   1b3c6:	4f08      	ldr	r7, [pc, #32]	; (1b3e8 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   1b3c8:	4e08      	ldr	r6, [pc, #32]	; (1b3ec <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
   1b3ca:	0029      	movs	r1, r5
   1b3cc:	0020      	movs	r0, r4
   1b3ce:	47b8      	blx	r7
			uint32 reg = 0;
   1b3d0:	2300      	movs	r3, #0
   1b3d2:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   1b3d4:	a901      	add	r1, sp, #4
   1b3d6:	0020      	movs	r0, r4
   1b3d8:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
   1b3da:	2800      	cmp	r0, #0
   1b3dc:	d1f5      	bne.n	1b3ca <chip_apply_conf+0x12>
				if(reg == val32)
   1b3de:	9b01      	ldr	r3, [sp, #4]
   1b3e0:	429d      	cmp	r5, r3
   1b3e2:	d1f2      	bne.n	1b3ca <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
   1b3e4:	b003      	add	sp, #12
   1b3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b3e8:	0001b891 	.word	0x0001b891
   1b3ec:	0001b885 	.word	0x0001b885

0001b3f0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   1b3f0:	b500      	push	{lr}
   1b3f2:	b083      	sub	sp, #12
	uint32 reg = 0;
   1b3f4:	2300      	movs	r3, #0
   1b3f6:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   1b3f8:	a901      	add	r1, sp, #4
   1b3fa:	4811      	ldr	r0, [pc, #68]	; (1b440 <enable_interrupts+0x50>)
   1b3fc:	4b11      	ldr	r3, [pc, #68]	; (1b444 <enable_interrupts+0x54>)
   1b3fe:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b400:	2800      	cmp	r0, #0
   1b402:	d001      	beq.n	1b408 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
   1b404:	b003      	add	sp, #12
   1b406:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
   1b408:	2180      	movs	r1, #128	; 0x80
   1b40a:	0049      	lsls	r1, r1, #1
   1b40c:	9b01      	ldr	r3, [sp, #4]
   1b40e:	4319      	orrs	r1, r3
   1b410:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   1b412:	480b      	ldr	r0, [pc, #44]	; (1b440 <enable_interrupts+0x50>)
   1b414:	4b0c      	ldr	r3, [pc, #48]	; (1b448 <enable_interrupts+0x58>)
   1b416:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b418:	2800      	cmp	r0, #0
   1b41a:	d1f3      	bne.n	1b404 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   1b41c:	a901      	add	r1, sp, #4
   1b41e:	20d0      	movs	r0, #208	; 0xd0
   1b420:	0140      	lsls	r0, r0, #5
   1b422:	4b08      	ldr	r3, [pc, #32]	; (1b444 <enable_interrupts+0x54>)
   1b424:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
   1b426:	2800      	cmp	r0, #0
   1b428:	d1ec      	bne.n	1b404 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
   1b42a:	2180      	movs	r1, #128	; 0x80
   1b42c:	0249      	lsls	r1, r1, #9
   1b42e:	9b01      	ldr	r3, [sp, #4]
   1b430:	4319      	orrs	r1, r3
   1b432:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   1b434:	20d0      	movs	r0, #208	; 0xd0
   1b436:	0140      	lsls	r0, r0, #5
   1b438:	4b03      	ldr	r3, [pc, #12]	; (1b448 <enable_interrupts+0x58>)
   1b43a:	4798      	blx	r3
   1b43c:	e7e2      	b.n	1b404 <enable_interrupts+0x14>
   1b43e:	46c0      	nop			; (mov r8, r8)
   1b440:	00001408 	.word	0x00001408
   1b444:	0001b885 	.word	0x0001b885
   1b448:	0001b891 	.word	0x0001b891

0001b44c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   1b44c:	b510      	push	{r4, lr}
   1b44e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
   1b450:	4b28      	ldr	r3, [pc, #160]	; (1b4f4 <nmi_get_chipid+0xa8>)
   1b452:	681c      	ldr	r4, [r3, #0]
   1b454:	2c00      	cmp	r4, #0
   1b456:	d004      	beq.n	1b462 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
   1b458:	4b26      	ldr	r3, [pc, #152]	; (1b4f4 <nmi_get_chipid+0xa8>)
   1b45a:	681c      	ldr	r4, [r3, #0]
}
   1b45c:	0020      	movs	r0, r4
   1b45e:	b002      	add	sp, #8
   1b460:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   1b462:	0019      	movs	r1, r3
   1b464:	2080      	movs	r0, #128	; 0x80
   1b466:	0140      	lsls	r0, r0, #5
   1b468:	4b23      	ldr	r3, [pc, #140]	; (1b4f8 <nmi_get_chipid+0xac>)
   1b46a:	4798      	blx	r3
   1b46c:	2800      	cmp	r0, #0
   1b46e:	d003      	beq.n	1b478 <nmi_get_chipid+0x2c>
			chipid = 0;
   1b470:	2200      	movs	r2, #0
   1b472:	4b20      	ldr	r3, [pc, #128]	; (1b4f4 <nmi_get_chipid+0xa8>)
   1b474:	601a      	str	r2, [r3, #0]
			return 0;
   1b476:	e7f1      	b.n	1b45c <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   1b478:	a901      	add	r1, sp, #4
   1b47a:	4820      	ldr	r0, [pc, #128]	; (1b4fc <nmi_get_chipid+0xb0>)
   1b47c:	4b1e      	ldr	r3, [pc, #120]	; (1b4f8 <nmi_get_chipid+0xac>)
   1b47e:	4798      	blx	r3
   1b480:	2800      	cmp	r0, #0
   1b482:	d003      	beq.n	1b48c <nmi_get_chipid+0x40>
			chipid = 0;
   1b484:	2200      	movs	r2, #0
   1b486:	4b1b      	ldr	r3, [pc, #108]	; (1b4f4 <nmi_get_chipid+0xa8>)
   1b488:	601a      	str	r2, [r3, #0]
			return 0;
   1b48a:	e7e7      	b.n	1b45c <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
   1b48c:	4b19      	ldr	r3, [pc, #100]	; (1b4f4 <nmi_get_chipid+0xa8>)
   1b48e:	681b      	ldr	r3, [r3, #0]
   1b490:	4a1b      	ldr	r2, [pc, #108]	; (1b500 <nmi_get_chipid+0xb4>)
   1b492:	4293      	cmp	r3, r2
   1b494:	d00e      	beq.n	1b4b4 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
   1b496:	4a1b      	ldr	r2, [pc, #108]	; (1b504 <nmi_get_chipid+0xb8>)
   1b498:	4293      	cmp	r3, r2
   1b49a:	d012      	beq.n	1b4c2 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
   1b49c:	4a1a      	ldr	r2, [pc, #104]	; (1b508 <nmi_get_chipid+0xbc>)
   1b49e:	4293      	cmp	r3, r2
   1b4a0:	d01c      	beq.n	1b4dc <nmi_get_chipid+0x90>
		chipid |= 0x050000;
   1b4a2:	4914      	ldr	r1, [pc, #80]	; (1b4f4 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
   1b4a4:	4a19      	ldr	r2, [pc, #100]	; (1b50c <nmi_get_chipid+0xc0>)
   1b4a6:	680b      	ldr	r3, [r1, #0]
   1b4a8:	401a      	ands	r2, r3
		chipid |= 0x050000;
   1b4aa:	23a0      	movs	r3, #160	; 0xa0
   1b4ac:	02db      	lsls	r3, r3, #11
   1b4ae:	4313      	orrs	r3, r2
   1b4b0:	600b      	str	r3, [r1, #0]
   1b4b2:	e7d1      	b.n	1b458 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
   1b4b4:	9b01      	ldr	r3, [sp, #4]
   1b4b6:	2b01      	cmp	r3, #1
   1b4b8:	d0f3      	beq.n	1b4a2 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
   1b4ba:	4a15      	ldr	r2, [pc, #84]	; (1b510 <nmi_get_chipid+0xc4>)
   1b4bc:	4b0d      	ldr	r3, [pc, #52]	; (1b4f4 <nmi_get_chipid+0xa8>)
   1b4be:	601a      	str	r2, [r3, #0]
   1b4c0:	e7ef      	b.n	1b4a2 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
   1b4c2:	9b01      	ldr	r3, [sp, #4]
   1b4c4:	2b03      	cmp	r3, #3
   1b4c6:	d0ec      	beq.n	1b4a2 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
   1b4c8:	2b04      	cmp	r3, #4
   1b4ca:	d003      	beq.n	1b4d4 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
   1b4cc:	4a11      	ldr	r2, [pc, #68]	; (1b514 <nmi_get_chipid+0xc8>)
   1b4ce:	4b09      	ldr	r3, [pc, #36]	; (1b4f4 <nmi_get_chipid+0xa8>)
   1b4d0:	601a      	str	r2, [r3, #0]
   1b4d2:	e7e6      	b.n	1b4a2 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
   1b4d4:	4a10      	ldr	r2, [pc, #64]	; (1b518 <nmi_get_chipid+0xcc>)
   1b4d6:	4b07      	ldr	r3, [pc, #28]	; (1b4f4 <nmi_get_chipid+0xa8>)
   1b4d8:	601a      	str	r2, [r3, #0]
   1b4da:	e7e2      	b.n	1b4a2 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   1b4dc:	4905      	ldr	r1, [pc, #20]	; (1b4f4 <nmi_get_chipid+0xa8>)
   1b4de:	20ec      	movs	r0, #236	; 0xec
   1b4e0:	0380      	lsls	r0, r0, #14
   1b4e2:	4b05      	ldr	r3, [pc, #20]	; (1b4f8 <nmi_get_chipid+0xac>)
   1b4e4:	4798      	blx	r3
   1b4e6:	2800      	cmp	r0, #0
   1b4e8:	d0db      	beq.n	1b4a2 <nmi_get_chipid+0x56>
			chipid = 0;
   1b4ea:	2200      	movs	r2, #0
   1b4ec:	4b01      	ldr	r3, [pc, #4]	; (1b4f4 <nmi_get_chipid+0xa8>)
   1b4ee:	601a      	str	r2, [r3, #0]
			return 0;
   1b4f0:	e7b4      	b.n	1b45c <nmi_get_chipid+0x10>
   1b4f2:	46c0      	nop			; (mov r8, r8)
   1b4f4:	20003d7c 	.word	0x20003d7c
   1b4f8:	0001b885 	.word	0x0001b885
   1b4fc:	000013f4 	.word	0x000013f4
   1b500:	001002a0 	.word	0x001002a0
   1b504:	001002b0 	.word	0x001002b0
   1b508:	001000f0 	.word	0x001000f0
   1b50c:	fff0ffff 	.word	0xfff0ffff
   1b510:	001002a1 	.word	0x001002a1
   1b514:	001002b2 	.word	0x001002b2
   1b518:	001002b1 	.word	0x001002b1

0001b51c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   1b51c:	b530      	push	{r4, r5, lr}
   1b51e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1b520:	4c16      	ldr	r4, [pc, #88]	; (1b57c <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
   1b522:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   1b524:	a901      	add	r1, sp, #4
   1b526:	2010      	movs	r0, #16
   1b528:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
   1b52a:	2800      	cmp	r0, #0
   1b52c:	d11c      	bne.n	1b568 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
   1b52e:	9b01      	ldr	r3, [sp, #4]
   1b530:	422b      	tst	r3, r5
   1b532:	d1f7      	bne.n	1b524 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1b534:	a901      	add	r1, sp, #4
   1b536:	3001      	adds	r0, #1
   1b538:	4b10      	ldr	r3, [pc, #64]	; (1b57c <chip_sleep+0x60>)
   1b53a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1b53c:	2800      	cmp	r0, #0
   1b53e:	d113      	bne.n	1b568 <chip_sleep+0x4c>
	if(reg & NBIT1)
   1b540:	9901      	ldr	r1, [sp, #4]
   1b542:	078b      	lsls	r3, r1, #30
   1b544:	d507      	bpl.n	1b556 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
   1b546:	2302      	movs	r3, #2
   1b548:	4399      	bics	r1, r3
   1b54a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   1b54c:	3001      	adds	r0, #1
   1b54e:	4b0c      	ldr	r3, [pc, #48]	; (1b580 <chip_sleep+0x64>)
   1b550:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
   1b552:	2800      	cmp	r0, #0
   1b554:	d108      	bne.n	1b568 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1b556:	a901      	add	r1, sp, #4
   1b558:	200b      	movs	r0, #11
   1b55a:	4b08      	ldr	r3, [pc, #32]	; (1b57c <chip_sleep+0x60>)
   1b55c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
   1b55e:	2800      	cmp	r0, #0
   1b560:	d102      	bne.n	1b568 <chip_sleep+0x4c>
	if(reg & NBIT0)
   1b562:	9901      	ldr	r1, [sp, #4]
   1b564:	07cb      	lsls	r3, r1, #31
   1b566:	d401      	bmi.n	1b56c <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
   1b568:	b003      	add	sp, #12
   1b56a:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
   1b56c:	2301      	movs	r3, #1
   1b56e:	4399      	bics	r1, r3
   1b570:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   1b572:	300b      	adds	r0, #11
   1b574:	4b02      	ldr	r3, [pc, #8]	; (1b580 <chip_sleep+0x64>)
   1b576:	4798      	blx	r3
   1b578:	e7f6      	b.n	1b568 <chip_sleep+0x4c>
   1b57a:	46c0      	nop			; (mov r8, r8)
   1b57c:	0001b885 	.word	0x0001b885
   1b580:	0001b891 	.word	0x0001b891

0001b584 <chip_wake>:
sint8 chip_wake(void)
{
   1b584:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b586:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   1b588:	2300      	movs	r3, #0
   1b58a:	9301      	str	r3, [sp, #4]
   1b58c:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   1b58e:	a901      	add	r1, sp, #4
   1b590:	200b      	movs	r0, #11
   1b592:	4b27      	ldr	r3, [pc, #156]	; (1b630 <chip_wake+0xac>)
   1b594:	4798      	blx	r3
   1b596:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b598:	d12e      	bne.n	1b5f8 <chip_wake+0x74>
	
	if(!(reg & NBIT0))
   1b59a:	9901      	ldr	r1, [sp, #4]
   1b59c:	07cb      	lsls	r3, r1, #31
   1b59e:	d406      	bmi.n	1b5ae <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   1b5a0:	2301      	movs	r3, #1
   1b5a2:	4319      	orrs	r1, r3
   1b5a4:	200b      	movs	r0, #11
   1b5a6:	4b23      	ldr	r3, [pc, #140]	; (1b634 <chip_wake+0xb0>)
   1b5a8:	4798      	blx	r3
   1b5aa:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b5ac:	d124      	bne.n	1b5f8 <chip_wake+0x74>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   1b5ae:	a901      	add	r1, sp, #4
   1b5b0:	2001      	movs	r0, #1
   1b5b2:	4b1f      	ldr	r3, [pc, #124]	; (1b630 <chip_wake+0xac>)
   1b5b4:	4798      	blx	r3
   1b5b6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   1b5b8:	d11e      	bne.n	1b5f8 <chip_wake+0x74>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   1b5ba:	9901      	ldr	r1, [sp, #4]
   1b5bc:	078b      	lsls	r3, r1, #30
   1b5be:	d51e      	bpl.n	1b5fe <chip_wake+0x7a>
{
   1b5c0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   1b5c2:	4f1b      	ldr	r7, [pc, #108]	; (1b630 <chip_wake+0xac>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
   1b5c4:	4e1c      	ldr	r6, [pc, #112]	; (1b638 <chip_wake+0xb4>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   1b5c6:	4669      	mov	r1, sp
   1b5c8:	200f      	movs	r0, #15
   1b5ca:	47b8      	blx	r7
   1b5cc:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
   1b5ce:	d11e      	bne.n	1b60e <chip_wake+0x8a>
		if(clk_status_reg & NBIT2) {
   1b5d0:	9b00      	ldr	r3, [sp, #0]
   1b5d2:	075b      	lsls	r3, r3, #29
   1b5d4:	d428      	bmi.n	1b628 <chip_wake+0xa4>
		nm_bsp_sleep(2);
   1b5d6:	2002      	movs	r0, #2
   1b5d8:	47b0      	blx	r6
   1b5da:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
   1b5dc:	2d00      	cmp	r5, #0
   1b5de:	d1f2      	bne.n	1b5c6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
   1b5e0:	22ad      	movs	r2, #173	; 0xad
   1b5e2:	0052      	lsls	r2, r2, #1
   1b5e4:	4915      	ldr	r1, [pc, #84]	; (1b63c <chip_wake+0xb8>)
   1b5e6:	4816      	ldr	r0, [pc, #88]	; (1b640 <chip_wake+0xbc>)
   1b5e8:	4c16      	ldr	r4, [pc, #88]	; (1b644 <chip_wake+0xc0>)
   1b5ea:	47a0      	blx	r4
   1b5ec:	4816      	ldr	r0, [pc, #88]	; (1b648 <chip_wake+0xc4>)
   1b5ee:	47a0      	blx	r4
   1b5f0:	4816      	ldr	r0, [pc, #88]	; (1b64c <chip_wake+0xc8>)
   1b5f2:	47a0      	blx	r4
			ret = M2M_ERR_TIME_OUT;
   1b5f4:	2404      	movs	r4, #4
   1b5f6:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
   1b5f8:	0020      	movs	r0, r4
   1b5fa:	b003      	add	sp, #12
   1b5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   1b5fe:	2302      	movs	r3, #2
   1b600:	4319      	orrs	r1, r3
   1b602:	2001      	movs	r0, #1
   1b604:	4b0b      	ldr	r3, [pc, #44]	; (1b634 <chip_wake+0xb0>)
   1b606:	4798      	blx	r3
   1b608:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   1b60a:	d0d9      	beq.n	1b5c0 <chip_wake+0x3c>
   1b60c:	e7f4      	b.n	1b5f8 <chip_wake+0x74>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   1b60e:	22a8      	movs	r2, #168	; 0xa8
   1b610:	0052      	lsls	r2, r2, #1
   1b612:	490a      	ldr	r1, [pc, #40]	; (1b63c <chip_wake+0xb8>)
   1b614:	480a      	ldr	r0, [pc, #40]	; (1b640 <chip_wake+0xbc>)
   1b616:	4d0b      	ldr	r5, [pc, #44]	; (1b644 <chip_wake+0xc0>)
   1b618:	47a8      	blx	r5
   1b61a:	9a00      	ldr	r2, [sp, #0]
   1b61c:	0021      	movs	r1, r4
   1b61e:	480c      	ldr	r0, [pc, #48]	; (1b650 <chip_wake+0xcc>)
   1b620:	47a8      	blx	r5
   1b622:	480a      	ldr	r0, [pc, #40]	; (1b64c <chip_wake+0xc8>)
   1b624:	47a8      	blx	r5
			goto _WAKE_EXIT;
   1b626:	e7e7      	b.n	1b5f8 <chip_wake+0x74>
	nm_bus_reset();
   1b628:	4b0a      	ldr	r3, [pc, #40]	; (1b654 <chip_wake+0xd0>)
   1b62a:	4798      	blx	r3
   1b62c:	e7e4      	b.n	1b5f8 <chip_wake+0x74>
   1b62e:	46c0      	nop			; (mov r8, r8)
   1b630:	0001b885 	.word	0x0001b885
   1b634:	0001b891 	.word	0x0001b891
   1b638:	0001a145 	.word	0x0001a145
   1b63c:	00029914 	.word	0x00029914
   1b640:	000293bc 	.word	0x000293bc
   1b644:	00018f7d 	.word	0x00018f7d
   1b648:	00029960 	.word	0x00029960
   1b64c:	000293e4 	.word	0x000293e4
   1b650:	00029948 	.word	0x00029948
   1b654:	0001b86d 	.word	0x0001b86d

0001b658 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   1b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b65a:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b65c:	4d2c      	ldr	r5, [pc, #176]	; (1b710 <wait_for_bootrom+0xb8>)
   1b65e:	4c2d      	ldr	r4, [pc, #180]	; (1b714 <wait_for_bootrom+0xbc>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   1b660:	4e2d      	ldr	r6, [pc, #180]	; (1b718 <wait_for_bootrom+0xc0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b662:	0028      	movs	r0, r5
   1b664:	47a0      	blx	r4
		if (reg & 0x80000000) {
   1b666:	2800      	cmp	r0, #0
   1b668:	db02      	blt.n	1b670 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   1b66a:	2001      	movs	r0, #1
   1b66c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   1b66e:	e7f8      	b.n	1b662 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   1b670:	482a      	ldr	r0, [pc, #168]	; (1b71c <wait_for_bootrom+0xc4>)
   1b672:	4b28      	ldr	r3, [pc, #160]	; (1b714 <wait_for_bootrom+0xbc>)
   1b674:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   1b676:	07c3      	lsls	r3, r0, #31
   1b678:	d409      	bmi.n	1b68e <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
   1b67a:	4e27      	ldr	r6, [pc, #156]	; (1b718 <wait_for_bootrom+0xc0>)
			reg = nm_read_reg(BOOTROM_REG);
   1b67c:	4c28      	ldr	r4, [pc, #160]	; (1b720 <wait_for_bootrom+0xc8>)
   1b67e:	4d25      	ldr	r5, [pc, #148]	; (1b714 <wait_for_bootrom+0xbc>)
			nm_bsp_sleep(1);
   1b680:	2001      	movs	r0, #1
   1b682:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
   1b684:	0020      	movs	r0, r4
   1b686:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
   1b688:	4b26      	ldr	r3, [pc, #152]	; (1b724 <wait_for_bootrom+0xcc>)
   1b68a:	4298      	cmp	r0, r3
   1b68c:	d1f8      	bne.n	1b680 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   1b68e:	2f02      	cmp	r7, #2
   1b690:	d020      	beq.n	1b6d4 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   1b692:	2f03      	cmp	r7, #3
   1b694:	d028      	beq.n	1b6e8 <wait_for_bootrom+0x90>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   1b696:	2f04      	cmp	r7, #4
   1b698:	d02f      	beq.n	1b6fa <wait_for_bootrom+0xa2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1b69a:	4923      	ldr	r1, [pc, #140]	; (1b728 <wait_for_bootrom+0xd0>)
   1b69c:	4823      	ldr	r0, [pc, #140]	; (1b72c <wait_for_bootrom+0xd4>)
   1b69e:	4b24      	ldr	r3, [pc, #144]	; (1b730 <wait_for_bootrom+0xd8>)
   1b6a0:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
   1b6a2:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   1b6a4:	4b23      	ldr	r3, [pc, #140]	; (1b734 <wait_for_bootrom+0xdc>)
   1b6a6:	4798      	blx	r3
   1b6a8:	0500      	lsls	r0, r0, #20
   1b6aa:	0d00      	lsrs	r0, r0, #20
   1b6ac:	4b22      	ldr	r3, [pc, #136]	; (1b738 <wait_for_bootrom+0xe0>)
   1b6ae:	4298      	cmp	r0, r3
   1b6b0:	d829      	bhi.n	1b706 <wait_for_bootrom+0xae>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
   1b6b2:	0020      	movs	r0, r4
   1b6b4:	4b21      	ldr	r3, [pc, #132]	; (1b73c <wait_for_bootrom+0xe4>)
   1b6b6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   1b6b8:	4821      	ldr	r0, [pc, #132]	; (1b740 <wait_for_bootrom+0xe8>)
   1b6ba:	4c22      	ldr	r4, [pc, #136]	; (1b744 <wait_for_bootrom+0xec>)
   1b6bc:	47a0      	blx	r4
   1b6be:	491a      	ldr	r1, [pc, #104]	; (1b728 <wait_for_bootrom+0xd0>)
   1b6c0:	4821      	ldr	r0, [pc, #132]	; (1b748 <wait_for_bootrom+0xf0>)
   1b6c2:	47a0      	blx	r4
   1b6c4:	4821      	ldr	r0, [pc, #132]	; (1b74c <wait_for_bootrom+0xf4>)
   1b6c6:	47a0      	blx	r4

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   1b6c8:	4921      	ldr	r1, [pc, #132]	; (1b750 <wait_for_bootrom+0xf8>)
   1b6ca:	4815      	ldr	r0, [pc, #84]	; (1b720 <wait_for_bootrom+0xc8>)
   1b6cc:	4b18      	ldr	r3, [pc, #96]	; (1b730 <wait_for_bootrom+0xd8>)
   1b6ce:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
   1b6d0:	2000      	movs	r0, #0
   1b6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1b6d4:	491f      	ldr	r1, [pc, #124]	; (1b754 <wait_for_bootrom+0xfc>)
   1b6d6:	4820      	ldr	r0, [pc, #128]	; (1b758 <wait_for_bootrom+0x100>)
   1b6d8:	4c15      	ldr	r4, [pc, #84]	; (1b730 <wait_for_bootrom+0xd8>)
   1b6da:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
   1b6dc:	2180      	movs	r1, #128	; 0x80
   1b6de:	0349      	lsls	r1, r1, #13
   1b6e0:	4812      	ldr	r0, [pc, #72]	; (1b72c <wait_for_bootrom+0xd4>)
   1b6e2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
   1b6e4:	2400      	movs	r4, #0
   1b6e6:	e7dd      	b.n	1b6a4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   1b6e8:	491a      	ldr	r1, [pc, #104]	; (1b754 <wait_for_bootrom+0xfc>)
   1b6ea:	481b      	ldr	r0, [pc, #108]	; (1b758 <wait_for_bootrom+0x100>)
   1b6ec:	4c10      	ldr	r4, [pc, #64]	; (1b730 <wait_for_bootrom+0xd8>)
   1b6ee:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
   1b6f0:	2100      	movs	r1, #0
   1b6f2:	480e      	ldr	r0, [pc, #56]	; (1b72c <wait_for_bootrom+0xd4>)
   1b6f4:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
   1b6f6:	2400      	movs	r4, #0
   1b6f8:	e7d4      	b.n	1b6a4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   1b6fa:	490b      	ldr	r1, [pc, #44]	; (1b728 <wait_for_bootrom+0xd0>)
   1b6fc:	480b      	ldr	r0, [pc, #44]	; (1b72c <wait_for_bootrom+0xd4>)
   1b6fe:	4b0c      	ldr	r3, [pc, #48]	; (1b730 <wait_for_bootrom+0xd8>)
   1b700:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   1b702:	2480      	movs	r4, #128	; 0x80
   1b704:	e7ce      	b.n	1b6a4 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   1b706:	2002      	movs	r0, #2
   1b708:	4320      	orrs	r0, r4
   1b70a:	4b0c      	ldr	r3, [pc, #48]	; (1b73c <wait_for_bootrom+0xe4>)
   1b70c:	4798      	blx	r3
   1b70e:	e7d3      	b.n	1b6b8 <wait_for_bootrom+0x60>
   1b710:	00001014 	.word	0x00001014
   1b714:	0001b879 	.word	0x0001b879
   1b718:	0001a145 	.word	0x0001a145
   1b71c:	000207bc 	.word	0x000207bc
   1b720:	000c000c 	.word	0x000c000c
   1b724:	10add09e 	.word	0x10add09e
   1b728:	13301354 	.word	0x13301354
   1b72c:	0000108c 	.word	0x0000108c
   1b730:	0001b891 	.word	0x0001b891
   1b734:	0001b44d 	.word	0x0001b44d
   1b738:	0000039f 	.word	0x0000039f
   1b73c:	0001b3b9 	.word	0x0001b3b9
   1b740:	000296f8 	.word	0x000296f8
   1b744:	00018f7d 	.word	0x00018f7d
   1b748:	0002997c 	.word	0x0002997c
   1b74c:	000293e4 	.word	0x000293e4
   1b750:	ef522f61 	.word	0xef522f61
   1b754:	3c1cd57d 	.word	0x3c1cd57d
   1b758:	000207ac 	.word	0x000207ac

0001b75c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   1b75c:	b570      	push	{r4, r5, r6, lr}
   1b75e:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
   1b760:	4b15      	ldr	r3, [pc, #84]	; (1b7b8 <wait_for_firmware_start+0x5c>)
   1b762:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   1b764:	4b15      	ldr	r3, [pc, #84]	; (1b7bc <wait_for_firmware_start+0x60>)
   1b766:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   1b768:	3802      	subs	r0, #2
   1b76a:	2801      	cmp	r0, #1
   1b76c:	d911      	bls.n	1b792 <wait_for_firmware_start+0x36>
{
   1b76e:	2401      	movs	r4, #1
   1b770:	4264      	negs	r4, r4
   1b772:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   1b774:	4e12      	ldr	r6, [pc, #72]	; (1b7c0 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   1b776:	4d13      	ldr	r5, [pc, #76]	; (1b7c4 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
   1b778:	9b00      	ldr	r3, [sp, #0]
   1b77a:	4298      	cmp	r0, r3
   1b77c:	d00e      	beq.n	1b79c <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   1b77e:	2002      	movs	r0, #2
   1b780:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
   1b782:	9801      	ldr	r0, [sp, #4]
   1b784:	47a8      	blx	r5
   1b786:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
   1b788:	2c00      	cmp	r4, #0
   1b78a:	d1f5      	bne.n	1b778 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   1b78c:	2005      	movs	r0, #5
   1b78e:	4240      	negs	r0, r0
   1b790:	e009      	b.n	1b7a6 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
   1b792:	4b0d      	ldr	r3, [pc, #52]	; (1b7c8 <wait_for_firmware_start+0x6c>)
   1b794:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   1b796:	4b0d      	ldr	r3, [pc, #52]	; (1b7cc <wait_for_firmware_start+0x70>)
   1b798:	9300      	str	r3, [sp, #0]
   1b79a:	e7e8      	b.n	1b76e <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   1b79c:	9a00      	ldr	r2, [sp, #0]
   1b79e:	4b07      	ldr	r3, [pc, #28]	; (1b7bc <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
   1b7a0:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
   1b7a2:	429a      	cmp	r2, r3
   1b7a4:	d001      	beq.n	1b7aa <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
   1b7a6:	b002      	add	sp, #8
   1b7a8:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
   1b7aa:	2100      	movs	r1, #0
   1b7ac:	4802      	ldr	r0, [pc, #8]	; (1b7b8 <wait_for_firmware_start+0x5c>)
   1b7ae:	4b08      	ldr	r3, [pc, #32]	; (1b7d0 <wait_for_firmware_start+0x74>)
   1b7b0:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
   1b7b2:	2000      	movs	r0, #0
   1b7b4:	e7f7      	b.n	1b7a6 <wait_for_firmware_start+0x4a>
   1b7b6:	46c0      	nop			; (mov r8, r8)
   1b7b8:	0000108c 	.word	0x0000108c
   1b7bc:	02532636 	.word	0x02532636
   1b7c0:	0001a145 	.word	0x0001a145
   1b7c4:	0001b879 	.word	0x0001b879
   1b7c8:	000207ac 	.word	0x000207ac
   1b7cc:	d75dc1c3 	.word	0xd75dc1c3
   1b7d0:	0001b891 	.word	0x0001b891

0001b7d4 <chip_deinit>:

sint8 chip_deinit(void)
{
   1b7d4:	b530      	push	{r4, r5, lr}
   1b7d6:	b083      	sub	sp, #12
	uint32 reg = 0;
   1b7d8:	2300      	movs	r3, #0
   1b7da:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   1b7dc:	a901      	add	r1, sp, #4
   1b7de:	20a0      	movs	r0, #160	; 0xa0
   1b7e0:	0140      	lsls	r0, r0, #5
   1b7e2:	4b12      	ldr	r3, [pc, #72]	; (1b82c <chip_deinit+0x58>)
   1b7e4:	4798      	blx	r3
   1b7e6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
   1b7e8:	d113      	bne.n	1b812 <chip_deinit+0x3e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
   1b7ea:	4911      	ldr	r1, [pc, #68]	; (1b830 <chip_deinit+0x5c>)
   1b7ec:	9b01      	ldr	r3, [sp, #4]
   1b7ee:	4019      	ands	r1, r3
   1b7f0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   1b7f2:	20a0      	movs	r0, #160	; 0xa0
   1b7f4:	0140      	lsls	r0, r0, #5
   1b7f6:	4b0f      	ldr	r3, [pc, #60]	; (1b834 <chip_deinit+0x60>)
   1b7f8:	4798      	blx	r3
   1b7fa:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
   1b7fc:	d012      	beq.n	1b824 <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
   1b7fe:	4a0e      	ldr	r2, [pc, #56]	; (1b838 <chip_deinit+0x64>)
   1b800:	490e      	ldr	r1, [pc, #56]	; (1b83c <chip_deinit+0x68>)
   1b802:	480f      	ldr	r0, [pc, #60]	; (1b840 <chip_deinit+0x6c>)
   1b804:	4d0f      	ldr	r5, [pc, #60]	; (1b844 <chip_deinit+0x70>)
   1b806:	47a8      	blx	r5
   1b808:	480f      	ldr	r0, [pc, #60]	; (1b848 <chip_deinit+0x74>)
   1b80a:	47a8      	blx	r5
   1b80c:	480f      	ldr	r0, [pc, #60]	; (1b84c <chip_deinit+0x78>)
   1b80e:	47a8      	blx	r5
		goto ERR1;
   1b810:	e008      	b.n	1b824 <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
   1b812:	4a0f      	ldr	r2, [pc, #60]	; (1b850 <chip_deinit+0x7c>)
   1b814:	4909      	ldr	r1, [pc, #36]	; (1b83c <chip_deinit+0x68>)
   1b816:	480a      	ldr	r0, [pc, #40]	; (1b840 <chip_deinit+0x6c>)
   1b818:	4d0a      	ldr	r5, [pc, #40]	; (1b844 <chip_deinit+0x70>)
   1b81a:	47a8      	blx	r5
   1b81c:	480a      	ldr	r0, [pc, #40]	; (1b848 <chip_deinit+0x74>)
   1b81e:	47a8      	blx	r5
   1b820:	480a      	ldr	r0, [pc, #40]	; (1b84c <chip_deinit+0x78>)
   1b822:	47a8      	blx	r5
	}

ERR1:
	return ret;
}
   1b824:	0020      	movs	r0, r4
   1b826:	b003      	add	sp, #12
   1b828:	bd30      	pop	{r4, r5, pc}
   1b82a:	46c0      	nop			; (mov r8, r8)
   1b82c:	0001b885 	.word	0x0001b885
   1b830:	fffffbff 	.word	0xfffffbff
   1b834:	0001b891 	.word	0x0001b891
   1b838:	00000207 	.word	0x00000207
   1b83c:	00029920 	.word	0x00029920
   1b840:	000293bc 	.word	0x000293bc
   1b844:	00018f7d 	.word	0x00018f7d
   1b848:	0002992c 	.word	0x0002992c
   1b84c:	000293e4 	.word	0x000293e4
   1b850:	00000201 	.word	0x00000201

0001b854 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   1b854:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
   1b856:	4b01      	ldr	r3, [pc, #4]	; (1b85c <nm_bus_iface_init+0x8>)
   1b858:	4798      	blx	r3
	return ret;
}
   1b85a:	bd10      	pop	{r4, pc}
   1b85c:	0001a201 	.word	0x0001a201

0001b860 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   1b860:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
   1b862:	4b01      	ldr	r3, [pc, #4]	; (1b868 <nm_bus_iface_deinit+0x8>)
   1b864:	4798      	blx	r3

	return ret;
}
   1b866:	bd10      	pop	{r4, pc}
   1b868:	0001a449 	.word	0x0001a449

0001b86c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   1b86c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   1b86e:	4b01      	ldr	r3, [pc, #4]	; (1b874 <nm_bus_reset+0x8>)
   1b870:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   1b872:	bd10      	pop	{r4, pc}
   1b874:	0001c5a5 	.word	0x0001c5a5

0001b878 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   1b878:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   1b87a:	4b01      	ldr	r3, [pc, #4]	; (1b880 <nm_read_reg+0x8>)
   1b87c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   1b87e:	bd10      	pop	{r4, pc}
   1b880:	0001c5dd 	.word	0x0001c5dd

0001b884 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   1b884:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   1b886:	4b01      	ldr	r3, [pc, #4]	; (1b88c <nm_read_reg_with_ret+0x8>)
   1b888:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   1b88a:	bd10      	pop	{r4, pc}
   1b88c:	0001c5f1 	.word	0x0001c5f1

0001b890 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   1b890:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   1b892:	4b01      	ldr	r3, [pc, #4]	; (1b898 <nm_write_reg+0x8>)
   1b894:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   1b896:	bd10      	pop	{r4, pc}
   1b898:	0001c609 	.word	0x0001c609

0001b89c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1b89c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b89e:	46d6      	mov	lr, sl
   1b8a0:	464f      	mov	r7, r9
   1b8a2:	4646      	mov	r6, r8
   1b8a4:	b5c0      	push	{r6, r7, lr}
   1b8a6:	b082      	sub	sp, #8
   1b8a8:	4680      	mov	r8, r0
   1b8aa:	4689      	mov	r9, r1
   1b8ac:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1b8ae:	4b13      	ldr	r3, [pc, #76]	; (1b8fc <nm_read_block+0x60>)
   1b8b0:	881f      	ldrh	r7, [r3, #0]
   1b8b2:	3f08      	subs	r7, #8
   1b8b4:	b2bb      	uxth	r3, r7
   1b8b6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1b8b8:	001e      	movs	r6, r3
   1b8ba:	0004      	movs	r4, r0
   1b8bc:	429a      	cmp	r2, r3
   1b8be:	d91a      	bls.n	1b8f6 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b8c0:	4b0f      	ldr	r3, [pc, #60]	; (1b900 <nm_read_block+0x64>)
   1b8c2:	469a      	mov	sl, r3
   1b8c4:	1a37      	subs	r7, r6, r0
   1b8c6:	4643      	mov	r3, r8
   1b8c8:	1ae1      	subs	r1, r4, r3
   1b8ca:	4449      	add	r1, r9
   1b8cc:	9a01      	ldr	r2, [sp, #4]
   1b8ce:	0020      	movs	r0, r4
   1b8d0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
   1b8d2:	2800      	cmp	r0, #0
   1b8d4:	d109      	bne.n	1b8ea <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
   1b8d6:	1bad      	subs	r5, r5, r6
   1b8d8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
   1b8da:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
   1b8dc:	42b5      	cmp	r5, r6
   1b8de:	d8f2      	bhi.n	1b8c6 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b8e0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1b8e2:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   1b8e4:	0020      	movs	r0, r4
   1b8e6:	4b06      	ldr	r3, [pc, #24]	; (1b900 <nm_read_block+0x64>)
   1b8e8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
   1b8ea:	b002      	add	sp, #8
   1b8ec:	bc1c      	pop	{r2, r3, r4}
   1b8ee:	4690      	mov	r8, r2
   1b8f0:	4699      	mov	r9, r3
   1b8f2:	46a2      	mov	sl, r4
   1b8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
   1b8f6:	2100      	movs	r1, #0
   1b8f8:	e7f2      	b.n	1b8e0 <nm_read_block+0x44>
   1b8fa:	46c0      	nop			; (mov r8, r8)
   1b8fc:	200000c4 	.word	0x200000c4
   1b900:	0001c735 	.word	0x0001c735

0001b904 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   1b904:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b906:	46d6      	mov	lr, sl
   1b908:	464f      	mov	r7, r9
   1b90a:	4646      	mov	r6, r8
   1b90c:	b5c0      	push	{r6, r7, lr}
   1b90e:	b082      	sub	sp, #8
   1b910:	4680      	mov	r8, r0
   1b912:	4689      	mov	r9, r1
   1b914:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   1b916:	4b13      	ldr	r3, [pc, #76]	; (1b964 <nm_write_block+0x60>)
   1b918:	881f      	ldrh	r7, [r3, #0]
   1b91a:	3f08      	subs	r7, #8
   1b91c:	b2bb      	uxth	r3, r7
   1b91e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   1b920:	001e      	movs	r6, r3
   1b922:	0004      	movs	r4, r0
   1b924:	429a      	cmp	r2, r3
   1b926:	d91a      	bls.n	1b95e <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1b928:	4b0f      	ldr	r3, [pc, #60]	; (1b968 <nm_write_block+0x64>)
   1b92a:	469a      	mov	sl, r3
   1b92c:	1a37      	subs	r7, r6, r0
   1b92e:	4643      	mov	r3, r8
   1b930:	1ae1      	subs	r1, r4, r3
   1b932:	4449      	add	r1, r9
   1b934:	9a01      	ldr	r2, [sp, #4]
   1b936:	0020      	movs	r0, r4
   1b938:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
   1b93a:	2800      	cmp	r0, #0
   1b93c:	d109      	bne.n	1b952 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
   1b93e:	1bad      	subs	r5, r5, r6
   1b940:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
   1b942:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
   1b944:	42b5      	cmp	r5, r6
   1b946:	d8f2      	bhi.n	1b92e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1b948:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   1b94a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   1b94c:	0020      	movs	r0, r4
   1b94e:	4b06      	ldr	r3, [pc, #24]	; (1b968 <nm_write_block+0x64>)
   1b950:	4798      	blx	r3
		}
	}

	return s8Ret;
}
   1b952:	b002      	add	sp, #8
   1b954:	bc1c      	pop	{r2, r3, r4}
   1b956:	4690      	mov	r8, r2
   1b958:	4699      	mov	r9, r3
   1b95a:	46a2      	mov	sl, r4
   1b95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
   1b95e:	2100      	movs	r1, #0
   1b960:	e7f2      	b.n	1b948 <nm_write_block+0x44>
   1b962:	46c0      	nop			; (mov r8, r8)
   1b964:	200000c4 	.word	0x200000c4
   1b968:	0001c801 	.word	0x0001c801

0001b96c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   1b96c:	b570      	push	{r4, r5, r6, lr}
   1b96e:	b084      	sub	sp, #16
   1b970:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   1b972:	2300      	movs	r3, #0
   1b974:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
   1b976:	2208      	movs	r2, #8
   1b978:	2100      	movs	r1, #0
   1b97a:	a801      	add	r0, sp, #4
   1b97c:	4b2d      	ldr	r3, [pc, #180]	; (1ba34 <nm_get_firmware_full_info+0xc8>)
   1b97e:	4798      	blx	r3
	if (pstrRev != NULL)
   1b980:	2c00      	cmp	r4, #0
   1b982:	d044      	beq.n	1ba0e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   1b984:	2228      	movs	r2, #40	; 0x28
   1b986:	2100      	movs	r1, #0
   1b988:	0020      	movs	r0, r4
   1b98a:	4b2b      	ldr	r3, [pc, #172]	; (1ba38 <nm_get_firmware_full_info+0xcc>)
   1b98c:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   1b98e:	a903      	add	r1, sp, #12
   1b990:	482a      	ldr	r0, [pc, #168]	; (1ba3c <nm_get_firmware_full_info+0xd0>)
   1b992:	4b2b      	ldr	r3, [pc, #172]	; (1ba40 <nm_get_firmware_full_info+0xd4>)
   1b994:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
   1b996:	2800      	cmp	r0, #0
   1b998:	d13a      	bne.n	1ba10 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
   1b99a:	9b03      	ldr	r3, [sp, #12]
   1b99c:	2b00      	cmp	r3, #0
   1b99e:	d039      	beq.n	1ba14 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   1b9a0:	20c0      	movs	r0, #192	; 0xc0
   1b9a2:	0280      	lsls	r0, r0, #10
   1b9a4:	4318      	orrs	r0, r3
   1b9a6:	2208      	movs	r2, #8
   1b9a8:	a901      	add	r1, sp, #4
   1b9aa:	4b26      	ldr	r3, [pc, #152]	; (1ba44 <nm_get_firmware_full_info+0xd8>)
   1b9ac:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
   1b9ae:	2800      	cmp	r0, #0
   1b9b0:	d12e      	bne.n	1ba10 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
   1b9b2:	9b02      	ldr	r3, [sp, #8]
   1b9b4:	0418      	lsls	r0, r3, #16
   1b9b6:	0c00      	lsrs	r0, r0, #16
   1b9b8:	9003      	str	r0, [sp, #12]
					if(reg != 0)
   1b9ba:	d02e      	beq.n	1ba1a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   1b9bc:	23c0      	movs	r3, #192	; 0xc0
   1b9be:	029b      	lsls	r3, r3, #10
   1b9c0:	4318      	orrs	r0, r3
   1b9c2:	2228      	movs	r2, #40	; 0x28
   1b9c4:	0021      	movs	r1, r4
   1b9c6:	4b1f      	ldr	r3, [pc, #124]	; (1ba44 <nm_get_firmware_full_info+0xd8>)
   1b9c8:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
   1b9ca:	2800      	cmp	r0, #0
   1b9cc:	d120      	bne.n	1ba10 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   1b9ce:	7921      	ldrb	r1, [r4, #4]
   1b9d0:	0209      	lsls	r1, r1, #8
   1b9d2:	79a2      	ldrb	r2, [r4, #6]
   1b9d4:	230f      	movs	r3, #15
   1b9d6:	401a      	ands	r2, r3
   1b9d8:	430a      	orrs	r2, r1
   1b9da:	7961      	ldrb	r1, [r4, #5]
   1b9dc:	0109      	lsls	r1, r1, #4
   1b9de:	25ff      	movs	r5, #255	; 0xff
   1b9e0:	4029      	ands	r1, r5
   1b9e2:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   1b9e4:	79e1      	ldrb	r1, [r4, #7]
   1b9e6:	0209      	lsls	r1, r1, #8
   1b9e8:	7a66      	ldrb	r6, [r4, #9]
   1b9ea:	4033      	ands	r3, r6
   1b9ec:	430b      	orrs	r3, r1
   1b9ee:	7a21      	ldrb	r1, [r4, #8]
   1b9f0:	0109      	lsls	r1, r1, #4
   1b9f2:	400d      	ands	r5, r1
   1b9f4:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   1b9f6:	2a00      	cmp	r2, #0
   1b9f8:	d012      	beq.n	1ba20 <nm_get_firmware_full_info+0xb4>
   1b9fa:	2b00      	cmp	r3, #0
   1b9fc:	d013      	beq.n	1ba26 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   1b9fe:	4912      	ldr	r1, [pc, #72]	; (1ba48 <nm_get_firmware_full_info+0xdc>)
   1ba00:	428b      	cmp	r3, r1
   1ba02:	d813      	bhi.n	1ba2c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
   1ba04:	4b11      	ldr	r3, [pc, #68]	; (1ba4c <nm_get_firmware_full_info+0xe0>)
   1ba06:	429a      	cmp	r2, r3
   1ba08:	d802      	bhi.n	1ba10 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   1ba0a:	380d      	subs	r0, #13
   1ba0c:	e000      	b.n	1ba10 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
   1ba0e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
   1ba10:	b004      	add	sp, #16
   1ba12:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
   1ba14:	200c      	movs	r0, #12
   1ba16:	4240      	negs	r0, r0
   1ba18:	e7fa      	b.n	1ba10 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
   1ba1a:	200c      	movs	r0, #12
   1ba1c:	4240      	negs	r0, r0
   1ba1e:	e7f7      	b.n	1ba10 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
   1ba20:	200c      	movs	r0, #12
   1ba22:	4240      	negs	r0, r0
   1ba24:	e7f4      	b.n	1ba10 <nm_get_firmware_full_info+0xa4>
   1ba26:	200c      	movs	r0, #12
   1ba28:	4240      	negs	r0, r0
   1ba2a:	e7f1      	b.n	1ba10 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
   1ba2c:	200d      	movs	r0, #13
   1ba2e:	4240      	negs	r0, r0
   1ba30:	e7ee      	b.n	1ba10 <nm_get_firmware_full_info+0xa4>
   1ba32:	46c0      	nop			; (mov r8, r8)
   1ba34:	0002624b 	.word	0x0002624b
   1ba38:	0001a4c9 	.word	0x0001a4c9
   1ba3c:	000c0008 	.word	0x000c0008
   1ba40:	0001b885 	.word	0x0001b885
   1ba44:	0001b89d 	.word	0x0001b89d
   1ba48:	00001354 	.word	0x00001354
   1ba4c:	00001353 	.word	0x00001353

0001ba50 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   1ba50:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
   1ba52:	2800      	cmp	r0, #0
   1ba54:	d034      	beq.n	1bac0 <nm_drv_init+0x70>
		u8Mode = *((uint8 *)arg);
   1ba56:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   1ba58:	1e6b      	subs	r3, r5, #1
   1ba5a:	2b03      	cmp	r3, #3
   1ba5c:	d900      	bls.n	1ba60 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   1ba5e:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
   1ba60:	2000      	movs	r0, #0
   1ba62:	4b1e      	ldr	r3, [pc, #120]	; (1badc <nm_drv_init+0x8c>)
   1ba64:	4798      	blx	r3
   1ba66:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1ba68:	d12c      	bne.n	1bac4 <nm_drv_init+0x74>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   1ba6a:	481d      	ldr	r0, [pc, #116]	; (1bae0 <nm_drv_init+0x90>)
   1ba6c:	4c1d      	ldr	r4, [pc, #116]	; (1bae4 <nm_drv_init+0x94>)
   1ba6e:	47a0      	blx	r4
   1ba70:	4b1d      	ldr	r3, [pc, #116]	; (1bae8 <nm_drv_init+0x98>)
   1ba72:	4798      	blx	r3
   1ba74:	0001      	movs	r1, r0
   1ba76:	481d      	ldr	r0, [pc, #116]	; (1baec <nm_drv_init+0x9c>)
   1ba78:	47a0      	blx	r4
   1ba7a:	481d      	ldr	r0, [pc, #116]	; (1baf0 <nm_drv_init+0xa0>)
   1ba7c:	47a0      	blx	r4
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   1ba7e:	4b1d      	ldr	r3, [pc, #116]	; (1baf4 <nm_drv_init+0xa4>)
   1ba80:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   1ba82:	0028      	movs	r0, r5
   1ba84:	4b1c      	ldr	r3, [pc, #112]	; (1baf8 <nm_drv_init+0xa8>)
   1ba86:	4798      	blx	r3
   1ba88:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1ba8a:	d115      	bne.n	1bab8 <nm_drv_init+0x68>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   1ba8c:	0028      	movs	r0, r5
   1ba8e:	4b1b      	ldr	r3, [pc, #108]	; (1bafc <nm_drv_init+0xac>)
   1ba90:	4798      	blx	r3
   1ba92:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1ba94:	d110      	bne.n	1bab8 <nm_drv_init+0x68>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   1ba96:	3d02      	subs	r5, #2
   1ba98:	2d01      	cmp	r5, #1
   1ba9a:	d90f      	bls.n	1babc <nm_drv_init+0x6c>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   1ba9c:	4b18      	ldr	r3, [pc, #96]	; (1bb00 <nm_drv_init+0xb0>)
   1ba9e:	4798      	blx	r3
   1baa0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1baa2:	d00b      	beq.n	1babc <nm_drv_init+0x6c>
		M2M_ERR("failed to enable interrupts..\n");
   1baa4:	22a7      	movs	r2, #167	; 0xa7
   1baa6:	0052      	lsls	r2, r2, #1
   1baa8:	4916      	ldr	r1, [pc, #88]	; (1bb04 <nm_drv_init+0xb4>)
   1baaa:	4817      	ldr	r0, [pc, #92]	; (1bb08 <nm_drv_init+0xb8>)
   1baac:	4d0d      	ldr	r5, [pc, #52]	; (1bae4 <nm_drv_init+0x94>)
   1baae:	47a8      	blx	r5
   1bab0:	4816      	ldr	r0, [pc, #88]	; (1bb0c <nm_drv_init+0xbc>)
   1bab2:	47a8      	blx	r5
   1bab4:	480e      	ldr	r0, [pc, #56]	; (1baf0 <nm_drv_init+0xa0>)
   1bab6:	47a8      	blx	r5
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
   1bab8:	4b15      	ldr	r3, [pc, #84]	; (1bb10 <nm_drv_init+0xc0>)
   1baba:	4798      	blx	r3
ERR1:
	return ret;
}
   1babc:	0020      	movs	r0, r4
   1babe:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
   1bac0:	2501      	movs	r5, #1
   1bac2:	e7cd      	b.n	1ba60 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
   1bac4:	2290      	movs	r2, #144	; 0x90
   1bac6:	0052      	lsls	r2, r2, #1
   1bac8:	490e      	ldr	r1, [pc, #56]	; (1bb04 <nm_drv_init+0xb4>)
   1baca:	480f      	ldr	r0, [pc, #60]	; (1bb08 <nm_drv_init+0xb8>)
   1bacc:	4d05      	ldr	r5, [pc, #20]	; (1bae4 <nm_drv_init+0x94>)
   1bace:	47a8      	blx	r5
   1bad0:	4810      	ldr	r0, [pc, #64]	; (1bb14 <nm_drv_init+0xc4>)
   1bad2:	47a8      	blx	r5
   1bad4:	4806      	ldr	r0, [pc, #24]	; (1baf0 <nm_drv_init+0xa0>)
   1bad6:	47a8      	blx	r5
		goto ERR1;
   1bad8:	e7f0      	b.n	1babc <nm_drv_init+0x6c>
   1bada:	46c0      	nop			; (mov r8, r8)
   1badc:	0001b855 	.word	0x0001b855
   1bae0:	000296f8 	.word	0x000296f8
   1bae4:	00018f7d 	.word	0x00018f7d
   1bae8:	0001b44d 	.word	0x0001b44d
   1baec:	00029a4c 	.word	0x00029a4c
   1baf0:	000293e4 	.word	0x000293e4
   1baf4:	0001c621 	.word	0x0001c621
   1baf8:	0001b659 	.word	0x0001b659
   1bafc:	0001b75d 	.word	0x0001b75d
   1bb00:	0001b3f1 	.word	0x0001b3f1
   1bb04:	00029994 	.word	0x00029994
   1bb08:	000293bc 	.word	0x000293bc
   1bb0c:	00029a10 	.word	0x00029a10
   1bb10:	0001b861 	.word	0x0001b861
   1bb14:	00029a30 	.word	0x00029a30

0001bb18 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   1bb18:	b570      	push	{r4, r5, r6, lr}
	sint8 ret;

	ret = chip_deinit();
   1bb1a:	4b19      	ldr	r3, [pc, #100]	; (1bb80 <nm_drv_deinit+0x68>)
   1bb1c:	4798      	blx	r3
   1bb1e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb20:	d10b      	bne.n	1bb3a <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   1bb22:	2000      	movs	r0, #0
   1bb24:	4b17      	ldr	r3, [pc, #92]	; (1bb84 <nm_drv_deinit+0x6c>)
   1bb26:	4798      	blx	r3
   1bb28:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb2a:	d112      	bne.n	1bb52 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
   1bb2c:	4b16      	ldr	r3, [pc, #88]	; (1bb88 <nm_drv_deinit+0x70>)
   1bb2e:	4798      	blx	r3
   1bb30:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
   1bb32:	d119      	bne.n	1bb68 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   1bb34:	4b15      	ldr	r3, [pc, #84]	; (1bb8c <nm_drv_deinit+0x74>)
   1bb36:	4798      	blx	r3
   1bb38:	e009      	b.n	1bb4e <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   1bb3a:	2266      	movs	r2, #102	; 0x66
   1bb3c:	32ff      	adds	r2, #255	; 0xff
   1bb3e:	4914      	ldr	r1, [pc, #80]	; (1bb90 <nm_drv_deinit+0x78>)
   1bb40:	4814      	ldr	r0, [pc, #80]	; (1bb94 <nm_drv_deinit+0x7c>)
   1bb42:	4d15      	ldr	r5, [pc, #84]	; (1bb98 <nm_drv_deinit+0x80>)
   1bb44:	47a8      	blx	r5
   1bb46:	4815      	ldr	r0, [pc, #84]	; (1bb9c <nm_drv_deinit+0x84>)
   1bb48:	47a8      	blx	r5
   1bb4a:	4815      	ldr	r0, [pc, #84]	; (1bba0 <nm_drv_deinit+0x88>)
   1bb4c:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
   1bb4e:	0020      	movs	r0, r4
   1bb50:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   1bb52:	22b6      	movs	r2, #182	; 0xb6
   1bb54:	0052      	lsls	r2, r2, #1
   1bb56:	490e      	ldr	r1, [pc, #56]	; (1bb90 <nm_drv_deinit+0x78>)
   1bb58:	480e      	ldr	r0, [pc, #56]	; (1bb94 <nm_drv_deinit+0x7c>)
   1bb5a:	4d0f      	ldr	r5, [pc, #60]	; (1bb98 <nm_drv_deinit+0x80>)
   1bb5c:	47a8      	blx	r5
   1bb5e:	4811      	ldr	r0, [pc, #68]	; (1bba4 <nm_drv_deinit+0x8c>)
   1bb60:	47a8      	blx	r5
   1bb62:	480f      	ldr	r0, [pc, #60]	; (1bba0 <nm_drv_deinit+0x88>)
   1bb64:	47a8      	blx	r5
		goto ERR1;
   1bb66:	e7f2      	b.n	1bb4e <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
   1bb68:	22b9      	movs	r2, #185	; 0xb9
   1bb6a:	0052      	lsls	r2, r2, #1
   1bb6c:	4908      	ldr	r1, [pc, #32]	; (1bb90 <nm_drv_deinit+0x78>)
   1bb6e:	4809      	ldr	r0, [pc, #36]	; (1bb94 <nm_drv_deinit+0x7c>)
   1bb70:	4d09      	ldr	r5, [pc, #36]	; (1bb98 <nm_drv_deinit+0x80>)
   1bb72:	47a8      	blx	r5
   1bb74:	480c      	ldr	r0, [pc, #48]	; (1bba8 <nm_drv_deinit+0x90>)
   1bb76:	47a8      	blx	r5
   1bb78:	4809      	ldr	r0, [pc, #36]	; (1bba0 <nm_drv_deinit+0x88>)
   1bb7a:	47a8      	blx	r5
		goto ERR1;
   1bb7c:	e7e7      	b.n	1bb4e <nm_drv_deinit+0x36>
   1bb7e:	46c0      	nop			; (mov r8, r8)
   1bb80:	0001b7d5 	.word	0x0001b7d5
   1bb84:	0001d375 	.word	0x0001d375
   1bb88:	0001b861 	.word	0x0001b861
   1bb8c:	0001c5cd 	.word	0x0001c5cd
   1bb90:	000299a0 	.word	0x000299a0
   1bb94:	000293bc 	.word	0x000293bc
   1bb98:	00018f7d 	.word	0x00018f7d
   1bb9c:	000299b0 	.word	0x000299b0
   1bba0:	000293e4 	.word	0x000293e4
   1bba4:	000299d0 	.word	0x000299d0
   1bba8:	000299f4 	.word	0x000299f4

0001bbac <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   1bbac:	b500      	push	{lr}
   1bbae:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   1bbb0:	ab01      	add	r3, sp, #4
   1bbb2:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
   1bbb4:	2200      	movs	r2, #0
   1bbb6:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
   1bbb8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   1bbba:	0019      	movs	r1, r3
   1bbbc:	2003      	movs	r0, #3
   1bbbe:	4b02      	ldr	r3, [pc, #8]	; (1bbc8 <nmi_spi_write+0x1c>)
   1bbc0:	4798      	blx	r3
}
   1bbc2:	b005      	add	sp, #20
   1bbc4:	bd00      	pop	{pc}
   1bbc6:	46c0      	nop			; (mov r8, r8)
   1bbc8:	0001a305 	.word	0x0001a305

0001bbcc <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   1bbcc:	b570      	push	{r4, r5, r6, lr}
   1bbce:	b084      	sub	sp, #16
   1bbd0:	ac08      	add	r4, sp, #32
   1bbd2:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
   1bbd4:	ac01      	add	r4, sp, #4
   1bbd6:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
   1bbd8:	303f      	adds	r0, #63	; 0x3f
   1bbda:	b2c4      	uxtb	r4, r0
   1bbdc:	2c0e      	cmp	r4, #14
   1bbde:	d900      	bls.n	1bbe2 <spi_cmd+0x16>
   1bbe0:	e082      	b.n	1bce8 <spi_cmd+0x11c>
   1bbe2:	00a0      	lsls	r0, r4, #2
   1bbe4:	4c4e      	ldr	r4, [pc, #312]	; (1bd20 <spi_cmd+0x154>)
   1bbe6:	5820      	ldr	r0, [r4, r0]
   1bbe8:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   1bbea:	ab01      	add	r3, sp, #4
   1bbec:	0c0a      	lsrs	r2, r1, #16
   1bbee:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1bbf0:	0a0a      	lsrs	r2, r1, #8
   1bbf2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   1bbf4:	70d9      	strb	r1, [r3, #3]
		len = 5;
   1bbf6:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
   1bbf8:	4b4a      	ldr	r3, [pc, #296]	; (1bd24 <spi_cmd+0x158>)
   1bbfa:	781b      	ldrb	r3, [r3, #0]
   1bbfc:	2b00      	cmp	r3, #0
   1bbfe:	d075      	beq.n	1bcec <spi_cmd+0x120>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
   1bc00:	3901      	subs	r1, #1
   1bc02:	b2c9      	uxtb	r1, r1
   1bc04:	e081      	b.n	1bd0a <spi_cmd+0x13e>
		bc[1] = (uint8)(adr >> 8);
   1bc06:	0a0b      	lsrs	r3, r1, #8
   1bc08:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
   1bc0a:	2d00      	cmp	r5, #0
   1bc0c:	d107      	bne.n	1bc1e <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
   1bc0e:	aa01      	add	r2, sp, #4
   1bc10:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
   1bc12:	ab01      	add	r3, sp, #4
   1bc14:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
   1bc16:	2200      	movs	r2, #0
   1bc18:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bc1a:	2105      	movs	r1, #5
		break;
   1bc1c:	e7ec      	b.n	1bbf8 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
   1bc1e:	2280      	movs	r2, #128	; 0x80
   1bc20:	4252      	negs	r2, r2
   1bc22:	4313      	orrs	r3, r2
   1bc24:	aa01      	add	r2, sp, #4
   1bc26:	7053      	strb	r3, [r2, #1]
   1bc28:	e7f3      	b.n	1bc12 <spi_cmd+0x46>
		bc[1] = 0x00;
   1bc2a:	ab01      	add	r3, sp, #4
   1bc2c:	2200      	movs	r2, #0
   1bc2e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1bc30:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1bc32:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bc34:	2105      	movs	r1, #5
		break;
   1bc36:	e7df      	b.n	1bbf8 <spi_cmd+0x2c>
		bc[1] = 0x00;
   1bc38:	ab01      	add	r3, sp, #4
   1bc3a:	2200      	movs	r2, #0
   1bc3c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   1bc3e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   1bc40:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bc42:	2105      	movs	r1, #5
		break;
   1bc44:	e7d8      	b.n	1bbf8 <spi_cmd+0x2c>
		bc[1] = 0xff;
   1bc46:	ab01      	add	r3, sp, #4
   1bc48:	22ff      	movs	r2, #255	; 0xff
   1bc4a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   1bc4c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   1bc4e:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bc50:	2105      	movs	r1, #5
		break;
   1bc52:	e7d1      	b.n	1bbf8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
   1bc54:	aa01      	add	r2, sp, #4
   1bc56:	0c08      	lsrs	r0, r1, #16
   1bc58:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
   1bc5a:	0a08      	lsrs	r0, r1, #8
   1bc5c:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
   1bc5e:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
   1bc60:	0a19      	lsrs	r1, r3, #8
   1bc62:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
   1bc64:	7153      	strb	r3, [r2, #5]
		len = 7;
   1bc66:	2107      	movs	r1, #7
		break;
   1bc68:	e7c6      	b.n	1bbf8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
   1bc6a:	aa01      	add	r2, sp, #4
   1bc6c:	0c08      	lsrs	r0, r1, #16
   1bc6e:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
   1bc70:	0a08      	lsrs	r0, r1, #8
   1bc72:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
   1bc74:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
   1bc76:	0c19      	lsrs	r1, r3, #16
   1bc78:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
   1bc7a:	0a19      	lsrs	r1, r3, #8
   1bc7c:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
   1bc7e:	7193      	strb	r3, [r2, #6]
		len = 8;
   1bc80:	2108      	movs	r1, #8
		break;
   1bc82:	e7b9      	b.n	1bbf8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
   1bc84:	0a0b      	lsrs	r3, r1, #8
   1bc86:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
   1bc88:	2d00      	cmp	r5, #0
   1bc8a:	d10c      	bne.n	1bca6 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
   1bc8c:	a801      	add	r0, sp, #4
   1bc8e:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
   1bc90:	ab01      	add	r3, sp, #4
   1bc92:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   1bc94:	0e11      	lsrs	r1, r2, #24
   1bc96:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   1bc98:	0c11      	lsrs	r1, r2, #16
   1bc9a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   1bc9c:	0a11      	lsrs	r1, r2, #8
   1bc9e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
   1bca0:	719a      	strb	r2, [r3, #6]
		len = 8;
   1bca2:	2108      	movs	r1, #8
		break;
   1bca4:	e7a8      	b.n	1bbf8 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
   1bca6:	2080      	movs	r0, #128	; 0x80
   1bca8:	4240      	negs	r0, r0
   1bcaa:	4303      	orrs	r3, r0
   1bcac:	a801      	add	r0, sp, #4
   1bcae:	7043      	strb	r3, [r0, #1]
   1bcb0:	e7ee      	b.n	1bc90 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
   1bcb2:	ab01      	add	r3, sp, #4
   1bcb4:	0c08      	lsrs	r0, r1, #16
   1bcb6:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   1bcb8:	0a08      	lsrs	r0, r1, #8
   1bcba:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
   1bcbc:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   1bcbe:	0e11      	lsrs	r1, r2, #24
   1bcc0:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   1bcc2:	0c11      	lsrs	r1, r2, #16
   1bcc4:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   1bcc6:	0a11      	lsrs	r1, r2, #8
   1bcc8:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
   1bcca:	71da      	strb	r2, [r3, #7]
		len = 9;
   1bccc:	2109      	movs	r1, #9
		break;
   1bcce:	e793      	b.n	1bbf8 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1bcd0:	2290      	movs	r2, #144	; 0x90
   1bcd2:	0052      	lsls	r2, r2, #1
   1bcd4:	4914      	ldr	r1, [pc, #80]	; (1bd28 <spi_cmd+0x15c>)
   1bcd6:	4815      	ldr	r0, [pc, #84]	; (1bd2c <spi_cmd+0x160>)
   1bcd8:	4c15      	ldr	r4, [pc, #84]	; (1bd30 <spi_cmd+0x164>)
   1bcda:	47a0      	blx	r4
   1bcdc:	4815      	ldr	r0, [pc, #84]	; (1bd34 <spi_cmd+0x168>)
   1bcde:	47a0      	blx	r4
   1bce0:	4815      	ldr	r0, [pc, #84]	; (1bd38 <spi_cmd+0x16c>)
   1bce2:	47a0      	blx	r4
			result = N_FAIL;
   1bce4:	2300      	movs	r3, #0
   1bce6:	e017      	b.n	1bd18 <spi_cmd+0x14c>
	switch (cmd) {
   1bce8:	2300      	movs	r3, #0
   1bcea:	e015      	b.n	1bd18 <spi_cmd+0x14c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   1bcec:	1e4e      	subs	r6, r1, #1
   1bcee:	aa01      	add	r2, sp, #4
   1bcf0:	1995      	adds	r5, r2, r6
   1bcf2:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
   1bcf4:	4c11      	ldr	r4, [pc, #68]	; (1bd3c <spi_cmd+0x170>)
   1bcf6:	005b      	lsls	r3, r3, #1
   1bcf8:	7810      	ldrb	r0, [r2, #0]
   1bcfa:	4043      	eors	r3, r0
   1bcfc:	5ce3      	ldrb	r3, [r4, r3]
   1bcfe:	3201      	adds	r2, #1
	while (len--)
   1bd00:	42aa      	cmp	r2, r5
   1bd02:	d1f8      	bne.n	1bcf6 <spi_cmd+0x12a>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   1bd04:	005b      	lsls	r3, r3, #1
   1bd06:	aa01      	add	r2, sp, #4
   1bd08:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   1bd0a:	b289      	uxth	r1, r1
   1bd0c:	a801      	add	r0, sp, #4
   1bd0e:	4b0c      	ldr	r3, [pc, #48]	; (1bd40 <spi_cmd+0x174>)
   1bd10:	4798      	blx	r3
   1bd12:	2301      	movs	r3, #1
   1bd14:	2800      	cmp	r0, #0
   1bd16:	d1db      	bne.n	1bcd0 <spi_cmd+0x104>
		}
	}

	return result;
}
   1bd18:	0018      	movs	r0, r3
   1bd1a:	b004      	add	sp, #16
   1bd1c:	bd70      	pop	{r4, r5, r6, pc}
   1bd1e:	46c0      	nop			; (mov r8, r8)
   1bd20:	00029a5c 	.word	0x00029a5c
   1bd24:	20003d80 	.word	0x20003d80
   1bd28:	00029ad8 	.word	0x00029ad8
   1bd2c:	000293bc 	.word	0x000293bc
   1bd30:	00018f7d 	.word	0x00018f7d
   1bd34:	00029edc 	.word	0x00029edc
   1bd38:	000293e4 	.word	0x000293e4
   1bd3c:	00029b68 	.word	0x00029b68
   1bd40:	0001bbad 	.word	0x0001bbad

0001bd44 <nmi_spi_read>:
{
   1bd44:	b500      	push	{lr}
   1bd46:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
   1bd48:	ab01      	add	r3, sp, #4
   1bd4a:	2200      	movs	r2, #0
   1bd4c:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
   1bd4e:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
   1bd50:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   1bd52:	0019      	movs	r1, r3
   1bd54:	2003      	movs	r0, #3
   1bd56:	4b02      	ldr	r3, [pc, #8]	; (1bd60 <nmi_spi_read+0x1c>)
   1bd58:	4798      	blx	r3
}
   1bd5a:	b005      	add	sp, #20
   1bd5c:	bd00      	pop	{pc}
   1bd5e:	46c0      	nop			; (mov r8, r8)
   1bd60:	0001a305 	.word	0x0001a305

0001bd64 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
   1bd64:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd66:	46c6      	mov	lr, r8
   1bd68:	b500      	push	{lr}
   1bd6a:	b082      	sub	sp, #8
   1bd6c:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   1bd6e:	28cf      	cmp	r0, #207	; 0xcf
   1bd70:	d02b      	beq.n	1bdca <spi_cmd_rsp+0x66>
   1bd72:	0003      	movs	r3, r0
   1bd74:	333b      	adds	r3, #59	; 0x3b
   1bd76:	b2db      	uxtb	r3, r3
   1bd78:	2b01      	cmp	r3, #1
   1bd7a:	d926      	bls.n	1bdca <spi_cmd_rsp+0x66>
{
   1bd7c:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1bd7e:	466b      	mov	r3, sp
   1bd80:	1dde      	adds	r6, r3, #7
   1bd82:	4b24      	ldr	r3, [pc, #144]	; (1be14 <spi_cmd_rsp+0xb0>)
   1bd84:	4698      	mov	r8, r3
   1bd86:	2101      	movs	r1, #1
   1bd88:	0030      	movs	r0, r6
   1bd8a:	47c0      	blx	r8
   1bd8c:	1e05      	subs	r5, r0, #0
   1bd8e:	d125      	bne.n	1bddc <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   1bd90:	7833      	ldrb	r3, [r6, #0]
   1bd92:	42bb      	cmp	r3, r7
   1bd94:	d02e      	beq.n	1bdf4 <spi_cmd_rsp+0x90>
   1bd96:	3c01      	subs	r4, #1
   1bd98:	b2e4      	uxtb	r4, r4
   1bd9a:	2c00      	cmp	r4, #0
   1bd9c:	d1f3      	bne.n	1bd86 <spi_cmd_rsp+0x22>
   1bd9e:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1bda0:	466b      	mov	r3, sp
   1bda2:	1dde      	adds	r6, r3, #7
   1bda4:	4f1b      	ldr	r7, [pc, #108]	; (1be14 <spi_cmd_rsp+0xb0>)
   1bda6:	2101      	movs	r1, #1
   1bda8:	0030      	movs	r0, r6
   1bdaa:	47b8      	blx	r7
   1bdac:	2800      	cmp	r0, #0
   1bdae:	d123      	bne.n	1bdf8 <spi_cmd_rsp+0x94>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   1bdb0:	7833      	ldrb	r3, [r6, #0]
   1bdb2:	2b00      	cmp	r3, #0
   1bdb4:	d02b      	beq.n	1be0e <spi_cmd_rsp+0xaa>
   1bdb6:	3c01      	subs	r4, #1
   1bdb8:	b2e4      	uxtb	r4, r4
   1bdba:	2c00      	cmp	r4, #0
   1bdbc:	d1f3      	bne.n	1bda6 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
   1bdbe:	2501      	movs	r5, #1

_fail_:

	return result;
}
   1bdc0:	0028      	movs	r0, r5
   1bdc2:	b002      	add	sp, #8
   1bdc4:	bc04      	pop	{r2}
   1bdc6:	4690      	mov	r8, r2
   1bdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1bdca:	2101      	movs	r1, #1
   1bdcc:	466b      	mov	r3, sp
   1bdce:	1dd8      	adds	r0, r3, #7
   1bdd0:	4b10      	ldr	r3, [pc, #64]	; (1be14 <spi_cmd_rsp+0xb0>)
   1bdd2:	4798      	blx	r3
			result = N_FAIL;
   1bdd4:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   1bdd6:	2800      	cmp	r0, #0
   1bdd8:	d0d0      	beq.n	1bd7c <spi_cmd_rsp+0x18>
   1bdda:	e7f1      	b.n	1bdc0 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   1bddc:	225c      	movs	r2, #92	; 0x5c
   1bdde:	32ff      	adds	r2, #255	; 0xff
   1bde0:	490d      	ldr	r1, [pc, #52]	; (1be18 <spi_cmd_rsp+0xb4>)
   1bde2:	480e      	ldr	r0, [pc, #56]	; (1be1c <spi_cmd_rsp+0xb8>)
   1bde4:	4c0e      	ldr	r4, [pc, #56]	; (1be20 <spi_cmd_rsp+0xbc>)
   1bde6:	47a0      	blx	r4
   1bde8:	480e      	ldr	r0, [pc, #56]	; (1be24 <spi_cmd_rsp+0xc0>)
   1bdea:	47a0      	blx	r4
   1bdec:	480e      	ldr	r0, [pc, #56]	; (1be28 <spi_cmd_rsp+0xc4>)
   1bdee:	47a0      	blx	r4
			result = N_FAIL;
   1bdf0:	2500      	movs	r5, #0
			goto _fail_;
   1bdf2:	e7e5      	b.n	1bdc0 <spi_cmd_rsp+0x5c>
   1bdf4:	240b      	movs	r4, #11
   1bdf6:	e7d3      	b.n	1bda0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   1bdf8:	226a      	movs	r2, #106	; 0x6a
   1bdfa:	32ff      	adds	r2, #255	; 0xff
   1bdfc:	4906      	ldr	r1, [pc, #24]	; (1be18 <spi_cmd_rsp+0xb4>)
   1bdfe:	4807      	ldr	r0, [pc, #28]	; (1be1c <spi_cmd_rsp+0xb8>)
   1be00:	4c07      	ldr	r4, [pc, #28]	; (1be20 <spi_cmd_rsp+0xbc>)
   1be02:	47a0      	blx	r4
   1be04:	4807      	ldr	r0, [pc, #28]	; (1be24 <spi_cmd_rsp+0xc0>)
   1be06:	47a0      	blx	r4
   1be08:	4807      	ldr	r0, [pc, #28]	; (1be28 <spi_cmd_rsp+0xc4>)
   1be0a:	47a0      	blx	r4
			goto _fail_;
   1be0c:	e7d8      	b.n	1bdc0 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
   1be0e:	2501      	movs	r5, #1
   1be10:	e7d6      	b.n	1bdc0 <spi_cmd_rsp+0x5c>
   1be12:	46c0      	nop			; (mov r8, r8)
   1be14:	0001bd45 	.word	0x0001bd45
   1be18:	00029af0 	.word	0x00029af0
   1be1c:	000293bc 	.word	0x000293bc
   1be20:	00018f7d 	.word	0x00018f7d
   1be24:	0002a0d8 	.word	0x0002a0d8
   1be28:	000293e4 	.word	0x000293e4

0001be2c <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   1be2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be2e:	46de      	mov	lr, fp
   1be30:	4657      	mov	r7, sl
   1be32:	464e      	mov	r6, r9
   1be34:	4645      	mov	r5, r8
   1be36:	b5e0      	push	{r5, r6, r7, lr}
   1be38:	b097      	sub	sp, #92	; 0x5c
   1be3a:	0005      	movs	r5, r0
   1be3c:	4690      	mov	r8, r2
   1be3e:	9300      	str	r3, [sp, #0]
   1be40:	ab20      	add	r3, sp, #128	; 0x80
   1be42:	7818      	ldrb	r0, [r3, #0]
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
	int result = N_OK;

	wb[0] = cmd;
   1be44:	ab0e      	add	r3, sp, #56	; 0x38
   1be46:	701d      	strb	r5, [r3, #0]
	switch (cmd) {
   1be48:	002b      	movs	r3, r5
   1be4a:	333f      	adds	r3, #63	; 0x3f
   1be4c:	b2da      	uxtb	r2, r3
   1be4e:	2a0e      	cmp	r2, #14
   1be50:	d900      	bls.n	1be54 <spi_cmd_complete+0x28>
   1be52:	e263      	b.n	1c31c <spi_cmd_complete+0x4f0>
   1be54:	0093      	lsls	r3, r2, #2
   1be56:	4acc      	ldr	r2, [pc, #816]	; (1c188 <spi_cmd_complete+0x35c>)
   1be58:	58d3      	ldr	r3, [r2, r3]
   1be5a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   1be5c:	ab0e      	add	r3, sp, #56	; 0x38
   1be5e:	0c0a      	lsrs	r2, r1, #16
   1be60:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1be62:	0a0a      	lsrs	r2, r1, #8
   1be64:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1be66:	70d9      	strb	r1, [r3, #3]
		len = 5;
   1be68:	2305      	movs	r3, #5
   1be6a:	4699      	mov	r9, r3

	if (result != N_OK) {
		return result;
	}

	if (!gu8Crc_off) {
   1be6c:	4bc7      	ldr	r3, [pc, #796]	; (1c18c <spi_cmd_complete+0x360>)
   1be6e:	781f      	ldrb	r7, [r3, #0]
   1be70:	2f00      	cmp	r7, #0
   1be72:	d100      	bne.n	1be76 <spi_cmd_complete+0x4a>
   1be74:	e254      	b.n	1c320 <spi_cmd_complete+0x4f4>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
	} else {
		len -=1;
   1be76:	2301      	movs	r3, #1
   1be78:	425b      	negs	r3, r3
   1be7a:	469c      	mov	ip, r3
   1be7c:	44e1      	add	r9, ip
   1be7e:	e263      	b.n	1c348 <spi_cmd_complete+0x51c>
		wb[1] = (uint8_t)(adr >> 8);
   1be80:	0a0b      	lsrs	r3, r1, #8
   1be82:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
   1be84:	2801      	cmp	r0, #1
   1be86:	d008      	beq.n	1be9a <spi_cmd_complete+0x6e>
		wb[1] = (uint8_t)(adr >> 8);
   1be88:	aa0e      	add	r2, sp, #56	; 0x38
   1be8a:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)adr;
   1be8c:	ab0e      	add	r3, sp, #56	; 0x38
   1be8e:	7099      	strb	r1, [r3, #2]
		wb[3] = 0x00;
   1be90:	2200      	movs	r2, #0
   1be92:	70da      	strb	r2, [r3, #3]
		len = 5;
   1be94:	2305      	movs	r3, #5
   1be96:	4699      	mov	r9, r3
		break;
   1be98:	e7e8      	b.n	1be6c <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
   1be9a:	2280      	movs	r2, #128	; 0x80
   1be9c:	4252      	negs	r2, r2
   1be9e:	4313      	orrs	r3, r2
   1bea0:	aa0e      	add	r2, sp, #56	; 0x38
   1bea2:	7053      	strb	r3, [r2, #1]
   1bea4:	e7f2      	b.n	1be8c <spi_cmd_complete+0x60>
		wb[1] = 0x00;
   1bea6:	ab0e      	add	r3, sp, #56	; 0x38
   1bea8:	2200      	movs	r2, #0
   1beaa:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   1beac:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   1beae:	70da      	strb	r2, [r3, #3]
		len = 5;
   1beb0:	2305      	movs	r3, #5
   1beb2:	4699      	mov	r9, r3
		break;
   1beb4:	e7da      	b.n	1be6c <spi_cmd_complete+0x40>
		wb[1] = 0x00;
   1beb6:	ab0e      	add	r3, sp, #56	; 0x38
   1beb8:	2200      	movs	r2, #0
   1beba:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   1bebc:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   1bebe:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bec0:	2305      	movs	r3, #5
   1bec2:	4699      	mov	r9, r3
		break;
   1bec4:	e7d2      	b.n	1be6c <spi_cmd_complete+0x40>
		wb[1] = 0xff;
   1bec6:	ab0e      	add	r3, sp, #56	; 0x38
   1bec8:	22ff      	movs	r2, #255	; 0xff
   1beca:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   1becc:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   1bece:	70da      	strb	r2, [r3, #3]
		len = 5;
   1bed0:	2305      	movs	r3, #5
   1bed2:	4699      	mov	r9, r3
		break;
   1bed4:	e7ca      	b.n	1be6c <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
   1bed6:	ab0e      	add	r3, sp, #56	; 0x38
   1bed8:	0c0a      	lsrs	r2, r1, #16
   1beda:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bedc:	0a0a      	lsrs	r2, r1, #8
   1bede:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1bee0:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   1bee2:	9900      	ldr	r1, [sp, #0]
   1bee4:	0a0a      	lsrs	r2, r1, #8
   1bee6:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   1bee8:	7159      	strb	r1, [r3, #5]
		len = 7;
   1beea:	2307      	movs	r3, #7
   1beec:	4699      	mov	r9, r3
		break;
   1beee:	e7bd      	b.n	1be6c <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
   1bef0:	ab0e      	add	r3, sp, #56	; 0x38
   1bef2:	0c0a      	lsrs	r2, r1, #16
   1bef4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bef6:	0a0a      	lsrs	r2, r1, #8
   1bef8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   1befa:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   1befc:	9900      	ldr	r1, [sp, #0]
   1befe:	0c0a      	lsrs	r2, r1, #16
   1bf00:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   1bf02:	0a0a      	lsrs	r2, r1, #8
   1bf04:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   1bf06:	7199      	strb	r1, [r3, #6]
		len = 8;
   1bf08:	2308      	movs	r3, #8
   1bf0a:	4699      	mov	r9, r3
		break;
   1bf0c:	e7ae      	b.n	1be6c <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 8);
   1bf0e:	0a0b      	lsrs	r3, r1, #8
   1bf10:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bf12:	2801      	cmp	r0, #1
   1bf14:	d012      	beq.n	1bf3c <spi_cmd_complete+0x110>
		wb[1] = (uint8_t)(adr >> 8);
   1bf16:	aa0e      	add	r2, sp, #56	; 0x38
   1bf18:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)(adr);
   1bf1a:	ab0e      	add	r3, sp, #56	; 0x38
   1bf1c:	7099      	strb	r1, [r3, #2]
		wb[3] = b[3];
   1bf1e:	4642      	mov	r2, r8
   1bf20:	78d2      	ldrb	r2, [r2, #3]
   1bf22:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   1bf24:	4642      	mov	r2, r8
   1bf26:	7892      	ldrb	r2, [r2, #2]
   1bf28:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   1bf2a:	4642      	mov	r2, r8
   1bf2c:	7852      	ldrb	r2, [r2, #1]
   1bf2e:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   1bf30:	4642      	mov	r2, r8
   1bf32:	7812      	ldrb	r2, [r2, #0]
   1bf34:	719a      	strb	r2, [r3, #6]
		len = 8;
   1bf36:	2308      	movs	r3, #8
   1bf38:	4699      	mov	r9, r3
		break;
   1bf3a:	e797      	b.n	1be6c <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
   1bf3c:	2280      	movs	r2, #128	; 0x80
   1bf3e:	4252      	negs	r2, r2
   1bf40:	4313      	orrs	r3, r2
   1bf42:	aa0e      	add	r2, sp, #56	; 0x38
   1bf44:	7053      	strb	r3, [r2, #1]
   1bf46:	e7e8      	b.n	1bf1a <spi_cmd_complete+0xee>
		wb[1] = (uint8_t)(adr >> 16);
   1bf48:	ab0e      	add	r3, sp, #56	; 0x38
   1bf4a:	0c0a      	lsrs	r2, r1, #16
   1bf4c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   1bf4e:	0a0a      	lsrs	r2, r1, #8
   1bf50:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   1bf52:	70d9      	strb	r1, [r3, #3]
		wb[4] = b[3];
   1bf54:	4642      	mov	r2, r8
   1bf56:	78d2      	ldrb	r2, [r2, #3]
   1bf58:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   1bf5a:	4642      	mov	r2, r8
   1bf5c:	7892      	ldrb	r2, [r2, #2]
   1bf5e:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   1bf60:	4642      	mov	r2, r8
   1bf62:	7852      	ldrb	r2, [r2, #1]
   1bf64:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   1bf66:	4642      	mov	r2, r8
   1bf68:	7812      	ldrb	r2, [r2, #0]
   1bf6a:	71da      	strb	r2, [r3, #7]
		len = 9;
   1bf6c:	2309      	movs	r3, #9
   1bf6e:	4699      	mov	r9, r3
		break;
   1bf70:	e77c      	b.n	1be6c <spi_cmd_complete+0x40>
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   1bf72:	464b      	mov	r3, r9
   1bf74:	1d9e      	adds	r6, r3, #6
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   1bf76:	2e20      	cmp	r6, #32
   1bf78:	d844      	bhi.n	1c004 <spi_cmd_complete+0x1d8>
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
		return result;
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   1bf7a:	464b      	mov	r3, r9
   1bf7c:	466a      	mov	r2, sp
   1bf7e:	71d3      	strb	r3, [r2, #7]
   1bf80:	79d7      	ldrb	r7, [r2, #7]
   1bf82:	42b7      	cmp	r7, r6
   1bf84:	d207      	bcs.n	1bf96 <spi_cmd_complete+0x16a>
   1bf86:	003b      	movs	r3, r7
		wb[wix] = 0;
   1bf88:	a90e      	add	r1, sp, #56	; 0x38
   1bf8a:	2200      	movs	r2, #0
   1bf8c:	54ca      	strb	r2, [r1, r3]
	for(wix = len; wix< len2; wix++) {
   1bf8e:	3301      	adds	r3, #1
   1bf90:	b2db      	uxtb	r3, r3
   1bf92:	429e      	cmp	r6, r3
   1bf94:	d8fa      	bhi.n	1bf8c <spi_cmd_complete+0x160>
	spi.pu8InBuf = bin;
   1bf96:	ab0e      	add	r3, sp, #56	; 0x38
   1bf98:	9302      	str	r3, [sp, #8]
	spi.pu8OutBuf = bout;
   1bf9a:	ab06      	add	r3, sp, #24
   1bf9c:	9303      	str	r3, [sp, #12]
	spi.u16Sz = sz;
   1bf9e:	ab02      	add	r3, sp, #8
   1bfa0:	811e      	strh	r6, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   1bfa2:	0019      	movs	r1, r3
   1bfa4:	2003      	movs	r0, #3
   1bfa6:	4b7a      	ldr	r3, [pc, #488]	; (1c190 <spi_cmd_complete+0x364>)
   1bfa8:	4798      	blx	r3
	}
	rix = len;

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   1bfaa:	2800      	cmp	r0, #0
   1bfac:	d138      	bne.n	1c020 <spi_cmd_complete+0x1f4>
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   1bfae:	2dcf      	cmp	r5, #207	; 0xcf
   1bfb0:	d004      	beq.n	1bfbc <spi_cmd_complete+0x190>
   1bfb2:	002b      	movs	r3, r5
   1bfb4:	333b      	adds	r3, #59	; 0x3b
   1bfb6:	b2db      	uxtb	r3, r3
   1bfb8:	2b01      	cmp	r3, #1
   1bfba:	d801      	bhi.n	1bfc0 <spi_cmd_complete+0x194>
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   1bfbc:	3701      	adds	r7, #1
   1bfbe:	b2ff      	uxtb	r7, r7
	}

	rsp = rb[rix++];
   1bfc0:	ab06      	add	r3, sp, #24
   1bfc2:	5ddb      	ldrb	r3, [r3, r7]
   1bfc4:	220f      	movs	r2, #15
   1bfc6:	a902      	add	r1, sp, #8
   1bfc8:	468c      	mov	ip, r1
   1bfca:	4462      	add	r2, ip
   1bfcc:	7013      	strb	r3, [r2, #0]


	if (rsp != cmd) {
   1bfce:	429d      	cmp	r5, r3
   1bfd0:	d132      	bne.n	1c038 <spi_cmd_complete+0x20c>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   1bfd2:	1cbc      	adds	r4, r7, #2
   1bfd4:	b2e4      	uxtb	r4, r4
	rsp = rb[rix++];
   1bfd6:	1c7b      	adds	r3, r7, #1
	rsp = rb[rix++];
   1bfd8:	b2db      	uxtb	r3, r3
   1bfda:	aa06      	add	r2, sp, #24
   1bfdc:	5cd0      	ldrb	r0, [r2, r3]
   1bfde:	230f      	movs	r3, #15
   1bfe0:	aa02      	add	r2, sp, #8
   1bfe2:	4694      	mov	ip, r2
   1bfe4:	4463      	add	r3, ip
   1bfe6:	7018      	strb	r0, [r3, #0]
	if (rsp != 0x00) {
   1bfe8:	2800      	cmp	r0, #0
   1bfea:	d13c      	bne.n	1c066 <spi_cmd_complete+0x23a>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
		result = N_FAIL;
		return result;
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   1bfec:	002b      	movs	r3, r5
   1bfee:	333c      	adds	r3, #60	; 0x3c
   1bff0:	22fb      	movs	r2, #251	; 0xfb
   1bff2:	4213      	tst	r3, r2
   1bff4:	d047      	beq.n	1c086 <spi_cmd_complete+0x25a>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1bff6:	2308      	movs	r3, #8
   1bff8:	002a      	movs	r2, r5
   1bffa:	439a      	bics	r2, r3
   1bffc:	2ac2      	cmp	r2, #194	; 0xc2
   1bffe:	d042      	beq.n	1c086 <spi_cmd_complete+0x25a>
   1c000:	2001      	movs	r0, #1
   1c002:	e029      	b.n	1c058 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   1c004:	22f7      	movs	r2, #247	; 0xf7
   1c006:	0052      	lsls	r2, r2, #1
   1c008:	4962      	ldr	r1, [pc, #392]	; (1c194 <spi_cmd_complete+0x368>)
   1c00a:	4863      	ldr	r0, [pc, #396]	; (1c198 <spi_cmd_complete+0x36c>)
   1c00c:	4c63      	ldr	r4, [pc, #396]	; (1c19c <spi_cmd_complete+0x370>)
   1c00e:	47a0      	blx	r4
   1c010:	2220      	movs	r2, #32
   1c012:	0031      	movs	r1, r6
   1c014:	4862      	ldr	r0, [pc, #392]	; (1c1a0 <spi_cmd_complete+0x374>)
   1c016:	47a0      	blx	r4
   1c018:	4862      	ldr	r0, [pc, #392]	; (1c1a4 <spi_cmd_complete+0x378>)
   1c01a:	47a0      	blx	r4
		return result;
   1c01c:	2000      	movs	r0, #0
   1c01e:	e01b      	b.n	1c058 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   1c020:	22fa      	movs	r2, #250	; 0xfa
   1c022:	32ff      	adds	r2, #255	; 0xff
   1c024:	495b      	ldr	r1, [pc, #364]	; (1c194 <spi_cmd_complete+0x368>)
   1c026:	485c      	ldr	r0, [pc, #368]	; (1c198 <spi_cmd_complete+0x36c>)
   1c028:	4c5c      	ldr	r4, [pc, #368]	; (1c19c <spi_cmd_complete+0x370>)
   1c02a:	47a0      	blx	r4
   1c02c:	485e      	ldr	r0, [pc, #376]	; (1c1a8 <spi_cmd_complete+0x37c>)
   1c02e:	47a0      	blx	r4
   1c030:	485c      	ldr	r0, [pc, #368]	; (1c1a4 <spi_cmd_complete+0x378>)
   1c032:	47a0      	blx	r4
		return result;
   1c034:	2000      	movs	r0, #0
   1c036:	e00f      	b.n	1c058 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   1c038:	4a5c      	ldr	r2, [pc, #368]	; (1c1ac <spi_cmd_complete+0x380>)
   1c03a:	4956      	ldr	r1, [pc, #344]	; (1c194 <spi_cmd_complete+0x368>)
   1c03c:	4856      	ldr	r0, [pc, #344]	; (1c198 <spi_cmd_complete+0x36c>)
   1c03e:	4c57      	ldr	r4, [pc, #348]	; (1c19c <spi_cmd_complete+0x370>)
   1c040:	47a0      	blx	r4
   1c042:	230f      	movs	r3, #15
   1c044:	aa02      	add	r2, sp, #8
   1c046:	4694      	mov	ip, r2
   1c048:	4463      	add	r3, ip
   1c04a:	781a      	ldrb	r2, [r3, #0]
   1c04c:	0029      	movs	r1, r5
   1c04e:	4858      	ldr	r0, [pc, #352]	; (1c1b0 <spi_cmd_complete+0x384>)
   1c050:	47a0      	blx	r4
   1c052:	4854      	ldr	r0, [pc, #336]	; (1c1a4 <spi_cmd_complete+0x378>)
   1c054:	47a0      	blx	r4
		return result;
   1c056:	2000      	movs	r0, #0
				}
			}
	}
_error_:
	return result;
}
   1c058:	b017      	add	sp, #92	; 0x5c
   1c05a:	bc3c      	pop	{r2, r3, r4, r5}
   1c05c:	4690      	mov	r8, r2
   1c05e:	4699      	mov	r9, r3
   1c060:	46a2      	mov	sl, r4
   1c062:	46ab      	mov	fp, r5
   1c064:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   1c066:	4a53      	ldr	r2, [pc, #332]	; (1c1b4 <spi_cmd_complete+0x388>)
   1c068:	494a      	ldr	r1, [pc, #296]	; (1c194 <spi_cmd_complete+0x368>)
   1c06a:	484b      	ldr	r0, [pc, #300]	; (1c198 <spi_cmd_complete+0x36c>)
   1c06c:	4c4b      	ldr	r4, [pc, #300]	; (1c19c <spi_cmd_complete+0x370>)
   1c06e:	47a0      	blx	r4
   1c070:	230f      	movs	r3, #15
   1c072:	aa02      	add	r2, sp, #8
   1c074:	4694      	mov	ip, r2
   1c076:	4463      	add	r3, ip
   1c078:	7819      	ldrb	r1, [r3, #0]
   1c07a:	484f      	ldr	r0, [pc, #316]	; (1c1b8 <spi_cmd_complete+0x38c>)
   1c07c:	47a0      	blx	r4
   1c07e:	4849      	ldr	r0, [pc, #292]	; (1c1a4 <spi_cmd_complete+0x378>)
   1c080:	47a0      	blx	r4
		return result;
   1c082:	2000      	movs	r0, #0
   1c084:	e7e8      	b.n	1c058 <spi_cmd_complete+0x22c>
   1c086:	370d      	adds	r7, #13
   1c088:	b2fb      	uxtb	r3, r7
   1c08a:	469a      	mov	sl, r3
	for(wix = len; wix< len2; wix++) {
   1c08c:	2200      	movs	r2, #0
   1c08e:	270a      	movs	r7, #10
					rsp = rb[rix++];
   1c090:	a906      	add	r1, sp, #24
   1c092:	e000      	b.n	1c096 <spi_cmd_complete+0x26a>
   1c094:	001c      	movs	r4, r3
				if(rix < len2) { 
   1c096:	42a6      	cmp	r6, r4
   1c098:	d956      	bls.n	1c148 <spi_cmd_complete+0x31c>
					rsp = rb[rix++];
   1c09a:	1c63      	adds	r3, r4, #1
   1c09c:	b2db      	uxtb	r3, r3
   1c09e:	5d08      	ldrb	r0, [r1, r4]
				if (((rsp >> 4) & 0xf) == 0xf)
   1c0a0:	0902      	lsrs	r2, r0, #4
   1c0a2:	2a0f      	cmp	r2, #15
   1c0a4:	d06a      	beq.n	1c17c <spi_cmd_complete+0x350>
			} while (retry--);
   1c0a6:	3f01      	subs	r7, #1
   1c0a8:	2201      	movs	r2, #1
   1c0aa:	4553      	cmp	r3, sl
   1c0ac:	d1f2      	bne.n	1c094 <spi_cmd_complete+0x268>
   1c0ae:	320e      	adds	r2, #14
   1c0b0:	a902      	add	r1, sp, #8
   1c0b2:	468c      	mov	ip, r1
   1c0b4:	4462      	add	r2, ip
   1c0b6:	7010      	strb	r0, [r2, #0]
			if (retry <= 0) {
   1c0b8:	2f00      	cmp	r7, #0
   1c0ba:	dd47      	ble.n	1c14c <spi_cmd_complete+0x320>
			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c0bc:	2dc4      	cmp	r5, #196	; 0xc4
   1c0be:	d100      	bne.n	1c0c2 <spi_cmd_complete+0x296>
   1c0c0:	e080      	b.n	1c1c4 <spi_cmd_complete+0x398>
   1c0c2:	2dca      	cmp	r5, #202	; 0xca
   1c0c4:	d100      	bne.n	1c0c8 <spi_cmd_complete+0x29c>
   1c0c6:	e07d      	b.n	1c1c4 <spi_cmd_complete+0x398>
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   1c0c8:	2dc2      	cmp	r5, #194	; 0xc2
   1c0ca:	d002      	beq.n	1c0d2 <spi_cmd_complete+0x2a6>
   1c0cc:	2001      	movs	r0, #1
   1c0ce:	2dc8      	cmp	r5, #200	; 0xc8
   1c0d0:	d1c2      	bne.n	1c058 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c0d2:	429e      	cmp	r6, r3
   1c0d4:	d800      	bhi.n	1c0d8 <spi_cmd_complete+0x2ac>
   1c0d6:	e0ac      	b.n	1c232 <spi_cmd_complete+0x406>
   1c0d8:	9a00      	ldr	r2, [sp, #0]
   1c0da:	2a00      	cmp	r2, #0
   1c0dc:	d100      	bne.n	1c0e0 <spi_cmd_complete+0x2b4>
   1c0de:	e11b      	b.n	1c318 <spi_cmd_complete+0x4ec>
   1c0e0:	4442      	add	r2, r8
   1c0e2:	0014      	movs	r4, r2
   1c0e4:	4640      	mov	r0, r8
   1c0e6:	2701      	movs	r7, #1
   1c0e8:	1a3f      	subs	r7, r7, r0
					b[ix++] = rb[rix++];				
   1c0ea:	a906      	add	r1, sp, #24
   1c0ec:	183d      	adds	r5, r7, r0
   1c0ee:	1c5a      	adds	r2, r3, #1
   1c0f0:	b2d2      	uxtb	r2, r2
   1c0f2:	5ccb      	ldrb	r3, [r1, r3]
   1c0f4:	7003      	strb	r3, [r0, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c0f6:	4296      	cmp	r6, r2
   1c0f8:	d903      	bls.n	1c102 <spi_cmd_complete+0x2d6>
   1c0fa:	3001      	adds	r0, #1
					b[ix++] = rb[rix++];				
   1c0fc:	0013      	movs	r3, r2
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c0fe:	42a0      	cmp	r0, r4
   1c100:	d1f4      	bne.n	1c0ec <spi_cmd_complete+0x2c0>
				sz -= ix;
   1c102:	002b      	movs	r3, r5
   1c104:	9a00      	ldr	r2, [sp, #0]
   1c106:	1b54      	subs	r4, r2, r5
   1c108:	2001      	movs	r0, #1
				if(sz > 0) {
   1c10a:	2c00      	cmp	r4, #0
   1c10c:	d0a4      	beq.n	1c058 <spi_cmd_complete+0x22c>
					if (sz <= (DATA_PKT_SZ-ix)) {
   1c10e:	2680      	movs	r6, #128	; 0x80
   1c110:	01b6      	lsls	r6, r6, #6
   1c112:	1b76      	subs	r6, r6, r5
   1c114:	42b4      	cmp	r4, r6
   1c116:	d800      	bhi.n	1c11a <spi_cmd_complete+0x2ee>
						nbytes = sz;
   1c118:	0026      	movs	r6, r4
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c11a:	b2b1      	uxth	r1, r6
   1c11c:	4443      	add	r3, r8
   1c11e:	0018      	movs	r0, r3
   1c120:	4b26      	ldr	r3, [pc, #152]	; (1c1bc <spi_cmd_complete+0x390>)
   1c122:	4798      	blx	r3
   1c124:	2800      	cmp	r0, #0
   1c126:	d000      	beq.n	1c12a <spi_cmd_complete+0x2fe>
   1c128:	e085      	b.n	1c236 <spi_cmd_complete+0x40a>
					if (!gu8Crc_off) {
   1c12a:	4b18      	ldr	r3, [pc, #96]	; (1c18c <spi_cmd_complete+0x360>)
   1c12c:	781b      	ldrb	r3, [r3, #0]
   1c12e:	2b00      	cmp	r3, #0
   1c130:	d100      	bne.n	1c134 <spi_cmd_complete+0x308>
   1c132:	e08b      	b.n	1c24c <spi_cmd_complete+0x420>
					ix += nbytes;
   1c134:	46aa      	mov	sl, r5
   1c136:	44b2      	add	sl, r6
					sz -= nbytes;
   1c138:	1ba6      	subs	r6, r4, r6
				while(sz > 0) {
   1c13a:	2001      	movs	r0, #1
   1c13c:	2e00      	cmp	r6, #0
   1c13e:	d100      	bne.n	1c142 <spi_cmd_complete+0x316>
   1c140:	e78a      	b.n	1c058 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   1c142:	4f1e      	ldr	r7, [pc, #120]	; (1c1bc <spi_cmd_complete+0x390>)
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c144:	46bb      	mov	fp, r7
   1c146:	e0b5      	b.n	1c2b4 <spi_cmd_complete+0x488>
   1c148:	2a00      	cmp	r2, #0
   1c14a:	d111      	bne.n	1c170 <spi_cmd_complete+0x344>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   1c14c:	2295      	movs	r2, #149	; 0x95
   1c14e:	0092      	lsls	r2, r2, #2
   1c150:	4910      	ldr	r1, [pc, #64]	; (1c194 <spi_cmd_complete+0x368>)
   1c152:	4811      	ldr	r0, [pc, #68]	; (1c198 <spi_cmd_complete+0x36c>)
   1c154:	4c11      	ldr	r4, [pc, #68]	; (1c19c <spi_cmd_complete+0x370>)
   1c156:	47a0      	blx	r4
   1c158:	230f      	movs	r3, #15
   1c15a:	aa02      	add	r2, sp, #8
   1c15c:	4694      	mov	ip, r2
   1c15e:	4463      	add	r3, ip
   1c160:	7819      	ldrb	r1, [r3, #0]
   1c162:	4817      	ldr	r0, [pc, #92]	; (1c1c0 <spi_cmd_complete+0x394>)
   1c164:	47a0      	blx	r4
   1c166:	480f      	ldr	r0, [pc, #60]	; (1c1a4 <spi_cmd_complete+0x378>)
   1c168:	47a0      	blx	r4
				return result;
   1c16a:	2001      	movs	r0, #1
   1c16c:	4240      	negs	r0, r0
   1c16e:	e773      	b.n	1c058 <spi_cmd_complete+0x22c>
   1c170:	230f      	movs	r3, #15
   1c172:	aa02      	add	r2, sp, #8
   1c174:	4694      	mov	ip, r2
   1c176:	4463      	add	r3, ip
   1c178:	7018      	strb	r0, [r3, #0]
   1c17a:	e7e7      	b.n	1c14c <spi_cmd_complete+0x320>
   1c17c:	a902      	add	r1, sp, #8
   1c17e:	468c      	mov	ip, r1
   1c180:	4462      	add	r2, ip
   1c182:	7010      	strb	r0, [r2, #0]
   1c184:	e798      	b.n	1c0b8 <spi_cmd_complete+0x28c>
   1c186:	46c0      	nop			; (mov r8, r8)
   1c188:	00029a98 	.word	0x00029a98
   1c18c:	20003d80 	.word	0x20003d80
   1c190:	0001a305 	.word	0x0001a305
   1c194:	00029afc 	.word	0x00029afc
   1c198:	000293bc 	.word	0x000293bc
   1c19c:	00018f7d 	.word	0x00018f7d
   1c1a0:	00029f08 	.word	0x00029f08
   1c1a4:	000293e4 	.word	0x000293e4
   1c1a8:	00029edc 	.word	0x00029edc
   1c1ac:	0000022f 	.word	0x0000022f
   1c1b0:	00029f38 	.word	0x00029f38
   1c1b4:	00000239 	.word	0x00000239
   1c1b8:	00029f74 	.word	0x00029f74
   1c1bc:	0001bd45 	.word	0x0001bd45
   1c1c0:	00029fa8 	.word	0x00029fa8
				if((rix+3) < len2) { 
   1c1c4:	1cda      	adds	r2, r3, #3
   1c1c6:	4296      	cmp	r6, r2
   1c1c8:	d928      	bls.n	1c21c <spi_cmd_complete+0x3f0>
					b[0] = rb[rix++];
   1c1ca:	aa06      	add	r2, sp, #24
   1c1cc:	5cd3      	ldrb	r3, [r2, r3]
   1c1ce:	4641      	mov	r1, r8
   1c1d0:	700b      	strb	r3, [r1, #0]
   1c1d2:	1ca3      	adds	r3, r4, #2
					b[1] = rb[rix++];
   1c1d4:	b2db      	uxtb	r3, r3
   1c1d6:	5cd3      	ldrb	r3, [r2, r3]
   1c1d8:	704b      	strb	r3, [r1, #1]
   1c1da:	1ce3      	adds	r3, r4, #3
					b[2] = rb[rix++];
   1c1dc:	b2db      	uxtb	r3, r3
   1c1de:	5cd3      	ldrb	r3, [r2, r3]
   1c1e0:	708b      	strb	r3, [r1, #2]
   1c1e2:	1d23      	adds	r3, r4, #4
					b[3] = rb[rix++];
   1c1e4:	b2db      	uxtb	r3, r3
   1c1e6:	5cd3      	ldrb	r3, [r2, r3]
   1c1e8:	70cb      	strb	r3, [r1, #3]
				if (!gu8Crc_off) {						
   1c1ea:	4b63      	ldr	r3, [pc, #396]	; (1c378 <spi_cmd_complete+0x54c>)
   1c1ec:	781b      	ldrb	r3, [r3, #0]
   1c1ee:	2001      	movs	r0, #1
   1c1f0:	2b00      	cmp	r3, #0
   1c1f2:	d000      	beq.n	1c1f6 <spi_cmd_complete+0x3ca>
   1c1f4:	e730      	b.n	1c058 <spi_cmd_complete+0x22c>
					b[3] = rb[rix++];
   1c1f6:	1d63      	adds	r3, r4, #5
					if((rix+1) < len2) { 
   1c1f8:	b2db      	uxtb	r3, r3
   1c1fa:	3301      	adds	r3, #1
   1c1fc:	2001      	movs	r0, #1
   1c1fe:	429e      	cmp	r6, r3
   1c200:	d900      	bls.n	1c204 <spi_cmd_complete+0x3d8>
   1c202:	e729      	b.n	1c058 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   1c204:	229c      	movs	r2, #156	; 0x9c
   1c206:	0092      	lsls	r2, r2, #2
   1c208:	495c      	ldr	r1, [pc, #368]	; (1c37c <spi_cmd_complete+0x550>)
   1c20a:	485d      	ldr	r0, [pc, #372]	; (1c380 <spi_cmd_complete+0x554>)
   1c20c:	4c5d      	ldr	r4, [pc, #372]	; (1c384 <spi_cmd_complete+0x558>)
   1c20e:	47a0      	blx	r4
   1c210:	485d      	ldr	r0, [pc, #372]	; (1c388 <spi_cmd_complete+0x55c>)
   1c212:	47a0      	blx	r4
   1c214:	485d      	ldr	r0, [pc, #372]	; (1c38c <spi_cmd_complete+0x560>)
   1c216:	47a0      	blx	r4
						return result;
   1c218:	2000      	movs	r0, #0
   1c21a:	e71d      	b.n	1c058 <spi_cmd_complete+0x22c>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   1c21c:	4a5c      	ldr	r2, [pc, #368]	; (1c390 <spi_cmd_complete+0x564>)
   1c21e:	4957      	ldr	r1, [pc, #348]	; (1c37c <spi_cmd_complete+0x550>)
   1c220:	4857      	ldr	r0, [pc, #348]	; (1c380 <spi_cmd_complete+0x554>)
   1c222:	4c58      	ldr	r4, [pc, #352]	; (1c384 <spi_cmd_complete+0x558>)
   1c224:	47a0      	blx	r4
   1c226:	485b      	ldr	r0, [pc, #364]	; (1c394 <spi_cmd_complete+0x568>)
   1c228:	47a0      	blx	r4
   1c22a:	4858      	ldr	r0, [pc, #352]	; (1c38c <spi_cmd_complete+0x560>)
   1c22c:	47a0      	blx	r4
					return result;
   1c22e:	2000      	movs	r0, #0
   1c230:	e712      	b.n	1c058 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c232:	2500      	movs	r5, #0
   1c234:	e765      	b.n	1c102 <spi_cmd_complete+0x2d6>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   1c236:	4a58      	ldr	r2, [pc, #352]	; (1c398 <spi_cmd_complete+0x56c>)
   1c238:	4950      	ldr	r1, [pc, #320]	; (1c37c <spi_cmd_complete+0x550>)
   1c23a:	4851      	ldr	r0, [pc, #324]	; (1c380 <spi_cmd_complete+0x554>)
   1c23c:	4c51      	ldr	r4, [pc, #324]	; (1c384 <spi_cmd_complete+0x558>)
   1c23e:	47a0      	blx	r4
   1c240:	4856      	ldr	r0, [pc, #344]	; (1c39c <spi_cmd_complete+0x570>)
   1c242:	47a0      	blx	r4
   1c244:	4851      	ldr	r0, [pc, #324]	; (1c38c <spi_cmd_complete+0x560>)
   1c246:	47a0      	blx	r4
						goto _error_;
   1c248:	2000      	movs	r0, #0
   1c24a:	e705      	b.n	1c058 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   1c24c:	2102      	movs	r1, #2
   1c24e:	a802      	add	r0, sp, #8
   1c250:	4b53      	ldr	r3, [pc, #332]	; (1c3a0 <spi_cmd_complete+0x574>)
   1c252:	4798      	blx	r3
   1c254:	2800      	cmp	r0, #0
   1c256:	d100      	bne.n	1c25a <spi_cmd_complete+0x42e>
   1c258:	e76c      	b.n	1c134 <spi_cmd_complete+0x308>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   1c25a:	22a6      	movs	r2, #166	; 0xa6
   1c25c:	0092      	lsls	r2, r2, #2
   1c25e:	4947      	ldr	r1, [pc, #284]	; (1c37c <spi_cmd_complete+0x550>)
   1c260:	4847      	ldr	r0, [pc, #284]	; (1c380 <spi_cmd_complete+0x554>)
   1c262:	4c48      	ldr	r4, [pc, #288]	; (1c384 <spi_cmd_complete+0x558>)
   1c264:	47a0      	blx	r4
   1c266:	484f      	ldr	r0, [pc, #316]	; (1c3a4 <spi_cmd_complete+0x578>)
   1c268:	47a0      	blx	r4
   1c26a:	4848      	ldr	r0, [pc, #288]	; (1c38c <spi_cmd_complete+0x560>)
   1c26c:	47a0      	blx	r4
							goto _error_;
   1c26e:	e7eb      	b.n	1c248 <spi_cmd_complete+0x41c>
   1c270:	9b00      	ldr	r3, [sp, #0]
   1c272:	4699      	mov	r9, r3
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c274:	240b      	movs	r4, #11
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   1c276:	250f      	movs	r5, #15
   1c278:	ab02      	add	r3, sp, #8
   1c27a:	469c      	mov	ip, r3
   1c27c:	4465      	add	r5, ip
   1c27e:	2101      	movs	r1, #1
   1c280:	0028      	movs	r0, r5
   1c282:	47b8      	blx	r7
   1c284:	2800      	cmp	r0, #0
   1c286:	d11c      	bne.n	1c2c2 <spi_cmd_complete+0x496>
						if (((rsp >> 4) & 0xf) == 0xf)
   1c288:	782b      	ldrb	r3, [r5, #0]
   1c28a:	091b      	lsrs	r3, r3, #4
   1c28c:	2b0f      	cmp	r3, #15
   1c28e:	d002      	beq.n	1c296 <spi_cmd_complete+0x46a>
   1c290:	3c01      	subs	r4, #1
					} while (retry--);
   1c292:	2c00      	cmp	r4, #0
   1c294:	d1f3      	bne.n	1c27e <spi_cmd_complete+0x452>
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   1c296:	466b      	mov	r3, sp
   1c298:	8819      	ldrh	r1, [r3, #0]
   1c29a:	4640      	mov	r0, r8
   1c29c:	4450      	add	r0, sl
   1c29e:	47d8      	blx	fp
   1c2a0:	2800      	cmp	r0, #0
   1c2a2:	d11a      	bne.n	1c2da <spi_cmd_complete+0x4ae>
					if (!gu8Crc_off) {
   1c2a4:	4b34      	ldr	r3, [pc, #208]	; (1c378 <spi_cmd_complete+0x54c>)
   1c2a6:	781b      	ldrb	r3, [r3, #0]
   1c2a8:	2b00      	cmp	r3, #0
   1c2aa:	d022      	beq.n	1c2f2 <spi_cmd_complete+0x4c6>
					ix += nbytes;
   1c2ac:	44ca      	add	sl, r9
					sz -= nbytes;
   1c2ae:	9b00      	ldr	r3, [sp, #0]
   1c2b0:	1af6      	subs	r6, r6, r3
				while(sz > 0) {
   1c2b2:	d02f      	beq.n	1c314 <spi_cmd_complete+0x4e8>
   1c2b4:	9600      	str	r6, [sp, #0]
   1c2b6:	2380      	movs	r3, #128	; 0x80
   1c2b8:	019b      	lsls	r3, r3, #6
   1c2ba:	429e      	cmp	r6, r3
   1c2bc:	d9d8      	bls.n	1c270 <spi_cmd_complete+0x444>
   1c2be:	9300      	str	r3, [sp, #0]
   1c2c0:	e7d6      	b.n	1c270 <spi_cmd_complete+0x444>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   1c2c2:	22ae      	movs	r2, #174	; 0xae
   1c2c4:	0092      	lsls	r2, r2, #2
   1c2c6:	492d      	ldr	r1, [pc, #180]	; (1c37c <spi_cmd_complete+0x550>)
   1c2c8:	482d      	ldr	r0, [pc, #180]	; (1c380 <spi_cmd_complete+0x554>)
   1c2ca:	4c2e      	ldr	r4, [pc, #184]	; (1c384 <spi_cmd_complete+0x558>)
   1c2cc:	47a0      	blx	r4
   1c2ce:	4836      	ldr	r0, [pc, #216]	; (1c3a8 <spi_cmd_complete+0x57c>)
   1c2d0:	47a0      	blx	r4
   1c2d2:	482e      	ldr	r0, [pc, #184]	; (1c38c <spi_cmd_complete+0x560>)
   1c2d4:	47a0      	blx	r4
   1c2d6:	2000      	movs	r0, #0
   1c2d8:	e6be      	b.n	1c058 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   1c2da:	22b2      	movs	r2, #178	; 0xb2
   1c2dc:	0092      	lsls	r2, r2, #2
   1c2de:	4927      	ldr	r1, [pc, #156]	; (1c37c <spi_cmd_complete+0x550>)
   1c2e0:	4827      	ldr	r0, [pc, #156]	; (1c380 <spi_cmd_complete+0x554>)
   1c2e2:	4c28      	ldr	r4, [pc, #160]	; (1c384 <spi_cmd_complete+0x558>)
   1c2e4:	47a0      	blx	r4
   1c2e6:	482d      	ldr	r0, [pc, #180]	; (1c39c <spi_cmd_complete+0x570>)
   1c2e8:	47a0      	blx	r4
   1c2ea:	4828      	ldr	r0, [pc, #160]	; (1c38c <spi_cmd_complete+0x560>)
   1c2ec:	47a0      	blx	r4
						result = N_FAIL;
   1c2ee:	2000      	movs	r0, #0
						break;
   1c2f0:	e6b2      	b.n	1c058 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   1c2f2:	2102      	movs	r1, #2
   1c2f4:	a802      	add	r0, sp, #8
   1c2f6:	4b2a      	ldr	r3, [pc, #168]	; (1c3a0 <spi_cmd_complete+0x574>)
   1c2f8:	4798      	blx	r3
   1c2fa:	2800      	cmp	r0, #0
   1c2fc:	d0d6      	beq.n	1c2ac <spi_cmd_complete+0x480>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   1c2fe:	4a2b      	ldr	r2, [pc, #172]	; (1c3ac <spi_cmd_complete+0x580>)
   1c300:	491e      	ldr	r1, [pc, #120]	; (1c37c <spi_cmd_complete+0x550>)
   1c302:	481f      	ldr	r0, [pc, #124]	; (1c380 <spi_cmd_complete+0x554>)
   1c304:	4c1f      	ldr	r4, [pc, #124]	; (1c384 <spi_cmd_complete+0x558>)
   1c306:	47a0      	blx	r4
   1c308:	4826      	ldr	r0, [pc, #152]	; (1c3a4 <spi_cmd_complete+0x578>)
   1c30a:	47a0      	blx	r4
   1c30c:	481f      	ldr	r0, [pc, #124]	; (1c38c <spi_cmd_complete+0x560>)
   1c30e:	47a0      	blx	r4
							result = N_FAIL;
   1c310:	2000      	movs	r0, #0
							break;
   1c312:	e6a1      	b.n	1c058 <spi_cmd_complete+0x22c>
   1c314:	2001      	movs	r0, #1
   1c316:	e69f      	b.n	1c058 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
   1c318:	2001      	movs	r0, #1
   1c31a:	e69d      	b.n	1c058 <spi_cmd_complete+0x22c>
		return result;
   1c31c:	2000      	movs	r0, #0
   1c31e:	e69b      	b.n	1c058 <spi_cmd_complete+0x22c>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   1c320:	2301      	movs	r3, #1
   1c322:	425b      	negs	r3, r3
   1c324:	444b      	add	r3, r9
   1c326:	469c      	mov	ip, r3
   1c328:	001c      	movs	r4, r3
   1c32a:	2200      	movs	r2, #0
   1c32c:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
   1c32e:	4e20      	ldr	r6, [pc, #128]	; (1c3b0 <spi_cmd_complete+0x584>)
		crc = crc7_byte(crc, *buffer++);
   1c330:	a90e      	add	r1, sp, #56	; 0x38
	return crc7_syndrome_table[(crc << 1) ^ data];
   1c332:	005b      	lsls	r3, r3, #1
   1c334:	5c50      	ldrb	r0, [r2, r1]
   1c336:	4043      	eors	r3, r0
   1c338:	5cf3      	ldrb	r3, [r6, r3]
   1c33a:	3201      	adds	r2, #1
	while (len--)
   1c33c:	42a2      	cmp	r2, r4
   1c33e:	d1f8      	bne.n	1c332 <spi_cmd_complete+0x506>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   1c340:	005b      	lsls	r3, r3, #1
   1c342:	aa0e      	add	r2, sp, #56	; 0x38
   1c344:	4661      	mov	r1, ip
   1c346:	5453      	strb	r3, [r2, r1]
	if ((cmd == CMD_RESET) ||
   1c348:	2dcf      	cmp	r5, #207	; 0xcf
   1c34a:	d100      	bne.n	1c34e <spi_cmd_complete+0x522>
   1c34c:	e611      	b.n	1bf72 <spi_cmd_complete+0x146>
   1c34e:	002b      	movs	r3, r5
   1c350:	333b      	adds	r3, #59	; 0x3b
   1c352:	b2db      	uxtb	r3, r3
   1c354:	2b01      	cmp	r3, #1
   1c356:	d800      	bhi.n	1c35a <spi_cmd_complete+0x52e>
   1c358:	e60b      	b.n	1bf72 <spi_cmd_complete+0x146>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c35a:	2dc4      	cmp	r5, #196	; 0xc4
   1c35c:	d004      	beq.n	1c368 <spi_cmd_complete+0x53c>
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   1c35e:	464b      	mov	r3, r9
   1c360:	1d5e      	adds	r6, r3, #5
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   1c362:	2dca      	cmp	r5, #202	; 0xca
   1c364:	d000      	beq.n	1c368 <spi_cmd_complete+0x53c>
   1c366:	e606      	b.n	1bf76 <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   1c368:	464e      	mov	r6, r9
   1c36a:	360a      	adds	r6, #10
		if (!gu8Crc_off) {
   1c36c:	2f00      	cmp	r7, #0
   1c36e:	d000      	beq.n	1c372 <spi_cmd_complete+0x546>
   1c370:	e601      	b.n	1bf76 <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   1c372:	3602      	adds	r6, #2
   1c374:	e5ff      	b.n	1bf76 <spi_cmd_complete+0x14a>
   1c376:	46c0      	nop			; (mov r8, r8)
   1c378:	20003d80 	.word	0x20003d80
   1c37c:	00029afc 	.word	0x00029afc
   1c380:	000293bc 	.word	0x000293bc
   1c384:	00018f7d 	.word	0x00018f7d
   1c388:	0002a008 	.word	0x0002a008
   1c38c:	000293e4 	.word	0x000293e4
   1c390:	00000263 	.word	0x00000263
   1c394:	00029fd8 	.word	0x00029fd8
   1c398:	0000028e 	.word	0x0000028e
   1c39c:	0002a038 	.word	0x0002a038
   1c3a0:	0001bd45 	.word	0x0001bd45
   1c3a4:	0002a06c 	.word	0x0002a06c
   1c3a8:	0002a0a4 	.word	0x0002a0a4
   1c3ac:	000002d2 	.word	0x000002d2
   1c3b0:	00029b68 	.word	0x00029b68

0001c3b4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   1c3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3b6:	46de      	mov	lr, fp
   1c3b8:	4657      	mov	r7, sl
   1c3ba:	464e      	mov	r6, r9
   1c3bc:	4645      	mov	r5, r8
   1c3be:	b5e0      	push	{r5, r6, r7, lr}
   1c3c0:	b087      	sub	sp, #28
   1c3c2:	9003      	str	r0, [sp, #12]
   1c3c4:	9105      	str	r1, [sp, #20]
   1c3c6:	2830      	cmp	r0, #48	; 0x30
   1c3c8:	d80e      	bhi.n	1c3e8 <spi_write_reg+0x34>
   1c3ca:	4b27      	ldr	r3, [pc, #156]	; (1c468 <spi_write_reg+0xb4>)
   1c3cc:	781b      	ldrb	r3, [r3, #0]
   1c3ce:	b2db      	uxtb	r3, r3
   1c3d0:	9304      	str	r3, [sp, #16]
   1c3d2:	2300      	movs	r3, #0
   1c3d4:	2230      	movs	r2, #48	; 0x30
   1c3d6:	9903      	ldr	r1, [sp, #12]
   1c3d8:	428a      	cmp	r2, r1
   1c3da:	415b      	adcs	r3, r3
   1c3dc:	b2db      	uxtb	r3, r3
   1c3de:	469a      	mov	sl, r3
   1c3e0:	260a      	movs	r6, #10
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1c3e2:	4b22      	ldr	r3, [pc, #136]	; (1c46c <spi_write_reg+0xb8>)
   1c3e4:	469b      	mov	fp, r3
   1c3e6:	e02b      	b.n	1c440 <spi_write_reg+0x8c>
   1c3e8:	4b21      	ldr	r3, [pc, #132]	; (1c470 <spi_write_reg+0xbc>)
   1c3ea:	781b      	ldrb	r3, [r3, #0]
   1c3ec:	e7ef      	b.n	1c3ce <spi_write_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   1c3ee:	4a21      	ldr	r2, [pc, #132]	; (1c474 <spi_write_reg+0xc0>)
   1c3f0:	4921      	ldr	r1, [pc, #132]	; (1c478 <spi_write_reg+0xc4>)
   1c3f2:	4822      	ldr	r0, [pc, #136]	; (1c47c <spi_write_reg+0xc8>)
   1c3f4:	4c22      	ldr	r4, [pc, #136]	; (1c480 <spi_write_reg+0xcc>)
   1c3f6:	47a0      	blx	r4
   1c3f8:	9703      	str	r7, [sp, #12]
   1c3fa:	0039      	movs	r1, r7
   1c3fc:	4821      	ldr	r0, [pc, #132]	; (1c484 <spi_write_reg+0xd0>)
   1c3fe:	47a0      	blx	r4
   1c400:	4821      	ldr	r0, [pc, #132]	; (1c488 <spi_write_reg+0xd4>)
   1c402:	47a0      	blx	r4

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
   1c404:	2001      	movs	r0, #1
   1c406:	4f21      	ldr	r7, [pc, #132]	; (1c48c <spi_write_reg+0xd8>)
   1c408:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c40a:	2300      	movs	r3, #0
   1c40c:	9300      	str	r3, [sp, #0]
   1c40e:	2200      	movs	r2, #0
   1c410:	2100      	movs	r1, #0
   1c412:	20cf      	movs	r0, #207	; 0xcf
   1c414:	4d1e      	ldr	r5, [pc, #120]	; (1c490 <spi_write_reg+0xdc>)
   1c416:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
   1c418:	20cf      	movs	r0, #207	; 0xcf
   1c41a:	4b1e      	ldr	r3, [pc, #120]	; (1c494 <spi_write_reg+0xe0>)
   1c41c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   1c41e:	22ea      	movs	r2, #234	; 0xea
   1c420:	0092      	lsls	r2, r2, #2
   1c422:	4915      	ldr	r1, [pc, #84]	; (1c478 <spi_write_reg+0xc4>)
   1c424:	4815      	ldr	r0, [pc, #84]	; (1c47c <spi_write_reg+0xc8>)
   1c426:	47a0      	blx	r4
   1c428:	9b05      	ldr	r3, [sp, #20]
   1c42a:	9a03      	ldr	r2, [sp, #12]
   1c42c:	0031      	movs	r1, r6
   1c42e:	481a      	ldr	r0, [pc, #104]	; (1c498 <spi_write_reg+0xe4>)
   1c430:	47a0      	blx	r4
   1c432:	4815      	ldr	r0, [pc, #84]	; (1c488 <spi_write_reg+0xd4>)
   1c434:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c436:	2001      	movs	r0, #1
   1c438:	47b8      	blx	r7
   1c43a:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
   1c43c:	2e00      	cmp	r6, #0
   1c43e:	d00b      	beq.n	1c458 <spi_write_reg+0xa4>
	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1c440:	4653      	mov	r3, sl
   1c442:	9300      	str	r3, [sp, #0]
   1c444:	2304      	movs	r3, #4
   1c446:	aa05      	add	r2, sp, #20
   1c448:	9f03      	ldr	r7, [sp, #12]
   1c44a:	0039      	movs	r1, r7
   1c44c:	9804      	ldr	r0, [sp, #16]
   1c44e:	47d8      	blx	fp
   1c450:	b243      	sxtb	r3, r0
   1c452:	4698      	mov	r8, r3
	if (result != N_OK) {
   1c454:	2b01      	cmp	r3, #1
   1c456:	d1ca      	bne.n	1c3ee <spi_write_reg+0x3a>
	}

	return result;
}
   1c458:	4640      	mov	r0, r8
   1c45a:	b007      	add	sp, #28
   1c45c:	bc3c      	pop	{r2, r3, r4, r5}
   1c45e:	4690      	mov	r8, r2
   1c460:	4699      	mov	r9, r3
   1c462:	46a2      	mov	sl, r4
   1c464:	46ab      	mov	fp, r5
   1c466:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c468:	00029ad4 	.word	0x00029ad4
   1c46c:	0001be2d 	.word	0x0001be2d
   1c470:	00029ad5 	.word	0x00029ad5
   1c474:	0000039d 	.word	0x0000039d
   1c478:	00029b20 	.word	0x00029b20
   1c47c:	000293bc 	.word	0x000293bc
   1c480:	00018f7d 	.word	0x00018f7d
   1c484:	0002a150 	.word	0x0002a150
   1c488:	000293e4 	.word	0x000293e4
   1c48c:	0001a145 	.word	0x0001a145
   1c490:	0001bbcd 	.word	0x0001bbcd
   1c494:	0001bd65 	.word	0x0001bd65
   1c498:	0002a17c 	.word	0x0002a17c

0001c49c <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   1c49c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c49e:	46de      	mov	lr, fp
   1c4a0:	4657      	mov	r7, sl
   1c4a2:	464e      	mov	r6, r9
   1c4a4:	4645      	mov	r5, r8
   1c4a6:	b5e0      	push	{r5, r6, r7, lr}
   1c4a8:	b089      	sub	sp, #36	; 0x24
   1c4aa:	9003      	str	r0, [sp, #12]
   1c4ac:	468a      	mov	sl, r1
   1c4ae:	28ff      	cmp	r0, #255	; 0xff
   1c4b0:	d80e      	bhi.n	1c4d0 <spi_read_reg+0x34>
   1c4b2:	4b2e      	ldr	r3, [pc, #184]	; (1c56c <spi_read_reg+0xd0>)
   1c4b4:	781b      	ldrb	r3, [r3, #0]
   1c4b6:	b2db      	uxtb	r3, r3
   1c4b8:	9305      	str	r3, [sp, #20]
   1c4ba:	2300      	movs	r3, #0
   1c4bc:	22ff      	movs	r2, #255	; 0xff
   1c4be:	9903      	ldr	r1, [sp, #12]
   1c4c0:	428a      	cmp	r2, r1
   1c4c2:	415b      	adcs	r3, r3
   1c4c4:	b2db      	uxtb	r3, r3
   1c4c6:	4698      	mov	r8, r3
   1c4c8:	260a      	movs	r6, #10
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   1c4ca:	4b29      	ldr	r3, [pc, #164]	; (1c570 <spi_read_reg+0xd4>)
   1c4cc:	469b      	mov	fp, r3
   1c4ce:	e029      	b.n	1c524 <spi_read_reg+0x88>
   1c4d0:	4b28      	ldr	r3, [pc, #160]	; (1c574 <spi_read_reg+0xd8>)
   1c4d2:	781b      	ldrb	r3, [r3, #0]
   1c4d4:	e7ef      	b.n	1c4b6 <spi_read_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   1c4d6:	4a28      	ldr	r2, [pc, #160]	; (1c578 <spi_read_reg+0xdc>)
   1c4d8:	4928      	ldr	r1, [pc, #160]	; (1c57c <spi_read_reg+0xe0>)
   1c4da:	4829      	ldr	r0, [pc, #164]	; (1c580 <spi_read_reg+0xe4>)
   1c4dc:	4c29      	ldr	r4, [pc, #164]	; (1c584 <spi_read_reg+0xe8>)
   1c4de:	47a0      	blx	r4
   1c4e0:	9703      	str	r7, [sp, #12]
   1c4e2:	0039      	movs	r1, r7
   1c4e4:	4828      	ldr	r0, [pc, #160]	; (1c588 <spi_read_reg+0xec>)
   1c4e6:	47a0      	blx	r4
   1c4e8:	4828      	ldr	r0, [pc, #160]	; (1c58c <spi_read_reg+0xf0>)
   1c4ea:	47a0      	blx	r4
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
   1c4ec:	2001      	movs	r0, #1
   1c4ee:	4f28      	ldr	r7, [pc, #160]	; (1c590 <spi_read_reg+0xf4>)
   1c4f0:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c4f2:	2300      	movs	r3, #0
   1c4f4:	9300      	str	r3, [sp, #0]
   1c4f6:	2200      	movs	r2, #0
   1c4f8:	2100      	movs	r1, #0
   1c4fa:	20cf      	movs	r0, #207	; 0xcf
   1c4fc:	4d25      	ldr	r5, [pc, #148]	; (1c594 <spi_read_reg+0xf8>)
   1c4fe:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
   1c500:	20cf      	movs	r0, #207	; 0xcf
   1c502:	4b25      	ldr	r3, [pc, #148]	; (1c598 <spi_read_reg+0xfc>)
   1c504:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   1c506:	4a25      	ldr	r2, [pc, #148]	; (1c59c <spi_read_reg+0x100>)
   1c508:	491c      	ldr	r1, [pc, #112]	; (1c57c <spi_read_reg+0xe0>)
   1c50a:	481d      	ldr	r0, [pc, #116]	; (1c580 <spi_read_reg+0xe4>)
   1c50c:	47a0      	blx	r4
   1c50e:	9a03      	ldr	r2, [sp, #12]
   1c510:	0031      	movs	r1, r6
   1c512:	4823      	ldr	r0, [pc, #140]	; (1c5a0 <spi_read_reg+0x104>)
   1c514:	47a0      	blx	r4
   1c516:	481d      	ldr	r0, [pc, #116]	; (1c58c <spi_read_reg+0xf0>)
   1c518:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c51a:	2001      	movs	r0, #1
   1c51c:	47b8      	blx	r7
   1c51e:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
   1c520:	2e00      	cmp	r6, #0
   1c522:	d021      	beq.n	1c568 <spi_read_reg+0xcc>
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   1c524:	4643      	mov	r3, r8
   1c526:	9300      	str	r3, [sp, #0]
   1c528:	2304      	movs	r3, #4
   1c52a:	aa07      	add	r2, sp, #28
   1c52c:	9f03      	ldr	r7, [sp, #12]
   1c52e:	0039      	movs	r1, r7
   1c530:	9805      	ldr	r0, [sp, #20]
   1c532:	47d8      	blx	fp
   1c534:	b243      	sxtb	r3, r0
   1c536:	9304      	str	r3, [sp, #16]
	if (result != N_OK) {
   1c538:	2b01      	cmp	r3, #1
   1c53a:	d1cc      	bne.n	1c4d6 <spi_read_reg+0x3a>
   1c53c:	9d04      	ldr	r5, [sp, #16]
		((uint32)tmp[1] << 8) |
   1c53e:	aa07      	add	r2, sp, #28
   1c540:	7853      	ldrb	r3, [r2, #1]
   1c542:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
   1c544:	7891      	ldrb	r1, [r2, #2]
   1c546:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
   1c548:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
   1c54a:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
   1c54c:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
   1c54e:	78d2      	ldrb	r2, [r2, #3]
   1c550:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
   1c552:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
   1c554:	4652      	mov	r2, sl
   1c556:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
   1c558:	0028      	movs	r0, r5
   1c55a:	b009      	add	sp, #36	; 0x24
   1c55c:	bc3c      	pop	{r2, r3, r4, r5}
   1c55e:	4690      	mov	r8, r2
   1c560:	4699      	mov	r9, r3
   1c562:	46a2      	mov	sl, r4
   1c564:	46ab      	mov	fp, r5
   1c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c568:	9d04      	ldr	r5, [sp, #16]
   1c56a:	e7f5      	b.n	1c558 <spi_read_reg+0xbc>
   1c56c:	00029ad6 	.word	0x00029ad6
   1c570:	0001be2d 	.word	0x0001be2d
   1c574:	00029ad7 	.word	0x00029ad7
   1c578:	00000423 	.word	0x00000423
   1c57c:	00029b40 	.word	0x00029b40
   1c580:	000293bc 	.word	0x000293bc
   1c584:	00018f7d 	.word	0x00018f7d
   1c588:	0002a10c 	.word	0x0002a10c
   1c58c:	000293e4 	.word	0x000293e4
   1c590:	0001a145 	.word	0x0001a145
   1c594:	0001bbcd 	.word	0x0001bbcd
   1c598:	0001bd65 	.word	0x0001bd65
   1c59c:	00000435 	.word	0x00000435
   1c5a0:	0002a138 	.word	0x0002a138

0001c5a4 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
   1c5a4:	b510      	push	{r4, lr}
   1c5a6:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c5a8:	2300      	movs	r3, #0
   1c5aa:	9300      	str	r3, [sp, #0]
   1c5ac:	2200      	movs	r2, #0
   1c5ae:	2100      	movs	r1, #0
   1c5b0:	20cf      	movs	r0, #207	; 0xcf
   1c5b2:	4c04      	ldr	r4, [pc, #16]	; (1c5c4 <nm_spi_reset+0x20>)
   1c5b4:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   1c5b6:	20cf      	movs	r0, #207	; 0xcf
   1c5b8:	4b03      	ldr	r3, [pc, #12]	; (1c5c8 <nm_spi_reset+0x24>)
   1c5ba:	4798      	blx	r3
	return M2M_SUCCESS;
}
   1c5bc:	2000      	movs	r0, #0
   1c5be:	b002      	add	sp, #8
   1c5c0:	bd10      	pop	{r4, pc}
   1c5c2:	46c0      	nop			; (mov r8, r8)
   1c5c4:	0001bbcd 	.word	0x0001bbcd
   1c5c8:	0001bd65 	.word	0x0001bd65

0001c5cc <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
   1c5cc:	2200      	movs	r2, #0
   1c5ce:	4b02      	ldr	r3, [pc, #8]	; (1c5d8 <nm_spi_deinit+0xc>)
   1c5d0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
   1c5d2:	2000      	movs	r0, #0
   1c5d4:	4770      	bx	lr
   1c5d6:	46c0      	nop			; (mov r8, r8)
   1c5d8:	20003d80 	.word	0x20003d80

0001c5dc <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   1c5dc:	b500      	push	{lr}
   1c5de:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   1c5e0:	a901      	add	r1, sp, #4
   1c5e2:	4b02      	ldr	r3, [pc, #8]	; (1c5ec <nm_spi_read_reg+0x10>)
   1c5e4:	4798      	blx	r3

	return u32Val;
}
   1c5e6:	9801      	ldr	r0, [sp, #4]
   1c5e8:	b003      	add	sp, #12
   1c5ea:	bd00      	pop	{pc}
   1c5ec:	0001c49d 	.word	0x0001c49d

0001c5f0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   1c5f0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   1c5f2:	4b04      	ldr	r3, [pc, #16]	; (1c604 <nm_spi_read_reg_with_ret+0x14>)
   1c5f4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c5f6:	2300      	movs	r3, #0
   1c5f8:	2801      	cmp	r0, #1
   1c5fa:	d101      	bne.n	1c600 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c5fc:	0018      	movs	r0, r3
   1c5fe:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c600:	3b06      	subs	r3, #6
   1c602:	e7fb      	b.n	1c5fc <nm_spi_read_reg_with_ret+0xc>
   1c604:	0001c49d 	.word	0x0001c49d

0001c608 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   1c608:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   1c60a:	4b04      	ldr	r3, [pc, #16]	; (1c61c <nm_spi_write_reg+0x14>)
   1c60c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c60e:	2300      	movs	r3, #0
   1c610:	2801      	cmp	r0, #1
   1c612:	d101      	bne.n	1c618 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c614:	0018      	movs	r0, r3
   1c616:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c618:	3b06      	subs	r3, #6
   1c61a:	e7fb      	b.n	1c614 <nm_spi_write_reg+0xc>
   1c61c:	0001c3b5 	.word	0x0001c3b5

0001c620 <nm_spi_init>:
{
   1c620:	b530      	push	{r4, r5, lr}
   1c622:	b083      	sub	sp, #12
	uint32 reg = 0;
   1c624:	2300      	movs	r3, #0
   1c626:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
   1c628:	4a31      	ldr	r2, [pc, #196]	; (1c6f0 <nm_spi_init+0xd0>)
   1c62a:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   1c62c:	4669      	mov	r1, sp
   1c62e:	4831      	ldr	r0, [pc, #196]	; (1c6f4 <nm_spi_init+0xd4>)
   1c630:	4b31      	ldr	r3, [pc, #196]	; (1c6f8 <nm_spi_init+0xd8>)
   1c632:	4798      	blx	r3
   1c634:	2800      	cmp	r0, #0
   1c636:	d028      	beq.n	1c68a <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
   1c638:	4b2d      	ldr	r3, [pc, #180]	; (1c6f0 <nm_spi_init+0xd0>)
   1c63a:	781b      	ldrb	r3, [r3, #0]
   1c63c:	2b00      	cmp	r3, #0
   1c63e:	d10d      	bne.n	1c65c <nm_spi_init+0x3c>
		reg &= ~0x70;
   1c640:	337c      	adds	r3, #124	; 0x7c
   1c642:	9900      	ldr	r1, [sp, #0]
   1c644:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
   1c646:	3b2c      	subs	r3, #44	; 0x2c
   1c648:	4319      	orrs	r1, r3
   1c64a:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   1c64c:	4829      	ldr	r0, [pc, #164]	; (1c6f4 <nm_spi_init+0xd4>)
   1c64e:	4b2b      	ldr	r3, [pc, #172]	; (1c6fc <nm_spi_init+0xdc>)
   1c650:	4798      	blx	r3
   1c652:	1e04      	subs	r4, r0, #0
   1c654:	d036      	beq.n	1c6c4 <nm_spi_init+0xa4>
		gu8Crc_off = 1;
   1c656:	2201      	movs	r2, #1
   1c658:	4b25      	ldr	r3, [pc, #148]	; (1c6f0 <nm_spi_init+0xd0>)
   1c65a:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
   1c65c:	a901      	add	r1, sp, #4
   1c65e:	2080      	movs	r0, #128	; 0x80
   1c660:	0140      	lsls	r0, r0, #5
   1c662:	4b25      	ldr	r3, [pc, #148]	; (1c6f8 <nm_spi_init+0xd8>)
   1c664:	4798      	blx	r3
   1c666:	2800      	cmp	r0, #0
   1c668:	d036      	beq.n	1c6d8 <nm_spi_init+0xb8>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   1c66a:	4c22      	ldr	r4, [pc, #136]	; (1c6f4 <nm_spi_init+0xd4>)
   1c66c:	0020      	movs	r0, r4
   1c66e:	4b24      	ldr	r3, [pc, #144]	; (1c700 <nm_spi_init+0xe0>)
   1c670:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
   1c672:	2370      	movs	r3, #112	; 0x70
   1c674:	0001      	movs	r1, r0
   1c676:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
   1c678:	2050      	movs	r0, #80	; 0x50
   1c67a:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   1c67c:	0020      	movs	r0, r4
   1c67e:	4b21      	ldr	r3, [pc, #132]	; (1c704 <nm_spi_init+0xe4>)
   1c680:	4798      	blx	r3
	return M2M_SUCCESS;
   1c682:	2400      	movs	r4, #0
}
   1c684:	0020      	movs	r0, r4
   1c686:	b003      	add	sp, #12
   1c688:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
   1c68a:	2201      	movs	r2, #1
   1c68c:	4b18      	ldr	r3, [pc, #96]	; (1c6f0 <nm_spi_init+0xd0>)
   1c68e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   1c690:	2298      	movs	r2, #152	; 0x98
   1c692:	00d2      	lsls	r2, r2, #3
   1c694:	491c      	ldr	r1, [pc, #112]	; (1c708 <nm_spi_init+0xe8>)
   1c696:	481d      	ldr	r0, [pc, #116]	; (1c70c <nm_spi_init+0xec>)
   1c698:	4c1d      	ldr	r4, [pc, #116]	; (1c710 <nm_spi_init+0xf0>)
   1c69a:	47a0      	blx	r4
   1c69c:	481d      	ldr	r0, [pc, #116]	; (1c714 <nm_spi_init+0xf4>)
   1c69e:	47a0      	blx	r4
   1c6a0:	481d      	ldr	r0, [pc, #116]	; (1c718 <nm_spi_init+0xf8>)
   1c6a2:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   1c6a4:	4669      	mov	r1, sp
   1c6a6:	4813      	ldr	r0, [pc, #76]	; (1c6f4 <nm_spi_init+0xd4>)
   1c6a8:	4b13      	ldr	r3, [pc, #76]	; (1c6f8 <nm_spi_init+0xd8>)
   1c6aa:	4798      	blx	r3
   1c6ac:	1e04      	subs	r4, r0, #0
   1c6ae:	d1c3      	bne.n	1c638 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   1c6b0:	4a1a      	ldr	r2, [pc, #104]	; (1c71c <nm_spi_init+0xfc>)
   1c6b2:	4915      	ldr	r1, [pc, #84]	; (1c708 <nm_spi_init+0xe8>)
   1c6b4:	4815      	ldr	r0, [pc, #84]	; (1c70c <nm_spi_init+0xec>)
   1c6b6:	4d16      	ldr	r5, [pc, #88]	; (1c710 <nm_spi_init+0xf0>)
   1c6b8:	47a8      	blx	r5
   1c6ba:	4819      	ldr	r0, [pc, #100]	; (1c720 <nm_spi_init+0x100>)
   1c6bc:	47a8      	blx	r5
   1c6be:	4816      	ldr	r0, [pc, #88]	; (1c718 <nm_spi_init+0xf8>)
   1c6c0:	47a8      	blx	r5
			return 0;
   1c6c2:	e7df      	b.n	1c684 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   1c6c4:	4a17      	ldr	r2, [pc, #92]	; (1c724 <nm_spi_init+0x104>)
   1c6c6:	4910      	ldr	r1, [pc, #64]	; (1c708 <nm_spi_init+0xe8>)
   1c6c8:	4810      	ldr	r0, [pc, #64]	; (1c70c <nm_spi_init+0xec>)
   1c6ca:	4d11      	ldr	r5, [pc, #68]	; (1c710 <nm_spi_init+0xf0>)
   1c6cc:	47a8      	blx	r5
   1c6ce:	4816      	ldr	r0, [pc, #88]	; (1c728 <nm_spi_init+0x108>)
   1c6d0:	47a8      	blx	r5
   1c6d2:	4811      	ldr	r0, [pc, #68]	; (1c718 <nm_spi_init+0xf8>)
   1c6d4:	47a8      	blx	r5
			return 0;
   1c6d6:	e7d5      	b.n	1c684 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   1c6d8:	4a14      	ldr	r2, [pc, #80]	; (1c72c <nm_spi_init+0x10c>)
   1c6da:	490b      	ldr	r1, [pc, #44]	; (1c708 <nm_spi_init+0xe8>)
   1c6dc:	480b      	ldr	r0, [pc, #44]	; (1c70c <nm_spi_init+0xec>)
   1c6de:	4c0c      	ldr	r4, [pc, #48]	; (1c710 <nm_spi_init+0xf0>)
   1c6e0:	47a0      	blx	r4
   1c6e2:	4813      	ldr	r0, [pc, #76]	; (1c730 <nm_spi_init+0x110>)
   1c6e4:	47a0      	blx	r4
   1c6e6:	480c      	ldr	r0, [pc, #48]	; (1c718 <nm_spi_init+0xf8>)
   1c6e8:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
   1c6ea:	2406      	movs	r4, #6
   1c6ec:	4264      	negs	r4, r4
   1c6ee:	e7c9      	b.n	1c684 <nm_spi_init+0x64>
   1c6f0:	20003d80 	.word	0x20003d80
   1c6f4:	0000e824 	.word	0x0000e824
   1c6f8:	0001c49d 	.word	0x0001c49d
   1c6fc:	0001c3b5 	.word	0x0001c3b5
   1c700:	0001c5dd 	.word	0x0001c5dd
   1c704:	0001c609 	.word	0x0001c609
   1c708:	00029b5c 	.word	0x00029b5c
   1c70c:	000293bc 	.word	0x000293bc
   1c710:	00018f7d 	.word	0x00018f7d
   1c714:	00029c68 	.word	0x00029c68
   1c718:	000293e4 	.word	0x000293e4
   1c71c:	000004c3 	.word	0x000004c3
   1c720:	00029cb8 	.word	0x00029cb8
   1c724:	000004cd 	.word	0x000004cd
   1c728:	00029ce8 	.word	0x00029ce8
   1c72c:	000004d7 	.word	0x000004d7
   1c730:	00029d1c 	.word	0x00029d1c

0001c734 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1c734:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c736:	46de      	mov	lr, fp
   1c738:	464f      	mov	r7, r9
   1c73a:	4646      	mov	r6, r8
   1c73c:	b5c0      	push	{r6, r7, lr}
   1c73e:	b086      	sub	sp, #24
   1c740:	9003      	str	r0, [sp, #12]
   1c742:	9105      	str	r1, [sp, #20]
   1c744:	9204      	str	r2, [sp, #16]
   1c746:	250a      	movs	r5, #10
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1c748:	4b21      	ldr	r3, [pc, #132]	; (1c7d0 <nm_spi_read_block+0x9c>)
   1c74a:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   1c74c:	002f      	movs	r7, r5
   1c74e:	e029      	b.n	1c7a4 <nm_spi_read_block+0x70>
   1c750:	4a20      	ldr	r2, [pc, #128]	; (1c7d4 <nm_spi_read_block+0xa0>)
   1c752:	4921      	ldr	r1, [pc, #132]	; (1c7d8 <nm_spi_read_block+0xa4>)
   1c754:	4821      	ldr	r0, [pc, #132]	; (1c7dc <nm_spi_read_block+0xa8>)
   1c756:	4c22      	ldr	r4, [pc, #136]	; (1c7e0 <nm_spi_read_block+0xac>)
   1c758:	47a0      	blx	r4
   1c75a:	9503      	str	r5, [sp, #12]
   1c75c:	0029      	movs	r1, r5
   1c75e:	4821      	ldr	r0, [pc, #132]	; (1c7e4 <nm_spi_read_block+0xb0>)
   1c760:	47a0      	blx	r4
   1c762:	4d21      	ldr	r5, [pc, #132]	; (1c7e8 <nm_spi_read_block+0xb4>)
   1c764:	0028      	movs	r0, r5
   1c766:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c768:	2001      	movs	r0, #1
   1c76a:	4920      	ldr	r1, [pc, #128]	; (1c7ec <nm_spi_read_block+0xb8>)
   1c76c:	4689      	mov	r9, r1
   1c76e:	4788      	blx	r1
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c770:	2300      	movs	r3, #0
   1c772:	9300      	str	r3, [sp, #0]
   1c774:	2200      	movs	r2, #0
   1c776:	2100      	movs	r1, #0
   1c778:	20cf      	movs	r0, #207	; 0xcf
   1c77a:	4e1d      	ldr	r6, [pc, #116]	; (1c7f0 <nm_spi_read_block+0xbc>)
   1c77c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
   1c77e:	20cf      	movs	r0, #207	; 0xcf
   1c780:	4b1c      	ldr	r3, [pc, #112]	; (1c7f4 <nm_spi_read_block+0xc0>)
   1c782:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1c784:	4a1c      	ldr	r2, [pc, #112]	; (1c7f8 <nm_spi_read_block+0xc4>)
   1c786:	4914      	ldr	r1, [pc, #80]	; (1c7d8 <nm_spi_read_block+0xa4>)
   1c788:	4814      	ldr	r0, [pc, #80]	; (1c7dc <nm_spi_read_block+0xa8>)
   1c78a:	47a0      	blx	r4
   1c78c:	9b04      	ldr	r3, [sp, #16]
   1c78e:	9a03      	ldr	r2, [sp, #12]
   1c790:	0039      	movs	r1, r7
   1c792:	481a      	ldr	r0, [pc, #104]	; (1c7fc <nm_spi_read_block+0xc8>)
   1c794:	47a0      	blx	r4
   1c796:	0028      	movs	r0, r5
   1c798:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c79a:	2001      	movs	r0, #1
   1c79c:	47c8      	blx	r9
   1c79e:	3f01      	subs	r7, #1
		if(retry) goto _RETRY_;
   1c7a0:	2f00      	cmp	r7, #0
   1c7a2:	d011      	beq.n	1c7c8 <nm_spi_read_block+0x94>
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   1c7a4:	2300      	movs	r3, #0
   1c7a6:	9300      	str	r3, [sp, #0]
   1c7a8:	9b04      	ldr	r3, [sp, #16]
   1c7aa:	9a05      	ldr	r2, [sp, #20]
   1c7ac:	9d03      	ldr	r5, [sp, #12]
   1c7ae:	0029      	movs	r1, r5
   1c7b0:	20c8      	movs	r0, #200	; 0xc8
   1c7b2:	47c0      	blx	r8
	if (result != N_OK) {
   1c7b4:	b240      	sxtb	r0, r0
   1c7b6:	2801      	cmp	r0, #1
   1c7b8:	d1ca      	bne.n	1c750 <nm_spi_read_block+0x1c>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c7ba:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
   1c7bc:	b006      	add	sp, #24
   1c7be:	bc1c      	pop	{r2, r3, r4}
   1c7c0:	4690      	mov	r8, r2
   1c7c2:	4699      	mov	r9, r3
   1c7c4:	46a3      	mov	fp, r4
   1c7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c7c8:	2006      	movs	r0, #6
   1c7ca:	4240      	negs	r0, r0
   1c7cc:	e7f6      	b.n	1c7bc <nm_spi_read_block+0x88>
   1c7ce:	46c0      	nop			; (mov r8, r8)
   1c7d0:	0001be2d 	.word	0x0001be2d
   1c7d4:	00000472 	.word	0x00000472
   1c7d8:	00029b50 	.word	0x00029b50
   1c7dc:	000293bc 	.word	0x000293bc
   1c7e0:	00018f7d 	.word	0x00018f7d
   1c7e4:	00029d44 	.word	0x00029d44
   1c7e8:	000293e4 	.word	0x000293e4
   1c7ec:	0001a145 	.word	0x0001a145
   1c7f0:	0001bbcd 	.word	0x0001bbcd
   1c7f4:	0001bd65 	.word	0x0001bd65
   1c7f8:	0000047d 	.word	0x0000047d
   1c7fc:	00029d74 	.word	0x00029d74

0001c800 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   1c800:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c802:	46de      	mov	lr, fp
   1c804:	4647      	mov	r7, r8
   1c806:	b580      	push	{r7, lr}
   1c808:	b089      	sub	sp, #36	; 0x24
   1c80a:	9004      	str	r0, [sp, #16]
   1c80c:	468b      	mov	fp, r1
   1c80e:	9203      	str	r2, [sp, #12]
   1c810:	230a      	movs	r3, #10
   1c812:	4698      	mov	r8, r3
   1c814:	2780      	movs	r7, #128	; 0x80
   1c816:	01bf      	lsls	r7, r7, #6
   1c818:	466b      	mov	r3, sp
   1c81a:	82df      	strh	r7, [r3, #22]
   1c81c:	e068      	b.n	1c8f0 <nm_spi_write_block+0xf0>
	uint8 cmd, order, crc[2] = {0};
   1c81e:	2200      	movs	r2, #0
   1c820:	ab07      	add	r3, sp, #28
   1c822:	801a      	strh	r2, [r3, #0]
   1c824:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
   1c826:	2500      	movs	r5, #0
   1c828:	e021      	b.n	1c86e <nm_spi_write_block+0x6e>
				order = 0x2;
   1c82a:	2300      	movs	r3, #0
   1c82c:	42a7      	cmp	r7, r4
   1c82e:	415b      	adcs	r3, r3
   1c830:	3302      	adds	r3, #2
		cmd |= order;
   1c832:	200b      	movs	r0, #11
   1c834:	aa04      	add	r2, sp, #16
   1c836:	4694      	mov	ip, r2
   1c838:	4460      	add	r0, ip
   1c83a:	2210      	movs	r2, #16
   1c83c:	4252      	negs	r2, r2
   1c83e:	4313      	orrs	r3, r2
   1c840:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   1c842:	2101      	movs	r1, #1
   1c844:	4b65      	ldr	r3, [pc, #404]	; (1c9dc <nm_spi_write_block+0x1dc>)
   1c846:	4798      	blx	r3
   1c848:	2800      	cmp	r0, #0
   1c84a:	d11d      	bne.n	1c888 <nm_spi_write_block+0x88>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   1c84c:	465b      	mov	r3, fp
   1c84e:	1958      	adds	r0, r3, r5
   1c850:	0031      	movs	r1, r6
   1c852:	4b62      	ldr	r3, [pc, #392]	; (1c9dc <nm_spi_write_block+0x1dc>)
   1c854:	4798      	blx	r3
   1c856:	2800      	cmp	r0, #0
   1c858:	d161      	bne.n	1c91e <nm_spi_write_block+0x11e>
		if (!gu8Crc_off) {
   1c85a:	4b61      	ldr	r3, [pc, #388]	; (1c9e0 <nm_spi_write_block+0x1e0>)
   1c85c:	781b      	ldrb	r3, [r3, #0]
   1c85e:	2b00      	cmp	r3, #0
   1c860:	d067      	beq.n	1c932 <nm_spi_write_block+0x132>
		ix += nbytes;
   1c862:	1975      	adds	r5, r6, r5
   1c864:	b22d      	sxth	r5, r5
		sz -= nbytes;
   1c866:	1ba4      	subs	r4, r4, r6
   1c868:	b2a4      	uxth	r4, r4
	} while (sz);
   1c86a:	2c00      	cmp	r4, #0
   1c86c:	d07d      	beq.n	1c96a <nm_spi_write_block+0x16a>
   1c86e:	1c26      	adds	r6, r4, #0
   1c870:	42bc      	cmp	r4, r7
   1c872:	d901      	bls.n	1c878 <nm_spi_write_block+0x78>
   1c874:	466b      	mov	r3, sp
   1c876:	8ade      	ldrh	r6, [r3, #22]
   1c878:	b2b6      	uxth	r6, r6
		if (ix == 0)  {
   1c87a:	2d00      	cmp	r5, #0
   1c87c:	d1d5      	bne.n	1c82a <nm_spi_write_block+0x2a>
				order = 0x3;
   1c87e:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
   1c880:	42bc      	cmp	r4, r7
   1c882:	d9d6      	bls.n	1c832 <nm_spi_write_block+0x32>
				order = 0x1;
   1c884:	3b02      	subs	r3, #2
   1c886:	e7d4      	b.n	1c832 <nm_spi_write_block+0x32>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   1c888:	4a56      	ldr	r2, [pc, #344]	; (1c9e4 <nm_spi_write_block+0x1e4>)
   1c88a:	4957      	ldr	r1, [pc, #348]	; (1c9e8 <nm_spi_write_block+0x1e8>)
   1c88c:	4857      	ldr	r0, [pc, #348]	; (1c9ec <nm_spi_write_block+0x1ec>)
   1c88e:	4c58      	ldr	r4, [pc, #352]	; (1c9f0 <nm_spi_write_block+0x1f0>)
   1c890:	47a0      	blx	r4
   1c892:	4858      	ldr	r0, [pc, #352]	; (1c9f4 <nm_spi_write_block+0x1f4>)
   1c894:	47a0      	blx	r4
   1c896:	4858      	ldr	r0, [pc, #352]	; (1c9f8 <nm_spi_write_block+0x1f8>)
   1c898:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   1c89a:	4a58      	ldr	r2, [pc, #352]	; (1c9fc <nm_spi_write_block+0x1fc>)
   1c89c:	4958      	ldr	r1, [pc, #352]	; (1ca00 <nm_spi_write_block+0x200>)
   1c89e:	4853      	ldr	r0, [pc, #332]	; (1c9ec <nm_spi_write_block+0x1ec>)
   1c8a0:	4c53      	ldr	r4, [pc, #332]	; (1c9f0 <nm_spi_write_block+0x1f0>)
   1c8a2:	47a0      	blx	r4
   1c8a4:	4857      	ldr	r0, [pc, #348]	; (1ca04 <nm_spi_write_block+0x204>)
   1c8a6:	47a0      	blx	r4
   1c8a8:	4853      	ldr	r0, [pc, #332]	; (1c9f8 <nm_spi_write_block+0x1f8>)
   1c8aa:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c8ac:	2001      	movs	r0, #1
   1c8ae:	4d56      	ldr	r5, [pc, #344]	; (1ca08 <nm_spi_write_block+0x208>)
   1c8b0:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1c8b2:	2300      	movs	r3, #0
   1c8b4:	9300      	str	r3, [sp, #0]
   1c8b6:	2200      	movs	r2, #0
   1c8b8:	2100      	movs	r1, #0
   1c8ba:	20cf      	movs	r0, #207	; 0xcf
   1c8bc:	4c53      	ldr	r4, [pc, #332]	; (1ca0c <nm_spi_write_block+0x20c>)
   1c8be:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   1c8c0:	20cf      	movs	r0, #207	; 0xcf
   1c8c2:	4b53      	ldr	r3, [pc, #332]	; (1ca10 <nm_spi_write_block+0x210>)
   1c8c4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   1c8c6:	4a53      	ldr	r2, [pc, #332]	; (1ca14 <nm_spi_write_block+0x214>)
   1c8c8:	494d      	ldr	r1, [pc, #308]	; (1ca00 <nm_spi_write_block+0x200>)
   1c8ca:	4848      	ldr	r0, [pc, #288]	; (1c9ec <nm_spi_write_block+0x1ec>)
   1c8cc:	4c48      	ldr	r4, [pc, #288]	; (1c9f0 <nm_spi_write_block+0x1f0>)
   1c8ce:	47a0      	blx	r4
   1c8d0:	9b03      	ldr	r3, [sp, #12]
   1c8d2:	9a04      	ldr	r2, [sp, #16]
   1c8d4:	4641      	mov	r1, r8
   1c8d6:	4850      	ldr	r0, [pc, #320]	; (1ca18 <nm_spi_write_block+0x218>)
   1c8d8:	47a0      	blx	r4
   1c8da:	4847      	ldr	r0, [pc, #284]	; (1c9f8 <nm_spi_write_block+0x1f8>)
   1c8dc:	47a0      	blx	r4
		nm_bsp_sleep(1);
   1c8de:	2001      	movs	r0, #1
   1c8e0:	47a8      	blx	r5
   1c8e2:	2301      	movs	r3, #1
   1c8e4:	425b      	negs	r3, r3
   1c8e6:	469c      	mov	ip, r3
   1c8e8:	44e0      	add	r8, ip
		if(retry) goto _RETRY_;
   1c8ea:	4643      	mov	r3, r8
   1c8ec:	2b00      	cmp	r3, #0
   1c8ee:	d06e      	beq.n	1c9ce <nm_spi_write_block+0x1ce>
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   1c8f0:	2300      	movs	r3, #0
   1c8f2:	9300      	str	r3, [sp, #0]
   1c8f4:	9b03      	ldr	r3, [sp, #12]
   1c8f6:	2200      	movs	r2, #0
   1c8f8:	9d04      	ldr	r5, [sp, #16]
   1c8fa:	0029      	movs	r1, r5
   1c8fc:	20c7      	movs	r0, #199	; 0xc7
   1c8fe:	4c47      	ldr	r4, [pc, #284]	; (1ca1c <nm_spi_write_block+0x21c>)
   1c900:	47a0      	blx	r4
	if (result != N_OK) {
   1c902:	b240      	sxtb	r0, r0
   1c904:	2801      	cmp	r0, #1
   1c906:	d08a      	beq.n	1c81e <nm_spi_write_block+0x1e>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   1c908:	4a45      	ldr	r2, [pc, #276]	; (1ca20 <nm_spi_write_block+0x220>)
   1c90a:	493d      	ldr	r1, [pc, #244]	; (1ca00 <nm_spi_write_block+0x200>)
   1c90c:	4837      	ldr	r0, [pc, #220]	; (1c9ec <nm_spi_write_block+0x1ec>)
   1c90e:	4c38      	ldr	r4, [pc, #224]	; (1c9f0 <nm_spi_write_block+0x1f0>)
   1c910:	47a0      	blx	r4
   1c912:	0029      	movs	r1, r5
   1c914:	4843      	ldr	r0, [pc, #268]	; (1ca24 <nm_spi_write_block+0x224>)
   1c916:	47a0      	blx	r4
   1c918:	4837      	ldr	r0, [pc, #220]	; (1c9f8 <nm_spi_write_block+0x1f8>)
   1c91a:	47a0      	blx	r4
   1c91c:	e7c6      	b.n	1c8ac <nm_spi_write_block+0xac>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   1c91e:	4a42      	ldr	r2, [pc, #264]	; (1ca28 <nm_spi_write_block+0x228>)
   1c920:	4931      	ldr	r1, [pc, #196]	; (1c9e8 <nm_spi_write_block+0x1e8>)
   1c922:	4832      	ldr	r0, [pc, #200]	; (1c9ec <nm_spi_write_block+0x1ec>)
   1c924:	4c32      	ldr	r4, [pc, #200]	; (1c9f0 <nm_spi_write_block+0x1f0>)
   1c926:	47a0      	blx	r4
   1c928:	4840      	ldr	r0, [pc, #256]	; (1ca2c <nm_spi_write_block+0x22c>)
   1c92a:	47a0      	blx	r4
   1c92c:	4832      	ldr	r0, [pc, #200]	; (1c9f8 <nm_spi_write_block+0x1f8>)
   1c92e:	47a0      	blx	r4
   1c930:	e7b3      	b.n	1c89a <nm_spi_write_block+0x9a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   1c932:	2102      	movs	r1, #2
   1c934:	a807      	add	r0, sp, #28
   1c936:	4b29      	ldr	r3, [pc, #164]	; (1c9dc <nm_spi_write_block+0x1dc>)
   1c938:	4798      	blx	r3
   1c93a:	2800      	cmp	r0, #0
   1c93c:	d091      	beq.n	1c862 <nm_spi_write_block+0x62>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   1c93e:	22d7      	movs	r2, #215	; 0xd7
   1c940:	0092      	lsls	r2, r2, #2
   1c942:	4929      	ldr	r1, [pc, #164]	; (1c9e8 <nm_spi_write_block+0x1e8>)
   1c944:	4829      	ldr	r0, [pc, #164]	; (1c9ec <nm_spi_write_block+0x1ec>)
   1c946:	4c2a      	ldr	r4, [pc, #168]	; (1c9f0 <nm_spi_write_block+0x1f0>)
   1c948:	47a0      	blx	r4
   1c94a:	4839      	ldr	r0, [pc, #228]	; (1ca30 <nm_spi_write_block+0x230>)
   1c94c:	47a0      	blx	r4
   1c94e:	482a      	ldr	r0, [pc, #168]	; (1c9f8 <nm_spi_write_block+0x1f8>)
   1c950:	47a0      	blx	r4
   1c952:	e7a2      	b.n	1c89a <nm_spi_write_block+0x9a>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   1c954:	229a      	movs	r2, #154	; 0x9a
   1c956:	0052      	lsls	r2, r2, #1
   1c958:	4936      	ldr	r1, [pc, #216]	; (1ca34 <nm_spi_write_block+0x234>)
   1c95a:	4824      	ldr	r0, [pc, #144]	; (1c9ec <nm_spi_write_block+0x1ec>)
   1c95c:	4c24      	ldr	r4, [pc, #144]	; (1c9f0 <nm_spi_write_block+0x1f0>)
   1c95e:	47a0      	blx	r4
   1c960:	4835      	ldr	r0, [pc, #212]	; (1ca38 <nm_spi_write_block+0x238>)
   1c962:	47a0      	blx	r4
   1c964:	4824      	ldr	r0, [pc, #144]	; (1c9f8 <nm_spi_write_block+0x1f8>)
   1c966:	47a0      	blx	r4
   1c968:	e025      	b.n	1c9b6 <nm_spi_write_block+0x1b6>
    if (!gu8Crc_off)
   1c96a:	4b1d      	ldr	r3, [pc, #116]	; (1c9e0 <nm_spi_write_block+0x1e0>)
   1c96c:	781c      	ldrb	r4, [r3, #0]
		len = 3;
   1c96e:	1e63      	subs	r3, r4, #1
   1c970:	419c      	sbcs	r4, r3
   1c972:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   1c974:	b2a1      	uxth	r1, r4
   1c976:	a807      	add	r0, sp, #28
   1c978:	4b30      	ldr	r3, [pc, #192]	; (1ca3c <nm_spi_write_block+0x23c>)
   1c97a:	4798      	blx	r3
   1c97c:	2800      	cmp	r0, #0
   1c97e:	d1e9      	bne.n	1c954 <nm_spi_write_block+0x154>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   1c980:	ab08      	add	r3, sp, #32
   1c982:	191b      	adds	r3, r3, r4
   1c984:	3b05      	subs	r3, #5
   1c986:	781b      	ldrb	r3, [r3, #0]
   1c988:	2b00      	cmp	r3, #0
   1c98a:	d106      	bne.n	1c99a <nm_spi_write_block+0x19a>
   1c98c:	ab08      	add	r3, sp, #32
   1c98e:	469c      	mov	ip, r3
   1c990:	4464      	add	r4, ip
   1c992:	3c06      	subs	r4, #6
   1c994:	7823      	ldrb	r3, [r4, #0]
   1c996:	2bc3      	cmp	r3, #195	; 0xc3
   1c998:	d017      	beq.n	1c9ca <nm_spi_write_block+0x1ca>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   1c99a:	223c      	movs	r2, #60	; 0x3c
   1c99c:	32ff      	adds	r2, #255	; 0xff
   1c99e:	4925      	ldr	r1, [pc, #148]	; (1ca34 <nm_spi_write_block+0x234>)
   1c9a0:	4812      	ldr	r0, [pc, #72]	; (1c9ec <nm_spi_write_block+0x1ec>)
   1c9a2:	4c13      	ldr	r4, [pc, #76]	; (1c9f0 <nm_spi_write_block+0x1f0>)
   1c9a4:	47a0      	blx	r4
   1c9a6:	a907      	add	r1, sp, #28
   1c9a8:	788b      	ldrb	r3, [r1, #2]
   1c9aa:	784a      	ldrb	r2, [r1, #1]
   1c9ac:	7809      	ldrb	r1, [r1, #0]
   1c9ae:	4824      	ldr	r0, [pc, #144]	; (1ca40 <nm_spi_write_block+0x240>)
   1c9b0:	47a0      	blx	r4
   1c9b2:	4811      	ldr	r0, [pc, #68]	; (1c9f8 <nm_spi_write_block+0x1f8>)
   1c9b4:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   1c9b6:	4a23      	ldr	r2, [pc, #140]	; (1ca44 <nm_spi_write_block+0x244>)
   1c9b8:	4911      	ldr	r1, [pc, #68]	; (1ca00 <nm_spi_write_block+0x200>)
   1c9ba:	480c      	ldr	r0, [pc, #48]	; (1c9ec <nm_spi_write_block+0x1ec>)
   1c9bc:	4c0c      	ldr	r4, [pc, #48]	; (1c9f0 <nm_spi_write_block+0x1f0>)
   1c9be:	47a0      	blx	r4
   1c9c0:	4810      	ldr	r0, [pc, #64]	; (1ca04 <nm_spi_write_block+0x204>)
   1c9c2:	47a0      	blx	r4
   1c9c4:	480c      	ldr	r0, [pc, #48]	; (1c9f8 <nm_spi_write_block+0x1f8>)
   1c9c6:	47a0      	blx	r4
   1c9c8:	e770      	b.n	1c8ac <nm_spi_write_block+0xac>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   1c9ca:	2000      	movs	r0, #0
   1c9cc:	e001      	b.n	1c9d2 <nm_spi_write_block+0x1d2>
	else s8Ret = M2M_ERR_BUS_FAIL;
   1c9ce:	2006      	movs	r0, #6
   1c9d0:	4240      	negs	r0, r0

	return s8Ret;
}
   1c9d2:	b009      	add	sp, #36	; 0x24
   1c9d4:	bc0c      	pop	{r2, r3}
   1c9d6:	4690      	mov	r8, r2
   1c9d8:	469b      	mov	fp, r3
   1c9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c9dc:	0001bbad 	.word	0x0001bbad
   1c9e0:	20003d80 	.word	0x20003d80
   1c9e4:	00000349 	.word	0x00000349
   1c9e8:	00029b10 	.word	0x00029b10
   1c9ec:	000293bc 	.word	0x000293bc
   1c9f0:	00018f7d 	.word	0x00018f7d
   1c9f4:	00029dc0 	.word	0x00029dc0
   1c9f8:	000293e4 	.word	0x000293e4
   1c9fc:	000003d9 	.word	0x000003d9
   1ca00:	00029b30 	.word	0x00029b30
   1ca04:	00029eb4 	.word	0x00029eb4
   1ca08:	0001a145 	.word	0x0001a145
   1ca0c:	0001bbcd 	.word	0x0001bbcd
   1ca10:	0001bd65 	.word	0x0001bd65
   1ca14:	000003eb 	.word	0x000003eb
   1ca18:	00029d74 	.word	0x00029d74
   1ca1c:	0001be2d 	.word	0x0001be2d
   1ca20:	000003cf 	.word	0x000003cf
   1ca24:	00029d90 	.word	0x00029d90
   1ca28:	00000352 	.word	0x00000352
   1ca2c:	00029df8 	.word	0x00029df8
   1ca30:	00029e2c 	.word	0x00029e2c
   1ca34:	00029ae0 	.word	0x00029ae0
   1ca38:	00029e64 	.word	0x00029e64
   1ca3c:	0001bd45 	.word	0x0001bd45
   1ca40:	00029e84 	.word	0x00029e84
   1ca44:	000003e1 	.word	0x000003e1

0001ca48 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   1ca48:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca4a:	46de      	mov	lr, fp
   1ca4c:	4657      	mov	r7, sl
   1ca4e:	464e      	mov	r6, r9
   1ca50:	4645      	mov	r5, r8
   1ca52:	b5e0      	push	{r5, r6, r7, lr}
   1ca54:	b085      	sub	sp, #20
   1ca56:	9001      	str	r0, [sp, #4]
   1ca58:	000e      	movs	r6, r1
   1ca5a:	9202      	str	r2, [sp, #8]
   1ca5c:	001d      	movs	r5, r3
   1ca5e:	ab0e      	add	r3, sp, #56	; 0x38
   1ca60:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   1ca62:	2c00      	cmp	r4, #0
   1ca64:	d063      	beq.n	1cb2e <Socket_ReadSocketData+0xe6>
   1ca66:	0103      	lsls	r3, r0, #4
   1ca68:	4934      	ldr	r1, [pc, #208]	; (1cb3c <Socket_ReadSocketData+0xf4>)
   1ca6a:	585b      	ldr	r3, [r3, r1]
   1ca6c:	2b00      	cmp	r3, #0
   1ca6e:	d05e      	beq.n	1cb2e <Socket_ReadSocketData+0xe6>
   1ca70:	0101      	lsls	r1, r0, #4
   1ca72:	4b32      	ldr	r3, [pc, #200]	; (1cb3c <Socket_ReadSocketData+0xf4>)
   1ca74:	185b      	adds	r3, r3, r1
   1ca76:	889b      	ldrh	r3, [r3, #4]
   1ca78:	b29b      	uxth	r3, r3
   1ca7a:	2b00      	cmp	r3, #0
   1ca7c:	d057      	beq.n	1cb2e <Socket_ReadSocketData+0xe6>
   1ca7e:	4b2f      	ldr	r3, [pc, #188]	; (1cb3c <Socket_ReadSocketData+0xf4>)
   1ca80:	185b      	adds	r3, r3, r1
   1ca82:	7a9b      	ldrb	r3, [r3, #10]
   1ca84:	2b01      	cmp	r3, #1
   1ca86:	d152      	bne.n	1cb2e <Socket_ReadSocketData+0xe6>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   1ca88:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   1ca8a:	4b2c      	ldr	r3, [pc, #176]	; (1cb3c <Socket_ReadSocketData+0xf4>)
   1ca8c:	469b      	mov	fp, r3
   1ca8e:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   1ca90:	465b      	mov	r3, fp
   1ca92:	220a      	movs	r2, #10
   1ca94:	4690      	mov	r8, r2
   1ca96:	44d8      	add	r8, fp
   1ca98:	468a      	mov	sl, r1
   1ca9a:	9500      	str	r5, [sp, #0]
   1ca9c:	9303      	str	r3, [sp, #12]
   1ca9e:	e014      	b.n	1caca <Socket_ReadSocketData+0x82>
   1caa0:	0025      	movs	r5, r4
			u8SetRxDone = 1;
   1caa2:	2301      	movs	r3, #1
   1caa4:	e01b      	b.n	1cade <Socket_ReadSocketData+0x96>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1caa6:	3301      	adds	r3, #1
   1caa8:	2200      	movs	r2, #0
   1caaa:	2100      	movs	r1, #0
   1caac:	2000      	movs	r0, #0
   1caae:	4c24      	ldr	r4, [pc, #144]	; (1cb40 <Socket_ReadSocketData+0xf8>)
   1cab0:	47a0      	blx	r4
   1cab2:	e03c      	b.n	1cb2e <Socket_ReadSocketData+0xe6>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   1cab4:	4823      	ldr	r0, [pc, #140]	; (1cb44 <Socket_ReadSocketData+0xfc>)
   1cab6:	4d24      	ldr	r5, [pc, #144]	; (1cb48 <Socket_ReadSocketData+0x100>)
   1cab8:	47a8      	blx	r5
   1caba:	0021      	movs	r1, r4
   1cabc:	4823      	ldr	r0, [pc, #140]	; (1cb4c <Socket_ReadSocketData+0x104>)
   1cabe:	47a8      	blx	r5
   1cac0:	4823      	ldr	r0, [pc, #140]	; (1cb50 <Socket_ReadSocketData+0x108>)
   1cac2:	47a8      	blx	r5
				break;
   1cac4:	e033      	b.n	1cb2e <Socket_ReadSocketData+0xe6>
			}
		}while(u16ReadCount != 0);
   1cac6:	2c00      	cmp	r4, #0
   1cac8:	d031      	beq.n	1cb2e <Socket_ReadSocketData+0xe6>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   1caca:	465b      	mov	r3, fp
   1cacc:	889b      	ldrh	r3, [r3, #4]
   1cace:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
   1cad0:	b21b      	sxth	r3, r3
   1cad2:	2b00      	cmp	r3, #0
   1cad4:	dde4      	ble.n	1caa0 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   1cad6:	9b03      	ldr	r3, [sp, #12]
   1cad8:	889d      	ldrh	r5, [r3, #4]
   1cada:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
   1cadc:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   1cade:	4a17      	ldr	r2, [pc, #92]	; (1cb3c <Socket_ReadSocketData+0xf4>)
   1cae0:	4651      	mov	r1, sl
   1cae2:	5889      	ldr	r1, [r1, r2]
   1cae4:	002a      	movs	r2, r5
   1cae6:	9800      	ldr	r0, [sp, #0]
   1cae8:	4f15      	ldr	r7, [pc, #84]	; (1cb40 <Socket_ReadSocketData+0xf8>)
   1caea:	47b8      	blx	r7
   1caec:	2800      	cmp	r0, #0
   1caee:	d1e1      	bne.n	1cab4 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   1caf0:	4b12      	ldr	r3, [pc, #72]	; (1cb3c <Socket_ReadSocketData+0xf4>)
   1caf2:	4652      	mov	r2, sl
   1caf4:	58d3      	ldr	r3, [r2, r3]
   1caf6:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
   1caf8:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   1cafa:	88f3      	ldrh	r3, [r6, #6]
   1cafc:	1b5b      	subs	r3, r3, r5
   1cafe:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
   1cb00:	4b14      	ldr	r3, [pc, #80]	; (1cb54 <Socket_ReadSocketData+0x10c>)
   1cb02:	681b      	ldr	r3, [r3, #0]
   1cb04:	2b00      	cmp	r3, #0
   1cb06:	d005      	beq.n	1cb14 <Socket_ReadSocketData+0xcc>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   1cb08:	4b12      	ldr	r3, [pc, #72]	; (1cb54 <Socket_ReadSocketData+0x10c>)
   1cb0a:	681b      	ldr	r3, [r3, #0]
   1cb0c:	0032      	movs	r2, r6
   1cb0e:	9902      	ldr	r1, [sp, #8]
   1cb10:	9801      	ldr	r0, [sp, #4]
   1cb12:	4798      	blx	r3
				u16ReadCount -= u16Read;
   1cb14:	1b64      	subs	r4, r4, r5
   1cb16:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
   1cb18:	9b00      	ldr	r3, [sp, #0]
   1cb1a:	469c      	mov	ip, r3
   1cb1c:	44ac      	add	ip, r5
   1cb1e:	4663      	mov	r3, ip
   1cb20:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   1cb22:	4643      	mov	r3, r8
   1cb24:	781b      	ldrb	r3, [r3, #0]
   1cb26:	2b00      	cmp	r3, #0
   1cb28:	d1cd      	bne.n	1cac6 <Socket_ReadSocketData+0x7e>
   1cb2a:	2c00      	cmp	r4, #0
   1cb2c:	d1bb      	bne.n	1caa6 <Socket_ReadSocketData+0x5e>
	}
}
   1cb2e:	b005      	add	sp, #20
   1cb30:	bc3c      	pop	{r2, r3, r4, r5}
   1cb32:	4690      	mov	r8, r2
   1cb34:	4699      	mov	r9, r3
   1cb36:	46a2      	mov	sl, r4
   1cb38:	46ab      	mov	fp, r5
   1cb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb3c:	20005450 	.word	0x20005450
   1cb40:	0001abb9 	.word	0x0001abb9
   1cb44:	000296f8 	.word	0x000296f8
   1cb48:	00018f7d 	.word	0x00018f7d
   1cb4c:	0002a198 	.word	0x0002a198
   1cb50:	000293e4 	.word	0x000293e4
   1cb54:	20005500 	.word	0x20005500

0001cb58 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   1cb58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb5a:	46d6      	mov	lr, sl
   1cb5c:	464f      	mov	r7, r9
   1cb5e:	4646      	mov	r6, r8
   1cb60:	b5c0      	push	{r6, r7, lr}
   1cb62:	b09a      	sub	sp, #104	; 0x68
   1cb64:	000d      	movs	r5, r1
   1cb66:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   1cb68:	2841      	cmp	r0, #65	; 0x41
   1cb6a:	d039      	beq.n	1cbe0 <m2m_ip_cb+0x88>
   1cb6c:	2854      	cmp	r0, #84	; 0x54
   1cb6e:	d037      	beq.n	1cbe0 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   1cb70:	2842      	cmp	r0, #66	; 0x42
   1cb72:	d053      	beq.n	1cc1c <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   1cb74:	2843      	cmp	r0, #67	; 0x43
   1cb76:	d06a      	beq.n	1cc4e <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   1cb78:	2844      	cmp	r0, #68	; 0x44
   1cb7a:	d100      	bne.n	1cb7e <m2m_ip_cb+0x26>
   1cb7c:	e0af      	b.n	1ccde <m2m_ip_cb+0x186>
   1cb7e:	284b      	cmp	r0, #75	; 0x4b
   1cb80:	d100      	bne.n	1cb84 <m2m_ip_cb+0x2c>
   1cb82:	e0ac      	b.n	1ccde <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   1cb84:	284a      	cmp	r0, #74	; 0x4a
   1cb86:	d100      	bne.n	1cb8a <m2m_ip_cb+0x32>
   1cb88:	e0cf      	b.n	1cd2a <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   1cb8a:	2846      	cmp	r0, #70	; 0x46
   1cb8c:	d100      	bne.n	1cb90 <m2m_ip_cb+0x38>
   1cb8e:	e0e5      	b.n	1cd5c <m2m_ip_cb+0x204>
   1cb90:	2848      	cmp	r0, #72	; 0x48
   1cb92:	d100      	bne.n	1cb96 <m2m_ip_cb+0x3e>
   1cb94:	e10e      	b.n	1cdb4 <m2m_ip_cb+0x25c>
   1cb96:	284d      	cmp	r0, #77	; 0x4d
   1cb98:	d100      	bne.n	1cb9c <m2m_ip_cb+0x44>
   1cb9a:	e0dc      	b.n	1cd56 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   1cb9c:	2845      	cmp	r0, #69	; 0x45
   1cb9e:	d100      	bne.n	1cba2 <m2m_ip_cb+0x4a>
   1cba0:	e12c      	b.n	1cdfc <m2m_ip_cb+0x2a4>
   1cba2:	2847      	cmp	r0, #71	; 0x47
   1cba4:	d100      	bne.n	1cba8 <m2m_ip_cb+0x50>
   1cba6:	e14d      	b.n	1ce44 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   1cba8:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   1cbaa:	284c      	cmp	r0, #76	; 0x4c
   1cbac:	d100      	bne.n	1cbb0 <m2m_ip_cb+0x58>
   1cbae:	e126      	b.n	1cdfe <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
   1cbb0:	2852      	cmp	r0, #82	; 0x52
   1cbb2:	d12d      	bne.n	1cc10 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   1cbb4:	2301      	movs	r3, #1
   1cbb6:	2214      	movs	r2, #20
   1cbb8:	a909      	add	r1, sp, #36	; 0x24
   1cbba:	0020      	movs	r0, r4
   1cbbc:	4ca2      	ldr	r4, [pc, #648]	; (1ce48 <m2m_ip_cb+0x2f0>)
   1cbbe:	47a0      	blx	r4
   1cbc0:	2800      	cmp	r0, #0
   1cbc2:	d125      	bne.n	1cc10 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   1cbc4:	4ba1      	ldr	r3, [pc, #644]	; (1ce4c <m2m_ip_cb+0x2f4>)
   1cbc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cbc8:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   1cbca:	681b      	ldr	r3, [r3, #0]
   1cbcc:	2b00      	cmp	r3, #0
   1cbce:	d01f      	beq.n	1cc10 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   1cbd0:	4b9e      	ldr	r3, [pc, #632]	; (1ce4c <m2m_ip_cb+0x2f4>)
   1cbd2:	681c      	ldr	r4, [r3, #0]
   1cbd4:	ab09      	add	r3, sp, #36	; 0x24
   1cbd6:	7c1a      	ldrb	r2, [r3, #16]
   1cbd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1cbda:	9809      	ldr	r0, [sp, #36]	; 0x24
   1cbdc:	47a0      	blx	r4
			}
		}
	}
}
   1cbde:	e017      	b.n	1cc10 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   1cbe0:	2300      	movs	r3, #0
   1cbe2:	2204      	movs	r2, #4
   1cbe4:	a909      	add	r1, sp, #36	; 0x24
   1cbe6:	0020      	movs	r0, r4
   1cbe8:	4c97      	ldr	r4, [pc, #604]	; (1ce48 <m2m_ip_cb+0x2f0>)
   1cbea:	47a0      	blx	r4
   1cbec:	2800      	cmp	r0, #0
   1cbee:	d10f      	bne.n	1cc10 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
   1cbf0:	ab09      	add	r3, sp, #36	; 0x24
   1cbf2:	785a      	ldrb	r2, [r3, #1]
   1cbf4:	ab05      	add	r3, sp, #20
   1cbf6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   1cbf8:	4b95      	ldr	r3, [pc, #596]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1cbfa:	681b      	ldr	r3, [r3, #0]
   1cbfc:	2b00      	cmp	r3, #0
   1cbfe:	d007      	beq.n	1cc10 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   1cc00:	4b93      	ldr	r3, [pc, #588]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1cc02:	681b      	ldr	r3, [r3, #0]
   1cc04:	aa09      	add	r2, sp, #36	; 0x24
   1cc06:	2000      	movs	r0, #0
   1cc08:	5610      	ldrsb	r0, [r2, r0]
   1cc0a:	aa05      	add	r2, sp, #20
   1cc0c:	2101      	movs	r1, #1
   1cc0e:	4798      	blx	r3
}
   1cc10:	b01a      	add	sp, #104	; 0x68
   1cc12:	bc1c      	pop	{r2, r3, r4}
   1cc14:	4690      	mov	r8, r2
   1cc16:	4699      	mov	r9, r3
   1cc18:	46a2      	mov	sl, r4
   1cc1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   1cc1c:	2300      	movs	r3, #0
   1cc1e:	2204      	movs	r2, #4
   1cc20:	a909      	add	r1, sp, #36	; 0x24
   1cc22:	0020      	movs	r0, r4
   1cc24:	4c88      	ldr	r4, [pc, #544]	; (1ce48 <m2m_ip_cb+0x2f0>)
   1cc26:	47a0      	blx	r4
   1cc28:	2800      	cmp	r0, #0
   1cc2a:	d1f1      	bne.n	1cc10 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
   1cc2c:	ab09      	add	r3, sp, #36	; 0x24
   1cc2e:	785a      	ldrb	r2, [r3, #1]
   1cc30:	ab05      	add	r3, sp, #20
   1cc32:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   1cc34:	4b86      	ldr	r3, [pc, #536]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1cc36:	681b      	ldr	r3, [r3, #0]
   1cc38:	2b00      	cmp	r3, #0
   1cc3a:	d0e9      	beq.n	1cc10 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   1cc3c:	4b84      	ldr	r3, [pc, #528]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1cc3e:	681b      	ldr	r3, [r3, #0]
   1cc40:	aa09      	add	r2, sp, #36	; 0x24
   1cc42:	2000      	movs	r0, #0
   1cc44:	5610      	ldrsb	r0, [r2, r0]
   1cc46:	aa05      	add	r2, sp, #20
   1cc48:	2102      	movs	r1, #2
   1cc4a:	4798      	blx	r3
   1cc4c:	e7e0      	b.n	1cc10 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   1cc4e:	2300      	movs	r3, #0
   1cc50:	220c      	movs	r2, #12
   1cc52:	a905      	add	r1, sp, #20
   1cc54:	0020      	movs	r0, r4
   1cc56:	4c7c      	ldr	r4, [pc, #496]	; (1ce48 <m2m_ip_cb+0x2f0>)
   1cc58:	47a0      	blx	r4
   1cc5a:	2800      	cmp	r0, #0
   1cc5c:	d1d8      	bne.n	1cc10 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
   1cc5e:	ab05      	add	r3, sp, #20
   1cc60:	2209      	movs	r2, #9
   1cc62:	569a      	ldrsb	r2, [r3, r2]
   1cc64:	2a00      	cmp	r2, #0
   1cc66:	db24      	blt.n	1ccb2 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   1cc68:	0018      	movs	r0, r3
   1cc6a:	2108      	movs	r1, #8
   1cc6c:	5659      	ldrsb	r1, [r3, r1]
   1cc6e:	4b79      	ldr	r3, [pc, #484]	; (1ce54 <m2m_ip_cb+0x2fc>)
   1cc70:	0109      	lsls	r1, r1, #4
   1cc72:	1859      	adds	r1, r3, r1
   1cc74:	7ac9      	ldrb	r1, [r1, #11]
   1cc76:	b2c9      	uxtb	r1, r1
   1cc78:	0114      	lsls	r4, r2, #4
   1cc7a:	191b      	adds	r3, r3, r4
   1cc7c:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   1cc7e:	2101      	movs	r1, #1
   1cc80:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   1cc82:	8941      	ldrh	r1, [r0, #10]
   1cc84:	3908      	subs	r1, #8
   1cc86:	b289      	uxth	r1, r1
   1cc88:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
   1cc8a:	4973      	ldr	r1, [pc, #460]	; (1ce58 <m2m_ip_cb+0x300>)
   1cc8c:	880b      	ldrh	r3, [r1, #0]
   1cc8e:	3301      	adds	r3, #1
   1cc90:	b29b      	uxth	r3, r3
   1cc92:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
   1cc94:	880b      	ldrh	r3, [r1, #0]
   1cc96:	b29b      	uxth	r3, r3
   1cc98:	2b00      	cmp	r3, #0
   1cc9a:	d103      	bne.n	1cca4 <m2m_ip_cb+0x14c>
					++gu16SessionID;
   1cc9c:	880b      	ldrh	r3, [r1, #0]
   1cc9e:	3301      	adds	r3, #1
   1cca0:	b29b      	uxth	r3, r3
   1cca2:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   1cca4:	4b6c      	ldr	r3, [pc, #432]	; (1ce58 <m2m_ip_cb+0x300>)
   1cca6:	8819      	ldrh	r1, [r3, #0]
   1cca8:	b289      	uxth	r1, r1
   1ccaa:	0110      	lsls	r0, r2, #4
   1ccac:	4b69      	ldr	r3, [pc, #420]	; (1ce54 <m2m_ip_cb+0x2fc>)
   1ccae:	181b      	adds	r3, r3, r0
   1ccb0:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
   1ccb2:	ab09      	add	r3, sp, #36	; 0x24
   1ccb4:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   1ccb6:	2202      	movs	r2, #2
   1ccb8:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   1ccba:	aa05      	add	r2, sp, #20
   1ccbc:	8851      	ldrh	r1, [r2, #2]
   1ccbe:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   1ccc0:	9a06      	ldr	r2, [sp, #24]
   1ccc2:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
   1ccc4:	4b62      	ldr	r3, [pc, #392]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1ccc6:	681b      	ldr	r3, [r3, #0]
   1ccc8:	2b00      	cmp	r3, #0
   1ccca:	d0a1      	beq.n	1cc10 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   1cccc:	4b60      	ldr	r3, [pc, #384]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1ccce:	681b      	ldr	r3, [r3, #0]
   1ccd0:	aa05      	add	r2, sp, #20
   1ccd2:	2008      	movs	r0, #8
   1ccd4:	5610      	ldrsb	r0, [r2, r0]
   1ccd6:	aa09      	add	r2, sp, #36	; 0x24
   1ccd8:	2104      	movs	r1, #4
   1ccda:	4798      	blx	r3
   1ccdc:	e798      	b.n	1cc10 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   1ccde:	2300      	movs	r3, #0
   1cce0:	2204      	movs	r2, #4
   1cce2:	a909      	add	r1, sp, #36	; 0x24
   1cce4:	0020      	movs	r0, r4
   1cce6:	4c58      	ldr	r4, [pc, #352]	; (1ce48 <m2m_ip_cb+0x2f0>)
   1cce8:	47a0      	blx	r4
   1ccea:	2800      	cmp	r0, #0
   1ccec:	d000      	beq.n	1ccf0 <m2m_ip_cb+0x198>
   1ccee:	e78f      	b.n	1cc10 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
   1ccf0:	ab09      	add	r3, sp, #36	; 0x24
   1ccf2:	2000      	movs	r0, #0
   1ccf4:	5618      	ldrsb	r0, [r3, r0]
   1ccf6:	aa05      	add	r2, sp, #20
   1ccf8:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   1ccfa:	785b      	ldrb	r3, [r3, #1]
   1ccfc:	b25b      	sxtb	r3, r3
   1ccfe:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   1cd00:	2b00      	cmp	r3, #0
   1cd02:	d107      	bne.n	1cd14 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   1cd04:	ab09      	add	r3, sp, #36	; 0x24
   1cd06:	885b      	ldrh	r3, [r3, #2]
   1cd08:	3b08      	subs	r3, #8
   1cd0a:	b29b      	uxth	r3, r3
   1cd0c:	0101      	lsls	r1, r0, #4
   1cd0e:	4a51      	ldr	r2, [pc, #324]	; (1ce54 <m2m_ip_cb+0x2fc>)
   1cd10:	1852      	adds	r2, r2, r1
   1cd12:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
   1cd14:	4b4e      	ldr	r3, [pc, #312]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1cd16:	681b      	ldr	r3, [r3, #0]
   1cd18:	2b00      	cmp	r3, #0
   1cd1a:	d100      	bne.n	1cd1e <m2m_ip_cb+0x1c6>
   1cd1c:	e778      	b.n	1cc10 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   1cd1e:	4b4c      	ldr	r3, [pc, #304]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1cd20:	681b      	ldr	r3, [r3, #0]
   1cd22:	aa05      	add	r2, sp, #20
   1cd24:	2105      	movs	r1, #5
   1cd26:	4798      	blx	r3
	{
   1cd28:	e772      	b.n	1cc10 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   1cd2a:	2300      	movs	r3, #0
   1cd2c:	2244      	movs	r2, #68	; 0x44
   1cd2e:	a909      	add	r1, sp, #36	; 0x24
   1cd30:	0020      	movs	r0, r4
   1cd32:	4c45      	ldr	r4, [pc, #276]	; (1ce48 <m2m_ip_cb+0x2f0>)
   1cd34:	47a0      	blx	r4
   1cd36:	2800      	cmp	r0, #0
   1cd38:	d000      	beq.n	1cd3c <m2m_ip_cb+0x1e4>
   1cd3a:	e769      	b.n	1cc10 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
   1cd3c:	4b47      	ldr	r3, [pc, #284]	; (1ce5c <m2m_ip_cb+0x304>)
   1cd3e:	681b      	ldr	r3, [r3, #0]
   1cd40:	2b00      	cmp	r3, #0
   1cd42:	d100      	bne.n	1cd46 <m2m_ip_cb+0x1ee>
   1cd44:	e764      	b.n	1cc10 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   1cd46:	4b45      	ldr	r3, [pc, #276]	; (1ce5c <m2m_ip_cb+0x304>)
   1cd48:	681b      	ldr	r3, [r3, #0]
   1cd4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1cd4c:	9203      	str	r2, [sp, #12]
   1cd4e:	0011      	movs	r1, r2
   1cd50:	a809      	add	r0, sp, #36	; 0x24
   1cd52:	4798      	blx	r3
   1cd54:	e75c      	b.n	1cc10 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   1cd56:	2306      	movs	r3, #6
   1cd58:	469a      	mov	sl, r3
   1cd5a:	e001      	b.n	1cd60 <m2m_ip_cb+0x208>
   1cd5c:	2306      	movs	r3, #6
   1cd5e:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   1cd60:	2300      	movs	r3, #0
   1cd62:	2210      	movs	r2, #16
   1cd64:	a905      	add	r1, sp, #20
   1cd66:	0020      	movs	r0, r4
   1cd68:	4f37      	ldr	r7, [pc, #220]	; (1ce48 <m2m_ip_cb+0x2f0>)
   1cd6a:	47b8      	blx	r7
   1cd6c:	2800      	cmp	r0, #0
   1cd6e:	d000      	beq.n	1cd72 <m2m_ip_cb+0x21a>
   1cd70:	e74e      	b.n	1cc10 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
   1cd72:	aa05      	add	r2, sp, #20
   1cd74:	200c      	movs	r0, #12
   1cd76:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
   1cd78:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
   1cd7a:	0107      	lsls	r7, r0, #4
   1cd7c:	4935      	ldr	r1, [pc, #212]	; (1ce54 <m2m_ip_cb+0x2fc>)
   1cd7e:	19c9      	adds	r1, r1, r7
   1cd80:	2700      	movs	r7, #0
   1cd82:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   1cd84:	2608      	movs	r6, #8
   1cd86:	5f97      	ldrsh	r7, [r2, r6]
   1cd88:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   1cd8a:	8957      	ldrh	r7, [r2, #10]
   1cd8c:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   1cd8e:	af09      	add	r7, sp, #36	; 0x24
   1cd90:	8856      	ldrh	r6, [r2, #2]
   1cd92:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   1cd94:	9a06      	ldr	r2, [sp, #24]
   1cd96:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   1cd98:	88ca      	ldrh	r2, [r1, #6]
   1cd9a:	b292      	uxth	r2, r2
   1cd9c:	4293      	cmp	r3, r2
   1cd9e:	d00c      	beq.n	1cdba <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
   1cda0:	2d10      	cmp	r5, #16
   1cda2:	d800      	bhi.n	1cda6 <m2m_ip_cb+0x24e>
   1cda4:	e734      	b.n	1cc10 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   1cda6:	2301      	movs	r3, #1
   1cda8:	2200      	movs	r2, #0
   1cdaa:	2100      	movs	r1, #0
   1cdac:	2000      	movs	r0, #0
   1cdae:	4c26      	ldr	r4, [pc, #152]	; (1ce48 <m2m_ip_cb+0x2f0>)
   1cdb0:	47a0      	blx	r4
	{
   1cdb2:	e72d      	b.n	1cc10 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   1cdb4:	2309      	movs	r3, #9
   1cdb6:	469a      	mov	sl, r3
   1cdb8:	e7d2      	b.n	1cd60 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   1cdba:	4643      	mov	r3, r8
   1cdbc:	2b00      	cmp	r3, #0
   1cdbe:	dd01      	ble.n	1cdc4 <m2m_ip_cb+0x26c>
   1cdc0:	45a8      	cmp	r8, r5
   1cdc2:	db0f      	blt.n	1cde4 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   1cdc4:	ab09      	add	r3, sp, #36	; 0x24
   1cdc6:	4642      	mov	r2, r8
   1cdc8:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   1cdca:	2300      	movs	r3, #0
   1cdcc:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
   1cdce:	4b20      	ldr	r3, [pc, #128]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1cdd0:	681b      	ldr	r3, [r3, #0]
   1cdd2:	2b00      	cmp	r3, #0
   1cdd4:	d100      	bne.n	1cdd8 <m2m_ip_cb+0x280>
   1cdd6:	e71b      	b.n	1cc10 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   1cdd8:	4b1d      	ldr	r3, [pc, #116]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1cdda:	681b      	ldr	r3, [r3, #0]
   1cddc:	aa09      	add	r2, sp, #36	; 0x24
   1cdde:	4651      	mov	r1, sl
   1cde0:	4798      	blx	r3
   1cde2:	e715      	b.n	1cc10 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
   1cde4:	0023      	movs	r3, r4
   1cde6:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   1cde8:	4642      	mov	r2, r8
   1cdea:	4669      	mov	r1, sp
   1cdec:	818a      	strh	r2, [r1, #12]
   1cdee:	898a      	ldrh	r2, [r1, #12]
   1cdf0:	9200      	str	r2, [sp, #0]
   1cdf2:	4652      	mov	r2, sl
   1cdf4:	0039      	movs	r1, r7
   1cdf6:	4c1a      	ldr	r4, [pc, #104]	; (1ce60 <m2m_ip_cb+0x308>)
   1cdf8:	47a0      	blx	r4
   1cdfa:	e709      	b.n	1cc10 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   1cdfc:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   1cdfe:	2300      	movs	r3, #0
   1ce00:	2208      	movs	r2, #8
   1ce02:	a909      	add	r1, sp, #36	; 0x24
   1ce04:	0020      	movs	r0, r4
   1ce06:	4c10      	ldr	r4, [pc, #64]	; (1ce48 <m2m_ip_cb+0x2f0>)
   1ce08:	47a0      	blx	r4
   1ce0a:	2800      	cmp	r0, #0
   1ce0c:	d000      	beq.n	1ce10 <m2m_ip_cb+0x2b8>
   1ce0e:	e6ff      	b.n	1cc10 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
   1ce10:	ab09      	add	r3, sp, #36	; 0x24
   1ce12:	2000      	movs	r0, #0
   1ce14:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
   1ce16:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   1ce18:	8859      	ldrh	r1, [r3, #2]
   1ce1a:	ab05      	add	r3, sp, #20
   1ce1c:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   1ce1e:	0101      	lsls	r1, r0, #4
   1ce20:	4b0c      	ldr	r3, [pc, #48]	; (1ce54 <m2m_ip_cb+0x2fc>)
   1ce22:	185b      	adds	r3, r3, r1
   1ce24:	88db      	ldrh	r3, [r3, #6]
   1ce26:	b29b      	uxth	r3, r3
   1ce28:	429a      	cmp	r2, r3
   1ce2a:	d000      	beq.n	1ce2e <m2m_ip_cb+0x2d6>
   1ce2c:	e6f0      	b.n	1cc10 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
   1ce2e:	4b08      	ldr	r3, [pc, #32]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1ce30:	681b      	ldr	r3, [r3, #0]
   1ce32:	2b00      	cmp	r3, #0
   1ce34:	d100      	bne.n	1ce38 <m2m_ip_cb+0x2e0>
   1ce36:	e6eb      	b.n	1cc10 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   1ce38:	4b05      	ldr	r3, [pc, #20]	; (1ce50 <m2m_ip_cb+0x2f8>)
   1ce3a:	681b      	ldr	r3, [r3, #0]
   1ce3c:	aa05      	add	r2, sp, #20
   1ce3e:	0029      	movs	r1, r5
   1ce40:	4798      	blx	r3
	{
   1ce42:	e6e5      	b.n	1cc10 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   1ce44:	2508      	movs	r5, #8
   1ce46:	e7da      	b.n	1cdfe <m2m_ip_cb+0x2a6>
   1ce48:	0001abb9 	.word	0x0001abb9
   1ce4c:	20005504 	.word	0x20005504
   1ce50:	20005500 	.word	0x20005500
   1ce54:	20005450 	.word	0x20005450
   1ce58:	20003d82 	.word	0x20003d82
   1ce5c:	20005508 	.word	0x20005508
   1ce60:	0001ca49 	.word	0x0001ca49

0001ce64 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   1ce64:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
   1ce66:	4b0a      	ldr	r3, [pc, #40]	; (1ce90 <socketInit+0x2c>)
   1ce68:	781b      	ldrb	r3, [r3, #0]
   1ce6a:	2b00      	cmp	r3, #0
   1ce6c:	d000      	beq.n	1ce70 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
   1ce6e:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   1ce70:	22b0      	movs	r2, #176	; 0xb0
   1ce72:	2100      	movs	r1, #0
   1ce74:	4807      	ldr	r0, [pc, #28]	; (1ce94 <socketInit+0x30>)
   1ce76:	4b08      	ldr	r3, [pc, #32]	; (1ce98 <socketInit+0x34>)
   1ce78:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   1ce7a:	4908      	ldr	r1, [pc, #32]	; (1ce9c <socketInit+0x38>)
   1ce7c:	2002      	movs	r0, #2
   1ce7e:	4b08      	ldr	r3, [pc, #32]	; (1cea0 <socketInit+0x3c>)
   1ce80:	4798      	blx	r3
		gbSocketInit	= 1;
   1ce82:	2201      	movs	r2, #1
   1ce84:	4b02      	ldr	r3, [pc, #8]	; (1ce90 <socketInit+0x2c>)
   1ce86:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   1ce88:	2200      	movs	r2, #0
   1ce8a:	4b06      	ldr	r3, [pc, #24]	; (1cea4 <socketInit+0x40>)
   1ce8c:	801a      	strh	r2, [r3, #0]
}
   1ce8e:	e7ee      	b.n	1ce6e <socketInit+0xa>
   1ce90:	20003d81 	.word	0x20003d81
   1ce94:	20005450 	.word	0x20005450
   1ce98:	0001a4c9 	.word	0x0001a4c9
   1ce9c:	0001cb59 	.word	0x0001cb59
   1cea0:	0001ac91 	.word	0x0001ac91
   1cea4:	20003d82 	.word	0x20003d82

0001cea8 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   1cea8:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   1ceaa:	22b0      	movs	r2, #176	; 0xb0
   1ceac:	2100      	movs	r1, #0
   1ceae:	4807      	ldr	r0, [pc, #28]	; (1cecc <socketDeinit+0x24>)
   1ceb0:	4b07      	ldr	r3, [pc, #28]	; (1ced0 <socketDeinit+0x28>)
   1ceb2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   1ceb4:	2100      	movs	r1, #0
   1ceb6:	2002      	movs	r0, #2
   1ceb8:	4b06      	ldr	r3, [pc, #24]	; (1ced4 <socketDeinit+0x2c>)
   1ceba:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   1cebc:	2300      	movs	r3, #0
   1cebe:	4a06      	ldr	r2, [pc, #24]	; (1ced8 <socketDeinit+0x30>)
   1cec0:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
   1cec2:	4a06      	ldr	r2, [pc, #24]	; (1cedc <socketDeinit+0x34>)
   1cec4:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
   1cec6:	4a06      	ldr	r2, [pc, #24]	; (1cee0 <socketDeinit+0x38>)
   1cec8:	7013      	strb	r3, [r2, #0]
}
   1ceca:	bd10      	pop	{r4, pc}
   1cecc:	20005450 	.word	0x20005450
   1ced0:	0001a4c9 	.word	0x0001a4c9
   1ced4:	0001ac91 	.word	0x0001ac91
   1ced8:	20005500 	.word	0x20005500
   1cedc:	20005508 	.word	0x20005508
   1cee0:	20003d81 	.word	0x20003d81

0001cee4 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
   1cee4:	4b02      	ldr	r3, [pc, #8]	; (1cef0 <registerSocketCallback+0xc>)
   1cee6:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   1cee8:	4b02      	ldr	r3, [pc, #8]	; (1cef4 <registerSocketCallback+0x10>)
   1ceea:	6019      	str	r1, [r3, #0]
}
   1ceec:	4770      	bx	lr
   1ceee:	46c0      	nop			; (mov r8, r8)
   1cef0:	20005500 	.word	0x20005500
   1cef4:	20005508 	.word	0x20005508

0001cef8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   1cef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cefa:	46d6      	mov	lr, sl
   1cefc:	4647      	mov	r7, r8
   1cefe:	b580      	push	{r7, lr}
   1cf00:	b089      	sub	sp, #36	; 0x24
   1cf02:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   1cf04:	2802      	cmp	r0, #2
   1cf06:	d000      	beq.n	1cf0a <socket+0x12>
   1cf08:	e09b      	b.n	1d042 <socket+0x14a>
	{
		if(u8Type == SOCK_STREAM)
   1cf0a:	2901      	cmp	r1, #1
   1cf0c:	d00a      	beq.n	1cf24 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   1cf0e:	2902      	cmp	r1, #2
   1cf10:	d100      	bne.n	1cf14 <socket+0x1c>
   1cf12:	e06f      	b.n	1cff4 <socket+0xfc>
	SOCKET					sock = -1;
   1cf14:	2501      	movs	r5, #1
   1cf16:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
   1cf18:	0028      	movs	r0, r5
   1cf1a:	b009      	add	sp, #36	; 0x24
   1cf1c:	bc0c      	pop	{r2, r3}
   1cf1e:	4690      	mov	r8, r2
   1cf20:	469a      	mov	sl, r3
   1cf22:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
   1cf24:	4c48      	ldr	r4, [pc, #288]	; (1d048 <socket+0x150>)
   1cf26:	7827      	ldrb	r7, [r4, #0]
   1cf28:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1cf2a:	7826      	ldrb	r6, [r4, #0]
   1cf2c:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1cf2e:	7820      	ldrb	r0, [r4, #0]
   1cf30:	3001      	adds	r0, #1
   1cf32:	3106      	adds	r1, #6
   1cf34:	4b45      	ldr	r3, [pc, #276]	; (1d04c <socket+0x154>)
   1cf36:	4798      	blx	r3
   1cf38:	b2c9      	uxtb	r1, r1
   1cf3a:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
   1cf3c:	0132      	lsls	r2, r6, #4
   1cf3e:	4b44      	ldr	r3, [pc, #272]	; (1d050 <socket+0x158>)
   1cf40:	189b      	adds	r3, r3, r2
   1cf42:	7a9b      	ldrb	r3, [r3, #10]
   1cf44:	2506      	movs	r5, #6
   1cf46:	2b00      	cmp	r3, #0
   1cf48:	d018      	beq.n	1cf7c <socket+0x84>
				u8SockID	= u8NextTcpSock;
   1cf4a:	4e3f      	ldr	r6, [pc, #252]	; (1d048 <socket+0x150>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1cf4c:	4b3f      	ldr	r3, [pc, #252]	; (1d04c <socket+0x154>)
   1cf4e:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
   1cf50:	4b3f      	ldr	r3, [pc, #252]	; (1d050 <socket+0x158>)
   1cf52:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
   1cf54:	7837      	ldrb	r7, [r6, #0]
   1cf56:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1cf58:	7834      	ldrb	r4, [r6, #0]
   1cf5a:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1cf5c:	7830      	ldrb	r0, [r6, #0]
   1cf5e:	3001      	adds	r0, #1
   1cf60:	2107      	movs	r1, #7
   1cf62:	47d0      	blx	sl
   1cf64:	b2c9      	uxtb	r1, r1
   1cf66:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
   1cf68:	0123      	lsls	r3, r4, #4
   1cf6a:	4443      	add	r3, r8
   1cf6c:	7a9b      	ldrb	r3, [r3, #10]
   1cf6e:	2b00      	cmp	r3, #0
   1cf70:	d007      	beq.n	1cf82 <socket+0x8a>
   1cf72:	3d01      	subs	r5, #1
   1cf74:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   1cf76:	2d00      	cmp	r5, #0
   1cf78:	d1ec      	bne.n	1cf54 <socket+0x5c>
   1cf7a:	e7cb      	b.n	1cf14 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1cf7c:	4b34      	ldr	r3, [pc, #208]	; (1d050 <socket+0x158>)
   1cf7e:	18d4      	adds	r4, r2, r3
   1cf80:	e002      	b.n	1cf88 <socket+0x90>
   1cf82:	0124      	lsls	r4, r4, #4
   1cf84:	4b32      	ldr	r3, [pc, #200]	; (1d050 <socket+0x158>)
   1cf86:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
   1cf88:	b27d      	sxtb	r5, r7
		if(sock >= 0)
   1cf8a:	2d00      	cmp	r5, #0
   1cf8c:	dbc4      	blt.n	1cf18 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   1cf8e:	2210      	movs	r2, #16
   1cf90:	2100      	movs	r1, #0
   1cf92:	0020      	movs	r0, r4
   1cf94:	4b2f      	ldr	r3, [pc, #188]	; (1d054 <socket+0x15c>)
   1cf96:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   1cf98:	2301      	movs	r3, #1
   1cf9a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
   1cf9c:	4a2e      	ldr	r2, [pc, #184]	; (1d058 <socket+0x160>)
   1cf9e:	8813      	ldrh	r3, [r2, #0]
   1cfa0:	3301      	adds	r3, #1
   1cfa2:	b29b      	uxth	r3, r3
   1cfa4:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
   1cfa6:	8813      	ldrh	r3, [r2, #0]
   1cfa8:	b29b      	uxth	r3, r3
   1cfaa:	2b00      	cmp	r3, #0
   1cfac:	d103      	bne.n	1cfb6 <socket+0xbe>
				++gu16SessionID;
   1cfae:	8813      	ldrh	r3, [r2, #0]
   1cfb0:	3301      	adds	r3, #1
   1cfb2:	b29b      	uxth	r3, r3
   1cfb4:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
   1cfb6:	4e28      	ldr	r6, [pc, #160]	; (1d058 <socket+0x160>)
   1cfb8:	8833      	ldrh	r3, [r6, #0]
   1cfba:	b29b      	uxth	r3, r3
   1cfbc:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   1cfbe:	4827      	ldr	r0, [pc, #156]	; (1d05c <socket+0x164>)
   1cfc0:	4f27      	ldr	r7, [pc, #156]	; (1d060 <socket+0x168>)
   1cfc2:	47b8      	blx	r7
   1cfc4:	8832      	ldrh	r2, [r6, #0]
   1cfc6:	b292      	uxth	r2, r2
   1cfc8:	0029      	movs	r1, r5
   1cfca:	4826      	ldr	r0, [pc, #152]	; (1d064 <socket+0x16c>)
   1cfcc:	47b8      	blx	r7
   1cfce:	4826      	ldr	r0, [pc, #152]	; (1d068 <socket+0x170>)
   1cfd0:	47b8      	blx	r7
			if(u8Flags & SOCKET_FLAGS_SSL)
   1cfd2:	9b05      	ldr	r3, [sp, #20]
   1cfd4:	07db      	lsls	r3, r3, #31
   1cfd6:	d59f      	bpl.n	1cf18 <socket+0x20>
				strSSLCreate.sslSock = sock;
   1cfd8:	aa07      	add	r2, sp, #28
   1cfda:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   1cfdc:	2321      	movs	r3, #33	; 0x21
   1cfde:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   1cfe0:	2300      	movs	r3, #0
   1cfe2:	9302      	str	r3, [sp, #8]
   1cfe4:	9301      	str	r3, [sp, #4]
   1cfe6:	9300      	str	r3, [sp, #0]
   1cfe8:	3304      	adds	r3, #4
   1cfea:	2150      	movs	r1, #80	; 0x50
   1cfec:	2002      	movs	r0, #2
   1cfee:	4c1f      	ldr	r4, [pc, #124]	; (1d06c <socket+0x174>)
   1cff0:	47a0      	blx	r4
   1cff2:	e791      	b.n	1cf18 <socket+0x20>
				u8SockID		= u8NextUdpSock;
   1cff4:	4b1e      	ldr	r3, [pc, #120]	; (1d070 <socket+0x178>)
   1cff6:	781d      	ldrb	r5, [r3, #0]
   1cff8:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1cffa:	781c      	ldrb	r4, [r3, #0]
   1cffc:	0124      	lsls	r4, r4, #4
   1cffe:	4a1d      	ldr	r2, [pc, #116]	; (1d074 <socket+0x17c>)
   1d000:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d002:	7819      	ldrb	r1, [r3, #0]
   1d004:	3101      	adds	r1, #1
   1d006:	2203      	movs	r2, #3
   1d008:	400a      	ands	r2, r1
   1d00a:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   1d00c:	7aa3      	ldrb	r3, [r4, #10]
   1d00e:	2b00      	cmp	r3, #0
   1d010:	d014      	beq.n	1d03c <socket+0x144>
   1d012:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
   1d014:	4916      	ldr	r1, [pc, #88]	; (1d070 <socket+0x178>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d016:	4f17      	ldr	r7, [pc, #92]	; (1d074 <socket+0x17c>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d018:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
   1d01a:	780d      	ldrb	r5, [r1, #0]
   1d01c:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   1d01e:	780c      	ldrb	r4, [r1, #0]
   1d020:	0124      	lsls	r4, r4, #4
   1d022:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   1d024:	780b      	ldrb	r3, [r1, #0]
   1d026:	3301      	adds	r3, #1
   1d028:	4003      	ands	r3, r0
   1d02a:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
   1d02c:	7aa3      	ldrb	r3, [r4, #10]
   1d02e:	2b00      	cmp	r3, #0
   1d030:	d004      	beq.n	1d03c <socket+0x144>
   1d032:	3a01      	subs	r2, #1
   1d034:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   1d036:	2a00      	cmp	r2, #0
   1d038:	d1ef      	bne.n	1d01a <socket+0x122>
   1d03a:	e76b      	b.n	1cf14 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   1d03c:	3507      	adds	r5, #7
   1d03e:	b26d      	sxtb	r5, r5
					break;
   1d040:	e7a3      	b.n	1cf8a <socket+0x92>
	SOCKET					sock = -1;
   1d042:	2501      	movs	r5, #1
   1d044:	426d      	negs	r5, r5
   1d046:	e767      	b.n	1cf18 <socket+0x20>
   1d048:	20003d84 	.word	0x20003d84
   1d04c:	000242c1 	.word	0x000242c1
   1d050:	20005450 	.word	0x20005450
   1d054:	0001a4c9 	.word	0x0001a4c9
   1d058:	20003d82 	.word	0x20003d82
   1d05c:	000296f8 	.word	0x000296f8
   1d060:	00018f7d 	.word	0x00018f7d
   1d064:	0002a1c4 	.word	0x0002a1c4
   1d068:	000293e4 	.word	0x000293e4
   1d06c:	0001a5dd 	.word	0x0001a5dd
   1d070:	20003d85 	.word	0x20003d85
   1d074:	200054c0 	.word	0x200054c0

0001d078 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   1d078:	b570      	push	{r4, r5, r6, lr}
   1d07a:	b088      	sub	sp, #32
   1d07c:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   1d07e:	db30      	blt.n	1d0e2 <connect+0x6a>
   1d080:	2900      	cmp	r1, #0
   1d082:	d031      	beq.n	1d0e8 <connect+0x70>
   1d084:	0100      	lsls	r0, r0, #4
   1d086:	4b1d      	ldr	r3, [pc, #116]	; (1d0fc <connect+0x84>)
   1d088:	181b      	adds	r3, r3, r0
   1d08a:	7a9b      	ldrb	r3, [r3, #10]
   1d08c:	2b01      	cmp	r3, #1
   1d08e:	d12e      	bne.n	1d0ee <connect+0x76>
   1d090:	2a00      	cmp	r2, #0
   1d092:	d02f      	beq.n	1d0f4 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   1d094:	4b19      	ldr	r3, [pc, #100]	; (1d0fc <connect+0x84>)
   1d096:	181b      	adds	r3, r3, r0
   1d098:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   1d09a:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   1d09c:	07db      	lsls	r3, r3, #31
   1d09e:	d505      	bpl.n	1d0ac <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   1d0a0:	4b16      	ldr	r3, [pc, #88]	; (1d0fc <connect+0x84>)
   1d0a2:	181b      	adds	r3, r3, r0
   1d0a4:	7ada      	ldrb	r2, [r3, #11]
   1d0a6:	ab05      	add	r3, sp, #20
   1d0a8:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   1d0aa:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
   1d0ac:	ad05      	add	r5, sp, #20
   1d0ae:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   1d0b0:	2208      	movs	r2, #8
   1d0b2:	0028      	movs	r0, r5
   1d0b4:	4b12      	ldr	r3, [pc, #72]	; (1d100 <connect+0x88>)
   1d0b6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d0b8:	0124      	lsls	r4, r4, #4
   1d0ba:	4b10      	ldr	r3, [pc, #64]	; (1d0fc <connect+0x84>)
   1d0bc:	191c      	adds	r4, r3, r4
   1d0be:	88e3      	ldrh	r3, [r4, #6]
   1d0c0:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   1d0c2:	2300      	movs	r3, #0
   1d0c4:	9302      	str	r3, [sp, #8]
   1d0c6:	9301      	str	r3, [sp, #4]
   1d0c8:	9300      	str	r3, [sp, #0]
   1d0ca:	330c      	adds	r3, #12
   1d0cc:	002a      	movs	r2, r5
   1d0ce:	0031      	movs	r1, r6
   1d0d0:	2002      	movs	r0, #2
   1d0d2:	4c0c      	ldr	r4, [pc, #48]	; (1d104 <connect+0x8c>)
   1d0d4:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
   1d0d6:	2800      	cmp	r0, #0
   1d0d8:	d001      	beq.n	1d0de <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
   1d0da:	2009      	movs	r0, #9
   1d0dc:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
   1d0de:	b008      	add	sp, #32
   1d0e0:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   1d0e2:	2006      	movs	r0, #6
   1d0e4:	4240      	negs	r0, r0
   1d0e6:	e7fa      	b.n	1d0de <connect+0x66>
   1d0e8:	2006      	movs	r0, #6
   1d0ea:	4240      	negs	r0, r0
   1d0ec:	e7f7      	b.n	1d0de <connect+0x66>
   1d0ee:	2006      	movs	r0, #6
   1d0f0:	4240      	negs	r0, r0
   1d0f2:	e7f4      	b.n	1d0de <connect+0x66>
   1d0f4:	2006      	movs	r0, #6
   1d0f6:	4240      	negs	r0, r0
   1d0f8:	e7f1      	b.n	1d0de <connect+0x66>
   1d0fa:	46c0      	nop			; (mov r8, r8)
   1d0fc:	20005450 	.word	0x20005450
   1d100:	0001a4b5 	.word	0x0001a4b5
   1d104:	0001a5dd 	.word	0x0001a5dd

0001d108 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   1d108:	b530      	push	{r4, r5, lr}
   1d10a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   1d10c:	2800      	cmp	r0, #0
   1d10e:	db36      	blt.n	1d17e <send+0x76>
   1d110:	2900      	cmp	r1, #0
   1d112:	d037      	beq.n	1d184 <send+0x7c>
   1d114:	23af      	movs	r3, #175	; 0xaf
   1d116:	00db      	lsls	r3, r3, #3
   1d118:	429a      	cmp	r2, r3
   1d11a:	d836      	bhi.n	1d18a <send+0x82>
   1d11c:	0104      	lsls	r4, r0, #4
   1d11e:	4b1e      	ldr	r3, [pc, #120]	; (1d198 <send+0x90>)
   1d120:	191b      	adds	r3, r3, r4
   1d122:	7a9b      	ldrb	r3, [r3, #10]
   1d124:	2b01      	cmp	r3, #1
   1d126:	d133      	bne.n	1d190 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
   1d128:	ab04      	add	r3, sp, #16
   1d12a:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   1d12c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   1d12e:	0025      	movs	r5, r4
   1d130:	4c19      	ldr	r4, [pc, #100]	; (1d198 <send+0x90>)
   1d132:	1964      	adds	r4, r4, r5
   1d134:	88e4      	ldrh	r4, [r4, #6]
   1d136:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   1d138:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
   1d13a:	2806      	cmp	r0, #6
   1d13c:	dd00      	ble.n	1d140 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   1d13e:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d140:	0104      	lsls	r4, r0, #4
   1d142:	4b15      	ldr	r3, [pc, #84]	; (1d198 <send+0x90>)
   1d144:	191b      	adds	r3, r3, r4
   1d146:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
   1d148:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d14a:	07e4      	lsls	r4, r4, #31
   1d14c:	d505      	bpl.n	1d15a <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   1d14e:	0100      	lsls	r0, r0, #4
   1d150:	4b11      	ldr	r3, [pc, #68]	; (1d198 <send+0x90>)
   1d152:	1818      	adds	r0, r3, r0
   1d154:	8905      	ldrh	r5, [r0, #8]
   1d156:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   1d158:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   1d15a:	2080      	movs	r0, #128	; 0x80
   1d15c:	4318      	orrs	r0, r3
   1d15e:	9502      	str	r5, [sp, #8]
   1d160:	9201      	str	r2, [sp, #4]
   1d162:	9100      	str	r1, [sp, #0]
   1d164:	2310      	movs	r3, #16
   1d166:	aa04      	add	r2, sp, #16
   1d168:	0001      	movs	r1, r0
   1d16a:	2002      	movs	r0, #2
   1d16c:	4c0b      	ldr	r4, [pc, #44]	; (1d19c <send+0x94>)
   1d16e:	47a0      	blx	r4
   1d170:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
   1d172:	2800      	cmp	r0, #0
   1d174:	d000      	beq.n	1d178 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   1d176:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
   1d178:	0018      	movs	r0, r3
   1d17a:	b009      	add	sp, #36	; 0x24
   1d17c:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   1d17e:	2306      	movs	r3, #6
   1d180:	425b      	negs	r3, r3
   1d182:	e7f9      	b.n	1d178 <send+0x70>
   1d184:	2306      	movs	r3, #6
   1d186:	425b      	negs	r3, r3
   1d188:	e7f6      	b.n	1d178 <send+0x70>
   1d18a:	2306      	movs	r3, #6
   1d18c:	425b      	negs	r3, r3
   1d18e:	e7f3      	b.n	1d178 <send+0x70>
   1d190:	2306      	movs	r3, #6
   1d192:	425b      	negs	r3, r3
   1d194:	e7f0      	b.n	1d178 <send+0x70>
   1d196:	46c0      	nop			; (mov r8, r8)
   1d198:	20005450 	.word	0x20005450
   1d19c:	0001a5dd 	.word	0x0001a5dd

0001d1a0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   1d1a0:	b530      	push	{r4, r5, lr}
   1d1a2:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   1d1a4:	2800      	cmp	r0, #0
   1d1a6:	db34      	blt.n	1d212 <recv+0x72>
   1d1a8:	2900      	cmp	r1, #0
   1d1aa:	d035      	beq.n	1d218 <recv+0x78>
   1d1ac:	2a00      	cmp	r2, #0
   1d1ae:	d036      	beq.n	1d21e <recv+0x7e>
   1d1b0:	0105      	lsls	r5, r0, #4
   1d1b2:	4c1e      	ldr	r4, [pc, #120]	; (1d22c <recv+0x8c>)
   1d1b4:	1964      	adds	r4, r4, r5
   1d1b6:	7aa4      	ldrb	r4, [r4, #10]
   1d1b8:	2c01      	cmp	r4, #1
   1d1ba:	d133      	bne.n	1d224 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   1d1bc:	4c1b      	ldr	r4, [pc, #108]	; (1d22c <recv+0x8c>)
   1d1be:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   1d1c0:	1964      	adds	r4, r4, r5
   1d1c2:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
   1d1c4:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
   1d1c6:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
   1d1c8:	2900      	cmp	r1, #0
   1d1ca:	d11d      	bne.n	1d208 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
   1d1cc:	2101      	movs	r1, #1
   1d1ce:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d1d0:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
   1d1d2:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d1d4:	07d2      	lsls	r2, r2, #31
   1d1d6:	d500      	bpl.n	1d1da <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   1d1d8:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   1d1da:	2b00      	cmp	r3, #0
   1d1dc:	d117      	bne.n	1d20e <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   1d1de:	3b01      	subs	r3, #1
   1d1e0:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
   1d1e2:	aa04      	add	r2, sp, #16
   1d1e4:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d1e6:	0100      	lsls	r0, r0, #4
   1d1e8:	4b10      	ldr	r3, [pc, #64]	; (1d22c <recv+0x8c>)
   1d1ea:	1818      	adds	r0, r3, r0
   1d1ec:	88c3      	ldrh	r3, [r0, #6]
   1d1ee:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   1d1f0:	2300      	movs	r3, #0
   1d1f2:	9302      	str	r3, [sp, #8]
   1d1f4:	9301      	str	r3, [sp, #4]
   1d1f6:	9300      	str	r3, [sp, #0]
   1d1f8:	3308      	adds	r3, #8
   1d1fa:	2002      	movs	r0, #2
   1d1fc:	4c0c      	ldr	r4, [pc, #48]	; (1d230 <recv+0x90>)
   1d1fe:	47a0      	blx	r4
   1d200:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
   1d202:	2800      	cmp	r0, #0
   1d204:	d000      	beq.n	1d208 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   1d206:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
   1d208:	0010      	movs	r0, r2
   1d20a:	b007      	add	sp, #28
   1d20c:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   1d20e:	9304      	str	r3, [sp, #16]
   1d210:	e7e7      	b.n	1d1e2 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   1d212:	2206      	movs	r2, #6
   1d214:	4252      	negs	r2, r2
   1d216:	e7f7      	b.n	1d208 <recv+0x68>
   1d218:	2206      	movs	r2, #6
   1d21a:	4252      	negs	r2, r2
   1d21c:	e7f4      	b.n	1d208 <recv+0x68>
   1d21e:	2206      	movs	r2, #6
   1d220:	4252      	negs	r2, r2
   1d222:	e7f1      	b.n	1d208 <recv+0x68>
   1d224:	2206      	movs	r2, #6
   1d226:	4252      	negs	r2, r2
   1d228:	e7ee      	b.n	1d208 <recv+0x68>
   1d22a:	46c0      	nop			; (mov r8, r8)
   1d22c:	20005450 	.word	0x20005450
   1d230:	0001a5dd 	.word	0x0001a5dd

0001d234 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   1d234:	b530      	push	{r4, r5, lr}
   1d236:	b087      	sub	sp, #28
   1d238:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
   1d23a:	481d      	ldr	r0, [pc, #116]	; (1d2b0 <close+0x7c>)
   1d23c:	4d1d      	ldr	r5, [pc, #116]	; (1d2b4 <close+0x80>)
   1d23e:	47a8      	blx	r5
   1d240:	0021      	movs	r1, r4
   1d242:	481d      	ldr	r0, [pc, #116]	; (1d2b8 <close+0x84>)
   1d244:	47a8      	blx	r5
   1d246:	481d      	ldr	r0, [pc, #116]	; (1d2bc <close+0x88>)
   1d248:	47a8      	blx	r5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   1d24a:	2c00      	cmp	r4, #0
   1d24c:	db2a      	blt.n	1d2a4 <close+0x70>
   1d24e:	0122      	lsls	r2, r4, #4
   1d250:	4b1b      	ldr	r3, [pc, #108]	; (1d2c0 <close+0x8c>)
   1d252:	189b      	adds	r3, r3, r2
   1d254:	7a9b      	ldrb	r3, [r3, #10]
   1d256:	2b01      	cmp	r3, #1
   1d258:	d127      	bne.n	1d2aa <close+0x76>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   1d25a:	a905      	add	r1, sp, #20
   1d25c:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   1d25e:	4b18      	ldr	r3, [pc, #96]	; (1d2c0 <close+0x8c>)
   1d260:	189b      	adds	r3, r3, r2
   1d262:	88da      	ldrh	r2, [r3, #6]
   1d264:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   1d266:	2200      	movs	r2, #0
   1d268:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
   1d26a:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d26c:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   1d26e:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   1d270:	07db      	lsls	r3, r3, #31
   1d272:	d500      	bpl.n	1d276 <close+0x42>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   1d274:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   1d276:	2300      	movs	r3, #0
   1d278:	9302      	str	r3, [sp, #8]
   1d27a:	9301      	str	r3, [sp, #4]
   1d27c:	9300      	str	r3, [sp, #0]
   1d27e:	3304      	adds	r3, #4
   1d280:	aa05      	add	r2, sp, #20
   1d282:	2002      	movs	r0, #2
   1d284:	4d0f      	ldr	r5, [pc, #60]	; (1d2c4 <close+0x90>)
   1d286:	47a8      	blx	r5
   1d288:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
   1d28a:	d001      	beq.n	1d290 <close+0x5c>
		{
			s8Ret = SOCK_ERR_INVALID;
   1d28c:	2509      	movs	r5, #9
   1d28e:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   1d290:	0124      	lsls	r4, r4, #4
   1d292:	480b      	ldr	r0, [pc, #44]	; (1d2c0 <close+0x8c>)
   1d294:	1820      	adds	r0, r4, r0
   1d296:	2210      	movs	r2, #16
   1d298:	2100      	movs	r1, #0
   1d29a:	4b0b      	ldr	r3, [pc, #44]	; (1d2c8 <close+0x94>)
   1d29c:	4798      	blx	r3
	}
	return s8Ret;
}
   1d29e:	0028      	movs	r0, r5
   1d2a0:	b007      	add	sp, #28
   1d2a2:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   1d2a4:	2506      	movs	r5, #6
   1d2a6:	426d      	negs	r5, r5
   1d2a8:	e7f9      	b.n	1d29e <close+0x6a>
   1d2aa:	2506      	movs	r5, #6
   1d2ac:	426d      	negs	r5, r5
   1d2ae:	e7f6      	b.n	1d29e <close+0x6a>
   1d2b0:	000296f8 	.word	0x000296f8
   1d2b4:	00018f7d 	.word	0x00018f7d
   1d2b8:	0002a1ac 	.word	0x0002a1ac
   1d2bc:	000293e4 	.word	0x000293e4
   1d2c0:	20005450 	.word	0x20005450
   1d2c4:	0001a5dd 	.word	0x0001a5dd
   1d2c8:	0001a4c9 	.word	0x0001a4c9

0001d2cc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   1d2cc:	b570      	push	{r4, r5, r6, lr}
   1d2ce:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
   1d2d0:	2300      	movs	r3, #0
   1d2d2:	9301      	str	r3, [sp, #4]
   1d2d4:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
   1d2d6:	2100      	movs	r1, #0
   1d2d8:	7802      	ldrb	r2, [r0, #0]
   1d2da:	1c44      	adds	r4, r0, #1
   1d2dc:	3005      	adds	r0, #5
   1d2de:	000b      	movs	r3, r1
   1d2e0:	e009      	b.n	1d2f6 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
   1d2e2:	009d      	lsls	r5, r3, #2
   1d2e4:	195b      	adds	r3, r3, r5
   1d2e6:	005b      	lsls	r3, r3, #1
   1d2e8:	189b      	adds	r3, r3, r2
   1d2ea:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
   1d2ec:	0022      	movs	r2, r4
   1d2ee:	3401      	adds	r4, #1
			if(j > 4)
   1d2f0:	42a0      	cmp	r0, r4
   1d2f2:	d00a      	beq.n	1d30a <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
   1d2f4:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
   1d2f6:	2a2e      	cmp	r2, #46	; 0x2e
   1d2f8:	d00a      	beq.n	1d310 <nmi_inet_addr+0x44>
   1d2fa:	2a00      	cmp	r2, #0
   1d2fc:	d00c      	beq.n	1d318 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
   1d2fe:	3a30      	subs	r2, #48	; 0x30
   1d300:	b2d2      	uxtb	r2, r2
   1d302:	2a09      	cmp	r2, #9
   1d304:	d9ed      	bls.n	1d2e2 <nmi_inet_addr+0x16>
				return 0;
   1d306:	2000      	movs	r0, #0
   1d308:	e000      	b.n	1d30c <nmi_inet_addr+0x40>
				return 0;
   1d30a:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
   1d30c:	b002      	add	sp, #8
   1d30e:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
   1d310:	466a      	mov	r2, sp
   1d312:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
   1d314:	0020      	movs	r0, r4
   1d316:	e002      	b.n	1d31e <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
   1d318:	466a      	mov	r2, sp
   1d31a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
   1d31c:	0020      	movs	r0, r4
   1d31e:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
   1d320:	2e04      	cmp	r6, #4
   1d322:	d1d9      	bne.n	1d2d8 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   1d324:	2204      	movs	r2, #4
   1d326:	4669      	mov	r1, sp
   1d328:	a801      	add	r0, sp, #4
   1d32a:	4b02      	ldr	r3, [pc, #8]	; (1d334 <nmi_inet_addr+0x68>)
   1d32c:	4798      	blx	r3
	return u32IP;
   1d32e:	9801      	ldr	r0, [sp, #4]
   1d330:	e7ec      	b.n	1d30c <nmi_inet_addr+0x40>
   1d332:	46c0      	nop			; (mov r8, r8)
   1d334:	0001a4b5 	.word	0x0001a4b5

0001d338 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   1d338:	b510      	push	{r4, lr}
   1d33a:	b084      	sub	sp, #16
   1d33c:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   1d33e:	4b0b      	ldr	r3, [pc, #44]	; (1d36c <gethostbyname+0x34>)
   1d340:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   1d342:	b2c3      	uxtb	r3, r0
   1d344:	2b40      	cmp	r3, #64	; 0x40
   1d346:	d80d      	bhi.n	1d364 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   1d348:	23ff      	movs	r3, #255	; 0xff
   1d34a:	4003      	ands	r3, r0
   1d34c:	3301      	adds	r3, #1
   1d34e:	2200      	movs	r2, #0
   1d350:	9202      	str	r2, [sp, #8]
   1d352:	9201      	str	r2, [sp, #4]
   1d354:	9200      	str	r2, [sp, #0]
   1d356:	0022      	movs	r2, r4
   1d358:	214a      	movs	r1, #74	; 0x4a
   1d35a:	2002      	movs	r0, #2
   1d35c:	4c04      	ldr	r4, [pc, #16]	; (1d370 <gethostbyname+0x38>)
   1d35e:	47a0      	blx	r4
	}
	return s8Err;
}
   1d360:	b004      	add	sp, #16
   1d362:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   1d364:	2006      	movs	r0, #6
   1d366:	4240      	negs	r0, r0
   1d368:	e7fa      	b.n	1d360 <gethostbyname+0x28>
   1d36a:	46c0      	nop			; (mov r8, r8)
   1d36c:	0001a4d9 	.word	0x0001a4d9
   1d370:	0001a5dd 	.word	0x0001a5dd

0001d374 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   1d374:	b570      	push	{r4, r5, r6, lr}
   1d376:	b082      	sub	sp, #8
   1d378:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   1d37a:	4b2a      	ldr	r3, [pc, #168]	; (1d424 <spi_flash_enable+0xb0>)
   1d37c:	4798      	blx	r3
   1d37e:	0500      	lsls	r0, r0, #20
   1d380:	0d00      	lsrs	r0, r0, #20
   1d382:	4b29      	ldr	r3, [pc, #164]	; (1d428 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
   1d384:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   1d386:	4298      	cmp	r0, r3
   1d388:	d802      	bhi.n	1d390 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
   1d38a:	0028      	movs	r0, r5
   1d38c:	b002      	add	sp, #8
   1d38e:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   1d390:	a901      	add	r1, sp, #4
   1d392:	4826      	ldr	r0, [pc, #152]	; (1d42c <spi_flash_enable+0xb8>)
   1d394:	4b26      	ldr	r3, [pc, #152]	; (1d430 <spi_flash_enable+0xbc>)
   1d396:	4798      	blx	r3
   1d398:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
   1d39a:	d1f6      	bne.n	1d38a <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
   1d39c:	4b25      	ldr	r3, [pc, #148]	; (1d434 <spi_flash_enable+0xc0>)
   1d39e:	9a01      	ldr	r2, [sp, #4]
   1d3a0:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
   1d3a2:	4925      	ldr	r1, [pc, #148]	; (1d438 <spi_flash_enable+0xc4>)
   1d3a4:	4319      	orrs	r1, r3
   1d3a6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
   1d3a8:	4820      	ldr	r0, [pc, #128]	; (1d42c <spi_flash_enable+0xb8>)
   1d3aa:	4b24      	ldr	r3, [pc, #144]	; (1d43c <spi_flash_enable+0xc8>)
   1d3ac:	4798      	blx	r3
		if(enable) {
   1d3ae:	2c00      	cmp	r4, #0
   1d3b0:	d020      	beq.n	1d3f4 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   1d3b2:	2100      	movs	r1, #0
   1d3b4:	4822      	ldr	r0, [pc, #136]	; (1d440 <spi_flash_enable+0xcc>)
   1d3b6:	4c21      	ldr	r4, [pc, #132]	; (1d43c <spi_flash_enable+0xc8>)
   1d3b8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1d3ba:	21ab      	movs	r1, #171	; 0xab
   1d3bc:	4821      	ldr	r0, [pc, #132]	; (1d444 <spi_flash_enable+0xd0>)
   1d3be:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1d3c0:	2101      	movs	r1, #1
   1d3c2:	4821      	ldr	r0, [pc, #132]	; (1d448 <spi_flash_enable+0xd4>)
   1d3c4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   1d3c6:	2100      	movs	r1, #0
   1d3c8:	4820      	ldr	r0, [pc, #128]	; (1d44c <spi_flash_enable+0xd8>)
   1d3ca:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   1d3cc:	2181      	movs	r1, #129	; 0x81
   1d3ce:	4820      	ldr	r0, [pc, #128]	; (1d450 <spi_flash_enable+0xdc>)
   1d3d0:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1d3d2:	4e20      	ldr	r6, [pc, #128]	; (1d454 <spi_flash_enable+0xe0>)
   1d3d4:	4c20      	ldr	r4, [pc, #128]	; (1d458 <spi_flash_enable+0xe4>)
   1d3d6:	0030      	movs	r0, r6
   1d3d8:	47a0      	blx	r4
   1d3da:	2801      	cmp	r0, #1
   1d3dc:	d1fb      	bne.n	1d3d6 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
   1d3de:	4b15      	ldr	r3, [pc, #84]	; (1d434 <spi_flash_enable+0xc0>)
   1d3e0:	9a01      	ldr	r2, [sp, #4]
   1d3e2:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
   1d3e4:	2180      	movs	r1, #128	; 0x80
   1d3e6:	0249      	lsls	r1, r1, #9
   1d3e8:	4319      	orrs	r1, r3
   1d3ea:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
   1d3ec:	480f      	ldr	r0, [pc, #60]	; (1d42c <spi_flash_enable+0xb8>)
   1d3ee:	4b13      	ldr	r3, [pc, #76]	; (1d43c <spi_flash_enable+0xc8>)
   1d3f0:	4798      	blx	r3
   1d3f2:	e7ca      	b.n	1d38a <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   1d3f4:	2100      	movs	r1, #0
   1d3f6:	4812      	ldr	r0, [pc, #72]	; (1d440 <spi_flash_enable+0xcc>)
   1d3f8:	4c10      	ldr	r4, [pc, #64]	; (1d43c <spi_flash_enable+0xc8>)
   1d3fa:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   1d3fc:	21b9      	movs	r1, #185	; 0xb9
   1d3fe:	4811      	ldr	r0, [pc, #68]	; (1d444 <spi_flash_enable+0xd0>)
   1d400:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   1d402:	2101      	movs	r1, #1
   1d404:	4810      	ldr	r0, [pc, #64]	; (1d448 <spi_flash_enable+0xd4>)
   1d406:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   1d408:	2100      	movs	r1, #0
   1d40a:	4810      	ldr	r0, [pc, #64]	; (1d44c <spi_flash_enable+0xd8>)
   1d40c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   1d40e:	2181      	movs	r1, #129	; 0x81
   1d410:	480f      	ldr	r0, [pc, #60]	; (1d450 <spi_flash_enable+0xdc>)
   1d412:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   1d414:	4e0f      	ldr	r6, [pc, #60]	; (1d454 <spi_flash_enable+0xe0>)
   1d416:	4c10      	ldr	r4, [pc, #64]	; (1d458 <spi_flash_enable+0xe4>)
   1d418:	0030      	movs	r0, r6
   1d41a:	47a0      	blx	r4
   1d41c:	2801      	cmp	r0, #1
   1d41e:	d1fb      	bne.n	1d418 <spi_flash_enable+0xa4>
   1d420:	e7dd      	b.n	1d3de <spi_flash_enable+0x6a>
   1d422:	46c0      	nop			; (mov r8, r8)
   1d424:	0001b44d 	.word	0x0001b44d
   1d428:	0000039f 	.word	0x0000039f
   1d42c:	00001410 	.word	0x00001410
   1d430:	0001b885 	.word	0x0001b885
   1d434:	f8888fff 	.word	0xf8888fff
   1d438:	01111000 	.word	0x01111000
   1d43c:	0001b891 	.word	0x0001b891
   1d440:	00010208 	.word	0x00010208
   1d444:	0001020c 	.word	0x0001020c
   1d448:	00010214 	.word	0x00010214
   1d44c:	0001021c 	.word	0x0001021c
   1d450:	00010204 	.word	0x00010204
   1d454:	00010218 	.word	0x00010218
   1d458:	0001b879 	.word	0x0001b879

0001d45c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   1d45c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   1d45e:	2301      	movs	r3, #1
   1d460:	2800      	cmp	r0, #0
   1d462:	d001      	beq.n	1d468 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
   1d464:	0018      	movs	r0, r3
   1d466:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   1d468:	4b01      	ldr	r3, [pc, #4]	; (1d470 <mem_test_unit_ready+0x14>)
   1d46a:	4798      	blx	r3
   1d46c:	0003      	movs	r3, r0
   1d46e:	e7f9      	b.n	1d464 <mem_test_unit_ready+0x8>
   1d470:	0001983d 	.word	0x0001983d

0001d474 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   1d474:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   1d476:	2301      	movs	r3, #1
   1d478:	2800      	cmp	r0, #0
   1d47a:	d001      	beq.n	1d480 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
   1d47c:	0018      	movs	r0, r3
   1d47e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   1d480:	0008      	movs	r0, r1
   1d482:	4b02      	ldr	r3, [pc, #8]	; (1d48c <mem_read_capacity+0x18>)
   1d484:	4798      	blx	r3
   1d486:	0003      	movs	r3, r0
   1d488:	e7f8      	b.n	1d47c <mem_read_capacity+0x8>
   1d48a:	46c0      	nop			; (mov r8, r8)
   1d48c:	0001986d 	.word	0x0001986d

0001d490 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   1d490:	4243      	negs	r3, r0
   1d492:	4158      	adcs	r0, r3
   1d494:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
   1d496:	4770      	bx	lr

0001d498 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   1d498:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   1d49a:	2301      	movs	r3, #1
   1d49c:	2800      	cmp	r0, #0
   1d49e:	d001      	beq.n	1d4a4 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
   1d4a0:	0018      	movs	r0, r3
   1d4a2:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   1d4a4:	4b01      	ldr	r3, [pc, #4]	; (1d4ac <mem_wr_protect+0x14>)
   1d4a6:	4798      	blx	r3
   1d4a8:	0003      	movs	r3, r0
   1d4aa:	e7f9      	b.n	1d4a0 <mem_wr_protect+0x8>
   1d4ac:	0001987d 	.word	0x0001987d

0001d4b0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   1d4b0:	b510      	push	{r4, lr}
   1d4b2:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   1d4b4:	2301      	movs	r3, #1
   1d4b6:	2800      	cmp	r0, #0
   1d4b8:	d001      	beq.n	1d4be <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
   1d4ba:	0018      	movs	r0, r3
   1d4bc:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   1d4be:	0011      	movs	r1, r2
   1d4c0:	0020      	movs	r0, r4
   1d4c2:	4b02      	ldr	r3, [pc, #8]	; (1d4cc <memory_2_ram+0x1c>)
   1d4c4:	4798      	blx	r3
   1d4c6:	0003      	movs	r3, r0
   1d4c8:	e7f7      	b.n	1d4ba <memory_2_ram+0xa>
   1d4ca:	46c0      	nop			; (mov r8, r8)
   1d4cc:	000198d1 	.word	0x000198d1

0001d4d0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   1d4d0:	b510      	push	{r4, lr}
   1d4d2:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1d4d4:	2301      	movs	r3, #1
   1d4d6:	2800      	cmp	r0, #0
   1d4d8:	d001      	beq.n	1d4de <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
   1d4da:	0018      	movs	r0, r3
   1d4dc:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   1d4de:	0011      	movs	r1, r2
   1d4e0:	0020      	movs	r0, r4
   1d4e2:	4b02      	ldr	r3, [pc, #8]	; (1d4ec <ram_2_memory+0x1c>)
   1d4e4:	4798      	blx	r3
   1d4e6:	0003      	movs	r3, r0
   1d4e8:	e7f7      	b.n	1d4da <ram_2_memory+0xa>
   1d4ea:	46c0      	nop			; (mov r8, r8)
   1d4ec:	00019929 	.word	0x00019929

0001d4f0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   1d4f0:	4b0c      	ldr	r3, [pc, #48]	; (1d524 <cpu_irq_enter_critical+0x34>)
   1d4f2:	681b      	ldr	r3, [r3, #0]
   1d4f4:	2b00      	cmp	r3, #0
   1d4f6:	d106      	bne.n	1d506 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d4f8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
   1d4fc:	2b00      	cmp	r3, #0
   1d4fe:	d007      	beq.n	1d510 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   1d500:	2200      	movs	r2, #0
   1d502:	4b09      	ldr	r3, [pc, #36]	; (1d528 <cpu_irq_enter_critical+0x38>)
   1d504:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   1d506:	4a07      	ldr	r2, [pc, #28]	; (1d524 <cpu_irq_enter_critical+0x34>)
   1d508:	6813      	ldr	r3, [r2, #0]
   1d50a:	3301      	adds	r3, #1
   1d50c:	6013      	str	r3, [r2, #0]
}
   1d50e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
   1d510:	b672      	cpsid	i
   1d512:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   1d516:	2200      	movs	r2, #0
   1d518:	4b04      	ldr	r3, [pc, #16]	; (1d52c <cpu_irq_enter_critical+0x3c>)
   1d51a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   1d51c:	3201      	adds	r2, #1
   1d51e:	4b02      	ldr	r3, [pc, #8]	; (1d528 <cpu_irq_enter_critical+0x38>)
   1d520:	701a      	strb	r2, [r3, #0]
   1d522:	e7f0      	b.n	1d506 <cpu_irq_enter_critical+0x16>
   1d524:	20003d88 	.word	0x20003d88
   1d528:	20003d8c 	.word	0x20003d8c
   1d52c:	200000c6 	.word	0x200000c6

0001d530 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   1d530:	4b08      	ldr	r3, [pc, #32]	; (1d554 <cpu_irq_leave_critical+0x24>)
   1d532:	681a      	ldr	r2, [r3, #0]
   1d534:	3a01      	subs	r2, #1
   1d536:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   1d538:	681b      	ldr	r3, [r3, #0]
   1d53a:	2b00      	cmp	r3, #0
   1d53c:	d109      	bne.n	1d552 <cpu_irq_leave_critical+0x22>
   1d53e:	4b06      	ldr	r3, [pc, #24]	; (1d558 <cpu_irq_leave_critical+0x28>)
   1d540:	781b      	ldrb	r3, [r3, #0]
   1d542:	2b00      	cmp	r3, #0
   1d544:	d005      	beq.n	1d552 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
   1d546:	2201      	movs	r2, #1
   1d548:	4b04      	ldr	r3, [pc, #16]	; (1d55c <cpu_irq_leave_critical+0x2c>)
   1d54a:	701a      	strb	r2, [r3, #0]
   1d54c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1d550:	b662      	cpsie	i
	}
}
   1d552:	4770      	bx	lr
   1d554:	20003d88 	.word	0x20003d88
   1d558:	20003d8c 	.word	0x20003d8c
   1d55c:	200000c6 	.word	0x200000c6

0001d560 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   1d560:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d562:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
   1d564:	ac01      	add	r4, sp, #4
   1d566:	2501      	movs	r5, #1
   1d568:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   1d56a:	2700      	movs	r7, #0
   1d56c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1d56e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   1d570:	0021      	movs	r1, r4
   1d572:	2017      	movs	r0, #23
   1d574:	4e06      	ldr	r6, [pc, #24]	; (1d590 <system_board_init+0x30>)
   1d576:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
   1d578:	2280      	movs	r2, #128	; 0x80
   1d57a:	0412      	lsls	r2, r2, #16
   1d57c:	4b05      	ldr	r3, [pc, #20]	; (1d594 <system_board_init+0x34>)
   1d57e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1d580:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   1d582:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   1d584:	0021      	movs	r1, r4
   1d586:	2037      	movs	r0, #55	; 0x37
   1d588:	47b0      	blx	r6
}
   1d58a:	b003      	add	sp, #12
   1d58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d58e:	46c0      	nop			; (mov r8, r8)
   1d590:	0001d769 	.word	0x0001d769
   1d594:	41004400 	.word	0x41004400

0001d598 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d598:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   1d59a:	2a00      	cmp	r2, #0
   1d59c:	d001      	beq.n	1d5a2 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
   1d59e:	0018      	movs	r0, r3
   1d5a0:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
   1d5a2:	008b      	lsls	r3, r1, #2
   1d5a4:	4a06      	ldr	r2, [pc, #24]	; (1d5c0 <extint_register_callback+0x28>)
   1d5a6:	589b      	ldr	r3, [r3, r2]
   1d5a8:	2b00      	cmp	r3, #0
   1d5aa:	d003      	beq.n	1d5b4 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
   1d5ac:	4283      	cmp	r3, r0
   1d5ae:	d005      	beq.n	1d5bc <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
   1d5b0:	231d      	movs	r3, #29
   1d5b2:	e7f4      	b.n	1d59e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
   1d5b4:	0089      	lsls	r1, r1, #2
   1d5b6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
   1d5b8:	2300      	movs	r3, #0
   1d5ba:	e7f0      	b.n	1d59e <extint_register_callback+0x6>
		return STATUS_OK;
   1d5bc:	2300      	movs	r3, #0
   1d5be:	e7ee      	b.n	1d59e <extint_register_callback+0x6>
   1d5c0:	20005510 	.word	0x20005510

0001d5c4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d5c4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1d5c6:	2900      	cmp	r1, #0
   1d5c8:	d001      	beq.n	1d5ce <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
   1d5ca:	0018      	movs	r0, r3
   1d5cc:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
   1d5ce:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
   1d5d0:	281f      	cmp	r0, #31
   1d5d2:	d800      	bhi.n	1d5d6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
   1d5d4:	4a02      	ldr	r2, [pc, #8]	; (1d5e0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
   1d5d6:	2301      	movs	r3, #1
   1d5d8:	4083      	lsls	r3, r0
   1d5da:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
   1d5dc:	2300      	movs	r3, #0
   1d5de:	e7f4      	b.n	1d5ca <extint_chan_enable_callback+0x6>
   1d5e0:	40001800 	.word	0x40001800

0001d5e4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1d5e4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1d5e6:	2900      	cmp	r1, #0
   1d5e8:	d001      	beq.n	1d5ee <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
   1d5ea:	0018      	movs	r0, r3
   1d5ec:	4770      	bx	lr
		return NULL;
   1d5ee:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
   1d5f0:	281f      	cmp	r0, #31
   1d5f2:	d800      	bhi.n	1d5f6 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
   1d5f4:	4a02      	ldr	r2, [pc, #8]	; (1d600 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
   1d5f6:	2301      	movs	r3, #1
   1d5f8:	4083      	lsls	r3, r0
   1d5fa:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
   1d5fc:	2300      	movs	r3, #0
   1d5fe:	e7f4      	b.n	1d5ea <extint_chan_disable_callback+0x6>
   1d600:	40001800 	.word	0x40001800

0001d604 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   1d604:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1d606:	2200      	movs	r2, #0
   1d608:	4b10      	ldr	r3, [pc, #64]	; (1d64c <EIC_Handler+0x48>)
   1d60a:	701a      	strb	r2, [r3, #0]
   1d60c:	2300      	movs	r3, #0
   1d60e:	4910      	ldr	r1, [pc, #64]	; (1d650 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
   1d610:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1d612:	4e10      	ldr	r6, [pc, #64]	; (1d654 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1d614:	4c0d      	ldr	r4, [pc, #52]	; (1d64c <EIC_Handler+0x48>)
   1d616:	e00a      	b.n	1d62e <EIC_Handler+0x2a>
		return eics[eic_index];
   1d618:	490d      	ldr	r1, [pc, #52]	; (1d650 <EIC_Handler+0x4c>)
   1d61a:	e008      	b.n	1d62e <EIC_Handler+0x2a>
   1d61c:	7823      	ldrb	r3, [r4, #0]
   1d61e:	3301      	adds	r3, #1
   1d620:	b2db      	uxtb	r3, r3
   1d622:	7023      	strb	r3, [r4, #0]
   1d624:	2b0f      	cmp	r3, #15
   1d626:	d810      	bhi.n	1d64a <EIC_Handler+0x46>
		return NULL;
   1d628:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
   1d62a:	2b1f      	cmp	r3, #31
   1d62c:	d9f4      	bls.n	1d618 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
   1d62e:	0028      	movs	r0, r5
   1d630:	4018      	ands	r0, r3
   1d632:	2201      	movs	r2, #1
   1d634:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
   1d636:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
   1d638:	4210      	tst	r0, r2
   1d63a:	d0ef      	beq.n	1d61c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
   1d63c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1d63e:	009b      	lsls	r3, r3, #2
   1d640:	599b      	ldr	r3, [r3, r6]
   1d642:	2b00      	cmp	r3, #0
   1d644:	d0ea      	beq.n	1d61c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   1d646:	4798      	blx	r3
   1d648:	e7e8      	b.n	1d61c <EIC_Handler+0x18>
			}
		}
	}
}
   1d64a:	bd70      	pop	{r4, r5, r6, pc}
   1d64c:	2000550c 	.word	0x2000550c
   1d650:	40001800 	.word	0x40001800
   1d654:	20005510 	.word	0x20005510

0001d658 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   1d658:	4a04      	ldr	r2, [pc, #16]	; (1d66c <_extint_enable+0x14>)
   1d65a:	7813      	ldrb	r3, [r2, #0]
   1d65c:	2102      	movs	r1, #2
   1d65e:	430b      	orrs	r3, r1
   1d660:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1d662:	7853      	ldrb	r3, [r2, #1]
   1d664:	b25b      	sxtb	r3, r3
   1d666:	2b00      	cmp	r3, #0
   1d668:	dbfb      	blt.n	1d662 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1d66a:	4770      	bx	lr
   1d66c:	40001800 	.word	0x40001800

0001d670 <_system_extint_init>:
{
   1d670:	b500      	push	{lr}
   1d672:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
   1d674:	4a12      	ldr	r2, [pc, #72]	; (1d6c0 <_system_extint_init+0x50>)
   1d676:	6993      	ldr	r3, [r2, #24]
   1d678:	2140      	movs	r1, #64	; 0x40
   1d67a:	430b      	orrs	r3, r1
   1d67c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1d67e:	a901      	add	r1, sp, #4
   1d680:	2300      	movs	r3, #0
   1d682:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   1d684:	2005      	movs	r0, #5
   1d686:	4b0f      	ldr	r3, [pc, #60]	; (1d6c4 <_system_extint_init+0x54>)
   1d688:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
   1d68a:	2005      	movs	r0, #5
   1d68c:	4b0e      	ldr	r3, [pc, #56]	; (1d6c8 <_system_extint_init+0x58>)
   1d68e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1d690:	4a0e      	ldr	r2, [pc, #56]	; (1d6cc <_system_extint_init+0x5c>)
   1d692:	7813      	ldrb	r3, [r2, #0]
   1d694:	2101      	movs	r1, #1
   1d696:	430b      	orrs	r3, r1
   1d698:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   1d69a:	7853      	ldrb	r3, [r2, #1]
   1d69c:	b25b      	sxtb	r3, r3
   1d69e:	2b00      	cmp	r3, #0
   1d6a0:	dbfb      	blt.n	1d69a <_system_extint_init+0x2a>
   1d6a2:	4b0b      	ldr	r3, [pc, #44]	; (1d6d0 <_system_extint_init+0x60>)
   1d6a4:	0019      	movs	r1, r3
   1d6a6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
   1d6a8:	2200      	movs	r2, #0
   1d6aa:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   1d6ac:	4299      	cmp	r1, r3
   1d6ae:	d1fc      	bne.n	1d6aa <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d6b0:	2210      	movs	r2, #16
   1d6b2:	4b08      	ldr	r3, [pc, #32]	; (1d6d4 <_system_extint_init+0x64>)
   1d6b4:	601a      	str	r2, [r3, #0]
	_extint_enable();
   1d6b6:	4b08      	ldr	r3, [pc, #32]	; (1d6d8 <_system_extint_init+0x68>)
   1d6b8:	4798      	blx	r3
}
   1d6ba:	b003      	add	sp, #12
   1d6bc:	bd00      	pop	{pc}
   1d6be:	46c0      	nop			; (mov r8, r8)
   1d6c0:	40000400 	.word	0x40000400
   1d6c4:	0001f0a5 	.word	0x0001f0a5
   1d6c8:	0001f019 	.word	0x0001f019
   1d6cc:	40001800 	.word	0x40001800
   1d6d0:	20005510 	.word	0x20005510
   1d6d4:	e000e100 	.word	0xe000e100
   1d6d8:	0001d659 	.word	0x0001d659

0001d6dc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1d6dc:	2300      	movs	r3, #0
   1d6de:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
   1d6e0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   1d6e2:	2201      	movs	r2, #1
   1d6e4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
   1d6e6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
   1d6e8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1d6ea:	3302      	adds	r3, #2
   1d6ec:	72c3      	strb	r3, [r0, #11]
}
   1d6ee:	4770      	bx	lr

0001d6f0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   1d6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6f2:	b083      	sub	sp, #12
   1d6f4:	0005      	movs	r5, r0
   1d6f6:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1d6f8:	a901      	add	r1, sp, #4
   1d6fa:	2300      	movs	r3, #0
   1d6fc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
   1d6fe:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
   1d700:	7923      	ldrb	r3, [r4, #4]
   1d702:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   1d704:	7a23      	ldrb	r3, [r4, #8]
   1d706:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1d708:	7820      	ldrb	r0, [r4, #0]
   1d70a:	4b15      	ldr	r3, [pc, #84]	; (1d760 <extint_chan_set_config+0x70>)
   1d70c:	4798      	blx	r3
		return NULL;
   1d70e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
   1d710:	2d1f      	cmp	r5, #31
   1d712:	d800      	bhi.n	1d716 <extint_chan_set_config+0x26>
		return eics[eic_index];
   1d714:	4813      	ldr	r0, [pc, #76]	; (1d764 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
   1d716:	2207      	movs	r2, #7
   1d718:	402a      	ands	r2, r5
   1d71a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   1d71c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   1d71e:	7aa3      	ldrb	r3, [r4, #10]
   1d720:	2b00      	cmp	r3, #0
   1d722:	d001      	beq.n	1d728 <extint_chan_set_config+0x38>
   1d724:	2308      	movs	r3, #8
   1d726:	431f      	orrs	r7, r3
   1d728:	08eb      	lsrs	r3, r5, #3
   1d72a:	009b      	lsls	r3, r3, #2
   1d72c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
   1d72e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1d730:	260f      	movs	r6, #15
   1d732:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   1d734:	43b1      	bics	r1, r6
			(new_config << config_pos);
   1d736:	4097      	lsls	r7, r2
   1d738:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   1d73a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
   1d73c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   1d73e:	7a63      	ldrb	r3, [r4, #9]
   1d740:	2b00      	cmp	r3, #0
   1d742:	d106      	bne.n	1d752 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1d744:	6943      	ldr	r3, [r0, #20]
   1d746:	2201      	movs	r2, #1
   1d748:	40aa      	lsls	r2, r5
   1d74a:	4393      	bics	r3, r2
   1d74c:	6143      	str	r3, [r0, #20]
	}
}
   1d74e:	b003      	add	sp, #12
   1d750:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   1d752:	6942      	ldr	r2, [r0, #20]
   1d754:	2301      	movs	r3, #1
   1d756:	40ab      	lsls	r3, r5
   1d758:	4313      	orrs	r3, r2
   1d75a:	6143      	str	r3, [r0, #20]
   1d75c:	e7f7      	b.n	1d74e <extint_chan_set_config+0x5e>
   1d75e:	46c0      	nop			; (mov r8, r8)
   1d760:	0001f1cd 	.word	0x0001f1cd
   1d764:	40001800 	.word	0x40001800

0001d768 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1d768:	b500      	push	{lr}
   1d76a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1d76c:	ab01      	add	r3, sp, #4
   1d76e:	2280      	movs	r2, #128	; 0x80
   1d770:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1d772:	780a      	ldrb	r2, [r1, #0]
   1d774:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   1d776:	784a      	ldrb	r2, [r1, #1]
   1d778:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   1d77a:	788a      	ldrb	r2, [r1, #2]
   1d77c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1d77e:	0019      	movs	r1, r3
   1d780:	4b01      	ldr	r3, [pc, #4]	; (1d788 <port_pin_set_config+0x20>)
   1d782:	4798      	blx	r3
}
   1d784:	b003      	add	sp, #12
   1d786:	bd00      	pop	{pc}
   1d788:	0001f1cd 	.word	0x0001f1cd

0001d78c <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d78c:	6801      	ldr	r1, [r0, #0]
   1d78e:	2208      	movs	r2, #8
   1d790:	4b05      	ldr	r3, [pc, #20]	; (1d7a8 <rtc_calendar_enable+0x1c>)
   1d792:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1d794:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d796:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d798:	b25b      	sxtb	r3, r3
   1d79a:	2b00      	cmp	r3, #0
   1d79c:	dbfb      	blt.n	1d796 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   1d79e:	880b      	ldrh	r3, [r1, #0]
   1d7a0:	2202      	movs	r2, #2
   1d7a2:	4313      	orrs	r3, r2
   1d7a4:	800b      	strh	r3, [r1, #0]
}
   1d7a6:	4770      	bx	lr
   1d7a8:	e000e100 	.word	0xe000e100

0001d7ac <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   1d7ac:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d7ae:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d7b0:	2408      	movs	r4, #8
   1d7b2:	2380      	movs	r3, #128	; 0x80
   1d7b4:	4907      	ldr	r1, [pc, #28]	; (1d7d4 <rtc_calendar_disable+0x28>)
   1d7b6:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
   1d7b8:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d7ba:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d7bc:	b25b      	sxtb	r3, r3
   1d7be:	2b00      	cmp	r3, #0
   1d7c0:	dbfb      	blt.n	1d7ba <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   1d7c2:	23c1      	movs	r3, #193	; 0xc1
   1d7c4:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   1d7c6:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   1d7c8:	8813      	ldrh	r3, [r2, #0]
   1d7ca:	2102      	movs	r1, #2
   1d7cc:	438b      	bics	r3, r1
   1d7ce:	8013      	strh	r3, [r2, #0]
}
   1d7d0:	bd10      	pop	{r4, pc}
   1d7d2:	46c0      	nop			; (mov r8, r8)
   1d7d4:	e000e100 	.word	0xe000e100

0001d7d8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   1d7d8:	b570      	push	{r4, r5, r6, lr}
   1d7da:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d7dc:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   1d7de:	4b07      	ldr	r3, [pc, #28]	; (1d7fc <rtc_calendar_reset+0x24>)
   1d7e0:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   1d7e2:	2300      	movs	r3, #0
   1d7e4:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
   1d7e6:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
   1d7e8:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d7ea:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
   1d7ec:	b25b      	sxtb	r3, r3
   1d7ee:	2b00      	cmp	r3, #0
   1d7f0:	dbfb      	blt.n	1d7ea <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   1d7f2:	882b      	ldrh	r3, [r5, #0]
   1d7f4:	2201      	movs	r2, #1
   1d7f6:	4313      	orrs	r3, r2
   1d7f8:	802b      	strh	r3, [r5, #0]
}
   1d7fa:	bd70      	pop	{r4, r5, r6, pc}
   1d7fc:	0001d7ad 	.word	0x0001d7ad

0001d800 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   1d800:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   1d802:	88cb      	ldrh	r3, [r1, #6]
   1d804:	88c2      	ldrh	r2, [r0, #6]
   1d806:	1a9a      	subs	r2, r3, r2
   1d808:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   1d80a:	794b      	ldrb	r3, [r1, #5]
   1d80c:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   1d80e:	790c      	ldrb	r4, [r1, #4]
   1d810:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   1d812:	4323      	orrs	r3, r4
   1d814:	788c      	ldrb	r4, [r1, #2]
   1d816:	0324      	lsls	r4, r4, #12
   1d818:	4323      	orrs	r3, r4
   1d81a:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   1d81c:	7902      	ldrb	r2, [r0, #4]
   1d81e:	2a00      	cmp	r2, #0
   1d820:	d105      	bne.n	1d82e <rtc_calendar_time_to_register_value+0x2e>
   1d822:	78ca      	ldrb	r2, [r1, #3]
   1d824:	2a00      	cmp	r2, #0
   1d826:	d002      	beq.n	1d82e <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   1d828:	2280      	movs	r2, #128	; 0x80
   1d82a:	0252      	lsls	r2, r2, #9
   1d82c:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   1d82e:	7848      	ldrb	r0, [r1, #1]
   1d830:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   1d832:	780a      	ldrb	r2, [r1, #0]
   1d834:	4310      	orrs	r0, r2
   1d836:	4318      	orrs	r0, r3

	return register_value;
}
   1d838:	bd10      	pop	{r4, pc}

0001d83a <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   1d83a:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1d83c:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   1d83e:	88c4      	ldrh	r4, [r0, #6]
   1d840:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1d842:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   1d844:	018b      	lsls	r3, r1, #6
   1d846:	0f1b      	lsrs	r3, r3, #28
   1d848:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   1d84a:	028b      	lsls	r3, r1, #10
   1d84c:	0edb      	lsrs	r3, r3, #27
   1d84e:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   1d850:	7903      	ldrb	r3, [r0, #4]
   1d852:	2b00      	cmp	r3, #0
   1d854:	d10c      	bne.n	1d870 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   1d856:	040b      	lsls	r3, r1, #16
   1d858:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
   1d85a:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   1d85c:	03cb      	lsls	r3, r1, #15
   1d85e:	0fdb      	lsrs	r3, r3, #31
   1d860:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   1d862:	0988      	lsrs	r0, r1, #6
   1d864:	233f      	movs	r3, #63	; 0x3f
   1d866:	4018      	ands	r0, r3
   1d868:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   1d86a:	4019      	ands	r1, r3
   1d86c:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   1d86e:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   1d870:	03cb      	lsls	r3, r1, #15
   1d872:	0edb      	lsrs	r3, r3, #27
   1d874:	7093      	strb	r3, [r2, #2]
   1d876:	e7f4      	b.n	1d862 <rtc_calendar_register_value_to_time+0x28>

0001d878 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   1d878:	b510      	push	{r4, lr}
   1d87a:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   1d87c:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   1d87e:	7941      	ldrb	r1, [r0, #5]
   1d880:	2900      	cmp	r1, #0
   1d882:	d006      	beq.n	1d892 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   1d884:	8859      	ldrh	r1, [r3, #2]
   1d886:	0449      	lsls	r1, r1, #17
   1d888:	d50b      	bpl.n	1d8a2 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   1d88a:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   1d88c:	4b0a      	ldr	r3, [pc, #40]	; (1d8b8 <rtc_calendar_get_time+0x40>)
   1d88e:	4798      	blx	r3
}
   1d890:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   1d892:	490a      	ldr	r1, [pc, #40]	; (1d8bc <rtc_calendar_get_time+0x44>)
   1d894:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   1d896:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d898:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   1d89a:	b249      	sxtb	r1, r1
   1d89c:	2900      	cmp	r1, #0
   1d89e:	dbfb      	blt.n	1d898 <rtc_calendar_get_time+0x20>
   1d8a0:	e7f3      	b.n	1d88a <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   1d8a2:	8859      	ldrh	r1, [r3, #2]
   1d8a4:	24c0      	movs	r4, #192	; 0xc0
   1d8a6:	0224      	lsls	r4, r4, #8
   1d8a8:	4321      	orrs	r1, r4
   1d8aa:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
   1d8ac:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d8ae:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
   1d8b0:	b249      	sxtb	r1, r1
   1d8b2:	2900      	cmp	r1, #0
   1d8b4:	dbfb      	blt.n	1d8ae <rtc_calendar_get_time+0x36>
   1d8b6:	e7e8      	b.n	1d88a <rtc_calendar_get_time+0x12>
   1d8b8:	0001d83b 	.word	0x0001d83b
   1d8bc:	ffff8000 	.word	0xffff8000

0001d8c0 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   1d8c0:	b570      	push	{r4, r5, r6, lr}
   1d8c2:	000d      	movs	r5, r1
   1d8c4:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
   1d8c6:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   1d8c8:	2a01      	cmp	r2, #1
   1d8ca:	d901      	bls.n	1d8d0 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
   1d8cc:	0018      	movs	r0, r3
   1d8ce:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
   1d8d0:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   1d8d2:	4b06      	ldr	r3, [pc, #24]	; (1d8ec <rtc_calendar_set_alarm+0x2c>)
   1d8d4:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   1d8d6:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
   1d8d8:	b25b      	sxtb	r3, r3
   1d8da:	2b00      	cmp	r3, #0
   1d8dc:	dbfb      	blt.n	1d8d6 <rtc_calendar_set_alarm+0x16>
   1d8de:	00e4      	lsls	r4, r4, #3
   1d8e0:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   1d8e2:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   1d8e4:	7a2b      	ldrb	r3, [r5, #8]
   1d8e6:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
   1d8e8:	2300      	movs	r3, #0
   1d8ea:	e7ef      	b.n	1d8cc <rtc_calendar_set_alarm+0xc>
   1d8ec:	0001d801 	.word	0x0001d801

0001d8f0 <rtc_calendar_init>:
{
   1d8f0:	b530      	push	{r4, r5, lr}
   1d8f2:	b083      	sub	sp, #12
   1d8f4:	0005      	movs	r5, r0
   1d8f6:	0014      	movs	r4, r2
	module->hw = hw;
   1d8f8:	6001      	str	r1, [r0, #0]
   1d8fa:	4a1c      	ldr	r2, [pc, #112]	; (1d96c <rtc_calendar_init+0x7c>)
   1d8fc:	6993      	ldr	r3, [r2, #24]
   1d8fe:	2120      	movs	r1, #32
   1d900:	430b      	orrs	r3, r1
   1d902:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   1d904:	a901      	add	r1, sp, #4
   1d906:	2302      	movs	r3, #2
   1d908:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   1d90a:	2004      	movs	r0, #4
   1d90c:	4b18      	ldr	r3, [pc, #96]	; (1d970 <rtc_calendar_init+0x80>)
   1d90e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   1d910:	2004      	movs	r0, #4
   1d912:	4b18      	ldr	r3, [pc, #96]	; (1d974 <rtc_calendar_init+0x84>)
   1d914:	4798      	blx	r3
	rtc_calendar_reset(module);
   1d916:	0028      	movs	r0, r5
   1d918:	4b17      	ldr	r3, [pc, #92]	; (1d978 <rtc_calendar_init+0x88>)
   1d91a:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
   1d91c:	7923      	ldrb	r3, [r4, #4]
   1d91e:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
   1d920:	78e3      	ldrb	r3, [r4, #3]
   1d922:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
   1d924:	88e3      	ldrh	r3, [r4, #6]
   1d926:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
   1d928:	4b14      	ldr	r3, [pc, #80]	; (1d97c <rtc_calendar_init+0x8c>)
   1d92a:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1d92c:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   1d92e:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
   1d930:	7921      	ldrb	r1, [r4, #4]
   1d932:	2900      	cmp	r1, #0
   1d934:	d017      	beq.n	1d966 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   1d936:	2108      	movs	r1, #8
   1d938:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
   1d93a:	78a1      	ldrb	r1, [r4, #2]
   1d93c:	2900      	cmp	r1, #0
   1d93e:	d001      	beq.n	1d944 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   1d940:	2180      	movs	r1, #128	; 0x80
   1d942:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   1d944:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
   1d946:	78e3      	ldrb	r3, [r4, #3]
   1d948:	2b00      	cmp	r3, #0
   1d94a:	d004      	beq.n	1d956 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   1d94c:	8853      	ldrh	r3, [r2, #2]
   1d94e:	2180      	movs	r1, #128	; 0x80
   1d950:	01c9      	lsls	r1, r1, #7
   1d952:	430b      	orrs	r3, r1
   1d954:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   1d956:	0021      	movs	r1, r4
   1d958:	3108      	adds	r1, #8
   1d95a:	2200      	movs	r2, #0
   1d95c:	0028      	movs	r0, r5
   1d95e:	4b08      	ldr	r3, [pc, #32]	; (1d980 <rtc_calendar_init+0x90>)
   1d960:	4798      	blx	r3
}
   1d962:	b003      	add	sp, #12
   1d964:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   1d966:	2148      	movs	r1, #72	; 0x48
   1d968:	430b      	orrs	r3, r1
   1d96a:	e7e6      	b.n	1d93a <rtc_calendar_init+0x4a>
   1d96c:	40000400 	.word	0x40000400
   1d970:	0001f0a5 	.word	0x0001f0a5
   1d974:	0001f019 	.word	0x0001f019
   1d978:	0001d7d9 	.word	0x0001d7d9
   1d97c:	20005550 	.word	0x20005550
   1d980:	0001d8c1 	.word	0x0001d8c1

0001d984 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   1d984:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
   1d986:	4b0f      	ldr	r3, [pc, #60]	; (1d9c4 <RTC_Handler+0x40>)
   1d988:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
   1d98a:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
   1d98c:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
   1d98e:	8a13      	ldrh	r3, [r2, #16]
   1d990:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   1d992:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   1d994:	79e3      	ldrb	r3, [r4, #7]
   1d996:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   1d998:	b258      	sxtb	r0, r3
   1d99a:	2800      	cmp	r0, #0
   1d99c:	db06      	blt.n	1d9ac <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   1d99e:	07db      	lsls	r3, r3, #31
   1d9a0:	d503      	bpl.n	1d9aa <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   1d9a2:	07cb      	lsls	r3, r1, #31
   1d9a4:	d40a      	bmi.n	1d9bc <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   1d9a6:	2301      	movs	r3, #1
   1d9a8:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
   1d9aa:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   1d9ac:	078b      	lsls	r3, r1, #30
   1d9ae:	d402      	bmi.n	1d9b6 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   1d9b0:	2380      	movs	r3, #128	; 0x80
   1d9b2:	7223      	strb	r3, [r4, #8]
   1d9b4:	e7f9      	b.n	1d9aa <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   1d9b6:	68d3      	ldr	r3, [r2, #12]
   1d9b8:	4798      	blx	r3
   1d9ba:	e7f9      	b.n	1d9b0 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   1d9bc:	6893      	ldr	r3, [r2, #8]
   1d9be:	4798      	blx	r3
   1d9c0:	e7f1      	b.n	1d9a6 <RTC_Handler+0x22>
   1d9c2:	46c0      	nop			; (mov r8, r8)
   1d9c4:	20005550 	.word	0x20005550

0001d9c8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   1d9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9ca:	46de      	mov	lr, fp
   1d9cc:	4657      	mov	r7, sl
   1d9ce:	464e      	mov	r6, r9
   1d9d0:	4645      	mov	r5, r8
   1d9d2:	b5e0      	push	{r5, r6, r7, lr}
   1d9d4:	b087      	sub	sp, #28
   1d9d6:	4680      	mov	r8, r0
   1d9d8:	9104      	str	r1, [sp, #16]
   1d9da:	0016      	movs	r6, r2
   1d9dc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1d9de:	2200      	movs	r2, #0
   1d9e0:	2300      	movs	r3, #0
   1d9e2:	2100      	movs	r1, #0
   1d9e4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
   1d9e6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
   1d9e8:	2001      	movs	r0, #1
   1d9ea:	0021      	movs	r1, r4
   1d9ec:	9600      	str	r6, [sp, #0]
   1d9ee:	9701      	str	r7, [sp, #4]
   1d9f0:	465c      	mov	r4, fp
   1d9f2:	9403      	str	r4, [sp, #12]
   1d9f4:	4644      	mov	r4, r8
   1d9f6:	9405      	str	r4, [sp, #20]
   1d9f8:	e013      	b.n	1da22 <long_division+0x5a>
   1d9fa:	2420      	movs	r4, #32
   1d9fc:	1a64      	subs	r4, r4, r1
   1d9fe:	0005      	movs	r5, r0
   1da00:	40e5      	lsrs	r5, r4
   1da02:	46a8      	mov	r8, r5
   1da04:	e014      	b.n	1da30 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
   1da06:	9c00      	ldr	r4, [sp, #0]
   1da08:	9d01      	ldr	r5, [sp, #4]
   1da0a:	1b12      	subs	r2, r2, r4
   1da0c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
   1da0e:	465c      	mov	r4, fp
   1da10:	464d      	mov	r5, r9
   1da12:	432c      	orrs	r4, r5
   1da14:	46a3      	mov	fp, r4
   1da16:	9c03      	ldr	r4, [sp, #12]
   1da18:	4645      	mov	r5, r8
   1da1a:	432c      	orrs	r4, r5
   1da1c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
   1da1e:	3901      	subs	r1, #1
   1da20:	d325      	bcc.n	1da6e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
   1da22:	2420      	movs	r4, #32
   1da24:	4264      	negs	r4, r4
   1da26:	190c      	adds	r4, r1, r4
   1da28:	d4e7      	bmi.n	1d9fa <long_division+0x32>
   1da2a:	0005      	movs	r5, r0
   1da2c:	40a5      	lsls	r5, r4
   1da2e:	46a8      	mov	r8, r5
   1da30:	0004      	movs	r4, r0
   1da32:	408c      	lsls	r4, r1
   1da34:	46a1      	mov	r9, r4
		r = r << 1;
   1da36:	1892      	adds	r2, r2, r2
   1da38:	415b      	adcs	r3, r3
   1da3a:	0014      	movs	r4, r2
   1da3c:	001d      	movs	r5, r3
		if (n & bit_shift) {
   1da3e:	9e05      	ldr	r6, [sp, #20]
   1da40:	464f      	mov	r7, r9
   1da42:	403e      	ands	r6, r7
   1da44:	46b4      	mov	ip, r6
   1da46:	9e04      	ldr	r6, [sp, #16]
   1da48:	4647      	mov	r7, r8
   1da4a:	403e      	ands	r6, r7
   1da4c:	46b2      	mov	sl, r6
   1da4e:	4666      	mov	r6, ip
   1da50:	4657      	mov	r7, sl
   1da52:	433e      	orrs	r6, r7
   1da54:	d003      	beq.n	1da5e <long_division+0x96>
			r |= 0x01;
   1da56:	0006      	movs	r6, r0
   1da58:	4326      	orrs	r6, r4
   1da5a:	0032      	movs	r2, r6
   1da5c:	002b      	movs	r3, r5
		if (r >= d) {
   1da5e:	9c00      	ldr	r4, [sp, #0]
   1da60:	9d01      	ldr	r5, [sp, #4]
   1da62:	429d      	cmp	r5, r3
   1da64:	d8db      	bhi.n	1da1e <long_division+0x56>
   1da66:	d1ce      	bne.n	1da06 <long_division+0x3e>
   1da68:	4294      	cmp	r4, r2
   1da6a:	d8d8      	bhi.n	1da1e <long_division+0x56>
   1da6c:	e7cb      	b.n	1da06 <long_division+0x3e>
   1da6e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
   1da70:	4658      	mov	r0, fp
   1da72:	0019      	movs	r1, r3
   1da74:	b007      	add	sp, #28
   1da76:	bc3c      	pop	{r2, r3, r4, r5}
   1da78:	4690      	mov	r8, r2
   1da7a:	4699      	mov	r9, r3
   1da7c:	46a2      	mov	sl, r4
   1da7e:	46ab      	mov	fp, r5
   1da80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001da82 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1da82:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1da84:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1da86:	2340      	movs	r3, #64	; 0x40
   1da88:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
   1da8a:	4281      	cmp	r1, r0
   1da8c:	d202      	bcs.n	1da94 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   1da8e:	0018      	movs	r0, r3
   1da90:	bd10      	pop	{r4, pc}
		baud_calculated++;
   1da92:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
   1da94:	1a09      	subs	r1, r1, r0
		baud_calculated++;
   1da96:	1c63      	adds	r3, r4, #1
   1da98:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
   1da9a:	4288      	cmp	r0, r1
   1da9c:	d9f9      	bls.n	1da92 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1da9e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
   1daa0:	2cff      	cmp	r4, #255	; 0xff
   1daa2:	d8f4      	bhi.n	1da8e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
   1daa4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
   1daa6:	2300      	movs	r3, #0
   1daa8:	e7f1      	b.n	1da8e <_sercom_get_sync_baud_val+0xc>
	...

0001daac <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1daac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1daae:	b083      	sub	sp, #12
   1dab0:	000f      	movs	r7, r1
   1dab2:	0016      	movs	r6, r2
   1dab4:	aa08      	add	r2, sp, #32
   1dab6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1dab8:	0004      	movs	r4, r0
   1daba:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1dabc:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   1dabe:	42bc      	cmp	r4, r7
   1dac0:	d902      	bls.n	1dac8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
   1dac2:	0010      	movs	r0, r2
   1dac4:	b003      	add	sp, #12
   1dac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   1dac8:	2b00      	cmp	r3, #0
   1daca:	d114      	bne.n	1daf6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1dacc:	0002      	movs	r2, r0
   1dace:	0008      	movs	r0, r1
   1dad0:	2100      	movs	r1, #0
   1dad2:	4c19      	ldr	r4, [pc, #100]	; (1db38 <_sercom_get_async_baud_val+0x8c>)
   1dad4:	47a0      	blx	r4
   1dad6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
   1dad8:	003a      	movs	r2, r7
   1dada:	2300      	movs	r3, #0
   1dadc:	2000      	movs	r0, #0
   1dade:	4c17      	ldr	r4, [pc, #92]	; (1db3c <_sercom_get_async_baud_val+0x90>)
   1dae0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
   1dae2:	2200      	movs	r2, #0
   1dae4:	2301      	movs	r3, #1
   1dae6:	1a12      	subs	r2, r2, r0
   1dae8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
   1daea:	0c12      	lsrs	r2, r2, #16
   1daec:	041b      	lsls	r3, r3, #16
   1daee:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
   1daf0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
   1daf2:	2200      	movs	r2, #0
   1daf4:	e7e5      	b.n	1dac2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
   1daf6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1daf8:	2b01      	cmp	r3, #1
   1dafa:	d1f9      	bne.n	1daf0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
   1dafc:	000a      	movs	r2, r1
   1dafe:	2300      	movs	r3, #0
   1db00:	2100      	movs	r1, #0
   1db02:	4c0d      	ldr	r4, [pc, #52]	; (1db38 <_sercom_get_async_baud_val+0x8c>)
   1db04:	47a0      	blx	r4
   1db06:	0002      	movs	r2, r0
   1db08:	000b      	movs	r3, r1
   1db0a:	9200      	str	r2, [sp, #0]
   1db0c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
   1db0e:	0038      	movs	r0, r7
   1db10:	2100      	movs	r1, #0
   1db12:	4c0a      	ldr	r4, [pc, #40]	; (1db3c <_sercom_get_async_baud_val+0x90>)
   1db14:	47a0      	blx	r4
   1db16:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
   1db18:	2380      	movs	r3, #128	; 0x80
   1db1a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1db1c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
   1db1e:	4298      	cmp	r0, r3
   1db20:	d8cf      	bhi.n	1dac2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1db22:	0f79      	lsrs	r1, r7, #29
   1db24:	00f8      	lsls	r0, r7, #3
   1db26:	9a00      	ldr	r2, [sp, #0]
   1db28:	9b01      	ldr	r3, [sp, #4]
   1db2a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
   1db2c:	00ea      	lsls	r2, r5, #3
   1db2e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
   1db30:	b2d2      	uxtb	r2, r2
   1db32:	0352      	lsls	r2, r2, #13
   1db34:	432a      	orrs	r2, r5
   1db36:	e7db      	b.n	1daf0 <_sercom_get_async_baud_val+0x44>
   1db38:	000242cd 	.word	0x000242cd
   1db3c:	0001d9c9 	.word	0x0001d9c9

0001db40 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1db40:	b510      	push	{r4, lr}
   1db42:	b082      	sub	sp, #8
   1db44:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1db46:	4b0e      	ldr	r3, [pc, #56]	; (1db80 <sercom_set_gclk_generator+0x40>)
   1db48:	781b      	ldrb	r3, [r3, #0]
   1db4a:	2b00      	cmp	r3, #0
   1db4c:	d007      	beq.n	1db5e <sercom_set_gclk_generator+0x1e>
   1db4e:	2900      	cmp	r1, #0
   1db50:	d105      	bne.n	1db5e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
   1db52:	4b0b      	ldr	r3, [pc, #44]	; (1db80 <sercom_set_gclk_generator+0x40>)
   1db54:	785b      	ldrb	r3, [r3, #1]
   1db56:	4283      	cmp	r3, r0
   1db58:	d010      	beq.n	1db7c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1db5a:	201d      	movs	r0, #29
   1db5c:	e00c      	b.n	1db78 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
   1db5e:	a901      	add	r1, sp, #4
   1db60:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1db62:	2013      	movs	r0, #19
   1db64:	4b07      	ldr	r3, [pc, #28]	; (1db84 <sercom_set_gclk_generator+0x44>)
   1db66:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   1db68:	2013      	movs	r0, #19
   1db6a:	4b07      	ldr	r3, [pc, #28]	; (1db88 <sercom_set_gclk_generator+0x48>)
   1db6c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
   1db6e:	4b04      	ldr	r3, [pc, #16]	; (1db80 <sercom_set_gclk_generator+0x40>)
   1db70:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
   1db72:	2201      	movs	r2, #1
   1db74:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
   1db76:	2000      	movs	r0, #0
}
   1db78:	b002      	add	sp, #8
   1db7a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
   1db7c:	2000      	movs	r0, #0
   1db7e:	e7fb      	b.n	1db78 <sercom_set_gclk_generator+0x38>
   1db80:	20003d90 	.word	0x20003d90
   1db84:	0001f0a5 	.word	0x0001f0a5
   1db88:	0001f019 	.word	0x0001f019

0001db8c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   1db8c:	4b40      	ldr	r3, [pc, #256]	; (1dc90 <_sercom_get_default_pad+0x104>)
   1db8e:	4298      	cmp	r0, r3
   1db90:	d031      	beq.n	1dbf6 <_sercom_get_default_pad+0x6a>
   1db92:	d90a      	bls.n	1dbaa <_sercom_get_default_pad+0x1e>
   1db94:	4b3f      	ldr	r3, [pc, #252]	; (1dc94 <_sercom_get_default_pad+0x108>)
   1db96:	4298      	cmp	r0, r3
   1db98:	d04d      	beq.n	1dc36 <_sercom_get_default_pad+0xaa>
   1db9a:	4b3f      	ldr	r3, [pc, #252]	; (1dc98 <_sercom_get_default_pad+0x10c>)
   1db9c:	4298      	cmp	r0, r3
   1db9e:	d05a      	beq.n	1dc56 <_sercom_get_default_pad+0xca>
   1dba0:	4b3e      	ldr	r3, [pc, #248]	; (1dc9c <_sercom_get_default_pad+0x110>)
   1dba2:	4298      	cmp	r0, r3
   1dba4:	d037      	beq.n	1dc16 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   1dba6:	2000      	movs	r0, #0
}
   1dba8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
   1dbaa:	4b3d      	ldr	r3, [pc, #244]	; (1dca0 <_sercom_get_default_pad+0x114>)
   1dbac:	4298      	cmp	r0, r3
   1dbae:	d00c      	beq.n	1dbca <_sercom_get_default_pad+0x3e>
   1dbb0:	4b3c      	ldr	r3, [pc, #240]	; (1dca4 <_sercom_get_default_pad+0x118>)
   1dbb2:	4298      	cmp	r0, r3
   1dbb4:	d1f7      	bne.n	1dba6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dbb6:	2901      	cmp	r1, #1
   1dbb8:	d017      	beq.n	1dbea <_sercom_get_default_pad+0x5e>
   1dbba:	2900      	cmp	r1, #0
   1dbbc:	d05d      	beq.n	1dc7a <_sercom_get_default_pad+0xee>
   1dbbe:	2902      	cmp	r1, #2
   1dbc0:	d015      	beq.n	1dbee <_sercom_get_default_pad+0x62>
   1dbc2:	2903      	cmp	r1, #3
   1dbc4:	d015      	beq.n	1dbf2 <_sercom_get_default_pad+0x66>
	return 0;
   1dbc6:	2000      	movs	r0, #0
   1dbc8:	e7ee      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dbca:	2901      	cmp	r1, #1
   1dbcc:	d007      	beq.n	1dbde <_sercom_get_default_pad+0x52>
   1dbce:	2900      	cmp	r1, #0
   1dbd0:	d051      	beq.n	1dc76 <_sercom_get_default_pad+0xea>
   1dbd2:	2902      	cmp	r1, #2
   1dbd4:	d005      	beq.n	1dbe2 <_sercom_get_default_pad+0x56>
   1dbd6:	2903      	cmp	r1, #3
   1dbd8:	d005      	beq.n	1dbe6 <_sercom_get_default_pad+0x5a>
	return 0;
   1dbda:	2000      	movs	r0, #0
   1dbdc:	e7e4      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dbde:	4832      	ldr	r0, [pc, #200]	; (1dca8 <_sercom_get_default_pad+0x11c>)
   1dbe0:	e7e2      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dbe2:	4832      	ldr	r0, [pc, #200]	; (1dcac <_sercom_get_default_pad+0x120>)
   1dbe4:	e7e0      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dbe6:	4832      	ldr	r0, [pc, #200]	; (1dcb0 <_sercom_get_default_pad+0x124>)
   1dbe8:	e7de      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dbea:	4832      	ldr	r0, [pc, #200]	; (1dcb4 <_sercom_get_default_pad+0x128>)
   1dbec:	e7dc      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dbee:	4832      	ldr	r0, [pc, #200]	; (1dcb8 <_sercom_get_default_pad+0x12c>)
   1dbf0:	e7da      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dbf2:	4832      	ldr	r0, [pc, #200]	; (1dcbc <_sercom_get_default_pad+0x130>)
   1dbf4:	e7d8      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dbf6:	2901      	cmp	r1, #1
   1dbf8:	d007      	beq.n	1dc0a <_sercom_get_default_pad+0x7e>
   1dbfa:	2900      	cmp	r1, #0
   1dbfc:	d03f      	beq.n	1dc7e <_sercom_get_default_pad+0xf2>
   1dbfe:	2902      	cmp	r1, #2
   1dc00:	d005      	beq.n	1dc0e <_sercom_get_default_pad+0x82>
   1dc02:	2903      	cmp	r1, #3
   1dc04:	d005      	beq.n	1dc12 <_sercom_get_default_pad+0x86>
	return 0;
   1dc06:	2000      	movs	r0, #0
   1dc08:	e7ce      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc0a:	482d      	ldr	r0, [pc, #180]	; (1dcc0 <_sercom_get_default_pad+0x134>)
   1dc0c:	e7cc      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc0e:	482d      	ldr	r0, [pc, #180]	; (1dcc4 <_sercom_get_default_pad+0x138>)
   1dc10:	e7ca      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc12:	482d      	ldr	r0, [pc, #180]	; (1dcc8 <_sercom_get_default_pad+0x13c>)
   1dc14:	e7c8      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc16:	2901      	cmp	r1, #1
   1dc18:	d007      	beq.n	1dc2a <_sercom_get_default_pad+0x9e>
   1dc1a:	2900      	cmp	r1, #0
   1dc1c:	d031      	beq.n	1dc82 <_sercom_get_default_pad+0xf6>
   1dc1e:	2902      	cmp	r1, #2
   1dc20:	d005      	beq.n	1dc2e <_sercom_get_default_pad+0xa2>
   1dc22:	2903      	cmp	r1, #3
   1dc24:	d005      	beq.n	1dc32 <_sercom_get_default_pad+0xa6>
	return 0;
   1dc26:	2000      	movs	r0, #0
   1dc28:	e7be      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc2a:	4828      	ldr	r0, [pc, #160]	; (1dccc <_sercom_get_default_pad+0x140>)
   1dc2c:	e7bc      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc2e:	4828      	ldr	r0, [pc, #160]	; (1dcd0 <_sercom_get_default_pad+0x144>)
   1dc30:	e7ba      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc32:	4828      	ldr	r0, [pc, #160]	; (1dcd4 <_sercom_get_default_pad+0x148>)
   1dc34:	e7b8      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc36:	2901      	cmp	r1, #1
   1dc38:	d007      	beq.n	1dc4a <_sercom_get_default_pad+0xbe>
   1dc3a:	2900      	cmp	r1, #0
   1dc3c:	d023      	beq.n	1dc86 <_sercom_get_default_pad+0xfa>
   1dc3e:	2902      	cmp	r1, #2
   1dc40:	d005      	beq.n	1dc4e <_sercom_get_default_pad+0xc2>
   1dc42:	2903      	cmp	r1, #3
   1dc44:	d005      	beq.n	1dc52 <_sercom_get_default_pad+0xc6>
	return 0;
   1dc46:	2000      	movs	r0, #0
   1dc48:	e7ae      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc4a:	4823      	ldr	r0, [pc, #140]	; (1dcd8 <_sercom_get_default_pad+0x14c>)
   1dc4c:	e7ac      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc4e:	4823      	ldr	r0, [pc, #140]	; (1dcdc <_sercom_get_default_pad+0x150>)
   1dc50:	e7aa      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc52:	4823      	ldr	r0, [pc, #140]	; (1dce0 <_sercom_get_default_pad+0x154>)
   1dc54:	e7a8      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc56:	2901      	cmp	r1, #1
   1dc58:	d007      	beq.n	1dc6a <_sercom_get_default_pad+0xde>
   1dc5a:	2900      	cmp	r1, #0
   1dc5c:	d015      	beq.n	1dc8a <_sercom_get_default_pad+0xfe>
   1dc5e:	2902      	cmp	r1, #2
   1dc60:	d005      	beq.n	1dc6e <_sercom_get_default_pad+0xe2>
   1dc62:	2903      	cmp	r1, #3
   1dc64:	d005      	beq.n	1dc72 <_sercom_get_default_pad+0xe6>
	return 0;
   1dc66:	2000      	movs	r0, #0
   1dc68:	e79e      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1dc6a:	481e      	ldr	r0, [pc, #120]	; (1dce4 <_sercom_get_default_pad+0x158>)
   1dc6c:	e79c      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc6e:	481e      	ldr	r0, [pc, #120]	; (1dce8 <_sercom_get_default_pad+0x15c>)
   1dc70:	e79a      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc72:	481e      	ldr	r0, [pc, #120]	; (1dcec <_sercom_get_default_pad+0x160>)
   1dc74:	e798      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc76:	481e      	ldr	r0, [pc, #120]	; (1dcf0 <_sercom_get_default_pad+0x164>)
   1dc78:	e796      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc7a:	2003      	movs	r0, #3
   1dc7c:	e794      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc7e:	481d      	ldr	r0, [pc, #116]	; (1dcf4 <_sercom_get_default_pad+0x168>)
   1dc80:	e792      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc82:	481d      	ldr	r0, [pc, #116]	; (1dcf8 <_sercom_get_default_pad+0x16c>)
   1dc84:	e790      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc86:	481d      	ldr	r0, [pc, #116]	; (1dcfc <_sercom_get_default_pad+0x170>)
   1dc88:	e78e      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc8a:	481d      	ldr	r0, [pc, #116]	; (1dd00 <_sercom_get_default_pad+0x174>)
   1dc8c:	e78c      	b.n	1dba8 <_sercom_get_default_pad+0x1c>
   1dc8e:	46c0      	nop			; (mov r8, r8)
   1dc90:	42001000 	.word	0x42001000
   1dc94:	42001800 	.word	0x42001800
   1dc98:	42001c00 	.word	0x42001c00
   1dc9c:	42001400 	.word	0x42001400
   1dca0:	42000800 	.word	0x42000800
   1dca4:	42000c00 	.word	0x42000c00
   1dca8:	00050003 	.word	0x00050003
   1dcac:	00060003 	.word	0x00060003
   1dcb0:	00070003 	.word	0x00070003
   1dcb4:	00010003 	.word	0x00010003
   1dcb8:	001e0003 	.word	0x001e0003
   1dcbc:	001f0003 	.word	0x001f0003
   1dcc0:	00090003 	.word	0x00090003
   1dcc4:	000a0003 	.word	0x000a0003
   1dcc8:	000b0003 	.word	0x000b0003
   1dccc:	00110003 	.word	0x00110003
   1dcd0:	00120003 	.word	0x00120003
   1dcd4:	00130003 	.word	0x00130003
   1dcd8:	000d0003 	.word	0x000d0003
   1dcdc:	000e0003 	.word	0x000e0003
   1dce0:	000f0003 	.word	0x000f0003
   1dce4:	00170003 	.word	0x00170003
   1dce8:	00180003 	.word	0x00180003
   1dcec:	00190003 	.word	0x00190003
   1dcf0:	00040003 	.word	0x00040003
   1dcf4:	00080003 	.word	0x00080003
   1dcf8:	00100003 	.word	0x00100003
   1dcfc:	000c0003 	.word	0x000c0003
   1dd00:	00160003 	.word	0x00160003

0001dd04 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1dd04:	b530      	push	{r4, r5, lr}
   1dd06:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   1dd08:	4b0b      	ldr	r3, [pc, #44]	; (1dd38 <_sercom_get_sercom_inst_index+0x34>)
   1dd0a:	466a      	mov	r2, sp
   1dd0c:	cb32      	ldmia	r3!, {r1, r4, r5}
   1dd0e:	c232      	stmia	r2!, {r1, r4, r5}
   1dd10:	cb32      	ldmia	r3!, {r1, r4, r5}
   1dd12:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1dd14:	9b00      	ldr	r3, [sp, #0]
   1dd16:	4283      	cmp	r3, r0
   1dd18:	d00b      	beq.n	1dd32 <_sercom_get_sercom_inst_index+0x2e>
   1dd1a:	2301      	movs	r3, #1
   1dd1c:	009a      	lsls	r2, r3, #2
   1dd1e:	4669      	mov	r1, sp
   1dd20:	5852      	ldr	r2, [r2, r1]
   1dd22:	4282      	cmp	r2, r0
   1dd24:	d006      	beq.n	1dd34 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1dd26:	3301      	adds	r3, #1
   1dd28:	2b06      	cmp	r3, #6
   1dd2a:	d1f7      	bne.n	1dd1c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   1dd2c:	2000      	movs	r0, #0
}
   1dd2e:	b007      	add	sp, #28
   1dd30:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1dd32:	2300      	movs	r3, #0
			return i;
   1dd34:	b2d8      	uxtb	r0, r3
   1dd36:	e7fa      	b.n	1dd2e <_sercom_get_sercom_inst_index+0x2a>
   1dd38:	0002a1e0 	.word	0x0002a1e0

0001dd3c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   1dd3c:	4770      	bx	lr
	...

0001dd40 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   1dd40:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1dd42:	4b0a      	ldr	r3, [pc, #40]	; (1dd6c <_sercom_set_handler+0x2c>)
   1dd44:	781b      	ldrb	r3, [r3, #0]
   1dd46:	2b00      	cmp	r3, #0
   1dd48:	d10c      	bne.n	1dd64 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1dd4a:	4f09      	ldr	r7, [pc, #36]	; (1dd70 <_sercom_set_handler+0x30>)
   1dd4c:	4e09      	ldr	r6, [pc, #36]	; (1dd74 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
   1dd4e:	4d0a      	ldr	r5, [pc, #40]	; (1dd78 <_sercom_set_handler+0x38>)
   1dd50:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1dd52:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
   1dd54:	195a      	adds	r2, r3, r5
   1dd56:	6014      	str	r4, [r2, #0]
   1dd58:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1dd5a:	2b18      	cmp	r3, #24
   1dd5c:	d1f9      	bne.n	1dd52 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
   1dd5e:	2201      	movs	r2, #1
   1dd60:	4b02      	ldr	r3, [pc, #8]	; (1dd6c <_sercom_set_handler+0x2c>)
   1dd62:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   1dd64:	0080      	lsls	r0, r0, #2
   1dd66:	4b02      	ldr	r3, [pc, #8]	; (1dd70 <_sercom_set_handler+0x30>)
   1dd68:	50c1      	str	r1, [r0, r3]
}
   1dd6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dd6c:	20003d92 	.word	0x20003d92
   1dd70:	20003d94 	.word	0x20003d94
   1dd74:	0001dd3d 	.word	0x0001dd3d
   1dd78:	20005554 	.word	0x20005554

0001dd7c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   1dd7c:	b500      	push	{lr}
   1dd7e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   1dd80:	2309      	movs	r3, #9
   1dd82:	466a      	mov	r2, sp
   1dd84:	7013      	strb	r3, [r2, #0]
   1dd86:	3301      	adds	r3, #1
   1dd88:	7053      	strb	r3, [r2, #1]
   1dd8a:	3301      	adds	r3, #1
   1dd8c:	7093      	strb	r3, [r2, #2]
   1dd8e:	3301      	adds	r3, #1
   1dd90:	70d3      	strb	r3, [r2, #3]
   1dd92:	3301      	adds	r3, #1
   1dd94:	7113      	strb	r3, [r2, #4]
   1dd96:	3301      	adds	r3, #1
   1dd98:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1dd9a:	4b03      	ldr	r3, [pc, #12]	; (1dda8 <_sercom_get_interrupt_vector+0x2c>)
   1dd9c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1dd9e:	466b      	mov	r3, sp
   1dda0:	5618      	ldrsb	r0, [r3, r0]
}
   1dda2:	b003      	add	sp, #12
   1dda4:	bd00      	pop	{pc}
   1dda6:	46c0      	nop			; (mov r8, r8)
   1dda8:	0001dd05 	.word	0x0001dd05

0001ddac <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   1ddac:	b510      	push	{r4, lr}
   1ddae:	4b02      	ldr	r3, [pc, #8]	; (1ddb8 <SERCOM0_Handler+0xc>)
   1ddb0:	681b      	ldr	r3, [r3, #0]
   1ddb2:	2000      	movs	r0, #0
   1ddb4:	4798      	blx	r3
   1ddb6:	bd10      	pop	{r4, pc}
   1ddb8:	20003d94 	.word	0x20003d94

0001ddbc <SERCOM1_Handler>:
   1ddbc:	b510      	push	{r4, lr}
   1ddbe:	4b02      	ldr	r3, [pc, #8]	; (1ddc8 <SERCOM1_Handler+0xc>)
   1ddc0:	685b      	ldr	r3, [r3, #4]
   1ddc2:	2001      	movs	r0, #1
   1ddc4:	4798      	blx	r3
   1ddc6:	bd10      	pop	{r4, pc}
   1ddc8:	20003d94 	.word	0x20003d94

0001ddcc <SERCOM2_Handler>:
   1ddcc:	b510      	push	{r4, lr}
   1ddce:	4b02      	ldr	r3, [pc, #8]	; (1ddd8 <SERCOM2_Handler+0xc>)
   1ddd0:	689b      	ldr	r3, [r3, #8]
   1ddd2:	2002      	movs	r0, #2
   1ddd4:	4798      	blx	r3
   1ddd6:	bd10      	pop	{r4, pc}
   1ddd8:	20003d94 	.word	0x20003d94

0001dddc <SERCOM3_Handler>:
   1dddc:	b510      	push	{r4, lr}
   1ddde:	4b02      	ldr	r3, [pc, #8]	; (1dde8 <SERCOM3_Handler+0xc>)
   1dde0:	68db      	ldr	r3, [r3, #12]
   1dde2:	2003      	movs	r0, #3
   1dde4:	4798      	blx	r3
   1dde6:	bd10      	pop	{r4, pc}
   1dde8:	20003d94 	.word	0x20003d94

0001ddec <SERCOM4_Handler>:
   1ddec:	b510      	push	{r4, lr}
   1ddee:	4b02      	ldr	r3, [pc, #8]	; (1ddf8 <SERCOM4_Handler+0xc>)
   1ddf0:	691b      	ldr	r3, [r3, #16]
   1ddf2:	2004      	movs	r0, #4
   1ddf4:	4798      	blx	r3
   1ddf6:	bd10      	pop	{r4, pc}
   1ddf8:	20003d94 	.word	0x20003d94

0001ddfc <SERCOM5_Handler>:
   1ddfc:	b510      	push	{r4, lr}
   1ddfe:	4b02      	ldr	r3, [pc, #8]	; (1de08 <SERCOM5_Handler+0xc>)
   1de00:	695b      	ldr	r3, [r3, #20]
   1de02:	2005      	movs	r0, #5
   1de04:	4798      	blx	r3
   1de06:	bd10      	pop	{r4, pc}
   1de08:	20003d94 	.word	0x20003d94

0001de0c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   1de0c:	b570      	push	{r4, r5, r6, lr}
   1de0e:	b082      	sub	sp, #8
   1de10:	0005      	movs	r5, r0
   1de12:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1de14:	2200      	movs	r2, #0
   1de16:	466b      	mov	r3, sp
   1de18:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
   1de1a:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1de1c:	0030      	movs	r0, r6
   1de1e:	4b24      	ldr	r3, [pc, #144]	; (1deb0 <spi_set_baudrate+0xa4>)
   1de20:	4798      	blx	r3
   1de22:	231f      	movs	r3, #31
   1de24:	4018      	ands	r0, r3
   1de26:	3b1e      	subs	r3, #30
   1de28:	4083      	lsls	r3, r0
   1de2a:	2280      	movs	r2, #128	; 0x80
   1de2c:	4921      	ldr	r1, [pc, #132]	; (1deb4 <spi_set_baudrate+0xa8>)
   1de2e:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1de30:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1de32:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1de34:	2b00      	cmp	r3, #0
   1de36:	d1fc      	bne.n	1de32 <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1de38:	338f      	adds	r3, #143	; 0x8f
   1de3a:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1de3c:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1de3e:	6833      	ldr	r3, [r6, #0]
   1de40:	2202      	movs	r2, #2
   1de42:	4393      	bics	r3, r2
   1de44:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1de46:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1de48:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
   1de4a:	2b00      	cmp	r3, #0
   1de4c:	d1fc      	bne.n	1de48 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1de4e:	4b1a      	ldr	r3, [pc, #104]	; (1deb8 <spi_set_baudrate+0xac>)
   1de50:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1de52:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1de54:	b2c0      	uxtb	r0, r0
   1de56:	4b19      	ldr	r3, [pc, #100]	; (1debc <spi_set_baudrate+0xb0>)
   1de58:	4798      	blx	r3
   1de5a:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   1de5c:	466b      	mov	r3, sp
   1de5e:	1d9a      	adds	r2, r3, #6
   1de60:	0020      	movs	r0, r4
   1de62:	4b17      	ldr	r3, [pc, #92]	; (1dec0 <spi_set_baudrate+0xb4>)
   1de64:	4798      	blx	r3
   1de66:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   1de68:	d003      	beq.n	1de72 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   1de6a:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
   1de6c:	0020      	movs	r0, r4
   1de6e:	b002      	add	sp, #8
   1de70:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
   1de72:	466b      	mov	r3, sp
   1de74:	3306      	adds	r3, #6
   1de76:	781b      	ldrb	r3, [r3, #0]
   1de78:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1de7a:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1de7c:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
   1de7e:	2b00      	cmp	r3, #0
   1de80:	d1fc      	bne.n	1de7c <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1de82:	0030      	movs	r0, r6
   1de84:	4b0a      	ldr	r3, [pc, #40]	; (1deb0 <spi_set_baudrate+0xa4>)
   1de86:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1de88:	231f      	movs	r3, #31
   1de8a:	4018      	ands	r0, r3
   1de8c:	3b1e      	subs	r3, #30
   1de8e:	4083      	lsls	r3, r0
   1de90:	4a08      	ldr	r2, [pc, #32]	; (1deb4 <spi_set_baudrate+0xa8>)
   1de92:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1de94:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1de96:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1de98:	2b00      	cmp	r3, #0
   1de9a:	d1fc      	bne.n	1de96 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1de9c:	6833      	ldr	r3, [r6, #0]
   1de9e:	2202      	movs	r2, #2
   1dea0:	4313      	orrs	r3, r2
   1dea2:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1dea4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1dea6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   1dea8:	2b00      	cmp	r3, #0
   1deaa:	d1fc      	bne.n	1dea6 <spi_set_baudrate+0x9a>
   1deac:	e7de      	b.n	1de6c <spi_set_baudrate+0x60>
   1deae:	46c0      	nop			; (mov r8, r8)
   1deb0:	0001dd7d 	.word	0x0001dd7d
   1deb4:	e000e100 	.word	0xe000e100
   1deb8:	0001dd05 	.word	0x0001dd05
   1debc:	0001f0c1 	.word	0x0001f0c1
   1dec0:	0001da83 	.word	0x0001da83

0001dec4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   1dec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dec6:	b08b      	sub	sp, #44	; 0x2c
   1dec8:	0005      	movs	r5, r0
   1deca:	000c      	movs	r4, r1
   1decc:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   1dece:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1ded0:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   1ded2:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   1ded4:	079b      	lsls	r3, r3, #30
   1ded6:	d501      	bpl.n	1dedc <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
   1ded8:	b00b      	add	sp, #44	; 0x2c
   1deda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1dedc:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
   1dede:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   1dee0:	07db      	lsls	r3, r3, #31
   1dee2:	d4f9      	bmi.n	1ded8 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1dee4:	0008      	movs	r0, r1
   1dee6:	4b60      	ldr	r3, [pc, #384]	; (1e068 <spi_init+0x1a4>)
   1dee8:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
   1deea:	4a60      	ldr	r2, [pc, #384]	; (1e06c <spi_init+0x1a8>)
   1deec:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1deee:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1def0:	2301      	movs	r3, #1
   1def2:	40bb      	lsls	r3, r7
   1def4:	430b      	orrs	r3, r1
   1def6:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   1def8:	a909      	add	r1, sp, #36	; 0x24
   1defa:	2724      	movs	r7, #36	; 0x24
   1defc:	5df3      	ldrb	r3, [r6, r7]
   1defe:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1df00:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1df02:	b2c3      	uxtb	r3, r0
   1df04:	9301      	str	r3, [sp, #4]
   1df06:	0018      	movs	r0, r3
   1df08:	4b59      	ldr	r3, [pc, #356]	; (1e070 <spi_init+0x1ac>)
   1df0a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1df0c:	9801      	ldr	r0, [sp, #4]
   1df0e:	4b59      	ldr	r3, [pc, #356]	; (1e074 <spi_init+0x1b0>)
   1df10:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1df12:	5df0      	ldrb	r0, [r6, r7]
   1df14:	2100      	movs	r1, #0
   1df16:	4b58      	ldr	r3, [pc, #352]	; (1e078 <spi_init+0x1b4>)
   1df18:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
   1df1a:	7833      	ldrb	r3, [r6, #0]
   1df1c:	2b01      	cmp	r3, #1
   1df1e:	d038      	beq.n	1df92 <spi_init+0xce>
   1df20:	002b      	movs	r3, r5
   1df22:	330c      	adds	r3, #12
   1df24:	0029      	movs	r1, r5
   1df26:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
   1df28:	2200      	movs	r2, #0
   1df2a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   1df2c:	428b      	cmp	r3, r1
   1df2e:	d1fc      	bne.n	1df2a <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
   1df30:	2300      	movs	r3, #0
   1df32:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   1df34:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   1df36:	2400      	movs	r4, #0
   1df38:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   1df3a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
   1df3c:	3336      	adds	r3, #54	; 0x36
   1df3e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
   1df40:	3301      	adds	r3, #1
   1df42:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
   1df44:	3301      	adds	r3, #1
   1df46:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
   1df48:	3b35      	subs	r3, #53	; 0x35
   1df4a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
   1df4c:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   1df4e:	6828      	ldr	r0, [r5, #0]
   1df50:	4b45      	ldr	r3, [pc, #276]	; (1e068 <spi_init+0x1a4>)
   1df52:	4798      	blx	r3
   1df54:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   1df56:	4949      	ldr	r1, [pc, #292]	; (1e07c <spi_init+0x1b8>)
   1df58:	4b49      	ldr	r3, [pc, #292]	; (1e080 <spi_init+0x1bc>)
   1df5a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1df5c:	00bf      	lsls	r7, r7, #2
   1df5e:	4b49      	ldr	r3, [pc, #292]	; (1e084 <spi_init+0x1c0>)
   1df60:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1df62:	682f      	ldr	r7, [r5, #0]
   1df64:	ab04      	add	r3, sp, #16
   1df66:	2280      	movs	r2, #128	; 0x80
   1df68:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1df6a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1df6c:	3a7f      	subs	r2, #127	; 0x7f
   1df6e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1df70:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
   1df72:	7833      	ldrb	r3, [r6, #0]
   1df74:	2b00      	cmp	r3, #0
   1df76:	d102      	bne.n	1df7e <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1df78:	2200      	movs	r2, #0
   1df7a:	ab04      	add	r3, sp, #16
   1df7c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   1df7e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1df80:	9305      	str	r3, [sp, #20]
   1df82:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1df84:	9306      	str	r3, [sp, #24]
   1df86:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1df88:	9307      	str	r3, [sp, #28]
   1df8a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1df8c:	9308      	str	r3, [sp, #32]
   1df8e:	2400      	movs	r4, #0
   1df90:	e00b      	b.n	1dfaa <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   1df92:	6823      	ldr	r3, [r4, #0]
   1df94:	220c      	movs	r2, #12
   1df96:	4313      	orrs	r3, r2
   1df98:	6023      	str	r3, [r4, #0]
   1df9a:	e7c1      	b.n	1df20 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1df9c:	0038      	movs	r0, r7
   1df9e:	4b3a      	ldr	r3, [pc, #232]	; (1e088 <spi_init+0x1c4>)
   1dfa0:	4798      	blx	r3
   1dfa2:	e00a      	b.n	1dfba <spi_init+0xf6>
   1dfa4:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1dfa6:	2c04      	cmp	r4, #4
   1dfa8:	d010      	beq.n	1dfcc <spi_init+0x108>
   1dfaa:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1dfac:	00a3      	lsls	r3, r4, #2
   1dfae:	aa02      	add	r2, sp, #8
   1dfb0:	200c      	movs	r0, #12
   1dfb2:	1812      	adds	r2, r2, r0
   1dfb4:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
   1dfb6:	2800      	cmp	r0, #0
   1dfb8:	d0f0      	beq.n	1df9c <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
   1dfba:	1c43      	adds	r3, r0, #1
   1dfbc:	d0f2      	beq.n	1dfa4 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1dfbe:	a904      	add	r1, sp, #16
   1dfc0:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1dfc2:	0c00      	lsrs	r0, r0, #16
   1dfc4:	b2c0      	uxtb	r0, r0
   1dfc6:	4b31      	ldr	r3, [pc, #196]	; (1e08c <spi_init+0x1c8>)
   1dfc8:	4798      	blx	r3
   1dfca:	e7eb      	b.n	1dfa4 <spi_init+0xe0>
	module->mode             = config->mode;
   1dfcc:	7833      	ldrb	r3, [r6, #0]
   1dfce:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
   1dfd0:	7c33      	ldrb	r3, [r6, #16]
   1dfd2:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
   1dfd4:	7cb3      	ldrb	r3, [r6, #18]
   1dfd6:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
   1dfd8:	7d33      	ldrb	r3, [r6, #20]
   1dfda:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
   1dfdc:	2200      	movs	r2, #0
   1dfde:	ab02      	add	r3, sp, #8
   1dfe0:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
   1dfe2:	7833      	ldrb	r3, [r6, #0]
   1dfe4:	2b01      	cmp	r3, #1
   1dfe6:	d028      	beq.n	1e03a <spi_init+0x176>
	ctrla |= config->transfer_mode;
   1dfe8:	6873      	ldr	r3, [r6, #4]
   1dfea:	68b2      	ldr	r2, [r6, #8]
   1dfec:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
   1dfee:	68f2      	ldr	r2, [r6, #12]
   1dff0:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
   1dff2:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
   1dff4:	7c72      	ldrb	r2, [r6, #17]
   1dff6:	2a00      	cmp	r2, #0
   1dff8:	d103      	bne.n	1e002 <spi_init+0x13e>
   1dffa:	4a25      	ldr	r2, [pc, #148]	; (1e090 <spi_init+0x1cc>)
   1dffc:	7892      	ldrb	r2, [r2, #2]
   1dffe:	0792      	lsls	r2, r2, #30
   1e000:	d501      	bpl.n	1e006 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   1e002:	2280      	movs	r2, #128	; 0x80
   1e004:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
   1e006:	7cb2      	ldrb	r2, [r6, #18]
   1e008:	2a00      	cmp	r2, #0
   1e00a:	d002      	beq.n	1e012 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   1e00c:	2280      	movs	r2, #128	; 0x80
   1e00e:	0292      	lsls	r2, r2, #10
   1e010:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
   1e012:	7cf2      	ldrb	r2, [r6, #19]
   1e014:	2a00      	cmp	r2, #0
   1e016:	d002      	beq.n	1e01e <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   1e018:	2280      	movs	r2, #128	; 0x80
   1e01a:	0092      	lsls	r2, r2, #2
   1e01c:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
   1e01e:	7d32      	ldrb	r2, [r6, #20]
   1e020:	2a00      	cmp	r2, #0
   1e022:	d002      	beq.n	1e02a <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   1e024:	2280      	movs	r2, #128	; 0x80
   1e026:	0192      	lsls	r2, r2, #6
   1e028:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
   1e02a:	683a      	ldr	r2, [r7, #0]
   1e02c:	4313      	orrs	r3, r2
   1e02e:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
   1e030:	687b      	ldr	r3, [r7, #4]
   1e032:	430b      	orrs	r3, r1
   1e034:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
   1e036:	2000      	movs	r0, #0
   1e038:	e74e      	b.n	1ded8 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e03a:	6828      	ldr	r0, [r5, #0]
   1e03c:	4b0a      	ldr	r3, [pc, #40]	; (1e068 <spi_init+0x1a4>)
   1e03e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e040:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   1e042:	b2c0      	uxtb	r0, r0
   1e044:	4b13      	ldr	r3, [pc, #76]	; (1e094 <spi_init+0x1d0>)
   1e046:	4798      	blx	r3
   1e048:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
   1e04a:	ab02      	add	r3, sp, #8
   1e04c:	1d9a      	adds	r2, r3, #6
   1e04e:	69b0      	ldr	r0, [r6, #24]
   1e050:	4b11      	ldr	r3, [pc, #68]	; (1e098 <spi_init+0x1d4>)
   1e052:	4798      	blx	r3
   1e054:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
   1e056:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
   1e058:	2b00      	cmp	r3, #0
   1e05a:	d000      	beq.n	1e05e <spi_init+0x19a>
   1e05c:	e73c      	b.n	1ded8 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
   1e05e:	ab02      	add	r3, sp, #8
   1e060:	3306      	adds	r3, #6
   1e062:	781b      	ldrb	r3, [r3, #0]
   1e064:	733b      	strb	r3, [r7, #12]
   1e066:	e7bf      	b.n	1dfe8 <spi_init+0x124>
   1e068:	0001dd05 	.word	0x0001dd05
   1e06c:	40000400 	.word	0x40000400
   1e070:	0001f0a5 	.word	0x0001f0a5
   1e074:	0001f019 	.word	0x0001f019
   1e078:	0001db41 	.word	0x0001db41
   1e07c:	0001e331 	.word	0x0001e331
   1e080:	0001dd41 	.word	0x0001dd41
   1e084:	20005554 	.word	0x20005554
   1e088:	0001db8d 	.word	0x0001db8d
   1e08c:	0001f1cd 	.word	0x0001f1cd
   1e090:	41002000 	.word	0x41002000
   1e094:	0001f0c1 	.word	0x0001f0c1
   1e098:	0001da83 	.word	0x0001da83

0001e09c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   1e09c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e09e:	46d6      	mov	lr, sl
   1e0a0:	4647      	mov	r7, r8
   1e0a2:	b580      	push	{r7, lr}
   1e0a4:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1e0a6:	2438      	movs	r4, #56	; 0x38
   1e0a8:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1e0aa:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   1e0ac:	2d05      	cmp	r5, #5
   1e0ae:	d002      	beq.n	1e0b6 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e0b0:	3412      	adds	r4, #18
	if (length == 0) {
   1e0b2:	2a00      	cmp	r2, #0
   1e0b4:	d105      	bne.n	1e0c2 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
   1e0b6:	0020      	movs	r0, r4
   1e0b8:	b003      	add	sp, #12
   1e0ba:	bc0c      	pop	{r2, r3}
   1e0bc:	4690      	mov	r8, r2
   1e0be:	469a      	mov	sl, r3
   1e0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
   1e0c2:	79c4      	ldrb	r4, [r0, #7]
   1e0c4:	2c00      	cmp	r4, #0
   1e0c6:	d144      	bne.n	1e152 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
   1e0c8:	341c      	adds	r4, #28
   1e0ca:	e7f4      	b.n	1e0b6 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e0cc:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e0ce:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
   1e0d0:	423c      	tst	r4, r7
   1e0d2:	d0fc      	beq.n	1e0ce <spi_read_buffer_wait+0x32>
   1e0d4:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
   1e0d6:	423c      	tst	r4, r7
   1e0d8:	d01a      	beq.n	1e110 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e0da:	4644      	mov	r4, r8
   1e0dc:	62ac      	str	r4, [r5, #40]	; 0x28
   1e0de:	e017      	b.n	1e110 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e0e0:	7984      	ldrb	r4, [r0, #6]
   1e0e2:	2c01      	cmp	r4, #1
   1e0e4:	d026      	beq.n	1e134 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e0e6:	6aad      	ldr	r5, [r5, #40]	; 0x28
   1e0e8:	b2ec      	uxtb	r4, r5
   1e0ea:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
   1e0ec:	9c01      	ldr	r4, [sp, #4]
   1e0ee:	2c00      	cmp	r4, #0
   1e0f0:	d13a      	bne.n	1e168 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
   1e0f2:	1c75      	adds	r5, r6, #1
   1e0f4:	b2ad      	uxth	r5, r5
   1e0f6:	4664      	mov	r4, ip
   1e0f8:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e0fa:	7984      	ldrb	r4, [r0, #6]
   1e0fc:	2c01      	cmp	r4, #1
   1e0fe:	d01e      	beq.n	1e13e <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
   1e100:	002e      	movs	r6, r5
	while (length--) {
   1e102:	3a01      	subs	r2, #1
   1e104:	b292      	uxth	r2, r2
   1e106:	4552      	cmp	r2, sl
   1e108:	d01f      	beq.n	1e14a <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
   1e10a:	7944      	ldrb	r4, [r0, #5]
   1e10c:	2c01      	cmp	r4, #1
   1e10e:	d0dd      	beq.n	1e0cc <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e110:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e112:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
   1e114:	421c      	tst	r4, r3
   1e116:	d0fc      	beq.n	1e112 <spi_read_buffer_wait+0x76>
   1e118:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
   1e11a:	421c      	tst	r4, r3
   1e11c:	d017      	beq.n	1e14e <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e11e:	8b6c      	ldrh	r4, [r5, #26]
   1e120:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
   1e122:	2400      	movs	r4, #0
   1e124:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e126:	4664      	mov	r4, ip
   1e128:	421c      	tst	r4, r3
   1e12a:	d0d9      	beq.n	1e0e0 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e12c:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
   1e12e:	241e      	movs	r4, #30
   1e130:	9401      	str	r4, [sp, #4]
   1e132:	e7d5      	b.n	1e0e0 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e134:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1e136:	05e4      	lsls	r4, r4, #23
   1e138:	0de4      	lsrs	r4, r4, #23
   1e13a:	46a4      	mov	ip, r4
   1e13c:	e7d6      	b.n	1e0ec <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
   1e13e:	3602      	adds	r6, #2
   1e140:	b2b6      	uxth	r6, r6
   1e142:	4664      	mov	r4, ip
   1e144:	0a24      	lsrs	r4, r4, #8
   1e146:	554c      	strb	r4, [r1, r5]
   1e148:	e7db      	b.n	1e102 <spi_read_buffer_wait+0x66>
   1e14a:	9c01      	ldr	r4, [sp, #4]
   1e14c:	e7b3      	b.n	1e0b6 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
   1e14e:	2410      	movs	r4, #16
   1e150:	e7b1      	b.n	1e0b6 <spi_read_buffer_wait+0x1a>
	while (length--) {
   1e152:	3a01      	subs	r2, #1
   1e154:	b292      	uxth	r2, r2
   1e156:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
   1e158:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e15a:	05db      	lsls	r3, r3, #23
   1e15c:	0ddb      	lsrs	r3, r3, #23
   1e15e:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
   1e160:	2304      	movs	r3, #4
	while (length--) {
   1e162:	4c02      	ldr	r4, [pc, #8]	; (1e16c <spi_read_buffer_wait+0xd0>)
   1e164:	46a2      	mov	sl, r4
   1e166:	e7d0      	b.n	1e10a <spi_read_buffer_wait+0x6e>
   1e168:	9c01      	ldr	r4, [sp, #4]
   1e16a:	e7a4      	b.n	1e0b6 <spi_read_buffer_wait+0x1a>
   1e16c:	0000ffff 	.word	0x0000ffff

0001e170 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   1e170:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1e172:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
   1e174:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
   1e176:	2c01      	cmp	r4, #1
   1e178:	d001      	beq.n	1e17e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
   1e17a:	0018      	movs	r0, r3
   1e17c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
   1e17e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
   1e180:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
   1e182:	2c00      	cmp	r4, #0
   1e184:	d1f9      	bne.n	1e17a <spi_select_slave+0xa>
		if (select) {
   1e186:	2a00      	cmp	r2, #0
   1e188:	d058      	beq.n	1e23c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
   1e18a:	784b      	ldrb	r3, [r1, #1]
   1e18c:	2b00      	cmp	r3, #0
   1e18e:	d044      	beq.n	1e21a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e190:	6803      	ldr	r3, [r0, #0]
   1e192:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
   1e194:	07db      	lsls	r3, r3, #31
   1e196:	d410      	bmi.n	1e1ba <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
   1e198:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e19a:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1e19c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e19e:	2900      	cmp	r1, #0
   1e1a0:	d104      	bne.n	1e1ac <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
   1e1a2:	0953      	lsrs	r3, r2, #5
   1e1a4:	01db      	lsls	r3, r3, #7
   1e1a6:	492e      	ldr	r1, [pc, #184]	; (1e260 <spi_select_slave+0xf0>)
   1e1a8:	468c      	mov	ip, r1
   1e1aa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e1ac:	211f      	movs	r1, #31
   1e1ae:	4011      	ands	r1, r2
   1e1b0:	2201      	movs	r2, #1
   1e1b2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1e1b4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
   1e1b6:	2305      	movs	r3, #5
   1e1b8:	e7df      	b.n	1e17a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   1e1ba:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e1bc:	09d4      	lsrs	r4, r2, #7
		return NULL;
   1e1be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e1c0:	2c00      	cmp	r4, #0
   1e1c2:	d104      	bne.n	1e1ce <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
   1e1c4:	0953      	lsrs	r3, r2, #5
   1e1c6:	01db      	lsls	r3, r3, #7
   1e1c8:	4c25      	ldr	r4, [pc, #148]	; (1e260 <spi_select_slave+0xf0>)
   1e1ca:	46a4      	mov	ip, r4
   1e1cc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e1ce:	241f      	movs	r4, #31
   1e1d0:	4014      	ands	r4, r2
   1e1d2:	2201      	movs	r2, #1
   1e1d4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
   1e1d6:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e1d8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e1da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
   1e1dc:	07d2      	lsls	r2, r2, #31
   1e1de:	d501      	bpl.n	1e1e4 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e1e0:	788a      	ldrb	r2, [r1, #2]
   1e1e2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
   1e1e4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
   1e1e6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
   1e1e8:	2a00      	cmp	r2, #0
   1e1ea:	d1c6      	bne.n	1e17a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e1ec:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
   1e1ee:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e1f0:	7e13      	ldrb	r3, [r2, #24]
   1e1f2:	420b      	tst	r3, r1
   1e1f4:	d0fc      	beq.n	1e1f0 <spi_select_slave+0x80>
   1e1f6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
   1e1f8:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
   1e1fa:	0749      	lsls	r1, r1, #29
   1e1fc:	d5bd      	bpl.n	1e17a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e1fe:	8b53      	ldrh	r3, [r2, #26]
   1e200:	075b      	lsls	r3, r3, #29
   1e202:	d501      	bpl.n	1e208 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e204:	2304      	movs	r3, #4
   1e206:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e208:	7983      	ldrb	r3, [r0, #6]
   1e20a:	2b01      	cmp	r3, #1
   1e20c:	d002      	beq.n	1e214 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e20e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e210:	2300      	movs	r3, #0
   1e212:	e7b2      	b.n	1e17a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e214:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e216:	2300      	movs	r3, #0
   1e218:	e7af      	b.n	1e17a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
   1e21a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e21c:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1e21e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e220:	2900      	cmp	r1, #0
   1e222:	d104      	bne.n	1e22e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
   1e224:	0953      	lsrs	r3, r2, #5
   1e226:	01db      	lsls	r3, r3, #7
   1e228:	490d      	ldr	r1, [pc, #52]	; (1e260 <spi_select_slave+0xf0>)
   1e22a:	468c      	mov	ip, r1
   1e22c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e22e:	211f      	movs	r1, #31
   1e230:	4011      	ands	r1, r2
   1e232:	2201      	movs	r2, #1
   1e234:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
   1e236:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
   1e238:	2300      	movs	r3, #0
   1e23a:	e79e      	b.n	1e17a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
   1e23c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
   1e23e:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1e240:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1e242:	2900      	cmp	r1, #0
   1e244:	d104      	bne.n	1e250 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
   1e246:	0953      	lsrs	r3, r2, #5
   1e248:	01db      	lsls	r3, r3, #7
   1e24a:	4905      	ldr	r1, [pc, #20]	; (1e260 <spi_select_slave+0xf0>)
   1e24c:	468c      	mov	ip, r1
   1e24e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e250:	211f      	movs	r1, #31
   1e252:	4011      	ands	r1, r2
   1e254:	2201      	movs	r2, #1
   1e256:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   1e258:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
   1e25a:	2300      	movs	r3, #0
   1e25c:	e78d      	b.n	1e17a <spi_select_slave+0xa>
   1e25e:	46c0      	nop			; (mov r8, r8)
   1e260:	41004400 	.word	0x41004400

0001e264 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   1e264:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e266:	46de      	mov	lr, fp
   1e268:	4657      	mov	r7, sl
   1e26a:	464e      	mov	r6, r9
   1e26c:	4645      	mov	r5, r8
   1e26e:	b5e0      	push	{r5, r6, r7, lr}
   1e270:	b083      	sub	sp, #12
   1e272:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1e274:	2338      	movs	r3, #56	; 0x38
   1e276:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1e278:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
   1e27a:	2c05      	cmp	r4, #5
   1e27c:	d002      	beq.n	1e284 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e27e:	3312      	adds	r3, #18
	if (length == 0) {
   1e280:	2a00      	cmp	r2, #0
   1e282:	d14b      	bne.n	1e31c <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
   1e284:	0018      	movs	r0, r3
   1e286:	b003      	add	sp, #12
   1e288:	bc3c      	pop	{r2, r3, r4, r5}
   1e28a:	4690      	mov	r8, r2
   1e28c:	4699      	mov	r9, r3
   1e28e:	46a2      	mov	sl, r4
   1e290:	46ab      	mov	fp, r5
   1e292:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
   1e294:	3702      	adds	r7, #2
   1e296:	b2bf      	uxth	r7, r7
   1e298:	4641      	mov	r1, r8
   1e29a:	4653      	mov	r3, sl
   1e29c:	5c59      	ldrb	r1, [r3, r1]
   1e29e:	0209      	lsls	r1, r1, #8
   1e2a0:	465b      	mov	r3, fp
   1e2a2:	430b      	orrs	r3, r1
   1e2a4:	e018      	b.n	1e2d8 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e2a6:	7983      	ldrb	r3, [r0, #6]
   1e2a8:	2b01      	cmp	r3, #1
   1e2aa:	d02a      	beq.n	1e302 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1e2ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
   1e2ae:	3e01      	subs	r6, #1
   1e2b0:	b2b6      	uxth	r6, r6
   1e2b2:	4566      	cmp	r6, ip
   1e2b4:	d027      	beq.n	1e306 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e2b6:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1e2b8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
   1e2ba:	4223      	tst	r3, r4
   1e2bc:	d0fc      	beq.n	1e2b8 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
   1e2be:	1c7b      	adds	r3, r7, #1
   1e2c0:	b29b      	uxth	r3, r3
   1e2c2:	4698      	mov	r8, r3
   1e2c4:	4653      	mov	r3, sl
   1e2c6:	5ddb      	ldrb	r3, [r3, r7]
   1e2c8:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e2ca:	7981      	ldrb	r1, [r0, #6]
   1e2cc:	2901      	cmp	r1, #1
   1e2ce:	d0e1      	beq.n	1e294 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
   1e2d0:	4669      	mov	r1, sp
   1e2d2:	80cb      	strh	r3, [r1, #6]
   1e2d4:	88cb      	ldrh	r3, [r1, #6]
   1e2d6:	4647      	mov	r7, r8
   1e2d8:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
   1e2da:	4221      	tst	r1, r4
   1e2dc:	d002      	beq.n	1e2e4 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1e2de:	05db      	lsls	r3, r3, #23
   1e2e0:	0ddb      	lsrs	r3, r3, #23
   1e2e2:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
   1e2e4:	79c3      	ldrb	r3, [r0, #7]
   1e2e6:	2b00      	cmp	r3, #0
   1e2e8:	d0e1      	beq.n	1e2ae <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e2ea:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1e2ec:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
   1e2ee:	422b      	tst	r3, r5
   1e2f0:	d0fc      	beq.n	1e2ec <spi_write_buffer_wait+0x88>
   1e2f2:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
   1e2f4:	422b      	tst	r3, r5
   1e2f6:	d0da      	beq.n	1e2ae <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e2f8:	8b53      	ldrh	r3, [r2, #26]
   1e2fa:	422b      	tst	r3, r5
   1e2fc:	d0d3      	beq.n	1e2a6 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e2fe:	8355      	strh	r5, [r2, #26]
   1e300:	e7d1      	b.n	1e2a6 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e302:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e304:	e7d3      	b.n	1e2ae <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
   1e306:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
   1e308:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
   1e30a:	2a01      	cmp	r2, #1
   1e30c:	d1ba      	bne.n	1e284 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
   1e30e:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
   1e310:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1e312:	7e0b      	ldrb	r3, [r1, #24]
   1e314:	4213      	tst	r3, r2
   1e316:	d0fc      	beq.n	1e312 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
   1e318:	2300      	movs	r3, #0
   1e31a:	e7b3      	b.n	1e284 <spi_write_buffer_wait+0x20>
	while (length--) {
   1e31c:	3a01      	subs	r2, #1
   1e31e:	b296      	uxth	r6, r2
   1e320:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
   1e322:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
   1e324:	2504      	movs	r5, #4
	while (length--) {
   1e326:	4b01      	ldr	r3, [pc, #4]	; (1e32c <spi_write_buffer_wait+0xc8>)
   1e328:	469c      	mov	ip, r3
   1e32a:	e7c4      	b.n	1e2b6 <spi_write_buffer_wait+0x52>
   1e32c:	0000ffff 	.word	0x0000ffff

0001e330 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   1e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
   1e332:	0080      	lsls	r0, r0, #2
   1e334:	4b70      	ldr	r3, [pc, #448]	; (1e4f8 <_spi_interrupt_handler+0x1c8>)
   1e336:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e338:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   1e33a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
   1e33c:	5ce7      	ldrb	r7, [r4, r3]
   1e33e:	2236      	movs	r2, #54	; 0x36
   1e340:	5ca2      	ldrb	r2, [r4, r2]
   1e342:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   1e344:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
   1e346:	7db5      	ldrb	r5, [r6, #22]
   1e348:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   1e34a:	07eb      	lsls	r3, r5, #31
   1e34c:	d502      	bpl.n	1e354 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1e34e:	7963      	ldrb	r3, [r4, #5]
   1e350:	2b01      	cmp	r3, #1
   1e352:	d01e      	beq.n	1e392 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   1e354:	076b      	lsls	r3, r5, #29
   1e356:	d511      	bpl.n	1e37c <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1e358:	8b73      	ldrh	r3, [r6, #26]
   1e35a:	075b      	lsls	r3, r3, #29
   1e35c:	d55a      	bpl.n	1e414 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
   1e35e:	7a63      	ldrb	r3, [r4, #9]
   1e360:	2b01      	cmp	r3, #1
   1e362:	d008      	beq.n	1e376 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   1e364:	221e      	movs	r2, #30
   1e366:	2338      	movs	r3, #56	; 0x38
   1e368:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   1e36a:	3b35      	subs	r3, #53	; 0x35
   1e36c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   1e36e:	3302      	adds	r3, #2
   1e370:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   1e372:	073b      	lsls	r3, r7, #28
   1e374:	d44a      	bmi.n	1e40c <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   1e376:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1e378:	2304      	movs	r3, #4
   1e37a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   1e37c:	07ab      	lsls	r3, r5, #30
   1e37e:	d503      	bpl.n	1e388 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1e380:	7963      	ldrb	r3, [r4, #5]
   1e382:	2b01      	cmp	r3, #1
   1e384:	d100      	bne.n	1e388 <_spi_interrupt_handler+0x58>
   1e386:	e097      	b.n	1e4b8 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   1e388:	b26d      	sxtb	r5, r5
   1e38a:	2d00      	cmp	r5, #0
   1e38c:	da00      	bge.n	1e390 <_spi_interrupt_handler+0x60>
   1e38e:	e0a9      	b.n	1e4e4 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
   1e390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
   1e392:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   1e394:	2b00      	cmp	r3, #0
   1e396:	d022      	beq.n	1e3de <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
   1e398:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
   1e39a:	2b00      	cmp	r3, #0
   1e39c:	d0da      	beq.n	1e354 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e39e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1e3a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1e3a2:	7813      	ldrb	r3, [r2, #0]
   1e3a4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
   1e3a6:	1c50      	adds	r0, r2, #1
   1e3a8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e3aa:	79a0      	ldrb	r0, [r4, #6]
   1e3ac:	2801      	cmp	r0, #1
   1e3ae:	d027      	beq.n	1e400 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1e3b0:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   1e3b2:	05db      	lsls	r3, r3, #23
   1e3b4:	0ddb      	lsrs	r3, r3, #23
   1e3b6:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
   1e3b8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1e3ba:	3b01      	subs	r3, #1
   1e3bc:	b29b      	uxth	r3, r3
   1e3be:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
   1e3c0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1e3c2:	b29b      	uxth	r3, r3
   1e3c4:	2b00      	cmp	r3, #0
   1e3c6:	d1c5      	bne.n	1e354 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   1e3c8:	3301      	adds	r3, #1
   1e3ca:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
   1e3cc:	7a63      	ldrb	r3, [r4, #9]
   1e3ce:	2b01      	cmp	r3, #1
   1e3d0:	d1c0      	bne.n	1e354 <_spi_interrupt_handler+0x24>
   1e3d2:	79e3      	ldrb	r3, [r4, #7]
   1e3d4:	2b00      	cmp	r3, #0
   1e3d6:	d1bd      	bne.n	1e354 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1e3d8:	3302      	adds	r3, #2
   1e3da:	75b3      	strb	r3, [r6, #22]
   1e3dc:	e7ba      	b.n	1e354 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
   1e3de:	4b47      	ldr	r3, [pc, #284]	; (1e4fc <_spi_interrupt_handler+0x1cc>)
   1e3e0:	881b      	ldrh	r3, [r3, #0]
   1e3e2:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   1e3e4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e3e6:	3b01      	subs	r3, #1
   1e3e8:	b29b      	uxth	r3, r3
   1e3ea:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
   1e3ec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e3ee:	b29b      	uxth	r3, r3
   1e3f0:	2b00      	cmp	r3, #0
   1e3f2:	d101      	bne.n	1e3f8 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   1e3f4:	3301      	adds	r3, #1
   1e3f6:	7533      	strb	r3, [r6, #20]
		if (0
   1e3f8:	7963      	ldrb	r3, [r4, #5]
   1e3fa:	2b01      	cmp	r3, #1
   1e3fc:	d0cc      	beq.n	1e398 <_spi_interrupt_handler+0x68>
   1e3fe:	e7a9      	b.n	1e354 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1e400:	7850      	ldrb	r0, [r2, #1]
   1e402:	0200      	lsls	r0, r0, #8
   1e404:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
   1e406:	3202      	adds	r2, #2
   1e408:	62e2      	str	r2, [r4, #44]	; 0x2c
   1e40a:	e7d2      	b.n	1e3b2 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   1e40c:	0020      	movs	r0, r4
   1e40e:	69a3      	ldr	r3, [r4, #24]
   1e410:	4798      	blx	r3
   1e412:	e7b0      	b.n	1e376 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
   1e414:	7a63      	ldrb	r3, [r4, #9]
   1e416:	2b01      	cmp	r3, #1
   1e418:	d028      	beq.n	1e46c <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e41a:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   1e41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e41e:	05db      	lsls	r3, r3, #23
   1e420:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
   1e422:	b2da      	uxtb	r2, r3
   1e424:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1e426:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
   1e428:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1e42a:	1c51      	adds	r1, r2, #1
   1e42c:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1e42e:	79a1      	ldrb	r1, [r4, #6]
   1e430:	2901      	cmp	r1, #1
   1e432:	d034      	beq.n	1e49e <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
   1e434:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1e436:	3b01      	subs	r3, #1
   1e438:	b29b      	uxth	r3, r3
   1e43a:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
   1e43c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1e43e:	b29b      	uxth	r3, r3
   1e440:	2b00      	cmp	r3, #0
   1e442:	d000      	beq.n	1e446 <_spi_interrupt_handler+0x116>
   1e444:	e79a      	b.n	1e37c <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
   1e446:	2200      	movs	r2, #0
   1e448:	3338      	adds	r3, #56	; 0x38
   1e44a:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1e44c:	3b34      	subs	r3, #52	; 0x34
   1e44e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   1e450:	7a63      	ldrb	r3, [r4, #9]
   1e452:	2b02      	cmp	r3, #2
   1e454:	d029      	beq.n	1e4aa <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
   1e456:	7a63      	ldrb	r3, [r4, #9]
   1e458:	2b00      	cmp	r3, #0
   1e45a:	d000      	beq.n	1e45e <_spi_interrupt_handler+0x12e>
   1e45c:	e78e      	b.n	1e37c <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   1e45e:	07bb      	lsls	r3, r7, #30
   1e460:	d400      	bmi.n	1e464 <_spi_interrupt_handler+0x134>
   1e462:	e78b      	b.n	1e37c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   1e464:	0020      	movs	r0, r4
   1e466:	6923      	ldr	r3, [r4, #16]
   1e468:	4798      	blx	r3
   1e46a:	e787      	b.n	1e37c <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1e46c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
   1e46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
   1e470:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e472:	3b01      	subs	r3, #1
   1e474:	b29b      	uxth	r3, r3
   1e476:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
   1e478:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e47a:	b29b      	uxth	r3, r3
   1e47c:	2b00      	cmp	r3, #0
   1e47e:	d000      	beq.n	1e482 <_spi_interrupt_handler+0x152>
   1e480:	e77c      	b.n	1e37c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1e482:	3304      	adds	r3, #4
   1e484:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
   1e486:	2200      	movs	r2, #0
   1e488:	3334      	adds	r3, #52	; 0x34
   1e48a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
   1e48c:	3b35      	subs	r3, #53	; 0x35
   1e48e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
   1e490:	07fb      	lsls	r3, r7, #31
   1e492:	d400      	bmi.n	1e496 <_spi_interrupt_handler+0x166>
   1e494:	e772      	b.n	1e37c <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   1e496:	0020      	movs	r0, r4
   1e498:	68e3      	ldr	r3, [r4, #12]
   1e49a:	4798      	blx	r3
   1e49c:	e76e      	b.n	1e37c <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
   1e49e:	0a1b      	lsrs	r3, r3, #8
   1e4a0:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
   1e4a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1e4a4:	3301      	adds	r3, #1
   1e4a6:	62a3      	str	r3, [r4, #40]	; 0x28
   1e4a8:	e7c4      	b.n	1e434 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   1e4aa:	077b      	lsls	r3, r7, #29
   1e4ac:	d400      	bmi.n	1e4b0 <_spi_interrupt_handler+0x180>
   1e4ae:	e765      	b.n	1e37c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   1e4b0:	0020      	movs	r0, r4
   1e4b2:	6963      	ldr	r3, [r4, #20]
   1e4b4:	4798      	blx	r3
   1e4b6:	e761      	b.n	1e37c <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1e4b8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
   1e4ba:	2b01      	cmp	r3, #1
   1e4bc:	d000      	beq.n	1e4c0 <_spi_interrupt_handler+0x190>
   1e4be:	e763      	b.n	1e388 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1e4c0:	79e3      	ldrb	r3, [r4, #7]
   1e4c2:	2b00      	cmp	r3, #0
   1e4c4:	d000      	beq.n	1e4c8 <_spi_interrupt_handler+0x198>
   1e4c6:	e75f      	b.n	1e388 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1e4c8:	3302      	adds	r3, #2
   1e4ca:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
   1e4cc:	3301      	adds	r3, #1
   1e4ce:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
   1e4d0:	2200      	movs	r2, #0
   1e4d2:	3335      	adds	r3, #53	; 0x35
   1e4d4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   1e4d6:	07fb      	lsls	r3, r7, #31
   1e4d8:	d400      	bmi.n	1e4dc <_spi_interrupt_handler+0x1ac>
   1e4da:	e755      	b.n	1e388 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   1e4dc:	0020      	movs	r0, r4
   1e4de:	68e3      	ldr	r3, [r4, #12]
   1e4e0:	4798      	blx	r3
   1e4e2:	e751      	b.n	1e388 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1e4e4:	2380      	movs	r3, #128	; 0x80
   1e4e6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1e4e8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   1e4ea:	067b      	lsls	r3, r7, #25
   1e4ec:	d400      	bmi.n	1e4f0 <_spi_interrupt_handler+0x1c0>
   1e4ee:	e74f      	b.n	1e390 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1e4f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e4f2:	0020      	movs	r0, r4
   1e4f4:	4798      	blx	r3
}
   1e4f6:	e74b      	b.n	1e390 <_spi_interrupt_handler+0x60>
   1e4f8:	20005554 	.word	0x20005554
   1e4fc:	2000556c 	.word	0x2000556c

0001e500 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   1e500:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e502:	46de      	mov	lr, fp
   1e504:	4657      	mov	r7, sl
   1e506:	464e      	mov	r6, r9
   1e508:	4645      	mov	r5, r8
   1e50a:	b5e0      	push	{r5, r6, r7, lr}
   1e50c:	b091      	sub	sp, #68	; 0x44
   1e50e:	0005      	movs	r5, r0
   1e510:	000c      	movs	r4, r1
   1e512:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   1e514:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e516:	0008      	movs	r0, r1
   1e518:	4bbc      	ldr	r3, [pc, #752]	; (1e80c <usart_init+0x30c>)
   1e51a:	4798      	blx	r3
   1e51c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1e51e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   1e520:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1e522:	07db      	lsls	r3, r3, #31
   1e524:	d506      	bpl.n	1e534 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
   1e526:	b011      	add	sp, #68	; 0x44
   1e528:	bc3c      	pop	{r2, r3, r4, r5}
   1e52a:	4690      	mov	r8, r2
   1e52c:	4699      	mov	r9, r3
   1e52e:	46a2      	mov	sl, r4
   1e530:	46ab      	mov	fp, r5
   1e532:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1e534:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
   1e536:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1e538:	079b      	lsls	r3, r3, #30
   1e53a:	d4f4      	bmi.n	1e526 <usart_init+0x26>
   1e53c:	49b4      	ldr	r1, [pc, #720]	; (1e810 <usart_init+0x310>)
   1e53e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1e540:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1e542:	2301      	movs	r3, #1
   1e544:	40bb      	lsls	r3, r7
   1e546:	4303      	orrs	r3, r0
   1e548:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   1e54a:	a90f      	add	r1, sp, #60	; 0x3c
   1e54c:	272d      	movs	r7, #45	; 0x2d
   1e54e:	5df3      	ldrb	r3, [r6, r7]
   1e550:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e552:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1e554:	b2d3      	uxtb	r3, r2
   1e556:	9302      	str	r3, [sp, #8]
   1e558:	0018      	movs	r0, r3
   1e55a:	4bae      	ldr	r3, [pc, #696]	; (1e814 <usart_init+0x314>)
   1e55c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1e55e:	9802      	ldr	r0, [sp, #8]
   1e560:	4bad      	ldr	r3, [pc, #692]	; (1e818 <usart_init+0x318>)
   1e562:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1e564:	5df0      	ldrb	r0, [r6, r7]
   1e566:	2100      	movs	r1, #0
   1e568:	4bac      	ldr	r3, [pc, #688]	; (1e81c <usart_init+0x31c>)
   1e56a:	4798      	blx	r3
	module->character_size = config->character_size;
   1e56c:	7af3      	ldrb	r3, [r6, #11]
   1e56e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
   1e570:	2324      	movs	r3, #36	; 0x24
   1e572:	5cf3      	ldrb	r3, [r6, r3]
   1e574:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
   1e576:	2325      	movs	r3, #37	; 0x25
   1e578:	5cf3      	ldrb	r3, [r6, r3]
   1e57a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
   1e57c:	7ef3      	ldrb	r3, [r6, #27]
   1e57e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   1e580:	7f33      	ldrb	r3, [r6, #28]
   1e582:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e584:	682b      	ldr	r3, [r5, #0]
   1e586:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1e588:	0018      	movs	r0, r3
   1e58a:	4ba0      	ldr	r3, [pc, #640]	; (1e80c <usart_init+0x30c>)
   1e58c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1e58e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
   1e590:	2200      	movs	r2, #0
   1e592:	230e      	movs	r3, #14
   1e594:	a906      	add	r1, sp, #24
   1e596:	468c      	mov	ip, r1
   1e598:	4463      	add	r3, ip
   1e59a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
   1e59c:	8a32      	ldrh	r2, [r6, #16]
   1e59e:	9202      	str	r2, [sp, #8]
   1e5a0:	2380      	movs	r3, #128	; 0x80
   1e5a2:	01db      	lsls	r3, r3, #7
   1e5a4:	429a      	cmp	r2, r3
   1e5a6:	d100      	bne.n	1e5aa <usart_init+0xaa>
   1e5a8:	e09e      	b.n	1e6e8 <usart_init+0x1e8>
   1e5aa:	d90f      	bls.n	1e5cc <usart_init+0xcc>
   1e5ac:	23c0      	movs	r3, #192	; 0xc0
   1e5ae:	01db      	lsls	r3, r3, #7
   1e5b0:	9a02      	ldr	r2, [sp, #8]
   1e5b2:	429a      	cmp	r2, r3
   1e5b4:	d100      	bne.n	1e5b8 <usart_init+0xb8>
   1e5b6:	e092      	b.n	1e6de <usart_init+0x1de>
   1e5b8:	2380      	movs	r3, #128	; 0x80
   1e5ba:	021b      	lsls	r3, r3, #8
   1e5bc:	429a      	cmp	r2, r3
   1e5be:	d000      	beq.n	1e5c2 <usart_init+0xc2>
   1e5c0:	e11f      	b.n	1e802 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   1e5c2:	2303      	movs	r3, #3
   1e5c4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e5c6:	2300      	movs	r3, #0
   1e5c8:	9307      	str	r3, [sp, #28]
   1e5ca:	e008      	b.n	1e5de <usart_init+0xde>
	switch (config->sample_rate) {
   1e5cc:	2380      	movs	r3, #128	; 0x80
   1e5ce:	019b      	lsls	r3, r3, #6
   1e5d0:	429a      	cmp	r2, r3
   1e5d2:	d000      	beq.n	1e5d6 <usart_init+0xd6>
   1e5d4:	e115      	b.n	1e802 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1e5d6:	2310      	movs	r3, #16
   1e5d8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1e5da:	3b0f      	subs	r3, #15
   1e5dc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
   1e5de:	6833      	ldr	r3, [r6, #0]
   1e5e0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1e5e2:	68f3      	ldr	r3, [r6, #12]
   1e5e4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   1e5e6:	6973      	ldr	r3, [r6, #20]
   1e5e8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e5ea:	7e33      	ldrb	r3, [r6, #24]
   1e5ec:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e5ee:	2326      	movs	r3, #38	; 0x26
   1e5f0:	5cf3      	ldrb	r3, [r6, r3]
   1e5f2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   1e5f4:	6873      	ldr	r3, [r6, #4]
   1e5f6:	4699      	mov	r9, r3
	switch (transfer_mode)
   1e5f8:	2b00      	cmp	r3, #0
   1e5fa:	d100      	bne.n	1e5fe <usart_init+0xfe>
   1e5fc:	e0a0      	b.n	1e740 <usart_init+0x240>
   1e5fe:	2380      	movs	r3, #128	; 0x80
   1e600:	055b      	lsls	r3, r3, #21
   1e602:	4599      	cmp	r9, r3
   1e604:	d100      	bne.n	1e608 <usart_init+0x108>
   1e606:	e084      	b.n	1e712 <usart_init+0x212>
	if(config->encoding_format_enable) {
   1e608:	7e73      	ldrb	r3, [r6, #25]
   1e60a:	2b00      	cmp	r3, #0
   1e60c:	d002      	beq.n	1e614 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   1e60e:	7eb3      	ldrb	r3, [r6, #26]
   1e610:	4642      	mov	r2, r8
   1e612:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e614:	682a      	ldr	r2, [r5, #0]
   1e616:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
   1e618:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e61a:	2b00      	cmp	r3, #0
   1e61c:	d1fc      	bne.n	1e618 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
   1e61e:	330e      	adds	r3, #14
   1e620:	aa06      	add	r2, sp, #24
   1e622:	4694      	mov	ip, r2
   1e624:	4463      	add	r3, ip
   1e626:	881b      	ldrh	r3, [r3, #0]
   1e628:	4642      	mov	r2, r8
   1e62a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   1e62c:	9b05      	ldr	r3, [sp, #20]
   1e62e:	9a03      	ldr	r2, [sp, #12]
   1e630:	4313      	orrs	r3, r2
   1e632:	9a04      	ldr	r2, [sp, #16]
   1e634:	4313      	orrs	r3, r2
   1e636:	464a      	mov	r2, r9
   1e638:	4313      	orrs	r3, r2
   1e63a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e63c:	465b      	mov	r3, fp
   1e63e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   1e640:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e642:	4653      	mov	r3, sl
   1e644:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   1e646:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
   1e648:	2327      	movs	r3, #39	; 0x27
   1e64a:	5cf3      	ldrb	r3, [r6, r3]
   1e64c:	2b00      	cmp	r3, #0
   1e64e:	d101      	bne.n	1e654 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   1e650:	3304      	adds	r3, #4
   1e652:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e654:	7e73      	ldrb	r3, [r6, #25]
   1e656:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e658:	7f32      	ldrb	r2, [r6, #28]
   1e65a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   1e65c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e65e:	7f72      	ldrb	r2, [r6, #29]
   1e660:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   1e662:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1e664:	2224      	movs	r2, #36	; 0x24
   1e666:	5cb2      	ldrb	r2, [r6, r2]
   1e668:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   1e66a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   1e66c:	2225      	movs	r2, #37	; 0x25
   1e66e:	5cb2      	ldrb	r2, [r6, r2]
   1e670:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   1e672:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
   1e674:	7ab1      	ldrb	r1, [r6, #10]
   1e676:	7af2      	ldrb	r2, [r6, #11]
   1e678:	4311      	orrs	r1, r2
   1e67a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
   1e67c:	8933      	ldrh	r3, [r6, #8]
   1e67e:	2bff      	cmp	r3, #255	; 0xff
   1e680:	d100      	bne.n	1e684 <usart_init+0x184>
   1e682:	e081      	b.n	1e788 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1e684:	2280      	movs	r2, #128	; 0x80
   1e686:	0452      	lsls	r2, r2, #17
   1e688:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
   1e68a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   1e68c:	232c      	movs	r3, #44	; 0x2c
   1e68e:	5cf3      	ldrb	r3, [r6, r3]
   1e690:	2b00      	cmp	r3, #0
   1e692:	d103      	bne.n	1e69c <usart_init+0x19c>
   1e694:	4b62      	ldr	r3, [pc, #392]	; (1e820 <usart_init+0x320>)
   1e696:	789b      	ldrb	r3, [r3, #2]
   1e698:	079b      	lsls	r3, r3, #30
   1e69a:	d501      	bpl.n	1e6a0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   1e69c:	2380      	movs	r3, #128	; 0x80
   1e69e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e6a0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e6a2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e6a4:	2b00      	cmp	r3, #0
   1e6a6:	d1fc      	bne.n	1e6a2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
   1e6a8:	4643      	mov	r3, r8
   1e6aa:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e6ac:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e6ae:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1e6b0:	2b00      	cmp	r3, #0
   1e6b2:	d1fc      	bne.n	1e6ae <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
   1e6b4:	4643      	mov	r3, r8
   1e6b6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1e6b8:	ab0e      	add	r3, sp, #56	; 0x38
   1e6ba:	2280      	movs	r2, #128	; 0x80
   1e6bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1e6be:	2200      	movs	r2, #0
   1e6c0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
   1e6c2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1e6c4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
   1e6c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1e6c8:	930a      	str	r3, [sp, #40]	; 0x28
   1e6ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1e6cc:	930b      	str	r3, [sp, #44]	; 0x2c
   1e6ce:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1e6d0:	930c      	str	r3, [sp, #48]	; 0x30
   1e6d2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   1e6d4:	9302      	str	r3, [sp, #8]
   1e6d6:	930d      	str	r3, [sp, #52]	; 0x34
   1e6d8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e6da:	ae0a      	add	r6, sp, #40	; 0x28
   1e6dc:	e063      	b.n	1e7a6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1e6de:	2308      	movs	r3, #8
   1e6e0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   1e6e2:	3b07      	subs	r3, #7
   1e6e4:	9307      	str	r3, [sp, #28]
   1e6e6:	e77a      	b.n	1e5de <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
   1e6e8:	6833      	ldr	r3, [r6, #0]
   1e6ea:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
   1e6ec:	68f3      	ldr	r3, [r6, #12]
   1e6ee:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
   1e6f0:	6973      	ldr	r3, [r6, #20]
   1e6f2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   1e6f4:	7e33      	ldrb	r3, [r6, #24]
   1e6f6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   1e6f8:	2326      	movs	r3, #38	; 0x26
   1e6fa:	5cf3      	ldrb	r3, [r6, r3]
   1e6fc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
   1e6fe:	6873      	ldr	r3, [r6, #4]
   1e700:	4699      	mov	r9, r3
	switch (transfer_mode)
   1e702:	2b00      	cmp	r3, #0
   1e704:	d018      	beq.n	1e738 <usart_init+0x238>
   1e706:	2380      	movs	r3, #128	; 0x80
   1e708:	055b      	lsls	r3, r3, #21
   1e70a:	4599      	cmp	r9, r3
   1e70c:	d001      	beq.n	1e712 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   1e70e:	2000      	movs	r0, #0
   1e710:	e025      	b.n	1e75e <usart_init+0x25e>
			if (!config->use_external_clock) {
   1e712:	2327      	movs	r3, #39	; 0x27
   1e714:	5cf3      	ldrb	r3, [r6, r3]
   1e716:	2b00      	cmp	r3, #0
   1e718:	d000      	beq.n	1e71c <usart_init+0x21c>
   1e71a:	e775      	b.n	1e608 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   1e71c:	6a33      	ldr	r3, [r6, #32]
   1e71e:	001f      	movs	r7, r3
   1e720:	b2c0      	uxtb	r0, r0
   1e722:	4b40      	ldr	r3, [pc, #256]	; (1e824 <usart_init+0x324>)
   1e724:	4798      	blx	r3
   1e726:	0001      	movs	r1, r0
   1e728:	220e      	movs	r2, #14
   1e72a:	ab06      	add	r3, sp, #24
   1e72c:	469c      	mov	ip, r3
   1e72e:	4462      	add	r2, ip
   1e730:	0038      	movs	r0, r7
   1e732:	4b3d      	ldr	r3, [pc, #244]	; (1e828 <usart_init+0x328>)
   1e734:	4798      	blx	r3
   1e736:	e012      	b.n	1e75e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1e738:	2308      	movs	r3, #8
   1e73a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e73c:	2300      	movs	r3, #0
   1e73e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   1e740:	2327      	movs	r3, #39	; 0x27
   1e742:	5cf3      	ldrb	r3, [r6, r3]
   1e744:	2b00      	cmp	r3, #0
   1e746:	d00e      	beq.n	1e766 <usart_init+0x266>
				status_code =
   1e748:	9b06      	ldr	r3, [sp, #24]
   1e74a:	9300      	str	r3, [sp, #0]
   1e74c:	9b07      	ldr	r3, [sp, #28]
   1e74e:	220e      	movs	r2, #14
   1e750:	a906      	add	r1, sp, #24
   1e752:	468c      	mov	ip, r1
   1e754:	4462      	add	r2, ip
   1e756:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   1e758:	6a30      	ldr	r0, [r6, #32]
   1e75a:	4f34      	ldr	r7, [pc, #208]	; (1e82c <usart_init+0x32c>)
   1e75c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   1e75e:	2800      	cmp	r0, #0
   1e760:	d000      	beq.n	1e764 <usart_init+0x264>
   1e762:	e6e0      	b.n	1e526 <usart_init+0x26>
   1e764:	e750      	b.n	1e608 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   1e766:	6a33      	ldr	r3, [r6, #32]
   1e768:	001f      	movs	r7, r3
   1e76a:	b2c0      	uxtb	r0, r0
   1e76c:	4b2d      	ldr	r3, [pc, #180]	; (1e824 <usart_init+0x324>)
   1e76e:	4798      	blx	r3
   1e770:	0001      	movs	r1, r0
				status_code =
   1e772:	9b06      	ldr	r3, [sp, #24]
   1e774:	9300      	str	r3, [sp, #0]
   1e776:	9b07      	ldr	r3, [sp, #28]
   1e778:	220e      	movs	r2, #14
   1e77a:	a806      	add	r0, sp, #24
   1e77c:	4684      	mov	ip, r0
   1e77e:	4462      	add	r2, ip
   1e780:	0038      	movs	r0, r7
   1e782:	4f2a      	ldr	r7, [pc, #168]	; (1e82c <usart_init+0x32c>)
   1e784:	47b8      	blx	r7
   1e786:	e7ea      	b.n	1e75e <usart_init+0x25e>
		if(config->lin_slave_enable) {
   1e788:	7ef3      	ldrb	r3, [r6, #27]
   1e78a:	2b00      	cmp	r3, #0
   1e78c:	d100      	bne.n	1e790 <usart_init+0x290>
   1e78e:	e77d      	b.n	1e68c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   1e790:	2380      	movs	r3, #128	; 0x80
   1e792:	04db      	lsls	r3, r3, #19
   1e794:	431f      	orrs	r7, r3
   1e796:	e779      	b.n	1e68c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1e798:	0020      	movs	r0, r4
   1e79a:	4b25      	ldr	r3, [pc, #148]	; (1e830 <usart_init+0x330>)
   1e79c:	4798      	blx	r3
   1e79e:	e007      	b.n	1e7b0 <usart_init+0x2b0>
   1e7a0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1e7a2:	2f04      	cmp	r7, #4
   1e7a4:	d00d      	beq.n	1e7c2 <usart_init+0x2c2>
   1e7a6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   1e7a8:	00bb      	lsls	r3, r7, #2
   1e7aa:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   1e7ac:	2800      	cmp	r0, #0
   1e7ae:	d0f3      	beq.n	1e798 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   1e7b0:	1c43      	adds	r3, r0, #1
   1e7b2:	d0f5      	beq.n	1e7a0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   1e7b4:	a90e      	add	r1, sp, #56	; 0x38
   1e7b6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1e7b8:	0c00      	lsrs	r0, r0, #16
   1e7ba:	b2c0      	uxtb	r0, r0
   1e7bc:	4b1d      	ldr	r3, [pc, #116]	; (1e834 <usart_init+0x334>)
   1e7be:	4798      	blx	r3
   1e7c0:	e7ee      	b.n	1e7a0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
   1e7c2:	2300      	movs	r3, #0
   1e7c4:	60eb      	str	r3, [r5, #12]
   1e7c6:	612b      	str	r3, [r5, #16]
   1e7c8:	616b      	str	r3, [r5, #20]
   1e7ca:	61ab      	str	r3, [r5, #24]
   1e7cc:	61eb      	str	r3, [r5, #28]
   1e7ce:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   1e7d0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1e7d2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   1e7d4:	2200      	movs	r2, #0
   1e7d6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1e7d8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   1e7da:	3330      	adds	r3, #48	; 0x30
   1e7dc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   1e7de:	3301      	adds	r3, #1
   1e7e0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   1e7e2:	3301      	adds	r3, #1
   1e7e4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   1e7e6:	3301      	adds	r3, #1
   1e7e8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   1e7ea:	6828      	ldr	r0, [r5, #0]
   1e7ec:	4b07      	ldr	r3, [pc, #28]	; (1e80c <usart_init+0x30c>)
   1e7ee:	4798      	blx	r3
   1e7f0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   1e7f2:	4911      	ldr	r1, [pc, #68]	; (1e838 <usart_init+0x338>)
   1e7f4:	4b11      	ldr	r3, [pc, #68]	; (1e83c <usart_init+0x33c>)
   1e7f6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1e7f8:	00a4      	lsls	r4, r4, #2
   1e7fa:	4b11      	ldr	r3, [pc, #68]	; (1e840 <usart_init+0x340>)
   1e7fc:	50e5      	str	r5, [r4, r3]
	return status_code;
   1e7fe:	2000      	movs	r0, #0
   1e800:	e691      	b.n	1e526 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1e802:	2310      	movs	r3, #16
   1e804:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1e806:	2300      	movs	r3, #0
   1e808:	9307      	str	r3, [sp, #28]
   1e80a:	e6e8      	b.n	1e5de <usart_init+0xde>
   1e80c:	0001dd05 	.word	0x0001dd05
   1e810:	40000400 	.word	0x40000400
   1e814:	0001f0a5 	.word	0x0001f0a5
   1e818:	0001f019 	.word	0x0001f019
   1e81c:	0001db41 	.word	0x0001db41
   1e820:	41002000 	.word	0x41002000
   1e824:	0001f0c1 	.word	0x0001f0c1
   1e828:	0001da83 	.word	0x0001da83
   1e82c:	0001daad 	.word	0x0001daad
   1e830:	0001db8d 	.word	0x0001db8d
   1e834:	0001f1cd 	.word	0x0001f1cd
   1e838:	0001e945 	.word	0x0001e945
   1e83c:	0001dd41 	.word	0x0001dd41
   1e840:	20005554 	.word	0x20005554

0001e844 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e846:	0006      	movs	r6, r0
   1e848:	000c      	movs	r4, r1
   1e84a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e84c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1e84e:	4b0a      	ldr	r3, [pc, #40]	; (1e878 <_usart_write_buffer+0x34>)
   1e850:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   1e852:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   1e854:	b29b      	uxth	r3, r3
   1e856:	2b00      	cmp	r3, #0
   1e858:	d003      	beq.n	1e862 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
   1e85a:	4b08      	ldr	r3, [pc, #32]	; (1e87c <_usart_write_buffer+0x38>)
   1e85c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1e85e:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   1e860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   1e862:	85f5      	strh	r5, [r6, #46]	; 0x2e
   1e864:	4b05      	ldr	r3, [pc, #20]	; (1e87c <_usart_write_buffer+0x38>)
   1e866:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
   1e868:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   1e86a:	2205      	movs	r2, #5
   1e86c:	2333      	movs	r3, #51	; 0x33
   1e86e:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   1e870:	3b32      	subs	r3, #50	; 0x32
   1e872:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
   1e874:	2000      	movs	r0, #0
   1e876:	e7f3      	b.n	1e860 <_usart_write_buffer+0x1c>
   1e878:	0001d4f1 	.word	0x0001d4f1
   1e87c:	0001d531 	.word	0x0001d531

0001e880 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1e880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e882:	0004      	movs	r4, r0
   1e884:	000d      	movs	r5, r1
   1e886:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e888:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
   1e88a:	4b0f      	ldr	r3, [pc, #60]	; (1e8c8 <_usart_read_buffer+0x48>)
   1e88c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   1e88e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1e890:	b29b      	uxth	r3, r3
   1e892:	2b00      	cmp	r3, #0
   1e894:	d003      	beq.n	1e89e <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
   1e896:	4b0d      	ldr	r3, [pc, #52]	; (1e8cc <_usart_read_buffer+0x4c>)
   1e898:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   1e89a:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   1e89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   1e89e:	85a6      	strh	r6, [r4, #44]	; 0x2c
   1e8a0:	4b0a      	ldr	r3, [pc, #40]	; (1e8cc <_usart_read_buffer+0x4c>)
   1e8a2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
   1e8a4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   1e8a6:	2205      	movs	r2, #5
   1e8a8:	2332      	movs	r3, #50	; 0x32
   1e8aa:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   1e8ac:	3b2e      	subs	r3, #46	; 0x2e
   1e8ae:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
   1e8b0:	7a23      	ldrb	r3, [r4, #8]
   1e8b2:	2b00      	cmp	r3, #0
   1e8b4:	d001      	beq.n	1e8ba <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   1e8b6:	2320      	movs	r3, #32
   1e8b8:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
   1e8ba:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
   1e8bc:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   1e8be:	2b00      	cmp	r3, #0
   1e8c0:	d0ec      	beq.n	1e89c <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   1e8c2:	2308      	movs	r3, #8
   1e8c4:	75bb      	strb	r3, [r7, #22]
   1e8c6:	e7e9      	b.n	1e89c <_usart_read_buffer+0x1c>
   1e8c8:	0001d4f1 	.word	0x0001d4f1
   1e8cc:	0001d531 	.word	0x0001d531

0001e8d0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1e8d0:	1c93      	adds	r3, r2, #2
   1e8d2:	009b      	lsls	r3, r3, #2
   1e8d4:	18c3      	adds	r3, r0, r3
   1e8d6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   1e8d8:	2130      	movs	r1, #48	; 0x30
   1e8da:	2301      	movs	r3, #1
   1e8dc:	4093      	lsls	r3, r2
   1e8de:	001a      	movs	r2, r3
   1e8e0:	5c43      	ldrb	r3, [r0, r1]
   1e8e2:	4313      	orrs	r3, r2
   1e8e4:	5443      	strb	r3, [r0, r1]
}
   1e8e6:	4770      	bx	lr

0001e8e8 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   1e8e8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e8ea:	2317      	movs	r3, #23
	if (length == 0) {
   1e8ec:	2a00      	cmp	r2, #0
   1e8ee:	d101      	bne.n	1e8f4 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
   1e8f0:	0018      	movs	r0, r3
   1e8f2:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
   1e8f4:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   1e8f6:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   1e8f8:	2c00      	cmp	r4, #0
   1e8fa:	d0f9      	beq.n	1e8f0 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
   1e8fc:	4b01      	ldr	r3, [pc, #4]	; (1e904 <usart_write_buffer_job+0x1c>)
   1e8fe:	4798      	blx	r3
   1e900:	0003      	movs	r3, r0
   1e902:	e7f5      	b.n	1e8f0 <usart_write_buffer_job+0x8>
   1e904:	0001e845 	.word	0x0001e845

0001e908 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   1e908:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   1e90a:	2317      	movs	r3, #23
	if (length == 0) {
   1e90c:	2a00      	cmp	r2, #0
   1e90e:	d101      	bne.n	1e914 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
   1e910:	0018      	movs	r0, r3
   1e912:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
   1e914:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   1e916:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   1e918:	2c00      	cmp	r4, #0
   1e91a:	d0f9      	beq.n	1e910 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
   1e91c:	4b01      	ldr	r3, [pc, #4]	; (1e924 <usart_read_buffer_job+0x1c>)
   1e91e:	4798      	blx	r3
   1e920:	0003      	movs	r3, r0
   1e922:	e7f5      	b.n	1e910 <usart_read_buffer_job+0x8>
   1e924:	0001e881 	.word	0x0001e881

0001e928 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   1e928:	2900      	cmp	r1, #0
   1e92a:	d003      	beq.n	1e934 <usart_get_job_status+0xc>
   1e92c:	2901      	cmp	r1, #1
   1e92e:	d005      	beq.n	1e93c <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   1e930:	2017      	movs	r0, #23
   1e932:	e002      	b.n	1e93a <usart_get_job_status+0x12>
			status_code = module->rx_status;
   1e934:	2332      	movs	r3, #50	; 0x32
   1e936:	5cc0      	ldrb	r0, [r0, r3]
   1e938:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   1e93a:	4770      	bx	lr
			status_code = module->tx_status;
   1e93c:	2333      	movs	r3, #51	; 0x33
   1e93e:	5cc0      	ldrb	r0, [r0, r3]
   1e940:	b2c0      	uxtb	r0, r0
			break;
   1e942:	e7fa      	b.n	1e93a <usart_get_job_status+0x12>

0001e944 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   1e944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   1e946:	0080      	lsls	r0, r0, #2
   1e948:	4b62      	ldr	r3, [pc, #392]	; (1ead4 <_usart_interrupt_handler+0x190>)
   1e94a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   1e94c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   1e94e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   1e950:	2b00      	cmp	r3, #0
   1e952:	d1fc      	bne.n	1e94e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   1e954:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   1e956:	7da6      	ldrb	r6, [r4, #22]
   1e958:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   1e95a:	2330      	movs	r3, #48	; 0x30
   1e95c:	5ceb      	ldrb	r3, [r5, r3]
   1e95e:	2231      	movs	r2, #49	; 0x31
   1e960:	5caf      	ldrb	r7, [r5, r2]
   1e962:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1e964:	07f3      	lsls	r3, r6, #31
   1e966:	d522      	bpl.n	1e9ae <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   1e968:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1e96a:	b29b      	uxth	r3, r3
   1e96c:	2b00      	cmp	r3, #0
   1e96e:	d01c      	beq.n	1e9aa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1e970:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1e972:	7813      	ldrb	r3, [r2, #0]
   1e974:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1e976:	1c51      	adds	r1, r2, #1
   1e978:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1e97a:	7969      	ldrb	r1, [r5, #5]
   1e97c:	2901      	cmp	r1, #1
   1e97e:	d00e      	beq.n	1e99e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1e980:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   1e982:	05db      	lsls	r3, r3, #23
   1e984:	0ddb      	lsrs	r3, r3, #23
   1e986:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1e988:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1e98a:	3b01      	subs	r3, #1
   1e98c:	b29b      	uxth	r3, r3
   1e98e:	85eb      	strh	r3, [r5, #46]	; 0x2e
   1e990:	2b00      	cmp	r3, #0
   1e992:	d10c      	bne.n	1e9ae <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1e994:	3301      	adds	r3, #1
   1e996:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   1e998:	3301      	adds	r3, #1
   1e99a:	75a3      	strb	r3, [r4, #22]
   1e99c:	e007      	b.n	1e9ae <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   1e99e:	7851      	ldrb	r1, [r2, #1]
   1e9a0:	0209      	lsls	r1, r1, #8
   1e9a2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   1e9a4:	3202      	adds	r2, #2
   1e9a6:	62aa      	str	r2, [r5, #40]	; 0x28
   1e9a8:	e7eb      	b.n	1e982 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1e9aa:	2301      	movs	r3, #1
   1e9ac:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   1e9ae:	07b3      	lsls	r3, r6, #30
   1e9b0:	d506      	bpl.n	1e9c0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   1e9b2:	2302      	movs	r3, #2
   1e9b4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   1e9b6:	2200      	movs	r2, #0
   1e9b8:	3331      	adds	r3, #49	; 0x31
   1e9ba:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   1e9bc:	07fb      	lsls	r3, r7, #31
   1e9be:	d41a      	bmi.n	1e9f6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   1e9c0:	0773      	lsls	r3, r6, #29
   1e9c2:	d565      	bpl.n	1ea90 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   1e9c4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1e9c6:	b29b      	uxth	r3, r3
   1e9c8:	2b00      	cmp	r3, #0
   1e9ca:	d05f      	beq.n	1ea8c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1e9cc:	8b63      	ldrh	r3, [r4, #26]
   1e9ce:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1e9d0:	071a      	lsls	r2, r3, #28
   1e9d2:	d414      	bmi.n	1e9fe <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1e9d4:	223f      	movs	r2, #63	; 0x3f
   1e9d6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   1e9d8:	2b00      	cmp	r3, #0
   1e9da:	d034      	beq.n	1ea46 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1e9dc:	079a      	lsls	r2, r3, #30
   1e9de:	d511      	bpl.n	1ea04 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1e9e0:	221a      	movs	r2, #26
   1e9e2:	2332      	movs	r3, #50	; 0x32
   1e9e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1e9e6:	3b30      	subs	r3, #48	; 0x30
   1e9e8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   1e9ea:	077b      	lsls	r3, r7, #29
   1e9ec:	d550      	bpl.n	1ea90 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   1e9ee:	0028      	movs	r0, r5
   1e9f0:	696b      	ldr	r3, [r5, #20]
   1e9f2:	4798      	blx	r3
   1e9f4:	e04c      	b.n	1ea90 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   1e9f6:	0028      	movs	r0, r5
   1e9f8:	68eb      	ldr	r3, [r5, #12]
   1e9fa:	4798      	blx	r3
   1e9fc:	e7e0      	b.n	1e9c0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   1e9fe:	2237      	movs	r2, #55	; 0x37
   1ea00:	4013      	ands	r3, r2
   1ea02:	e7e9      	b.n	1e9d8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1ea04:	075a      	lsls	r2, r3, #29
   1ea06:	d505      	bpl.n	1ea14 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   1ea08:	221e      	movs	r2, #30
   1ea0a:	2332      	movs	r3, #50	; 0x32
   1ea0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1ea0e:	3b2e      	subs	r3, #46	; 0x2e
   1ea10:	8363      	strh	r3, [r4, #26]
   1ea12:	e7ea      	b.n	1e9ea <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1ea14:	07da      	lsls	r2, r3, #31
   1ea16:	d505      	bpl.n	1ea24 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   1ea18:	2213      	movs	r2, #19
   1ea1a:	2332      	movs	r3, #50	; 0x32
   1ea1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1ea1e:	3b31      	subs	r3, #49	; 0x31
   1ea20:	8363      	strh	r3, [r4, #26]
   1ea22:	e7e2      	b.n	1e9ea <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1ea24:	06da      	lsls	r2, r3, #27
   1ea26:	d505      	bpl.n	1ea34 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   1ea28:	2242      	movs	r2, #66	; 0x42
   1ea2a:	2332      	movs	r3, #50	; 0x32
   1ea2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1ea2e:	3b22      	subs	r3, #34	; 0x22
   1ea30:	8363      	strh	r3, [r4, #26]
   1ea32:	e7da      	b.n	1e9ea <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1ea34:	2220      	movs	r2, #32
   1ea36:	421a      	tst	r2, r3
   1ea38:	d0d7      	beq.n	1e9ea <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   1ea3a:	3221      	adds	r2, #33	; 0x21
   1ea3c:	2332      	movs	r3, #50	; 0x32
   1ea3e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1ea40:	3b12      	subs	r3, #18
   1ea42:	8363      	strh	r3, [r4, #26]
   1ea44:	e7d1      	b.n	1e9ea <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   1ea46:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1ea48:	05db      	lsls	r3, r3, #23
   1ea4a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   1ea4c:	b2da      	uxtb	r2, r3
   1ea4e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1ea50:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   1ea52:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1ea54:	1c51      	adds	r1, r2, #1
   1ea56:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1ea58:	7969      	ldrb	r1, [r5, #5]
   1ea5a:	2901      	cmp	r1, #1
   1ea5c:	d010      	beq.n	1ea80 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   1ea5e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1ea60:	3b01      	subs	r3, #1
   1ea62:	b29b      	uxth	r3, r3
   1ea64:	85ab      	strh	r3, [r5, #44]	; 0x2c
   1ea66:	2b00      	cmp	r3, #0
   1ea68:	d112      	bne.n	1ea90 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1ea6a:	3304      	adds	r3, #4
   1ea6c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   1ea6e:	2200      	movs	r2, #0
   1ea70:	332e      	adds	r3, #46	; 0x2e
   1ea72:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   1ea74:	07bb      	lsls	r3, r7, #30
   1ea76:	d50b      	bpl.n	1ea90 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1ea78:	0028      	movs	r0, r5
   1ea7a:	692b      	ldr	r3, [r5, #16]
   1ea7c:	4798      	blx	r3
   1ea7e:	e007      	b.n	1ea90 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   1ea80:	0a1b      	lsrs	r3, r3, #8
   1ea82:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   1ea84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ea86:	3301      	adds	r3, #1
   1ea88:	626b      	str	r3, [r5, #36]	; 0x24
   1ea8a:	e7e8      	b.n	1ea5e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   1ea8c:	2304      	movs	r3, #4
   1ea8e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1ea90:	06f3      	lsls	r3, r6, #27
   1ea92:	d504      	bpl.n	1ea9e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1ea94:	2310      	movs	r3, #16
   1ea96:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   1ea98:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1ea9a:	06fb      	lsls	r3, r7, #27
   1ea9c:	d40e      	bmi.n	1eabc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   1ea9e:	06b3      	lsls	r3, r6, #26
   1eaa0:	d504      	bpl.n	1eaac <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   1eaa2:	2320      	movs	r3, #32
   1eaa4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   1eaa6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   1eaa8:	073b      	lsls	r3, r7, #28
   1eaaa:	d40b      	bmi.n	1eac4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   1eaac:	0733      	lsls	r3, r6, #28
   1eaae:	d504      	bpl.n	1eaba <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   1eab0:	2308      	movs	r3, #8
   1eab2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   1eab4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   1eab6:	06bb      	lsls	r3, r7, #26
   1eab8:	d408      	bmi.n	1eacc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   1eaba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   1eabc:	0028      	movs	r0, r5
   1eabe:	69eb      	ldr	r3, [r5, #28]
   1eac0:	4798      	blx	r3
   1eac2:	e7ec      	b.n	1ea9e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   1eac4:	0028      	movs	r0, r5
   1eac6:	69ab      	ldr	r3, [r5, #24]
   1eac8:	4798      	blx	r3
   1eaca:	e7ef      	b.n	1eaac <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   1eacc:	6a2b      	ldr	r3, [r5, #32]
   1eace:	0028      	movs	r0, r5
   1ead0:	4798      	blx	r3
}
   1ead2:	e7f2      	b.n	1eaba <_usart_interrupt_handler+0x176>
   1ead4:	20005554 	.word	0x20005554

0001ead8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1ead8:	b510      	push	{r4, lr}
	switch (clock_source) {
   1eada:	2808      	cmp	r0, #8
   1eadc:	d803      	bhi.n	1eae6 <system_clock_source_get_hz+0xe>
   1eade:	0080      	lsls	r0, r0, #2
   1eae0:	4b1c      	ldr	r3, [pc, #112]	; (1eb54 <system_clock_source_get_hz+0x7c>)
   1eae2:	581b      	ldr	r3, [r3, r0]
   1eae4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   1eae6:	2000      	movs	r0, #0
   1eae8:	e032      	b.n	1eb50 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   1eaea:	4b1b      	ldr	r3, [pc, #108]	; (1eb58 <system_clock_source_get_hz+0x80>)
   1eaec:	6918      	ldr	r0, [r3, #16]
   1eaee:	e02f      	b.n	1eb50 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   1eaf0:	4b1a      	ldr	r3, [pc, #104]	; (1eb5c <system_clock_source_get_hz+0x84>)
   1eaf2:	6a1b      	ldr	r3, [r3, #32]
   1eaf4:	059b      	lsls	r3, r3, #22
   1eaf6:	0f9b      	lsrs	r3, r3, #30
   1eaf8:	4819      	ldr	r0, [pc, #100]	; (1eb60 <system_clock_source_get_hz+0x88>)
   1eafa:	40d8      	lsrs	r0, r3
   1eafc:	e028      	b.n	1eb50 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   1eafe:	4b16      	ldr	r3, [pc, #88]	; (1eb58 <system_clock_source_get_hz+0x80>)
   1eb00:	6958      	ldr	r0, [r3, #20]
   1eb02:	e025      	b.n	1eb50 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1eb04:	4b14      	ldr	r3, [pc, #80]	; (1eb58 <system_clock_source_get_hz+0x80>)
   1eb06:	681b      	ldr	r3, [r3, #0]
			return 0;
   1eb08:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1eb0a:	079b      	lsls	r3, r3, #30
   1eb0c:	d520      	bpl.n	1eb50 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1eb0e:	4913      	ldr	r1, [pc, #76]	; (1eb5c <system_clock_source_get_hz+0x84>)
   1eb10:	2210      	movs	r2, #16
   1eb12:	68cb      	ldr	r3, [r1, #12]
   1eb14:	421a      	tst	r2, r3
   1eb16:	d0fc      	beq.n	1eb12 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   1eb18:	4b0f      	ldr	r3, [pc, #60]	; (1eb58 <system_clock_source_get_hz+0x80>)
   1eb1a:	681a      	ldr	r2, [r3, #0]
   1eb1c:	2324      	movs	r3, #36	; 0x24
   1eb1e:	4013      	ands	r3, r2
   1eb20:	2b04      	cmp	r3, #4
   1eb22:	d001      	beq.n	1eb28 <system_clock_source_get_hz+0x50>
			return 48000000UL;
   1eb24:	480f      	ldr	r0, [pc, #60]	; (1eb64 <system_clock_source_get_hz+0x8c>)
   1eb26:	e013      	b.n	1eb50 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1eb28:	2000      	movs	r0, #0
   1eb2a:	4b0f      	ldr	r3, [pc, #60]	; (1eb68 <system_clock_source_get_hz+0x90>)
   1eb2c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   1eb2e:	4b0a      	ldr	r3, [pc, #40]	; (1eb58 <system_clock_source_get_hz+0x80>)
   1eb30:	689b      	ldr	r3, [r3, #8]
   1eb32:	041b      	lsls	r3, r3, #16
   1eb34:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1eb36:	4358      	muls	r0, r3
   1eb38:	e00a      	b.n	1eb50 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1eb3a:	2350      	movs	r3, #80	; 0x50
   1eb3c:	4a07      	ldr	r2, [pc, #28]	; (1eb5c <system_clock_source_get_hz+0x84>)
   1eb3e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   1eb40:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1eb42:	075b      	lsls	r3, r3, #29
   1eb44:	d504      	bpl.n	1eb50 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   1eb46:	4b04      	ldr	r3, [pc, #16]	; (1eb58 <system_clock_source_get_hz+0x80>)
   1eb48:	68d8      	ldr	r0, [r3, #12]
   1eb4a:	e001      	b.n	1eb50 <system_clock_source_get_hz+0x78>
		return 32768UL;
   1eb4c:	2080      	movs	r0, #128	; 0x80
   1eb4e:	0200      	lsls	r0, r0, #8
	}
}
   1eb50:	bd10      	pop	{r4, pc}
   1eb52:	46c0      	nop			; (mov r8, r8)
   1eb54:	0002a1f8 	.word	0x0002a1f8
   1eb58:	20003dac 	.word	0x20003dac
   1eb5c:	40000800 	.word	0x40000800
   1eb60:	007a1200 	.word	0x007a1200
   1eb64:	02dc6c00 	.word	0x02dc6c00
   1eb68:	0001f0c1 	.word	0x0001f0c1

0001eb6c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   1eb6c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   1eb6e:	490c      	ldr	r1, [pc, #48]	; (1eba0 <system_clock_source_osc8m_set_config+0x34>)
   1eb70:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   1eb72:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   1eb74:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   1eb76:	7840      	ldrb	r0, [r0, #1]
   1eb78:	2201      	movs	r2, #1
   1eb7a:	4010      	ands	r0, r2
   1eb7c:	0180      	lsls	r0, r0, #6
   1eb7e:	2640      	movs	r6, #64	; 0x40
   1eb80:	43b3      	bics	r3, r6
   1eb82:	4303      	orrs	r3, r0
   1eb84:	402a      	ands	r2, r5
   1eb86:	01d2      	lsls	r2, r2, #7
   1eb88:	2080      	movs	r0, #128	; 0x80
   1eb8a:	4383      	bics	r3, r0
   1eb8c:	4313      	orrs	r3, r2
   1eb8e:	2203      	movs	r2, #3
   1eb90:	4022      	ands	r2, r4
   1eb92:	0212      	lsls	r2, r2, #8
   1eb94:	4803      	ldr	r0, [pc, #12]	; (1eba4 <system_clock_source_osc8m_set_config+0x38>)
   1eb96:	4003      	ands	r3, r0
   1eb98:	4313      	orrs	r3, r2
   1eb9a:	620b      	str	r3, [r1, #32]
}
   1eb9c:	bd70      	pop	{r4, r5, r6, pc}
   1eb9e:	46c0      	nop			; (mov r8, r8)
   1eba0:	40000800 	.word	0x40000800
   1eba4:	fffffcff 	.word	0xfffffcff

0001eba8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   1eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ebaa:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   1ebac:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   1ebae:	7d03      	ldrb	r3, [r0, #20]
   1ebb0:	2b01      	cmp	r3, #1
   1ebb2:	d03b      	beq.n	1ec2c <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   1ebb4:	68ab      	ldr	r3, [r5, #8]
   1ebb6:	0118      	lsls	r0, r3, #4
   1ebb8:	0021      	movs	r1, r4
   1ebba:	4b20      	ldr	r3, [pc, #128]	; (1ec3c <system_clock_source_dpll_set_config+0x94>)
   1ebbc:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
   1ebbe:	220f      	movs	r2, #15
   1ebc0:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
   1ebc2:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1ebc4:	782e      	ldrb	r6, [r5, #0]
   1ebc6:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   1ebc8:	7869      	ldrb	r1, [r5, #1]
   1ebca:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   1ebcc:	430e      	orrs	r6, r1
   1ebce:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
   1ebd0:	491b      	ldr	r1, [pc, #108]	; (1ec40 <system_clock_source_dpll_set_config+0x98>)
   1ebd2:	2744      	movs	r7, #68	; 0x44
   1ebd4:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1ebd6:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
   1ebd8:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   1ebda:	051b      	lsls	r3, r3, #20
   1ebdc:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1ebde:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
   1ebe0:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   1ebe2:	78ab      	ldrb	r3, [r5, #2]
   1ebe4:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   1ebe6:	78ee      	ldrb	r6, [r5, #3]
   1ebe8:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ebea:	4333      	orrs	r3, r6
   1ebec:	792e      	ldrb	r6, [r5, #4]
   1ebee:	00b6      	lsls	r6, r6, #2
   1ebf0:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   1ebf2:	7caf      	ldrb	r7, [r5, #18]
   1ebf4:	2603      	movs	r6, #3
   1ebf6:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ebf8:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1ebfa:	8a2e      	ldrh	r6, [r5, #16]
   1ebfc:	0436      	lsls	r6, r6, #16
   1ebfe:	4f11      	ldr	r7, [pc, #68]	; (1ec44 <system_clock_source_dpll_set_config+0x9c>)
   1ec00:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ec02:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   1ec04:	7cee      	ldrb	r6, [r5, #19]
   1ec06:	0236      	lsls	r6, r6, #8
   1ec08:	27e0      	movs	r7, #224	; 0xe0
   1ec0a:	00ff      	lsls	r7, r7, #3
   1ec0c:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ec0e:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   1ec10:	7d2e      	ldrb	r6, [r5, #20]
   1ec12:	0136      	lsls	r6, r6, #4
   1ec14:	2530      	movs	r5, #48	; 0x30
   1ec16:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1ec18:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
   1ec1a:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   1ec1c:	230f      	movs	r3, #15
   1ec1e:	4398      	bics	r0, r3
   1ec20:	1880      	adds	r0, r0, r2
   1ec22:	4344      	muls	r4, r0
   1ec24:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
   1ec26:	4b08      	ldr	r3, [pc, #32]	; (1ec48 <system_clock_source_dpll_set_config+0xa0>)
   1ec28:	60dc      	str	r4, [r3, #12]
}
   1ec2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
   1ec2c:	8a01      	ldrh	r1, [r0, #16]
   1ec2e:	3101      	adds	r1, #1
   1ec30:	0049      	lsls	r1, r1, #1
   1ec32:	0020      	movs	r0, r4
   1ec34:	4b01      	ldr	r3, [pc, #4]	; (1ec3c <system_clock_source_dpll_set_config+0x94>)
   1ec36:	4798      	blx	r3
   1ec38:	0004      	movs	r4, r0
   1ec3a:	e7bb      	b.n	1ebb4 <system_clock_source_dpll_set_config+0xc>
   1ec3c:	00023fe1 	.word	0x00023fe1
   1ec40:	40000800 	.word	0x40000800
   1ec44:	07ff0000 	.word	0x07ff0000
   1ec48:	20003dac 	.word	0x20003dac

0001ec4c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   1ec4c:	2808      	cmp	r0, #8
   1ec4e:	d803      	bhi.n	1ec58 <system_clock_source_enable+0xc>
   1ec50:	0080      	lsls	r0, r0, #2
   1ec52:	4b25      	ldr	r3, [pc, #148]	; (1ece8 <system_clock_source_enable+0x9c>)
   1ec54:	581b      	ldr	r3, [r3, r0]
   1ec56:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   1ec58:	2017      	movs	r0, #23
   1ec5a:	e044      	b.n	1ece6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   1ec5c:	4a23      	ldr	r2, [pc, #140]	; (1ecec <system_clock_source_enable+0xa0>)
   1ec5e:	6a13      	ldr	r3, [r2, #32]
   1ec60:	2102      	movs	r1, #2
   1ec62:	430b      	orrs	r3, r1
   1ec64:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   1ec66:	2000      	movs	r0, #0
   1ec68:	e03d      	b.n	1ece6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   1ec6a:	4a20      	ldr	r2, [pc, #128]	; (1ecec <system_clock_source_enable+0xa0>)
   1ec6c:	6993      	ldr	r3, [r2, #24]
   1ec6e:	2102      	movs	r1, #2
   1ec70:	430b      	orrs	r3, r1
   1ec72:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   1ec74:	2000      	movs	r0, #0
		break;
   1ec76:	e036      	b.n	1ece6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   1ec78:	4a1c      	ldr	r2, [pc, #112]	; (1ecec <system_clock_source_enable+0xa0>)
   1ec7a:	8a13      	ldrh	r3, [r2, #16]
   1ec7c:	2102      	movs	r1, #2
   1ec7e:	430b      	orrs	r3, r1
   1ec80:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   1ec82:	2000      	movs	r0, #0
		break;
   1ec84:	e02f      	b.n	1ece6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   1ec86:	4a19      	ldr	r2, [pc, #100]	; (1ecec <system_clock_source_enable+0xa0>)
   1ec88:	8a93      	ldrh	r3, [r2, #20]
   1ec8a:	2102      	movs	r1, #2
   1ec8c:	430b      	orrs	r3, r1
   1ec8e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   1ec90:	2000      	movs	r0, #0
		break;
   1ec92:	e028      	b.n	1ece6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   1ec94:	4916      	ldr	r1, [pc, #88]	; (1ecf0 <system_clock_source_enable+0xa4>)
   1ec96:	680b      	ldr	r3, [r1, #0]
   1ec98:	2202      	movs	r2, #2
   1ec9a:	4313      	orrs	r3, r2
   1ec9c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   1ec9e:	4b13      	ldr	r3, [pc, #76]	; (1ecec <system_clock_source_enable+0xa0>)
   1eca0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1eca2:	0019      	movs	r1, r3
   1eca4:	320e      	adds	r2, #14
   1eca6:	68cb      	ldr	r3, [r1, #12]
   1eca8:	421a      	tst	r2, r3
   1ecaa:	d0fc      	beq.n	1eca6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1ecac:	4a10      	ldr	r2, [pc, #64]	; (1ecf0 <system_clock_source_enable+0xa4>)
   1ecae:	6891      	ldr	r1, [r2, #8]
   1ecb0:	4b0e      	ldr	r3, [pc, #56]	; (1ecec <system_clock_source_enable+0xa0>)
   1ecb2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1ecb4:	6852      	ldr	r2, [r2, #4]
   1ecb6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   1ecb8:	2200      	movs	r2, #0
   1ecba:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1ecbc:	0019      	movs	r1, r3
   1ecbe:	3210      	adds	r2, #16
   1ecc0:	68cb      	ldr	r3, [r1, #12]
   1ecc2:	421a      	tst	r2, r3
   1ecc4:	d0fc      	beq.n	1ecc0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1ecc6:	4b0a      	ldr	r3, [pc, #40]	; (1ecf0 <system_clock_source_enable+0xa4>)
   1ecc8:	681b      	ldr	r3, [r3, #0]
   1ecca:	b29b      	uxth	r3, r3
   1eccc:	4a07      	ldr	r2, [pc, #28]	; (1ecec <system_clock_source_enable+0xa0>)
   1ecce:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   1ecd0:	2000      	movs	r0, #0
   1ecd2:	e008      	b.n	1ece6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   1ecd4:	4905      	ldr	r1, [pc, #20]	; (1ecec <system_clock_source_enable+0xa0>)
   1ecd6:	2244      	movs	r2, #68	; 0x44
   1ecd8:	5c8b      	ldrb	r3, [r1, r2]
   1ecda:	2002      	movs	r0, #2
   1ecdc:	4303      	orrs	r3, r0
   1ecde:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   1ece0:	2000      	movs	r0, #0
		break;
   1ece2:	e000      	b.n	1ece6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
   1ece4:	2000      	movs	r0, #0
}
   1ece6:	4770      	bx	lr
   1ece8:	0002a21c 	.word	0x0002a21c
   1ecec:	40000800 	.word	0x40000800
   1ecf0:	20003dac 	.word	0x20003dac

0001ecf4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   1ecf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ecf6:	46de      	mov	lr, fp
   1ecf8:	4657      	mov	r7, sl
   1ecfa:	464e      	mov	r6, r9
   1ecfc:	4645      	mov	r5, r8
   1ecfe:	b5e0      	push	{r5, r6, r7, lr}
   1ed00:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   1ed02:	22c2      	movs	r2, #194	; 0xc2
   1ed04:	00d2      	lsls	r2, r2, #3
   1ed06:	4b4c      	ldr	r3, [pc, #304]	; (1ee38 <system_clock_init+0x144>)
   1ed08:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1ed0a:	4a4c      	ldr	r2, [pc, #304]	; (1ee3c <system_clock_init+0x148>)
   1ed0c:	6853      	ldr	r3, [r2, #4]
   1ed0e:	211e      	movs	r1, #30
   1ed10:	438b      	bics	r3, r1
   1ed12:	3918      	subs	r1, #24
   1ed14:	430b      	orrs	r3, r1
   1ed16:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   1ed18:	2203      	movs	r2, #3
   1ed1a:	ab01      	add	r3, sp, #4
   1ed1c:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1ed1e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1ed20:	4d47      	ldr	r5, [pc, #284]	; (1ee40 <system_clock_init+0x14c>)
   1ed22:	b2e0      	uxtb	r0, r4
   1ed24:	a901      	add	r1, sp, #4
   1ed26:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1ed28:	3401      	adds	r4, #1
   1ed2a:	2c25      	cmp	r4, #37	; 0x25
   1ed2c:	d1f9      	bne.n	1ed22 <system_clock_init+0x2e>
	config->run_in_standby  = false;
   1ed2e:	a80b      	add	r0, sp, #44	; 0x2c
   1ed30:	2500      	movs	r5, #0
   1ed32:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   1ed34:	2601      	movs	r6, #1
   1ed36:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   1ed38:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1ed3a:	4b42      	ldr	r3, [pc, #264]	; (1ee44 <system_clock_init+0x150>)
   1ed3c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   1ed3e:	2006      	movs	r0, #6
   1ed40:	4b41      	ldr	r3, [pc, #260]	; (1ee48 <system_clock_init+0x154>)
   1ed42:	4699      	mov	r9, r3
   1ed44:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1ed46:	4b41      	ldr	r3, [pc, #260]	; (1ee4c <system_clock_init+0x158>)
   1ed48:	4798      	blx	r3
	config->high_when_disabled = false;
   1ed4a:	ac01      	add	r4, sp, #4
   1ed4c:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1ed4e:	2306      	movs	r3, #6
   1ed50:	469a      	mov	sl, r3
   1ed52:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
   1ed54:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1ed56:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1ed58:	2308      	movs	r3, #8
   1ed5a:	6063      	str	r3, [r4, #4]
   1ed5c:	0021      	movs	r1, r4
   1ed5e:	2001      	movs	r0, #1
   1ed60:	4b3b      	ldr	r3, [pc, #236]	; (1ee50 <system_clock_init+0x15c>)
   1ed62:	4698      	mov	r8, r3
   1ed64:	4798      	blx	r3
   1ed66:	2001      	movs	r0, #1
   1ed68:	4f3a      	ldr	r7, [pc, #232]	; (1ee54 <system_clock_init+0x160>)
   1ed6a:	47b8      	blx	r7
	config->division_factor    = 1;
   1ed6c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   1ed6e:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
   1ed70:	7265      	strb	r5, [r4, #9]
   1ed72:	2303      	movs	r3, #3
   1ed74:	469b      	mov	fp, r3
   1ed76:	7023      	strb	r3, [r4, #0]
   1ed78:	7226      	strb	r6, [r4, #8]
   1ed7a:	0021      	movs	r1, r4
   1ed7c:	2002      	movs	r0, #2
   1ed7e:	47c0      	blx	r8
   1ed80:	2002      	movs	r0, #2
   1ed82:	47b8      	blx	r7
	config->high_when_disabled = false;
   1ed84:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   1ed86:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1ed88:	7265      	strb	r5, [r4, #9]
   1ed8a:	465b      	mov	r3, fp
   1ed8c:	7023      	strb	r3, [r4, #0]
   1ed8e:	2320      	movs	r3, #32
   1ed90:	6063      	str	r3, [r4, #4]
   1ed92:	0021      	movs	r1, r4
   1ed94:	2004      	movs	r0, #4
   1ed96:	47c0      	blx	r8
   1ed98:	2004      	movs	r0, #4
   1ed9a:	47b8      	blx	r7
	config->division_factor    = 1;
   1ed9c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   1ed9e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1eda0:	4653      	mov	r3, sl
   1eda2:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
   1eda4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1eda6:	7265      	strb	r5, [r4, #9]
   1eda8:	0021      	movs	r1, r4
   1edaa:	2005      	movs	r0, #5
   1edac:	47c0      	blx	r8
   1edae:	2005      	movs	r0, #5
   1edb0:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   1edb2:	a90a      	add	r1, sp, #40	; 0x28
   1edb4:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   1edb6:	2001      	movs	r0, #1
   1edb8:	4b21      	ldr	r3, [pc, #132]	; (1ee40 <system_clock_init+0x14c>)
   1edba:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   1edbc:	2001      	movs	r0, #1
   1edbe:	4b26      	ldr	r3, [pc, #152]	; (1ee58 <system_clock_init+0x164>)
   1edc0:	4798      	blx	r3
	config->run_in_standby      = false;
   1edc2:	a804      	add	r0, sp, #16
   1edc4:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
   1edc6:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
   1edc8:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
   1edca:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
   1edcc:	4b23      	ldr	r3, [pc, #140]	; (1ee5c <system_clock_init+0x168>)
   1edce:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
   1edd0:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   1edd2:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   1edd4:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
   1edd6:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   1edd8:	2302      	movs	r3, #2
   1edda:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   1eddc:	4b20      	ldr	r3, [pc, #128]	; (1ee60 <system_clock_init+0x16c>)
   1edde:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
   1ede0:	4b20      	ldr	r3, [pc, #128]	; (1ee64 <system_clock_init+0x170>)
   1ede2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   1ede4:	2008      	movs	r0, #8
   1ede6:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
   1ede8:	4813      	ldr	r0, [pc, #76]	; (1ee38 <system_clock_init+0x144>)
   1edea:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1edec:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
   1edee:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   1edf0:	4013      	ands	r3, r2
   1edf2:	2b03      	cmp	r3, #3
   1edf4:	d1fb      	bne.n	1edee <system_clock_init+0xfa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   1edf6:	4910      	ldr	r1, [pc, #64]	; (1ee38 <system_clock_init+0x144>)
   1edf8:	2244      	movs	r2, #68	; 0x44
   1edfa:	5c88      	ldrb	r0, [r1, r2]
   1edfc:	3b83      	subs	r3, #131	; 0x83
   1edfe:	4303      	orrs	r3, r0
   1ee00:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
   1ee02:	4a19      	ldr	r2, [pc, #100]	; (1ee68 <system_clock_init+0x174>)
   1ee04:	2300      	movs	r3, #0
   1ee06:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   1ee08:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   1ee0a:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   1ee0c:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   1ee0e:	a901      	add	r1, sp, #4
   1ee10:	2201      	movs	r2, #1
   1ee12:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   1ee14:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   1ee16:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   1ee18:	3308      	adds	r3, #8
   1ee1a:	700b      	strb	r3, [r1, #0]
   1ee1c:	724a      	strb	r2, [r1, #9]
   1ee1e:	2000      	movs	r0, #0
   1ee20:	4b0b      	ldr	r3, [pc, #44]	; (1ee50 <system_clock_init+0x15c>)
   1ee22:	4798      	blx	r3
   1ee24:	2000      	movs	r0, #0
   1ee26:	4b0b      	ldr	r3, [pc, #44]	; (1ee54 <system_clock_init+0x160>)
   1ee28:	4798      	blx	r3
#endif
}
   1ee2a:	b00d      	add	sp, #52	; 0x34
   1ee2c:	bc3c      	pop	{r2, r3, r4, r5}
   1ee2e:	4690      	mov	r8, r2
   1ee30:	4699      	mov	r9, r3
   1ee32:	46a2      	mov	sl, r4
   1ee34:	46ab      	mov	fp, r5
   1ee36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee38:	40000800 	.word	0x40000800
   1ee3c:	41004000 	.word	0x41004000
   1ee40:	0001f0a5 	.word	0x0001f0a5
   1ee44:	0001eb6d 	.word	0x0001eb6d
   1ee48:	0001ec4d 	.word	0x0001ec4d
   1ee4c:	0001ee6d 	.word	0x0001ee6d
   1ee50:	0001ee91 	.word	0x0001ee91
   1ee54:	0001ef49 	.word	0x0001ef49
   1ee58:	0001f019 	.word	0x0001f019
   1ee5c:	02dc6c00 	.word	0x02dc6c00
   1ee60:	000f4240 	.word	0x000f4240
   1ee64:	0001eba9 	.word	0x0001eba9
   1ee68:	40000400 	.word	0x40000400

0001ee6c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   1ee6c:	4a06      	ldr	r2, [pc, #24]	; (1ee88 <system_gclk_init+0x1c>)
   1ee6e:	6993      	ldr	r3, [r2, #24]
   1ee70:	2108      	movs	r1, #8
   1ee72:	430b      	orrs	r3, r1
   1ee74:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   1ee76:	2201      	movs	r2, #1
   1ee78:	4b04      	ldr	r3, [pc, #16]	; (1ee8c <system_gclk_init+0x20>)
   1ee7a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   1ee7c:	0019      	movs	r1, r3
   1ee7e:	780b      	ldrb	r3, [r1, #0]
   1ee80:	4213      	tst	r3, r2
   1ee82:	d1fc      	bne.n	1ee7e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   1ee84:	4770      	bx	lr
   1ee86:	46c0      	nop			; (mov r8, r8)
   1ee88:	40000400 	.word	0x40000400
   1ee8c:	40000c00 	.word	0x40000c00

0001ee90 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1ee90:	b570      	push	{r4, r5, r6, lr}
   1ee92:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   1ee94:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1ee96:	780d      	ldrb	r5, [r1, #0]
   1ee98:	022d      	lsls	r5, r5, #8
   1ee9a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1ee9c:	784b      	ldrb	r3, [r1, #1]
   1ee9e:	2b00      	cmp	r3, #0
   1eea0:	d002      	beq.n	1eea8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1eea2:	2380      	movs	r3, #128	; 0x80
   1eea4:	02db      	lsls	r3, r3, #11
   1eea6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1eea8:	7a4b      	ldrb	r3, [r1, #9]
   1eeaa:	2b00      	cmp	r3, #0
   1eeac:	d002      	beq.n	1eeb4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   1eeae:	2380      	movs	r3, #128	; 0x80
   1eeb0:	031b      	lsls	r3, r3, #12
   1eeb2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1eeb4:	6848      	ldr	r0, [r1, #4]
   1eeb6:	2801      	cmp	r0, #1
   1eeb8:	d910      	bls.n	1eedc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1eeba:	1e43      	subs	r3, r0, #1
   1eebc:	4218      	tst	r0, r3
   1eebe:	d134      	bne.n	1ef2a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1eec0:	2802      	cmp	r0, #2
   1eec2:	d930      	bls.n	1ef26 <system_gclk_gen_set_config+0x96>
   1eec4:	2302      	movs	r3, #2
   1eec6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   1eec8:	3201      	adds	r2, #1
						mask <<= 1) {
   1eeca:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   1eecc:	4298      	cmp	r0, r3
   1eece:	d8fb      	bhi.n	1eec8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   1eed0:	0212      	lsls	r2, r2, #8
   1eed2:	4332      	orrs	r2, r6
   1eed4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1eed6:	2380      	movs	r3, #128	; 0x80
   1eed8:	035b      	lsls	r3, r3, #13
   1eeda:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1eedc:	7a0b      	ldrb	r3, [r1, #8]
   1eede:	2b00      	cmp	r3, #0
   1eee0:	d002      	beq.n	1eee8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1eee2:	2380      	movs	r3, #128	; 0x80
   1eee4:	039b      	lsls	r3, r3, #14
   1eee6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1eee8:	4a13      	ldr	r2, [pc, #76]	; (1ef38 <system_gclk_gen_set_config+0xa8>)
   1eeea:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   1eeec:	b25b      	sxtb	r3, r3
   1eeee:	2b00      	cmp	r3, #0
   1eef0:	dbfb      	blt.n	1eeea <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   1eef2:	4b12      	ldr	r3, [pc, #72]	; (1ef3c <system_gclk_gen_set_config+0xac>)
   1eef4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1eef6:	4b12      	ldr	r3, [pc, #72]	; (1ef40 <system_gclk_gen_set_config+0xb0>)
   1eef8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1eefa:	4a0f      	ldr	r2, [pc, #60]	; (1ef38 <system_gclk_gen_set_config+0xa8>)
   1eefc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1eefe:	b25b      	sxtb	r3, r3
   1ef00:	2b00      	cmp	r3, #0
   1ef02:	dbfb      	blt.n	1eefc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   1ef04:	4b0c      	ldr	r3, [pc, #48]	; (1ef38 <system_gclk_gen_set_config+0xa8>)
   1ef06:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1ef08:	001a      	movs	r2, r3
   1ef0a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   1ef0c:	b25b      	sxtb	r3, r3
   1ef0e:	2b00      	cmp	r3, #0
   1ef10:	dbfb      	blt.n	1ef0a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   1ef12:	4a09      	ldr	r2, [pc, #36]	; (1ef38 <system_gclk_gen_set_config+0xa8>)
   1ef14:	6853      	ldr	r3, [r2, #4]
   1ef16:	2180      	movs	r1, #128	; 0x80
   1ef18:	0249      	lsls	r1, r1, #9
   1ef1a:	400b      	ands	r3, r1
   1ef1c:	431d      	orrs	r5, r3
   1ef1e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   1ef20:	4b08      	ldr	r3, [pc, #32]	; (1ef44 <system_gclk_gen_set_config+0xb4>)
   1ef22:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1ef24:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   1ef26:	2200      	movs	r2, #0
   1ef28:	e7d2      	b.n	1eed0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1ef2a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   1ef2c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1ef2e:	2380      	movs	r3, #128	; 0x80
   1ef30:	029b      	lsls	r3, r3, #10
   1ef32:	431d      	orrs	r5, r3
   1ef34:	e7d2      	b.n	1eedc <system_gclk_gen_set_config+0x4c>
   1ef36:	46c0      	nop			; (mov r8, r8)
   1ef38:	40000c00 	.word	0x40000c00
   1ef3c:	0001d4f1 	.word	0x0001d4f1
   1ef40:	40000c08 	.word	0x40000c08
   1ef44:	0001d531 	.word	0x0001d531

0001ef48 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1ef48:	b510      	push	{r4, lr}
   1ef4a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1ef4c:	4a0b      	ldr	r2, [pc, #44]	; (1ef7c <system_gclk_gen_enable+0x34>)
   1ef4e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1ef50:	b25b      	sxtb	r3, r3
   1ef52:	2b00      	cmp	r3, #0
   1ef54:	dbfb      	blt.n	1ef4e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   1ef56:	4b0a      	ldr	r3, [pc, #40]	; (1ef80 <system_gclk_gen_enable+0x38>)
   1ef58:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1ef5a:	4b0a      	ldr	r3, [pc, #40]	; (1ef84 <system_gclk_gen_enable+0x3c>)
   1ef5c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1ef5e:	4a07      	ldr	r2, [pc, #28]	; (1ef7c <system_gclk_gen_enable+0x34>)
   1ef60:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1ef62:	b25b      	sxtb	r3, r3
   1ef64:	2b00      	cmp	r3, #0
   1ef66:	dbfb      	blt.n	1ef60 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   1ef68:	4a04      	ldr	r2, [pc, #16]	; (1ef7c <system_gclk_gen_enable+0x34>)
   1ef6a:	6851      	ldr	r1, [r2, #4]
   1ef6c:	2380      	movs	r3, #128	; 0x80
   1ef6e:	025b      	lsls	r3, r3, #9
   1ef70:	430b      	orrs	r3, r1
   1ef72:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   1ef74:	4b04      	ldr	r3, [pc, #16]	; (1ef88 <system_gclk_gen_enable+0x40>)
   1ef76:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1ef78:	bd10      	pop	{r4, pc}
   1ef7a:	46c0      	nop			; (mov r8, r8)
   1ef7c:	40000c00 	.word	0x40000c00
   1ef80:	0001d4f1 	.word	0x0001d4f1
   1ef84:	40000c04 	.word	0x40000c04
   1ef88:	0001d531 	.word	0x0001d531

0001ef8c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   1ef8c:	b570      	push	{r4, r5, r6, lr}
   1ef8e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1ef90:	4a1a      	ldr	r2, [pc, #104]	; (1effc <system_gclk_gen_get_hz+0x70>)
   1ef92:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1ef94:	b25b      	sxtb	r3, r3
   1ef96:	2b00      	cmp	r3, #0
   1ef98:	dbfb      	blt.n	1ef92 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   1ef9a:	4b19      	ldr	r3, [pc, #100]	; (1f000 <system_gclk_gen_get_hz+0x74>)
   1ef9c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1ef9e:	4b19      	ldr	r3, [pc, #100]	; (1f004 <system_gclk_gen_get_hz+0x78>)
   1efa0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1efa2:	4a16      	ldr	r2, [pc, #88]	; (1effc <system_gclk_gen_get_hz+0x70>)
   1efa4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1efa6:	b25b      	sxtb	r3, r3
   1efa8:	2b00      	cmp	r3, #0
   1efaa:	dbfb      	blt.n	1efa4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   1efac:	4e13      	ldr	r6, [pc, #76]	; (1effc <system_gclk_gen_get_hz+0x70>)
   1efae:	6870      	ldr	r0, [r6, #4]
   1efb0:	04c0      	lsls	r0, r0, #19
   1efb2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1efb4:	4b14      	ldr	r3, [pc, #80]	; (1f008 <system_gclk_gen_get_hz+0x7c>)
   1efb6:	4798      	blx	r3
   1efb8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1efba:	4b12      	ldr	r3, [pc, #72]	; (1f004 <system_gclk_gen_get_hz+0x78>)
   1efbc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1efbe:	6876      	ldr	r6, [r6, #4]
   1efc0:	02f6      	lsls	r6, r6, #11
   1efc2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1efc4:	4b11      	ldr	r3, [pc, #68]	; (1f00c <system_gclk_gen_get_hz+0x80>)
   1efc6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1efc8:	4a0c      	ldr	r2, [pc, #48]	; (1effc <system_gclk_gen_get_hz+0x70>)
   1efca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   1efcc:	b25b      	sxtb	r3, r3
   1efce:	2b00      	cmp	r3, #0
   1efd0:	dbfb      	blt.n	1efca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1efd2:	4b0a      	ldr	r3, [pc, #40]	; (1effc <system_gclk_gen_get_hz+0x70>)
   1efd4:	689c      	ldr	r4, [r3, #8]
   1efd6:	0224      	lsls	r4, r4, #8
   1efd8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   1efda:	4b0d      	ldr	r3, [pc, #52]	; (1f010 <system_gclk_gen_get_hz+0x84>)
   1efdc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1efde:	2e00      	cmp	r6, #0
   1efe0:	d107      	bne.n	1eff2 <system_gclk_gen_get_hz+0x66>
   1efe2:	2c01      	cmp	r4, #1
   1efe4:	d907      	bls.n	1eff6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   1efe6:	0021      	movs	r1, r4
   1efe8:	0028      	movs	r0, r5
   1efea:	4b0a      	ldr	r3, [pc, #40]	; (1f014 <system_gclk_gen_get_hz+0x88>)
   1efec:	4798      	blx	r3
   1efee:	0005      	movs	r5, r0
   1eff0:	e001      	b.n	1eff6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   1eff2:	3401      	adds	r4, #1
   1eff4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   1eff6:	0028      	movs	r0, r5
   1eff8:	bd70      	pop	{r4, r5, r6, pc}
   1effa:	46c0      	nop			; (mov r8, r8)
   1effc:	40000c00 	.word	0x40000c00
   1f000:	0001d4f1 	.word	0x0001d4f1
   1f004:	40000c04 	.word	0x40000c04
   1f008:	0001ead9 	.word	0x0001ead9
   1f00c:	40000c08 	.word	0x40000c08
   1f010:	0001d531 	.word	0x0001d531
   1f014:	00023fe1 	.word	0x00023fe1

0001f018 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1f018:	b510      	push	{r4, lr}
   1f01a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f01c:	4b06      	ldr	r3, [pc, #24]	; (1f038 <system_gclk_chan_enable+0x20>)
   1f01e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f020:	4b06      	ldr	r3, [pc, #24]	; (1f03c <system_gclk_chan_enable+0x24>)
   1f022:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   1f024:	4a06      	ldr	r2, [pc, #24]	; (1f040 <system_gclk_chan_enable+0x28>)
   1f026:	8853      	ldrh	r3, [r2, #2]
   1f028:	2180      	movs	r1, #128	; 0x80
   1f02a:	01c9      	lsls	r1, r1, #7
   1f02c:	430b      	orrs	r3, r1
   1f02e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   1f030:	4b04      	ldr	r3, [pc, #16]	; (1f044 <system_gclk_chan_enable+0x2c>)
   1f032:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f034:	bd10      	pop	{r4, pc}
   1f036:	46c0      	nop			; (mov r8, r8)
   1f038:	0001d4f1 	.word	0x0001d4f1
   1f03c:	40000c02 	.word	0x40000c02
   1f040:	40000c00 	.word	0x40000c00
   1f044:	0001d531 	.word	0x0001d531

0001f048 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1f048:	b510      	push	{r4, lr}
   1f04a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f04c:	4b0f      	ldr	r3, [pc, #60]	; (1f08c <system_gclk_chan_disable+0x44>)
   1f04e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f050:	4b0f      	ldr	r3, [pc, #60]	; (1f090 <system_gclk_chan_disable+0x48>)
   1f052:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1f054:	4a0f      	ldr	r2, [pc, #60]	; (1f094 <system_gclk_chan_disable+0x4c>)
   1f056:	8853      	ldrh	r3, [r2, #2]
   1f058:	051b      	lsls	r3, r3, #20
   1f05a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   1f05c:	8853      	ldrh	r3, [r2, #2]
   1f05e:	490e      	ldr	r1, [pc, #56]	; (1f098 <system_gclk_chan_disable+0x50>)
   1f060:	400b      	ands	r3, r1
   1f062:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1f064:	8853      	ldrh	r3, [r2, #2]
   1f066:	490d      	ldr	r1, [pc, #52]	; (1f09c <system_gclk_chan_disable+0x54>)
   1f068:	400b      	ands	r3, r1
   1f06a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1f06c:	0011      	movs	r1, r2
   1f06e:	2280      	movs	r2, #128	; 0x80
   1f070:	01d2      	lsls	r2, r2, #7
   1f072:	884b      	ldrh	r3, [r1, #2]
   1f074:	4213      	tst	r3, r2
   1f076:	d1fc      	bne.n	1f072 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1f078:	4906      	ldr	r1, [pc, #24]	; (1f094 <system_gclk_chan_disable+0x4c>)
   1f07a:	884a      	ldrh	r2, [r1, #2]
   1f07c:	0203      	lsls	r3, r0, #8
   1f07e:	4806      	ldr	r0, [pc, #24]	; (1f098 <system_gclk_chan_disable+0x50>)
   1f080:	4002      	ands	r2, r0
   1f082:	4313      	orrs	r3, r2
   1f084:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   1f086:	4b06      	ldr	r3, [pc, #24]	; (1f0a0 <system_gclk_chan_disable+0x58>)
   1f088:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1f08a:	bd10      	pop	{r4, pc}
   1f08c:	0001d4f1 	.word	0x0001d4f1
   1f090:	40000c02 	.word	0x40000c02
   1f094:	40000c00 	.word	0x40000c00
   1f098:	fffff0ff 	.word	0xfffff0ff
   1f09c:	ffffbfff 	.word	0xffffbfff
   1f0a0:	0001d531 	.word	0x0001d531

0001f0a4 <system_gclk_chan_set_config>:
{
   1f0a4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1f0a6:	780c      	ldrb	r4, [r1, #0]
   1f0a8:	0224      	lsls	r4, r4, #8
   1f0aa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   1f0ac:	4b02      	ldr	r3, [pc, #8]	; (1f0b8 <system_gclk_chan_set_config+0x14>)
   1f0ae:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1f0b0:	b2a4      	uxth	r4, r4
   1f0b2:	4b02      	ldr	r3, [pc, #8]	; (1f0bc <system_gclk_chan_set_config+0x18>)
   1f0b4:	805c      	strh	r4, [r3, #2]
}
   1f0b6:	bd10      	pop	{r4, pc}
   1f0b8:	0001f049 	.word	0x0001f049
   1f0bc:	40000c00 	.word	0x40000c00

0001f0c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1f0c0:	b510      	push	{r4, lr}
   1f0c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1f0c4:	4b06      	ldr	r3, [pc, #24]	; (1f0e0 <system_gclk_chan_get_hz+0x20>)
   1f0c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1f0c8:	4b06      	ldr	r3, [pc, #24]	; (1f0e4 <system_gclk_chan_get_hz+0x24>)
   1f0ca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1f0cc:	4b06      	ldr	r3, [pc, #24]	; (1f0e8 <system_gclk_chan_get_hz+0x28>)
   1f0ce:	885c      	ldrh	r4, [r3, #2]
   1f0d0:	0524      	lsls	r4, r4, #20
   1f0d2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   1f0d4:	4b05      	ldr	r3, [pc, #20]	; (1f0ec <system_gclk_chan_get_hz+0x2c>)
   1f0d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1f0d8:	0020      	movs	r0, r4
   1f0da:	4b05      	ldr	r3, [pc, #20]	; (1f0f0 <system_gclk_chan_get_hz+0x30>)
   1f0dc:	4798      	blx	r3
}
   1f0de:	bd10      	pop	{r4, pc}
   1f0e0:	0001d4f1 	.word	0x0001d4f1
   1f0e4:	40000c02 	.word	0x40000c02
   1f0e8:	40000c00 	.word	0x40000c00
   1f0ec:	0001d531 	.word	0x0001d531
   1f0f0:	0001ef8d 	.word	0x0001ef8d

0001f0f4 <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   1f0f4:	2800      	cmp	r0, #0
   1f0f6:	db08      	blt.n	1f10a <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
   1f0f8:	2301      	movs	r3, #1
   1f0fa:	4083      	lsls	r3, r0
   1f0fc:	22c0      	movs	r2, #192	; 0xc0
   1f0fe:	0052      	lsls	r2, r2, #1
   1f100:	4906      	ldr	r1, [pc, #24]	; (1f11c <system_interrupt_clear_pending+0x28>)
   1f102:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
   1f104:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
   1f106:	0018      	movs	r0, r3
   1f108:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
   1f10a:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   1f10c:	1c42      	adds	r2, r0, #1
   1f10e:	d1fa      	bne.n	1f106 <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   1f110:	2280      	movs	r2, #128	; 0x80
   1f112:	0492      	lsls	r2, r2, #18
   1f114:	4b02      	ldr	r3, [pc, #8]	; (1f120 <system_interrupt_clear_pending+0x2c>)
   1f116:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
   1f118:	2300      	movs	r3, #0
   1f11a:	e7f4      	b.n	1f106 <system_interrupt_clear_pending+0x12>
   1f11c:	e000e100 	.word	0xe000e100
   1f120:	e000ed00 	.word	0xe000ed00

0001f124 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   1f124:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1f126:	78d3      	ldrb	r3, [r2, #3]
   1f128:	2b00      	cmp	r3, #0
   1f12a:	d135      	bne.n	1f198 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1f12c:	7813      	ldrb	r3, [r2, #0]
   1f12e:	2b80      	cmp	r3, #128	; 0x80
   1f130:	d029      	beq.n	1f186 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1f132:	061b      	lsls	r3, r3, #24
   1f134:	2480      	movs	r4, #128	; 0x80
   1f136:	0264      	lsls	r4, r4, #9
   1f138:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1f13a:	7854      	ldrb	r4, [r2, #1]
   1f13c:	2502      	movs	r5, #2
   1f13e:	43ac      	bics	r4, r5
   1f140:	d106      	bne.n	1f150 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1f142:	7894      	ldrb	r4, [r2, #2]
   1f144:	2c00      	cmp	r4, #0
   1f146:	d120      	bne.n	1f18a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   1f148:	2480      	movs	r4, #128	; 0x80
   1f14a:	02a4      	lsls	r4, r4, #10
   1f14c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1f14e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1f150:	7854      	ldrb	r4, [r2, #1]
   1f152:	3c01      	subs	r4, #1
   1f154:	2c01      	cmp	r4, #1
   1f156:	d91c      	bls.n	1f192 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1f158:	040d      	lsls	r5, r1, #16
   1f15a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1f15c:	24a0      	movs	r4, #160	; 0xa0
   1f15e:	05e4      	lsls	r4, r4, #23
   1f160:	432c      	orrs	r4, r5
   1f162:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f164:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1f166:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1f168:	24d0      	movs	r4, #208	; 0xd0
   1f16a:	0624      	lsls	r4, r4, #24
   1f16c:	432c      	orrs	r4, r5
   1f16e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f170:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1f172:	78d4      	ldrb	r4, [r2, #3]
   1f174:	2c00      	cmp	r4, #0
   1f176:	d122      	bne.n	1f1be <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1f178:	035b      	lsls	r3, r3, #13
   1f17a:	d51c      	bpl.n	1f1b6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1f17c:	7893      	ldrb	r3, [r2, #2]
   1f17e:	2b01      	cmp	r3, #1
   1f180:	d01e      	beq.n	1f1c0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   1f182:	6141      	str	r1, [r0, #20]
   1f184:	e017      	b.n	1f1b6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   1f186:	2300      	movs	r3, #0
   1f188:	e7d7      	b.n	1f13a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1f18a:	24c0      	movs	r4, #192	; 0xc0
   1f18c:	02e4      	lsls	r4, r4, #11
   1f18e:	4323      	orrs	r3, r4
   1f190:	e7dd      	b.n	1f14e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1f192:	4c0d      	ldr	r4, [pc, #52]	; (1f1c8 <_system_pinmux_config+0xa4>)
   1f194:	4023      	ands	r3, r4
   1f196:	e7df      	b.n	1f158 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   1f198:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1f19a:	040c      	lsls	r4, r1, #16
   1f19c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1f19e:	23a0      	movs	r3, #160	; 0xa0
   1f1a0:	05db      	lsls	r3, r3, #23
   1f1a2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f1a4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1f1a6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1f1a8:	23d0      	movs	r3, #208	; 0xd0
   1f1aa:	061b      	lsls	r3, r3, #24
   1f1ac:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1f1ae:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   1f1b0:	78d3      	ldrb	r3, [r2, #3]
   1f1b2:	2b00      	cmp	r3, #0
   1f1b4:	d103      	bne.n	1f1be <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1f1b6:	7853      	ldrb	r3, [r2, #1]
   1f1b8:	3b01      	subs	r3, #1
   1f1ba:	2b01      	cmp	r3, #1
   1f1bc:	d902      	bls.n	1f1c4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   1f1be:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   1f1c0:	6181      	str	r1, [r0, #24]
   1f1c2:	e7f8      	b.n	1f1b6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   1f1c4:	6081      	str	r1, [r0, #8]
}
   1f1c6:	e7fa      	b.n	1f1be <_system_pinmux_config+0x9a>
   1f1c8:	fffbffff 	.word	0xfffbffff

0001f1cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   1f1cc:	b510      	push	{r4, lr}
   1f1ce:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   1f1d0:	09c1      	lsrs	r1, r0, #7
		return NULL;
   1f1d2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1f1d4:	2900      	cmp	r1, #0
   1f1d6:	d104      	bne.n	1f1e2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   1f1d8:	0943      	lsrs	r3, r0, #5
   1f1da:	01db      	lsls	r3, r3, #7
   1f1dc:	4905      	ldr	r1, [pc, #20]	; (1f1f4 <system_pinmux_pin_set_config+0x28>)
   1f1de:	468c      	mov	ip, r1
   1f1e0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1f1e2:	241f      	movs	r4, #31
   1f1e4:	4020      	ands	r0, r4
   1f1e6:	2101      	movs	r1, #1
   1f1e8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   1f1ea:	0018      	movs	r0, r3
   1f1ec:	4b02      	ldr	r3, [pc, #8]	; (1f1f8 <system_pinmux_pin_set_config+0x2c>)
   1f1ee:	4798      	blx	r3
}
   1f1f0:	bd10      	pop	{r4, pc}
   1f1f2:	46c0      	nop			; (mov r8, r8)
   1f1f4:	41004400 	.word	0x41004400
   1f1f8:	0001f125 	.word	0x0001f125

0001f1fc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   1f1fc:	4770      	bx	lr
	...

0001f200 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1f200:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1f202:	4b05      	ldr	r3, [pc, #20]	; (1f218 <system_init+0x18>)
   1f204:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1f206:	4b05      	ldr	r3, [pc, #20]	; (1f21c <system_init+0x1c>)
   1f208:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1f20a:	4b05      	ldr	r3, [pc, #20]	; (1f220 <system_init+0x20>)
   1f20c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1f20e:	4b05      	ldr	r3, [pc, #20]	; (1f224 <system_init+0x24>)
   1f210:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1f212:	4b05      	ldr	r3, [pc, #20]	; (1f228 <system_init+0x28>)
   1f214:	4798      	blx	r3
}
   1f216:	bd10      	pop	{r4, pc}
   1f218:	0001ecf5 	.word	0x0001ecf5
   1f21c:	0001d561 	.word	0x0001d561
   1f220:	0001f1fd 	.word	0x0001f1fd
   1f224:	0001d671 	.word	0x0001d671
   1f228:	0001f1fd 	.word	0x0001f1fd

0001f22c <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   1f22c:	4b09      	ldr	r3, [pc, #36]	; (1f254 <_tcc_get_inst_index+0x28>)
   1f22e:	4298      	cmp	r0, r3
   1f230:	d00c      	beq.n	1f24c <_tcc_get_inst_index+0x20>
   1f232:	4b09      	ldr	r3, [pc, #36]	; (1f258 <_tcc_get_inst_index+0x2c>)
   1f234:	4298      	cmp	r0, r3
   1f236:	d007      	beq.n	1f248 <_tcc_get_inst_index+0x1c>
   1f238:	4a08      	ldr	r2, [pc, #32]	; (1f25c <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   1f23a:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   1f23c:	4290      	cmp	r0, r2
   1f23e:	d001      	beq.n	1f244 <_tcc_get_inst_index+0x18>
}
   1f240:	0018      	movs	r0, r3
   1f242:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   1f244:	3302      	adds	r3, #2
   1f246:	e002      	b.n	1f24e <_tcc_get_inst_index+0x22>
   1f248:	2301      	movs	r3, #1
   1f24a:	e000      	b.n	1f24e <_tcc_get_inst_index+0x22>
   1f24c:	2300      	movs	r3, #0
			return i;
   1f24e:	b2db      	uxtb	r3, r3
   1f250:	e7f6      	b.n	1f240 <_tcc_get_inst_index+0x14>
   1f252:	46c0      	nop			; (mov r8, r8)
   1f254:	42002000 	.word	0x42002000
   1f258:	42002400 	.word	0x42002400
   1f25c:	42002800 	.word	0x42002800

0001f260 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   1f260:	b510      	push	{r4, lr}
   1f262:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1f264:	0008      	movs	r0, r1
   1f266:	4b4f      	ldr	r3, [pc, #316]	; (1f3a4 <tcc_get_config_defaults+0x144>)
   1f268:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   1f26a:	2300      	movs	r3, #0
   1f26c:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   1f26e:	0080      	lsls	r0, r0, #2
   1f270:	4a4d      	ldr	r2, [pc, #308]	; (1f3a8 <tcc_get_config_defaults+0x148>)
   1f272:	5882      	ldr	r2, [r0, r2]
   1f274:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   1f276:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   1f278:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   1f27a:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   1f27c:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   1f27e:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f280:	61e3      	str	r3, [r4, #28]
   1f282:	6223      	str	r3, [r4, #32]
   1f284:	6263      	str	r3, [r4, #36]	; 0x24
   1f286:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f288:	7523      	strb	r3, [r4, #20]
   1f28a:	7563      	strb	r3, [r4, #21]
   1f28c:	75a3      	strb	r3, [r4, #22]
   1f28e:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   1f290:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   1f292:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1f294:	7423      	strb	r3, [r4, #16]
   1f296:	7463      	strb	r3, [r4, #17]
   1f298:	74a3      	strb	r3, [r4, #18]
   1f29a:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   1f29c:	222c      	movs	r2, #44	; 0x2c
   1f29e:	54a3      	strb	r3, [r4, r2]
   1f2a0:	3201      	adds	r2, #1
   1f2a2:	54a3      	strb	r3, [r4, r2]
   1f2a4:	3201      	adds	r2, #1
   1f2a6:	54a3      	strb	r3, [r4, r2]
   1f2a8:	3201      	adds	r2, #1
   1f2aa:	54a3      	strb	r3, [r4, r2]
   1f2ac:	3201      	adds	r2, #1
   1f2ae:	54a3      	strb	r3, [r4, r2]
   1f2b0:	3201      	adds	r2, #1
   1f2b2:	54a3      	strb	r3, [r4, r2]
   1f2b4:	3201      	adds	r2, #1
   1f2b6:	54a3      	strb	r3, [r4, r2]
   1f2b8:	3201      	adds	r2, #1
   1f2ba:	54a3      	strb	r3, [r4, r2]
   1f2bc:	3201      	adds	r2, #1
   1f2be:	54a3      	strb	r3, [r4, r2]
   1f2c0:	3201      	adds	r2, #1
   1f2c2:	54a3      	strb	r3, [r4, r2]
   1f2c4:	3201      	adds	r2, #1
   1f2c6:	54a3      	strb	r3, [r4, r2]
   1f2c8:	3201      	adds	r2, #1
   1f2ca:	54a3      	strb	r3, [r4, r2]
   1f2cc:	3201      	adds	r2, #1
   1f2ce:	54a3      	strb	r3, [r4, r2]
   1f2d0:	3201      	adds	r2, #1
   1f2d2:	54a3      	strb	r3, [r4, r2]
   1f2d4:	3201      	adds	r2, #1
   1f2d6:	54a3      	strb	r3, [r4, r2]
   1f2d8:	3201      	adds	r2, #1
   1f2da:	54a3      	strb	r3, [r4, r2]
   1f2dc:	3201      	adds	r2, #1
   1f2de:	54a3      	strb	r3, [r4, r2]
   1f2e0:	3201      	adds	r2, #1
   1f2e2:	54a3      	strb	r3, [r4, r2]
   1f2e4:	3201      	adds	r2, #1
   1f2e6:	54a3      	strb	r3, [r4, r2]
   1f2e8:	3201      	adds	r2, #1
   1f2ea:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   1f2ec:	3201      	adds	r2, #1
   1f2ee:	54a3      	strb	r3, [r4, r2]
   1f2f0:	3201      	adds	r2, #1
   1f2f2:	54a3      	strb	r3, [r4, r2]
   1f2f4:	3201      	adds	r2, #1
   1f2f6:	54a3      	strb	r3, [r4, r2]
   1f2f8:	3201      	adds	r2, #1
   1f2fa:	54a3      	strb	r3, [r4, r2]
   1f2fc:	3201      	adds	r2, #1
   1f2fe:	54a3      	strb	r3, [r4, r2]
   1f300:	3201      	adds	r2, #1
   1f302:	54a3      	strb	r3, [r4, r2]
   1f304:	3201      	adds	r2, #1
   1f306:	54a3      	strb	r3, [r4, r2]
   1f308:	3201      	adds	r2, #1
   1f30a:	54a3      	strb	r3, [r4, r2]
   1f30c:	3201      	adds	r2, #1
   1f30e:	54a3      	strb	r3, [r4, r2]
   1f310:	3201      	adds	r2, #1
   1f312:	54a3      	strb	r3, [r4, r2]
   1f314:	3201      	adds	r2, #1
   1f316:	54a3      	strb	r3, [r4, r2]
   1f318:	3201      	adds	r2, #1
   1f31a:	54a3      	strb	r3, [r4, r2]
   1f31c:	3201      	adds	r2, #1
   1f31e:	54a3      	strb	r3, [r4, r2]
   1f320:	3201      	adds	r2, #1
   1f322:	54a3      	strb	r3, [r4, r2]
   1f324:	3201      	adds	r2, #1
   1f326:	54a3      	strb	r3, [r4, r2]
   1f328:	3201      	adds	r2, #1
   1f32a:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   1f32c:	3201      	adds	r2, #1
   1f32e:	54a3      	strb	r3, [r4, r2]
   1f330:	3201      	adds	r2, #1
   1f332:	54a3      	strb	r3, [r4, r2]
   1f334:	3201      	adds	r2, #1
   1f336:	54a3      	strb	r3, [r4, r2]
   1f338:	3201      	adds	r2, #1
   1f33a:	54a3      	strb	r3, [r4, r2]
   1f33c:	3201      	adds	r2, #1
   1f33e:	54a3      	strb	r3, [r4, r2]
   1f340:	3201      	adds	r2, #1
   1f342:	54a3      	strb	r3, [r4, r2]
   1f344:	3201      	adds	r2, #1
   1f346:	54a3      	strb	r3, [r4, r2]
   1f348:	3201      	adds	r2, #1
   1f34a:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   1f34c:	3241      	adds	r2, #65	; 0x41
   1f34e:	54a3      	strb	r3, [r4, r2]
   1f350:	65a3      	str	r3, [r4, #88]	; 0x58
   1f352:	67a3      	str	r3, [r4, #120]	; 0x78
   1f354:	3201      	adds	r2, #1
   1f356:	54a3      	strb	r3, [r4, r2]
   1f358:	65e3      	str	r3, [r4, #92]	; 0x5c
   1f35a:	67e3      	str	r3, [r4, #124]	; 0x7c
   1f35c:	3201      	adds	r2, #1
   1f35e:	54a3      	strb	r3, [r4, r2]
   1f360:	6623      	str	r3, [r4, #96]	; 0x60
   1f362:	3a1a      	subs	r2, #26
   1f364:	50a3      	str	r3, [r4, r2]
   1f366:	321b      	adds	r2, #27
   1f368:	54a3      	strb	r3, [r4, r2]
   1f36a:	6663      	str	r3, [r4, #100]	; 0x64
   1f36c:	3a17      	subs	r2, #23
   1f36e:	50a3      	str	r3, [r4, r2]
   1f370:	3218      	adds	r2, #24
   1f372:	54a3      	strb	r3, [r4, r2]
   1f374:	66a3      	str	r3, [r4, #104]	; 0x68
   1f376:	3a14      	subs	r2, #20
   1f378:	50a3      	str	r3, [r4, r2]
   1f37a:	3215      	adds	r2, #21
   1f37c:	54a3      	strb	r3, [r4, r2]
   1f37e:	66e3      	str	r3, [r4, #108]	; 0x6c
   1f380:	3a11      	subs	r2, #17
   1f382:	50a3      	str	r3, [r4, r2]
   1f384:	3212      	adds	r2, #18
   1f386:	54a3      	strb	r3, [r4, r2]
   1f388:	6723      	str	r3, [r4, #112]	; 0x70
   1f38a:	3a0e      	subs	r2, #14
   1f38c:	50a3      	str	r3, [r4, r2]
   1f38e:	320f      	adds	r2, #15
   1f390:	54a3      	strb	r3, [r4, r2]
   1f392:	6763      	str	r3, [r4, #116]	; 0x74
   1f394:	3a0b      	subs	r2, #11
   1f396:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   1f398:	2101      	movs	r1, #1
   1f39a:	320c      	adds	r2, #12
   1f39c:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   1f39e:	3201      	adds	r2, #1
   1f3a0:	54a3      	strb	r3, [r4, r2]
}
   1f3a2:	bd10      	pop	{r4, pc}
   1f3a4:	0001f22d 	.word	0x0001f22d
   1f3a8:	0002a254 	.word	0x0002a254

0001f3ac <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   1f3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3ae:	46de      	mov	lr, fp
   1f3b0:	4657      	mov	r7, sl
   1f3b2:	464e      	mov	r6, r9
   1f3b4:	4645      	mov	r5, r8
   1f3b6:	b5e0      	push	{r5, r6, r7, lr}
   1f3b8:	b091      	sub	sp, #68	; 0x44
   1f3ba:	9001      	str	r0, [sp, #4]
   1f3bc:	000c      	movs	r4, r1
   1f3be:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   1f3c0:	0008      	movs	r0, r1
   1f3c2:	4bc3      	ldr	r3, [pc, #780]	; (1f6d0 <tcc_init+0x324>)
   1f3c4:	4798      	blx	r3
   1f3c6:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   1f3c8:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   1f3ca:	48c2      	ldr	r0, [pc, #776]	; (1f6d4 <tcc_init+0x328>)
   1f3cc:	6a02      	ldr	r2, [r0, #32]
   1f3ce:	009e      	lsls	r6, r3, #2
   1f3d0:	4fc1      	ldr	r7, [pc, #772]	; (1f6d8 <tcc_init+0x32c>)
   1f3d2:	59f7      	ldr	r7, [r6, r7]
   1f3d4:	433a      	orrs	r2, r7
   1f3d6:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1f3d8:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   1f3da:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1f3dc:	0792      	lsls	r2, r2, #30
   1f3de:	d506      	bpl.n	1f3ee <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   1f3e0:	b011      	add	sp, #68	; 0x44
   1f3e2:	bc3c      	pop	{r2, r3, r4, r5}
   1f3e4:	4690      	mov	r8, r2
   1f3e6:	4699      	mov	r9, r3
   1f3e8:	46a2      	mov	sl, r4
   1f3ea:	46ab      	mov	fp, r5
   1f3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   1f3ee:	6822      	ldr	r2, [r4, #0]
   1f3f0:	2701      	movs	r7, #1
   1f3f2:	4017      	ands	r7, r2
   1f3f4:	d1f4      	bne.n	1f3e0 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   1f3f6:	48b9      	ldr	r0, [pc, #740]	; (1f6dc <tcc_init+0x330>)
   1f3f8:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   1f3fa:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   1f3fc:	682e      	ldr	r6, [r5, #0]
   1f3fe:	42b2      	cmp	r2, r6
   1f400:	d3ee      	bcc.n	1f3e0 <tcc_init+0x34>
		|| (config->counter.period > count_max)
   1f402:	686e      	ldr	r6, [r5, #4]
   1f404:	42b2      	cmp	r2, r6
   1f406:	d3eb      	bcc.n	1f3e0 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   1f408:	69e8      	ldr	r0, [r5, #28]
   1f40a:	4282      	cmp	r2, r0
   1f40c:	d200      	bcs.n	1f410 <tcc_init+0x64>
   1f40e:	e1b9      	b.n	1f784 <tcc_init+0x3d8>
   1f410:	6a28      	ldr	r0, [r5, #32]
   1f412:	4282      	cmp	r2, r0
   1f414:	d200      	bcs.n	1f418 <tcc_init+0x6c>
   1f416:	e1b7      	b.n	1f788 <tcc_init+0x3dc>
   1f418:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1f41a:	4282      	cmp	r2, r0
   1f41c:	d200      	bcs.n	1f420 <tcc_init+0x74>
   1f41e:	e1b5      	b.n	1f78c <tcc_init+0x3e0>
   1f420:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1f422:	4282      	cmp	r2, r0
   1f424:	d200      	bcs.n	1f428 <tcc_init+0x7c>
   1f426:	e1b3      	b.n	1f790 <tcc_init+0x3e4>
   1f428:	2298      	movs	r2, #152	; 0x98
   1f42a:	4694      	mov	ip, r2
   1f42c:	44ac      	add	ip, r5
   1f42e:	4662      	mov	r2, ip
   1f430:	9208      	str	r2, [sp, #32]
   1f432:	2000      	movs	r0, #0
   1f434:	e003      	b.n	1f43e <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f436:	3001      	adds	r0, #1
   1f438:	3201      	adds	r2, #1
   1f43a:	2808      	cmp	r0, #8
   1f43c:	d008      	beq.n	1f450 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   1f43e:	7816      	ldrb	r6, [r2, #0]
   1f440:	2e00      	cmp	r6, #0
   1f442:	d0f8      	beq.n	1f436 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   1f444:	4ea6      	ldr	r6, [pc, #664]	; (1f6e0 <tcc_init+0x334>)
   1f446:	5c76      	ldrb	r6, [r6, r1]
   1f448:	4286      	cmp	r6, r0
   1f44a:	dcf4      	bgt.n	1f436 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   1f44c:	2017      	movs	r0, #23
   1f44e:	e7c7      	b.n	1f3e0 <tcc_init+0x34>
   1f450:	2200      	movs	r2, #0
   1f452:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1f454:	2080      	movs	r0, #128	; 0x80
   1f456:	0440      	lsls	r0, r0, #17
   1f458:	4684      	mov	ip, r0
   1f45a:	e002      	b.n	1f462 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1f45c:	3201      	adds	r2, #1
   1f45e:	2a04      	cmp	r2, #4
   1f460:	d00e      	beq.n	1f480 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   1f462:	18a8      	adds	r0, r5, r2
   1f464:	7c00      	ldrb	r0, [r0, #16]
   1f466:	2801      	cmp	r0, #1
   1f468:	d1f8      	bne.n	1f45c <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   1f46a:	489e      	ldr	r0, [pc, #632]	; (1f6e4 <tcc_init+0x338>)
   1f46c:	5c40      	ldrb	r0, [r0, r1]
   1f46e:	4290      	cmp	r0, r2
   1f470:	da00      	bge.n	1f474 <tcc_init+0xc8>
   1f472:	e18f      	b.n	1f794 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   1f474:	4660      	mov	r0, ip
   1f476:	4090      	lsls	r0, r2
   1f478:	9e02      	ldr	r6, [sp, #8]
   1f47a:	4306      	orrs	r6, r0
   1f47c:	9602      	str	r6, [sp, #8]
   1f47e:	e7ed      	b.n	1f45c <tcc_init+0xb0>
	if (config->run_in_standby) {
   1f480:	329d      	adds	r2, #157	; 0x9d
   1f482:	5caa      	ldrb	r2, [r5, r2]
   1f484:	2a00      	cmp	r2, #0
   1f486:	d004      	beq.n	1f492 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   1f488:	2280      	movs	r2, #128	; 0x80
   1f48a:	0112      	lsls	r2, r2, #4
   1f48c:	9902      	ldr	r1, [sp, #8]
   1f48e:	4311      	orrs	r1, r2
   1f490:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   1f492:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   1f494:	1e51      	subs	r1, r2, #1
   1f496:	418a      	sbcs	r2, r1
   1f498:	0092      	lsls	r2, r2, #2
   1f49a:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   1f49c:	7a6a      	ldrb	r2, [r5, #9]
   1f49e:	2a01      	cmp	r2, #1
   1f4a0:	d022      	beq.n	1f4e8 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   1f4a2:	4a90      	ldr	r2, [pc, #576]	; (1f6e4 <tcc_init+0x338>)
   1f4a4:	5cd2      	ldrb	r2, [r2, r3]
   1f4a6:	0011      	movs	r1, r2
   1f4a8:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   1f4aa:	2235      	movs	r2, #53	; 0x35
   1f4ac:	5caa      	ldrb	r2, [r5, r2]
   1f4ae:	428a      	cmp	r2, r1
   1f4b0:	d300      	bcc.n	1f4b4 <tcc_init+0x108>
   1f4b2:	e179      	b.n	1f7a8 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   1f4b4:	212c      	movs	r1, #44	; 0x2c
   1f4b6:	5c69      	ldrb	r1, [r5, r1]
   1f4b8:	290f      	cmp	r1, #15
   1f4ba:	d900      	bls.n	1f4be <tcc_init+0x112>
   1f4bc:	e174      	b.n	1f7a8 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1f4be:	7b28      	ldrb	r0, [r5, #12]
   1f4c0:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1f4c2:	7ae8      	ldrb	r0, [r5, #11]
   1f4c4:	900b      	str	r0, [sp, #44]	; 0x2c
   1f4c6:	202d      	movs	r0, #45	; 0x2d
   1f4c8:	4682      	mov	sl, r0
   1f4ca:	44aa      	add	sl, r5
   1f4cc:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1f4ce:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   1f4d0:	ae0e      	add	r6, sp, #56	; 0x38
   1f4d2:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1f4d4:	26c0      	movs	r6, #192	; 0xc0
   1f4d6:	0136      	lsls	r6, r6, #4
   1f4d8:	46b1      	mov	r9, r6
   1f4da:	4684      	mov	ip, r0
   1f4dc:	46a0      	mov	r8, r4
   1f4de:	0028      	movs	r0, r5
   1f4e0:	4655      	mov	r5, sl
   1f4e2:	9309      	str	r3, [sp, #36]	; 0x24
   1f4e4:	4682      	mov	sl, r0
   1f4e6:	e035      	b.n	1f554 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   1f4e8:	9906      	ldr	r1, [sp, #24]
   1f4ea:	4311      	orrs	r1, r2
   1f4ec:	9106      	str	r1, [sp, #24]
   1f4ee:	e7d8      	b.n	1f4a2 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1f4f0:	0292      	lsls	r2, r2, #10
   1f4f2:	464f      	mov	r7, r9
   1f4f4:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f4f6:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   1f4f8:	7919      	ldrb	r1, [r3, #4]
   1f4fa:	468b      	mov	fp, r1
   1f4fc:	2103      	movs	r1, #3
   1f4fe:	465f      	mov	r7, fp
   1f500:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f502:	430a      	orrs	r2, r1
   1f504:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   1f506:	795a      	ldrb	r2, [r3, #5]
   1f508:	0152      	lsls	r2, r2, #5
   1f50a:	2160      	movs	r1, #96	; 0x60
   1f50c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f50e:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   1f510:	7999      	ldrb	r1, [r3, #6]
   1f512:	0209      	lsls	r1, r1, #8
   1f514:	26c0      	movs	r6, #192	; 0xc0
   1f516:	00b6      	lsls	r6, r6, #2
   1f518:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f51a:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   1f51c:	79da      	ldrb	r2, [r3, #7]
   1f51e:	0312      	lsls	r2, r2, #12
   1f520:	21e0      	movs	r1, #224	; 0xe0
   1f522:	01c9      	lsls	r1, r1, #7
   1f524:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f526:	4316      	orrs	r6, r2
   1f528:	4334      	orrs	r4, r6
   1f52a:	9a03      	ldr	r2, [sp, #12]
   1f52c:	4314      	orrs	r4, r2
   1f52e:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   1f530:	4662      	mov	r2, ip
   1f532:	9907      	ldr	r1, [sp, #28]
   1f534:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1f536:	2a04      	cmp	r2, #4
   1f538:	d02a      	beq.n	1f590 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   1f53a:	7c9a      	ldrb	r2, [r3, #18]
   1f53c:	9905      	ldr	r1, [sp, #20]
   1f53e:	4291      	cmp	r1, r2
   1f540:	d800      	bhi.n	1f544 <tcc_init+0x198>
   1f542:	e131      	b.n	1f7a8 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   1f544:	7a59      	ldrb	r1, [r3, #9]
   1f546:	350a      	adds	r5, #10
   1f548:	2304      	movs	r3, #4
   1f54a:	469b      	mov	fp, r3
   1f54c:	44dc      	add	ip, fp
   1f54e:	290f      	cmp	r1, #15
   1f550:	d900      	bls.n	1f554 <tcc_init+0x1a8>
   1f552:	e129      	b.n	1f7a8 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1f554:	0609      	lsls	r1, r1, #24
   1f556:	23f0      	movs	r3, #240	; 0xf0
   1f558:	051b      	lsls	r3, r3, #20
   1f55a:	4019      	ands	r1, r3
   1f55c:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   1f55e:	782e      	ldrb	r6, [r5, #0]
   1f560:	0436      	lsls	r6, r6, #16
   1f562:	20ff      	movs	r0, #255	; 0xff
   1f564:	0400      	lsls	r0, r0, #16
   1f566:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   1f568:	7868      	ldrb	r0, [r5, #1]
   1f56a:	2480      	movs	r4, #128	; 0x80
   1f56c:	2800      	cmp	r0, #0
   1f56e:	d100      	bne.n	1f572 <tcc_init+0x1c6>
   1f570:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   1f572:	7898      	ldrb	r0, [r3, #2]
   1f574:	2708      	movs	r7, #8
   1f576:	9703      	str	r7, [sp, #12]
   1f578:	2800      	cmp	r0, #0
   1f57a:	d101      	bne.n	1f580 <tcc_init+0x1d4>
   1f57c:	9804      	ldr	r0, [sp, #16]
   1f57e:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   1f580:	78d8      	ldrb	r0, [r3, #3]
   1f582:	4683      	mov	fp, r0
   1f584:	2010      	movs	r0, #16
   1f586:	465f      	mov	r7, fp
   1f588:	2f00      	cmp	r7, #0
   1f58a:	d1b1      	bne.n	1f4f0 <tcc_init+0x144>
   1f58c:	9804      	ldr	r0, [sp, #16]
   1f58e:	e7af      	b.n	1f4f0 <tcc_init+0x144>
   1f590:	4644      	mov	r4, r8
   1f592:	4655      	mov	r5, sl
   1f594:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   1f596:	4a52      	ldr	r2, [pc, #328]	; (1f6e0 <tcc_init+0x334>)
   1f598:	5cd2      	ldrb	r2, [r2, r3]
   1f59a:	4691      	mov	r9, r2
   1f59c:	4651      	mov	r1, sl
   1f59e:	3150      	adds	r1, #80	; 0x50
   1f5a0:	4650      	mov	r0, sl
   1f5a2:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   1f5a4:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f5a6:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1f5a8:	2601      	movs	r6, #1
   1f5aa:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1f5ac:	2602      	movs	r6, #2
   1f5ae:	36ff      	adds	r6, #255	; 0xff
   1f5b0:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1f5b2:	2680      	movs	r6, #128	; 0x80
   1f5b4:	0276      	lsls	r6, r6, #9
   1f5b6:	46b0      	mov	r8, r6
   1f5b8:	46a4      	mov	ip, r4
   1f5ba:	001c      	movs	r4, r3
   1f5bc:	464b      	mov	r3, r9
   1f5be:	e00f      	b.n	1f5e0 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1f5c0:	7806      	ldrb	r6, [r0, #0]
   1f5c2:	2e00      	cmp	r6, #0
   1f5c4:	d007      	beq.n	1f5d6 <tcc_init+0x22a>
			if (i >= ow_num) {
   1f5c6:	4293      	cmp	r3, r2
   1f5c8:	d800      	bhi.n	1f5cc <tcc_init+0x220>
   1f5ca:	e0e7      	b.n	1f79c <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   1f5cc:	2e02      	cmp	r6, #2
   1f5ce:	d014      	beq.n	1f5fa <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1f5d0:	4656      	mov	r6, sl
   1f5d2:	4096      	lsls	r6, r2
   1f5d4:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1f5d6:	3201      	adds	r2, #1
   1f5d8:	3101      	adds	r1, #1
   1f5da:	3002      	adds	r0, #2
   1f5dc:	2a08      	cmp	r2, #8
   1f5de:	d010      	beq.n	1f602 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   1f5e0:	780e      	ldrb	r6, [r1, #0]
   1f5e2:	2e00      	cmp	r6, #0
   1f5e4:	d0ec      	beq.n	1f5c0 <tcc_init+0x214>
			if (i >= ow_num) {
   1f5e6:	4293      	cmp	r3, r2
   1f5e8:	d800      	bhi.n	1f5ec <tcc_init+0x240>
   1f5ea:	e0d5      	b.n	1f798 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   1f5ec:	4646      	mov	r6, r8
   1f5ee:	4096      	lsls	r6, r2
   1f5f0:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   1f5f2:	7806      	ldrb	r6, [r0, #0]
   1f5f4:	2e00      	cmp	r6, #0
   1f5f6:	d1e9      	bne.n	1f5cc <tcc_init+0x220>
   1f5f8:	e7ed      	b.n	1f5d6 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1f5fa:	465e      	mov	r6, fp
   1f5fc:	4096      	lsls	r6, r2
   1f5fe:	4337      	orrs	r7, r6
   1f600:	e7e9      	b.n	1f5d6 <tcc_init+0x22a>
   1f602:	4699      	mov	r9, r3
   1f604:	0023      	movs	r3, r4
   1f606:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1f608:	7e6a      	ldrb	r2, [r5, #25]
   1f60a:	0112      	lsls	r2, r2, #4
   1f60c:	2130      	movs	r1, #48	; 0x30
   1f60e:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   1f610:	7e28      	ldrb	r0, [r5, #24]
   1f612:	2207      	movs	r2, #7
   1f614:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1f616:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1f618:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   1f61a:	2080      	movs	r0, #128	; 0x80
   1f61c:	0240      	lsls	r0, r0, #9
   1f61e:	000e      	movs	r6, r1
   1f620:	e002      	b.n	1f628 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1f622:	3201      	adds	r2, #1
   1f624:	2a04      	cmp	r2, #4
   1f626:	d00b      	beq.n	1f640 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   1f628:	18a9      	adds	r1, r5, r2
   1f62a:	7d09      	ldrb	r1, [r1, #20]
   1f62c:	2900      	cmp	r1, #0
   1f62e:	d0f8      	beq.n	1f622 <tcc_init+0x276>
			if (n >= cc_num) {
   1f630:	9905      	ldr	r1, [sp, #20]
   1f632:	4291      	cmp	r1, r2
   1f634:	dc00      	bgt.n	1f638 <tcc_init+0x28c>
   1f636:	e0b3      	b.n	1f7a0 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   1f638:	0001      	movs	r1, r0
   1f63a:	4091      	lsls	r1, r2
   1f63c:	430e      	orrs	r6, r1
   1f63e:	e7f0      	b.n	1f622 <tcc_init+0x276>
   1f640:	46b2      	mov	sl, r6
   1f642:	9801      	ldr	r0, [sp, #4]
   1f644:	0002      	movs	r2, r0
   1f646:	3204      	adds	r2, #4
   1f648:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   1f64a:	2100      	movs	r1, #0
   1f64c:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1f64e:	4282      	cmp	r2, r0
   1f650:	d1fc      	bne.n	1f64c <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   1f652:	2200      	movs	r2, #0
   1f654:	9801      	ldr	r0, [sp, #4]
   1f656:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   1f658:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   1f65a:	0099      	lsls	r1, r3, #2
   1f65c:	4a22      	ldr	r2, [pc, #136]	; (1f6e8 <tcc_init+0x33c>)
   1f65e:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   1f660:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   1f662:	22a0      	movs	r2, #160	; 0xa0
   1f664:	5ca9      	ldrb	r1, [r5, r2]
   1f666:	3a64      	subs	r2, #100	; 0x64
   1f668:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   1f66a:	a90d      	add	r1, sp, #52	; 0x34
   1f66c:	7aaa      	ldrb	r2, [r5, #10]
   1f66e:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   1f670:	4a1e      	ldr	r2, [pc, #120]	; (1f6ec <tcc_init+0x340>)
   1f672:	5cd6      	ldrb	r6, [r2, r3]
   1f674:	0030      	movs	r0, r6
   1f676:	4b1e      	ldr	r3, [pc, #120]	; (1f6f0 <tcc_init+0x344>)
   1f678:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   1f67a:	0030      	movs	r0, r6
   1f67c:	4b1d      	ldr	r3, [pc, #116]	; (1f6f4 <tcc_init+0x348>)
   1f67e:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1f680:	464b      	mov	r3, r9
   1f682:	2b00      	cmp	r3, #0
   1f684:	dd3c      	ble.n	1f700 <tcc_init+0x354>
   1f686:	002e      	movs	r6, r5
   1f688:	3658      	adds	r6, #88	; 0x58
   1f68a:	3398      	adds	r3, #152	; 0x98
   1f68c:	4698      	mov	r8, r3
   1f68e:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1f690:	2301      	movs	r3, #1
   1f692:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   1f694:	46ab      	mov	fp, r5
   1f696:	4645      	mov	r5, r8
   1f698:	46a0      	mov	r8, r4
   1f69a:	9c08      	ldr	r4, [sp, #32]
   1f69c:	e003      	b.n	1f6a6 <tcc_init+0x2fa>
   1f69e:	3401      	adds	r4, #1
   1f6a0:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   1f6a2:	42ac      	cmp	r4, r5
   1f6a4:	d02a      	beq.n	1f6fc <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   1f6a6:	7823      	ldrb	r3, [r4, #0]
   1f6a8:	2b00      	cmp	r3, #0
   1f6aa:	d0f8      	beq.n	1f69e <tcc_init+0x2f2>
   1f6ac:	ab0c      	add	r3, sp, #48	; 0x30
   1f6ae:	464a      	mov	r2, r9
   1f6b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1f6b2:	2300      	movs	r3, #0
   1f6b4:	aa0c      	add	r2, sp, #48	; 0x30
   1f6b6:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   1f6b8:	0013      	movs	r3, r2
   1f6ba:	2220      	movs	r2, #32
   1f6bc:	18b2      	adds	r2, r6, r2
   1f6be:	7812      	ldrb	r2, [r2, #0]
   1f6c0:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   1f6c2:	464a      	mov	r2, r9
   1f6c4:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   1f6c6:	7830      	ldrb	r0, [r6, #0]
   1f6c8:	0019      	movs	r1, r3
   1f6ca:	4b0b      	ldr	r3, [pc, #44]	; (1f6f8 <tcc_init+0x34c>)
   1f6cc:	4798      	blx	r3
   1f6ce:	e7e6      	b.n	1f69e <tcc_init+0x2f2>
   1f6d0:	0001f22d 	.word	0x0001f22d
   1f6d4:	40000400 	.word	0x40000400
   1f6d8:	0002a240 	.word	0x0002a240
   1f6dc:	0002a254 	.word	0x0002a254
   1f6e0:	0002a260 	.word	0x0002a260
   1f6e4:	0002a24c 	.word	0x0002a24c
   1f6e8:	20005570 	.word	0x20005570
   1f6ec:	0002a250 	.word	0x0002a250
   1f6f0:	0001f0a5 	.word	0x0001f0a5
   1f6f4:	0001f019 	.word	0x0001f019
   1f6f8:	0001f1cd 	.word	0x0001f1cd
   1f6fc:	4644      	mov	r4, r8
   1f6fe:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   1f700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f702:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1f704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f706:	0212      	lsls	r2, r2, #8
   1f708:	4313      	orrs	r3, r2
   1f70a:	9a02      	ldr	r2, [sp, #8]
   1f70c:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   1f70e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1f710:	2204      	movs	r2, #4
   1f712:	68a3      	ldr	r3, [r4, #8]
   1f714:	421a      	tst	r2, r3
   1f716:	d1fc      	bne.n	1f712 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   1f718:	23ff      	movs	r3, #255	; 0xff
   1f71a:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   1f71c:	2204      	movs	r2, #4
   1f71e:	68a3      	ldr	r3, [r4, #8]
   1f720:	421a      	tst	r2, r3
   1f722:	d1fc      	bne.n	1f71e <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   1f724:	466b      	mov	r3, sp
   1f726:	7e1b      	ldrb	r3, [r3, #24]
   1f728:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   1f72a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f72c:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   1f72e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f730:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   1f732:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   1f734:	4a1d      	ldr	r2, [pc, #116]	; (1f7ac <tcc_init+0x400>)
   1f736:	68a3      	ldr	r3, [r4, #8]
   1f738:	4213      	tst	r3, r2
   1f73a:	d1fc      	bne.n	1f736 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   1f73c:	4653      	mov	r3, sl
   1f73e:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   1f740:	2210      	movs	r2, #16
   1f742:	68a3      	ldr	r3, [r4, #8]
   1f744:	421a      	tst	r2, r3
   1f746:	d1fc      	bne.n	1f742 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   1f748:	682b      	ldr	r3, [r5, #0]
   1f74a:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   1f74c:	4a18      	ldr	r2, [pc, #96]	; (1f7b0 <tcc_init+0x404>)
   1f74e:	68a3      	ldr	r3, [r4, #8]
   1f750:	4213      	tst	r3, r2
   1f752:	d1fc      	bne.n	1f74e <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   1f754:	686b      	ldr	r3, [r5, #4]
   1f756:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1f758:	9805      	ldr	r0, [sp, #20]
   1f75a:	2800      	cmp	r0, #0
   1f75c:	dd22      	ble.n	1f7a4 <tcc_init+0x3f8>
   1f75e:	351c      	adds	r5, #28
   1f760:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   1f762:	4e14      	ldr	r6, [pc, #80]	; (1f7b4 <tcc_init+0x408>)
   1f764:	0032      	movs	r2, r6
   1f766:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   1f768:	68a3      	ldr	r3, [r4, #8]
   1f76a:	421a      	tst	r2, r3
   1f76c:	d1fc      	bne.n	1f768 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   1f76e:	cd04      	ldmia	r5!, {r2}
   1f770:	000b      	movs	r3, r1
   1f772:	3310      	adds	r3, #16
   1f774:	009b      	lsls	r3, r3, #2
   1f776:	18e3      	adds	r3, r4, r3
   1f778:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1f77a:	3101      	adds	r1, #1
   1f77c:	4288      	cmp	r0, r1
   1f77e:	dcf1      	bgt.n	1f764 <tcc_init+0x3b8>
	return STATUS_OK;
   1f780:	2000      	movs	r0, #0
   1f782:	e62d      	b.n	1f3e0 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   1f784:	2017      	movs	r0, #23
   1f786:	e62b      	b.n	1f3e0 <tcc_init+0x34>
   1f788:	2017      	movs	r0, #23
   1f78a:	e629      	b.n	1f3e0 <tcc_init+0x34>
   1f78c:	2017      	movs	r0, #23
   1f78e:	e627      	b.n	1f3e0 <tcc_init+0x34>
   1f790:	2017      	movs	r0, #23
   1f792:	e625      	b.n	1f3e0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f794:	2017      	movs	r0, #23
   1f796:	e623      	b.n	1f3e0 <tcc_init+0x34>
			if (i >= ow_num) {
   1f798:	2017      	movs	r0, #23
   1f79a:	e621      	b.n	1f3e0 <tcc_init+0x34>
			if (i >= ow_num) {
   1f79c:	2017      	movs	r0, #23
   1f79e:	e61f      	b.n	1f3e0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f7a0:	2017      	movs	r0, #23
   1f7a2:	e61d      	b.n	1f3e0 <tcc_init+0x34>
	return STATUS_OK;
   1f7a4:	2000      	movs	r0, #0
   1f7a6:	e61b      	b.n	1f3e0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1f7a8:	2017      	movs	r0, #23
   1f7aa:	e619      	b.n	1f3e0 <tcc_init+0x34>
   1f7ac:	00020040 	.word	0x00020040
   1f7b0:	00040080 	.word	0x00040080
   1f7b4:	00080100 	.word	0x00080100

0001f7b8 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1f7b8:	0092      	lsls	r2, r2, #2
   1f7ba:	1883      	adds	r3, r0, r2
   1f7bc:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   1f7be:	4b03      	ldr	r3, [pc, #12]	; (1f7cc <tcc_register_callback+0x14>)
   1f7c0:	58d3      	ldr	r3, [r2, r3]
   1f7c2:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1f7c4:	4313      	orrs	r3, r2
   1f7c6:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   1f7c8:	2000      	movs	r0, #0
   1f7ca:	4770      	bx	lr
   1f7cc:	0002a264 	.word	0x0002a264

0001f7d0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   1f7d0:	b570      	push	{r4, r5, r6, lr}
   1f7d2:	0004      	movs	r4, r0
   1f7d4:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   1f7d6:	6800      	ldr	r0, [r0, #0]
   1f7d8:	4b09      	ldr	r3, [pc, #36]	; (1f800 <tcc_enable_callback+0x30>)
   1f7da:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   1f7dc:	4b09      	ldr	r3, [pc, #36]	; (1f804 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f7de:	5c1b      	ldrb	r3, [r3, r0]
   1f7e0:	221f      	movs	r2, #31
   1f7e2:	401a      	ands	r2, r3
   1f7e4:	2301      	movs	r3, #1
   1f7e6:	4093      	lsls	r3, r2
   1f7e8:	4a07      	ldr	r2, [pc, #28]	; (1f808 <tcc_enable_callback+0x38>)
   1f7ea:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   1f7ec:	00ad      	lsls	r5, r5, #2
   1f7ee:	4b07      	ldr	r3, [pc, #28]	; (1f80c <tcc_enable_callback+0x3c>)
   1f7f0:	58ea      	ldr	r2, [r5, r3]
   1f7f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f7f4:	4313      	orrs	r3, r2
   1f7f6:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   1f7f8:	6823      	ldr	r3, [r4, #0]
   1f7fa:	629a      	str	r2, [r3, #40]	; 0x28
}
   1f7fc:	bd70      	pop	{r4, r5, r6, pc}
   1f7fe:	46c0      	nop			; (mov r8, r8)
   1f800:	0001f22d 	.word	0x0001f22d
   1f804:	0002a294 	.word	0x0002a294
   1f808:	e000e100 	.word	0xe000e100
   1f80c:	0002a264 	.word	0x0002a264

0001f810 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   1f810:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f812:	46c6      	mov	lr, r8
   1f814:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   1f816:	0080      	lsls	r0, r0, #2
   1f818:	4b0e      	ldr	r3, [pc, #56]	; (1f854 <_tcc_interrupt_handler+0x44>)
   1f81a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1f81c:	683b      	ldr	r3, [r7, #0]
   1f81e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   1f820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1f824:	4013      	ands	r3, r2
   1f826:	401e      	ands	r6, r3
   1f828:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1f82a:	4b0b      	ldr	r3, [pc, #44]	; (1f858 <_tcc_interrupt_handler+0x48>)
   1f82c:	4698      	mov	r8, r3
   1f82e:	e002      	b.n	1f836 <_tcc_interrupt_handler+0x26>
   1f830:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1f832:	2c30      	cmp	r4, #48	; 0x30
   1f834:	d00a      	beq.n	1f84c <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1f836:	4643      	mov	r3, r8
   1f838:	58e5      	ldr	r5, [r4, r3]
   1f83a:	4235      	tst	r5, r6
   1f83c:	d0f8      	beq.n	1f830 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   1f83e:	193b      	adds	r3, r7, r4
   1f840:	685b      	ldr	r3, [r3, #4]
   1f842:	0038      	movs	r0, r7
   1f844:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1f846:	683b      	ldr	r3, [r7, #0]
   1f848:	62dd      	str	r5, [r3, #44]	; 0x2c
   1f84a:	e7f1      	b.n	1f830 <_tcc_interrupt_handler+0x20>
		}
	}
}
   1f84c:	bc04      	pop	{r2}
   1f84e:	4690      	mov	r8, r2
   1f850:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f852:	46c0      	nop			; (mov r8, r8)
   1f854:	20005570 	.word	0x20005570
   1f858:	0002a264 	.word	0x0002a264

0001f85c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   1f85c:	b510      	push	{r4, lr}
   1f85e:	2000      	movs	r0, #0
   1f860:	4b01      	ldr	r3, [pc, #4]	; (1f868 <TCC0_Handler+0xc>)
   1f862:	4798      	blx	r3
   1f864:	bd10      	pop	{r4, pc}
   1f866:	46c0      	nop			; (mov r8, r8)
   1f868:	0001f811 	.word	0x0001f811

0001f86c <TCC1_Handler>:
   1f86c:	b510      	push	{r4, lr}
   1f86e:	2001      	movs	r0, #1
   1f870:	4b01      	ldr	r3, [pc, #4]	; (1f878 <TCC1_Handler+0xc>)
   1f872:	4798      	blx	r3
   1f874:	bd10      	pop	{r4, pc}
   1f876:	46c0      	nop			; (mov r8, r8)
   1f878:	0001f811 	.word	0x0001f811

0001f87c <TCC2_Handler>:
   1f87c:	b510      	push	{r4, lr}
   1f87e:	2002      	movs	r0, #2
   1f880:	4b01      	ldr	r3, [pc, #4]	; (1f888 <TCC2_Handler+0xc>)
   1f882:	4798      	blx	r3
   1f884:	bd10      	pop	{r4, pc}
   1f886:	46c0      	nop			; (mov r8, r8)
   1f888:	0001f811 	.word	0x0001f811

0001f88c <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
   1f88c:	2004      	movs	r0, #4
   1f88e:	4671      	mov	r1, lr
   1f890:	4208      	tst	r0, r1
   1f892:	d002      	beq.n	1f89a <_MSP>
   1f894:	f3ef 8009 	mrs	r0, PSP
   1f898:	e001      	b.n	1f89e <_HALT>

0001f89a <_MSP>:
   1f89a:	f3ef 8008 	mrs	r0, MSP

0001f89e <_HALT>:
   1f89e:	6941      	ldr	r1, [r0, #20]
   1f8a0:	e074      	b.n	1f98c <HardFault_HandlerC>
   1f8a2:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   1f8a4:	4770      	bx	lr
	...

0001f8a8 <Reset_Handler>:
{
   1f8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   1f8aa:	4a2a      	ldr	r2, [pc, #168]	; (1f954 <Reset_Handler+0xac>)
   1f8ac:	4b2a      	ldr	r3, [pc, #168]	; (1f958 <Reset_Handler+0xb0>)
   1f8ae:	429a      	cmp	r2, r3
   1f8b0:	d011      	beq.n	1f8d6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   1f8b2:	001a      	movs	r2, r3
   1f8b4:	4b29      	ldr	r3, [pc, #164]	; (1f95c <Reset_Handler+0xb4>)
   1f8b6:	429a      	cmp	r2, r3
   1f8b8:	d20d      	bcs.n	1f8d6 <Reset_Handler+0x2e>
   1f8ba:	4a29      	ldr	r2, [pc, #164]	; (1f960 <Reset_Handler+0xb8>)
   1f8bc:	3303      	adds	r3, #3
   1f8be:	1a9b      	subs	r3, r3, r2
   1f8c0:	089b      	lsrs	r3, r3, #2
   1f8c2:	3301      	adds	r3, #1
   1f8c4:	009b      	lsls	r3, r3, #2
   1f8c6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   1f8c8:	4823      	ldr	r0, [pc, #140]	; (1f958 <Reset_Handler+0xb0>)
   1f8ca:	4922      	ldr	r1, [pc, #136]	; (1f954 <Reset_Handler+0xac>)
   1f8cc:	588c      	ldr	r4, [r1, r2]
   1f8ce:	5084      	str	r4, [r0, r2]
   1f8d0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   1f8d2:	429a      	cmp	r2, r3
   1f8d4:	d1fa      	bne.n	1f8cc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   1f8d6:	4a23      	ldr	r2, [pc, #140]	; (1f964 <Reset_Handler+0xbc>)
   1f8d8:	4b23      	ldr	r3, [pc, #140]	; (1f968 <Reset_Handler+0xc0>)
   1f8da:	429a      	cmp	r2, r3
   1f8dc:	d20a      	bcs.n	1f8f4 <Reset_Handler+0x4c>
   1f8de:	43d3      	mvns	r3, r2
   1f8e0:	4921      	ldr	r1, [pc, #132]	; (1f968 <Reset_Handler+0xc0>)
   1f8e2:	185b      	adds	r3, r3, r1
   1f8e4:	2103      	movs	r1, #3
   1f8e6:	438b      	bics	r3, r1
   1f8e8:	3304      	adds	r3, #4
   1f8ea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   1f8ec:	2100      	movs	r1, #0
   1f8ee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   1f8f0:	4293      	cmp	r3, r2
   1f8f2:	d1fc      	bne.n	1f8ee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1f8f4:	4a1d      	ldr	r2, [pc, #116]	; (1f96c <Reset_Handler+0xc4>)
   1f8f6:	21ff      	movs	r1, #255	; 0xff
   1f8f8:	4b1d      	ldr	r3, [pc, #116]	; (1f970 <Reset_Handler+0xc8>)
   1f8fa:	438b      	bics	r3, r1
   1f8fc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   1f8fe:	39fd      	subs	r1, #253	; 0xfd
   1f900:	2390      	movs	r3, #144	; 0x90
   1f902:	005b      	lsls	r3, r3, #1
   1f904:	4a1b      	ldr	r2, [pc, #108]	; (1f974 <Reset_Handler+0xcc>)
   1f906:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1f908:	4a1b      	ldr	r2, [pc, #108]	; (1f978 <Reset_Handler+0xd0>)
   1f90a:	78d3      	ldrb	r3, [r2, #3]
   1f90c:	2503      	movs	r5, #3
   1f90e:	43ab      	bics	r3, r5
   1f910:	2402      	movs	r4, #2
   1f912:	4323      	orrs	r3, r4
   1f914:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1f916:	78d3      	ldrb	r3, [r2, #3]
   1f918:	270c      	movs	r7, #12
   1f91a:	43bb      	bics	r3, r7
   1f91c:	2608      	movs	r6, #8
   1f91e:	4333      	orrs	r3, r6
   1f920:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   1f922:	4b16      	ldr	r3, [pc, #88]	; (1f97c <Reset_Handler+0xd4>)
   1f924:	7b98      	ldrb	r0, [r3, #14]
   1f926:	2230      	movs	r2, #48	; 0x30
   1f928:	4390      	bics	r0, r2
   1f92a:	2220      	movs	r2, #32
   1f92c:	4310      	orrs	r0, r2
   1f92e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1f930:	7b99      	ldrb	r1, [r3, #14]
   1f932:	43b9      	bics	r1, r7
   1f934:	4331      	orrs	r1, r6
   1f936:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1f938:	7b9a      	ldrb	r2, [r3, #14]
   1f93a:	43aa      	bics	r2, r5
   1f93c:	4322      	orrs	r2, r4
   1f93e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   1f940:	4a0f      	ldr	r2, [pc, #60]	; (1f980 <Reset_Handler+0xd8>)
   1f942:	6853      	ldr	r3, [r2, #4]
   1f944:	2180      	movs	r1, #128	; 0x80
   1f946:	430b      	orrs	r3, r1
   1f948:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   1f94a:	4b0e      	ldr	r3, [pc, #56]	; (1f984 <Reset_Handler+0xdc>)
   1f94c:	4798      	blx	r3
        main();
   1f94e:	4b0e      	ldr	r3, [pc, #56]	; (1f988 <Reset_Handler+0xe0>)
   1f950:	4798      	blx	r3
   1f952:	e7fe      	b.n	1f952 <Reset_Handler+0xaa>
   1f954:	0002b0a4 	.word	0x0002b0a4
   1f958:	20000000 	.word	0x20000000
   1f95c:	20000298 	.word	0x20000298
   1f960:	20000004 	.word	0x20000004
   1f964:	20000298 	.word	0x20000298
   1f968:	200055e0 	.word	0x200055e0
   1f96c:	e000ed00 	.word	0xe000ed00
   1f970:	00012000 	.word	0x00012000
   1f974:	41007000 	.word	0x41007000
   1f978:	41005000 	.word	0x41005000
   1f97c:	41004800 	.word	0x41004800
   1f980:	41004000 	.word	0x41004000
   1f984:	000261a5 	.word	0x000261a5
   1f988:	00023d61 	.word	0x00023d61

0001f98c <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   1f98c:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   1f98e:	6803      	ldr	r3, [r0, #0]
   1f990:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   1f992:	6843      	ldr	r3, [r0, #4]
   1f994:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   1f996:	6883      	ldr	r3, [r0, #8]
   1f998:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   1f99a:	68c3      	ldr	r3, [r0, #12]
   1f99c:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   1f99e:	6903      	ldr	r3, [r0, #16]
   1f9a0:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   1f9a2:	6943      	ldr	r3, [r0, #20]
   1f9a4:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   1f9a6:	6983      	ldr	r3, [r0, #24]
   1f9a8:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   1f9aa:	69c3      	ldr	r3, [r0, #28]
   1f9ac:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   1f9ae:	4b0a      	ldr	r3, [pc, #40]	; (1f9d8 <HardFault_HandlerC+0x4c>)
   1f9b0:	681b      	ldr	r3, [r3, #0]
   1f9b2:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   1f9b4:	4b09      	ldr	r3, [pc, #36]	; (1f9dc <HardFault_HandlerC+0x50>)
   1f9b6:	681b      	ldr	r3, [r3, #0]
   1f9b8:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   1f9ba:	4b09      	ldr	r3, [pc, #36]	; (1f9e0 <HardFault_HandlerC+0x54>)
   1f9bc:	681b      	ldr	r3, [r3, #0]
   1f9be:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   1f9c0:	4b08      	ldr	r3, [pc, #32]	; (1f9e4 <HardFault_HandlerC+0x58>)
   1f9c2:	681b      	ldr	r3, [r3, #0]
   1f9c4:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   1f9c6:	4b08      	ldr	r3, [pc, #32]	; (1f9e8 <HardFault_HandlerC+0x5c>)
   1f9c8:	681b      	ldr	r3, [r3, #0]
   1f9ca:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   1f9cc:	4b07      	ldr	r3, [pc, #28]	; (1f9ec <HardFault_HandlerC+0x60>)
   1f9ce:	681b      	ldr	r3, [r3, #0]
   1f9d0:	9301      	str	r3, [sp, #4]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   1f9d2:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   1f9d4:	b00e      	add	sp, #56	; 0x38
   1f9d6:	4770      	bx	lr
   1f9d8:	e000ed28 	.word	0xe000ed28
   1f9dc:	e000ed2c 	.word	0xe000ed2c
   1f9e0:	e000ed30 	.word	0xe000ed30
   1f9e4:	e000ed3c 	.word	0xe000ed3c
   1f9e8:	e000ed34 	.word	0xe000ed34
   1f9ec:	e000ed38 	.word	0xe000ed38

0001f9f0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   1f9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f9f2:	46c6      	mov	lr, r8
   1f9f4:	b500      	push	{lr}
   1f9f6:	000c      	movs	r4, r1
   1f9f8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   1f9fa:	2800      	cmp	r0, #0
   1f9fc:	d10f      	bne.n	1fa1e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   1f9fe:	2a00      	cmp	r2, #0
   1fa00:	dd11      	ble.n	1fa26 <_read+0x36>
   1fa02:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   1fa04:	4e09      	ldr	r6, [pc, #36]	; (1fa2c <_read+0x3c>)
   1fa06:	4d0a      	ldr	r5, [pc, #40]	; (1fa30 <_read+0x40>)
   1fa08:	6830      	ldr	r0, [r6, #0]
   1fa0a:	0021      	movs	r1, r4
   1fa0c:	682b      	ldr	r3, [r5, #0]
   1fa0e:	4798      	blx	r3
		ptr++;
   1fa10:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   1fa12:	42bc      	cmp	r4, r7
   1fa14:	d1f8      	bne.n	1fa08 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   1fa16:	4640      	mov	r0, r8
   1fa18:	bc04      	pop	{r2}
   1fa1a:	4690      	mov	r8, r2
   1fa1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1fa1e:	2301      	movs	r3, #1
   1fa20:	425b      	negs	r3, r3
   1fa22:	4698      	mov	r8, r3
   1fa24:	e7f7      	b.n	1fa16 <_read+0x26>
	for (; len > 0; --len) {
   1fa26:	4680      	mov	r8, r0
   1fa28:	e7f5      	b.n	1fa16 <_read+0x26>
   1fa2a:	46c0      	nop			; (mov r8, r8)
   1fa2c:	20005584 	.word	0x20005584
   1fa30:	2000557c 	.word	0x2000557c

0001fa34 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1fa34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa36:	46c6      	mov	lr, r8
   1fa38:	b500      	push	{lr}
   1fa3a:	000e      	movs	r6, r1
   1fa3c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   1fa3e:	3801      	subs	r0, #1
   1fa40:	2802      	cmp	r0, #2
   1fa42:	d810      	bhi.n	1fa66 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   1fa44:	2a00      	cmp	r2, #0
   1fa46:	d011      	beq.n	1fa6c <_write+0x38>
   1fa48:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   1fa4a:	4b0c      	ldr	r3, [pc, #48]	; (1fa7c <_write+0x48>)
   1fa4c:	4698      	mov	r8, r3
   1fa4e:	4f0c      	ldr	r7, [pc, #48]	; (1fa80 <_write+0x4c>)
   1fa50:	4643      	mov	r3, r8
   1fa52:	6818      	ldr	r0, [r3, #0]
   1fa54:	5d31      	ldrb	r1, [r6, r4]
   1fa56:	683b      	ldr	r3, [r7, #0]
   1fa58:	4798      	blx	r3
   1fa5a:	2800      	cmp	r0, #0
   1fa5c:	db08      	blt.n	1fa70 <_write+0x3c>
			return -1;
		}
		++nChars;
   1fa5e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   1fa60:	42a5      	cmp	r5, r4
   1fa62:	d1f5      	bne.n	1fa50 <_write+0x1c>
   1fa64:	e006      	b.n	1fa74 <_write+0x40>
		return -1;
   1fa66:	2401      	movs	r4, #1
   1fa68:	4264      	negs	r4, r4
   1fa6a:	e003      	b.n	1fa74 <_write+0x40>
	for (; len != 0; --len) {
   1fa6c:	0014      	movs	r4, r2
   1fa6e:	e001      	b.n	1fa74 <_write+0x40>
			return -1;
   1fa70:	2401      	movs	r4, #1
   1fa72:	4264      	negs	r4, r4
	}
	return nChars;
}
   1fa74:	0020      	movs	r0, r4
   1fa76:	bc04      	pop	{r2}
   1fa78:	4690      	mov	r8, r2
   1fa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fa7c:	20005584 	.word	0x20005584
   1fa80:	20005580 	.word	0x20005580

0001fa84 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   1fa84:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1fa86:	4a06      	ldr	r2, [pc, #24]	; (1faa0 <_sbrk+0x1c>)
   1fa88:	6812      	ldr	r2, [r2, #0]
   1fa8a:	2a00      	cmp	r2, #0
   1fa8c:	d004      	beq.n	1fa98 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   1fa8e:	4a04      	ldr	r2, [pc, #16]	; (1faa0 <_sbrk+0x1c>)
   1fa90:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   1fa92:	18c3      	adds	r3, r0, r3
   1fa94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   1fa96:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   1fa98:	4902      	ldr	r1, [pc, #8]	; (1faa4 <_sbrk+0x20>)
   1fa9a:	4a01      	ldr	r2, [pc, #4]	; (1faa0 <_sbrk+0x1c>)
   1fa9c:	6011      	str	r1, [r2, #0]
   1fa9e:	e7f6      	b.n	1fa8e <_sbrk+0xa>
   1faa0:	20003dc4 	.word	0x20003dc4
   1faa4:	200075e0 	.word	0x200075e0

0001faa8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   1faa8:	2001      	movs	r0, #1
   1faaa:	4240      	negs	r0, r0
   1faac:	4770      	bx	lr

0001faae <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   1faae:	2380      	movs	r3, #128	; 0x80
   1fab0:	019b      	lsls	r3, r3, #6
   1fab2:	604b      	str	r3, [r1, #4]

	return 0;
}
   1fab4:	2000      	movs	r0, #0
   1fab6:	4770      	bx	lr

0001fab8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   1fab8:	2001      	movs	r0, #1
   1faba:	4770      	bx	lr

0001fabc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   1fabc:	2000      	movs	r0, #0
   1fabe:	4770      	bx	lr

0001fac0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   1fac0:	b530      	push	{r4, r5, lr}
   1fac2:	b087      	sub	sp, #28
   1fac4:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   1fac6:	aa01      	add	r2, sp, #4
   1fac8:	23a0      	movs	r3, #160	; 0xa0
   1faca:	011b      	lsls	r3, r3, #4
   1facc:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   1face:	2300      	movs	r3, #0
   1fad0:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   1fad2:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   1fad4:	21fa      	movs	r1, #250	; 0xfa
   1fad6:	00c9      	lsls	r1, r1, #3
   1fad8:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   1fada:	2101      	movs	r1, #1
   1fadc:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   1fade:	2004      	movs	r0, #4
   1fae0:	7210      	strb	r0, [r2, #8]
   1fae2:	7253      	strb	r3, [r2, #9]
   1fae4:	7293      	strb	r3, [r2, #10]
   1fae6:	72d3      	strb	r3, [r2, #11]
   1fae8:	7311      	strb	r1, [r2, #12]
   1faea:	7351      	strb	r1, [r2, #13]
   1faec:	4b14      	ldr	r3, [pc, #80]	; (1fb40 <disk_initialize+0x80>)
   1faee:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   1faf0:	2306      	movs	r3, #6
   1faf2:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   1faf4:	4d13      	ldr	r5, [pc, #76]	; (1fb44 <disk_initialize+0x84>)
   1faf6:	4914      	ldr	r1, [pc, #80]	; (1fb48 <disk_initialize+0x88>)
   1faf8:	0028      	movs	r0, r5
   1fafa:	4b14      	ldr	r3, [pc, #80]	; (1fb4c <disk_initialize+0x8c>)
   1fafc:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   1fafe:	0028      	movs	r0, r5
   1fb00:	4b13      	ldr	r3, [pc, #76]	; (1fb50 <disk_initialize+0x90>)
   1fb02:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   1fb04:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   1fb06:	2c01      	cmp	r4, #1
   1fb08:	d901      	bls.n	1fb0e <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   1fb0a:	b007      	add	sp, #28
   1fb0c:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   1fb0e:	0020      	movs	r0, r4
   1fb10:	4b10      	ldr	r3, [pc, #64]	; (1fb54 <disk_initialize+0x94>)
   1fb12:	4798      	blx	r3
   1fb14:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   1fb16:	2803      	cmp	r0, #3
   1fb18:	d106      	bne.n	1fb28 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   1fb1a:	0020      	movs	r0, r4
   1fb1c:	4b0d      	ldr	r3, [pc, #52]	; (1fb54 <disk_initialize+0x94>)
   1fb1e:	4798      	blx	r3
   1fb20:	0003      	movs	r3, r0
		return STA_NOINIT;
   1fb22:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   1fb24:	2b03      	cmp	r3, #3
   1fb26:	d0f0      	beq.n	1fb0a <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   1fb28:	2b00      	cmp	r3, #0
   1fb2a:	d106      	bne.n	1fb3a <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   1fb2c:	0020      	movs	r0, r4
   1fb2e:	4b0a      	ldr	r3, [pc, #40]	; (1fb58 <disk_initialize+0x98>)
   1fb30:	4798      	blx	r3
	return 0;
   1fb32:	1e43      	subs	r3, r0, #1
   1fb34:	4198      	sbcs	r0, r3
   1fb36:	0080      	lsls	r0, r0, #2
   1fb38:	e7e7      	b.n	1fb0a <disk_initialize+0x4a>
		return STA_NOINIT;
   1fb3a:	2001      	movs	r0, #1
   1fb3c:	e7e5      	b.n	1fb0a <disk_initialize+0x4a>
   1fb3e:	46c0      	nop			; (mov r8, r8)
   1fb40:	000007de 	.word	0x000007de
   1fb44:	20005588 	.word	0x20005588
   1fb48:	40001400 	.word	0x40001400
   1fb4c:	0001d8f1 	.word	0x0001d8f1
   1fb50:	0001d78d 	.word	0x0001d78d
   1fb54:	0001d45d 	.word	0x0001d45d
   1fb58:	0001d499 	.word	0x0001d499

0001fb5c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   1fb5c:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   1fb5e:	4b05      	ldr	r3, [pc, #20]	; (1fb74 <disk_status+0x18>)
   1fb60:	4798      	blx	r3
   1fb62:	1e03      	subs	r3, r0, #0
   1fb64:	d004      	beq.n	1fb70 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   1fb66:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   1fb68:	2b02      	cmp	r3, #2
   1fb6a:	d000      	beq.n	1fb6e <disk_status+0x12>
	default:
		return STA_NOINIT;
   1fb6c:	3802      	subs	r0, #2
	}
}
   1fb6e:	bd10      	pop	{r4, pc}
		return 0;
   1fb70:	2000      	movs	r0, #0
   1fb72:	e7fc      	b.n	1fb6e <disk_status+0x12>
   1fb74:	0001d45d 	.word	0x0001d45d

0001fb78 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   1fb78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb7a:	46de      	mov	lr, fp
   1fb7c:	464f      	mov	r7, r9
   1fb7e:	4646      	mov	r6, r8
   1fb80:	b5c0      	push	{r6, r7, lr}
   1fb82:	b084      	sub	sp, #16
   1fb84:	9001      	str	r0, [sp, #4]
   1fb86:	000d      	movs	r5, r1
   1fb88:	0014      	movs	r4, r2
   1fb8a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1fb8c:	4b18      	ldr	r3, [pc, #96]	; (1fbf0 <disk_read+0x78>)
   1fb8e:	4798      	blx	r3
   1fb90:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1fb92:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1fb94:	2e00      	cmp	r6, #0
   1fb96:	d105      	bne.n	1fba4 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1fb98:	b004      	add	sp, #16
   1fb9a:	bc1c      	pop	{r2, r3, r4}
   1fb9c:	4690      	mov	r8, r2
   1fb9e:	4699      	mov	r9, r3
   1fba0:	46a3      	mov	fp, r4
   1fba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1fba4:	a903      	add	r1, sp, #12
   1fba6:	9801      	ldr	r0, [sp, #4]
   1fba8:	4b12      	ldr	r3, [pc, #72]	; (1fbf4 <disk_read+0x7c>)
   1fbaa:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fbac:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1fbae:	0032      	movs	r2, r6
   1fbb0:	437a      	muls	r2, r7
   1fbb2:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fbb4:	9b03      	ldr	r3, [sp, #12]
   1fbb6:	3301      	adds	r3, #1
   1fbb8:	4373      	muls	r3, r6
		return RES_PARERR;
   1fbba:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   1fbbc:	429a      	cmp	r2, r3
   1fbbe:	d8eb      	bhi.n	1fb98 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   1fbc0:	2f00      	cmp	r7, #0
   1fbc2:	d011      	beq.n	1fbe8 <disk_read+0x70>
   1fbc4:	0273      	lsls	r3, r6, #9
   1fbc6:	4698      	mov	r8, r3
   1fbc8:	1c7b      	adds	r3, r7, #1
   1fbca:	469b      	mov	fp, r3
   1fbcc:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1fbce:	4e0a      	ldr	r6, [pc, #40]	; (1fbf8 <disk_read+0x80>)
   1fbd0:	002a      	movs	r2, r5
   1fbd2:	0021      	movs	r1, r4
   1fbd4:	9801      	ldr	r0, [sp, #4]
   1fbd6:	47b0      	blx	r6
   1fbd8:	2800      	cmp	r0, #0
   1fbda:	d107      	bne.n	1fbec <disk_read+0x74>
   1fbdc:	3701      	adds	r7, #1
   1fbde:	444c      	add	r4, r9
   1fbe0:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1fbe2:	455f      	cmp	r7, fp
   1fbe4:	d1f4      	bne.n	1fbd0 <disk_read+0x58>
   1fbe6:	e7d7      	b.n	1fb98 <disk_read+0x20>
	return RES_OK;
   1fbe8:	2000      	movs	r0, #0
   1fbea:	e7d5      	b.n	1fb98 <disk_read+0x20>
			return RES_ERROR;
   1fbec:	2001      	movs	r0, #1
   1fbee:	e7d3      	b.n	1fb98 <disk_read+0x20>
   1fbf0:	0001d491 	.word	0x0001d491
   1fbf4:	0001d475 	.word	0x0001d475
   1fbf8:	0001d4b1 	.word	0x0001d4b1

0001fbfc <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   1fbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fbfe:	46de      	mov	lr, fp
   1fc00:	464f      	mov	r7, r9
   1fc02:	4646      	mov	r6, r8
   1fc04:	b5c0      	push	{r6, r7, lr}
   1fc06:	b084      	sub	sp, #16
   1fc08:	9001      	str	r0, [sp, #4]
   1fc0a:	000d      	movs	r5, r1
   1fc0c:	0014      	movs	r4, r2
   1fc0e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   1fc10:	4b18      	ldr	r3, [pc, #96]	; (1fc74 <disk_write+0x78>)
   1fc12:	4798      	blx	r3
   1fc14:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1fc16:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1fc18:	2e00      	cmp	r6, #0
   1fc1a:	d105      	bne.n	1fc28 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   1fc1c:	b004      	add	sp, #16
   1fc1e:	bc1c      	pop	{r2, r3, r4}
   1fc20:	4690      	mov	r8, r2
   1fc22:	4699      	mov	r9, r3
   1fc24:	46a3      	mov	fp, r4
   1fc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1fc28:	a903      	add	r1, sp, #12
   1fc2a:	9801      	ldr	r0, [sp, #4]
   1fc2c:	4b12      	ldr	r3, [pc, #72]	; (1fc78 <disk_write+0x7c>)
   1fc2e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fc30:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1fc32:	0032      	movs	r2, r6
   1fc34:	437a      	muls	r2, r7
   1fc36:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1fc38:	9b03      	ldr	r3, [sp, #12]
   1fc3a:	3301      	adds	r3, #1
   1fc3c:	4373      	muls	r3, r6
		return RES_PARERR;
   1fc3e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   1fc40:	429a      	cmp	r2, r3
   1fc42:	d8eb      	bhi.n	1fc1c <disk_write+0x20>
	for (i = 0; i < count; i++) {
   1fc44:	2f00      	cmp	r7, #0
   1fc46:	d011      	beq.n	1fc6c <disk_write+0x70>
   1fc48:	0273      	lsls	r3, r6, #9
   1fc4a:	4698      	mov	r8, r3
   1fc4c:	1c7b      	adds	r3, r7, #1
   1fc4e:	469b      	mov	fp, r3
   1fc50:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   1fc52:	4e0a      	ldr	r6, [pc, #40]	; (1fc7c <disk_write+0x80>)
   1fc54:	002a      	movs	r2, r5
   1fc56:	0021      	movs	r1, r4
   1fc58:	9801      	ldr	r0, [sp, #4]
   1fc5a:	47b0      	blx	r6
   1fc5c:	2800      	cmp	r0, #0
   1fc5e:	d107      	bne.n	1fc70 <disk_write+0x74>
   1fc60:	3701      	adds	r7, #1
   1fc62:	444c      	add	r4, r9
   1fc64:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1fc66:	455f      	cmp	r7, fp
   1fc68:	d1f4      	bne.n	1fc54 <disk_write+0x58>
   1fc6a:	e7d7      	b.n	1fc1c <disk_write+0x20>
	return RES_OK;
   1fc6c:	2000      	movs	r0, #0
   1fc6e:	e7d5      	b.n	1fc1c <disk_write+0x20>
			return RES_ERROR;
   1fc70:	2001      	movs	r0, #1
   1fc72:	e7d3      	b.n	1fc1c <disk_write+0x20>
   1fc74:	0001d491 	.word	0x0001d491
   1fc78:	0001d475 	.word	0x0001d475
   1fc7c:	0001d4d1 	.word	0x0001d4d1

0001fc80 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   1fc80:	b510      	push	{r4, lr}
   1fc82:	b082      	sub	sp, #8
   1fc84:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   1fc86:	2901      	cmp	r1, #1
   1fc88:	d00b      	beq.n	1fca2 <disk_ioctl+0x22>
   1fc8a:	2900      	cmp	r1, #0
   1fc8c:	d020      	beq.n	1fcd0 <disk_ioctl+0x50>
   1fc8e:	2902      	cmp	r1, #2
   1fc90:	d00f      	beq.n	1fcb2 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   1fc92:	2004      	movs	r0, #4
	switch (ctrl) {
   1fc94:	2903      	cmp	r1, #3
   1fc96:	d102      	bne.n	1fc9e <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   1fc98:	2301      	movs	r3, #1
   1fc9a:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   1fc9c:	2000      	movs	r0, #0
	}

	return res;
}
   1fc9e:	b002      	add	sp, #8
   1fca0:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   1fca2:	a901      	add	r1, sp, #4
   1fca4:	4b0e      	ldr	r3, [pc, #56]	; (1fce0 <disk_ioctl+0x60>)
   1fca6:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   1fca8:	9b01      	ldr	r3, [sp, #4]
   1fcaa:	3301      	adds	r3, #1
   1fcac:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   1fcae:	2000      	movs	r0, #0
	break;
   1fcb0:	e7f5      	b.n	1fc9e <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   1fcb2:	4b0c      	ldr	r3, [pc, #48]	; (1fce4 <disk_ioctl+0x64>)
   1fcb4:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   1fcb6:	1e43      	subs	r3, r0, #1
   1fcb8:	b2db      	uxtb	r3, r3
   1fcba:	2b01      	cmp	r3, #1
   1fcbc:	d904      	bls.n	1fcc8 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1fcbe:	1f03      	subs	r3, r0, #4
   1fcc0:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   1fcc2:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1fcc4:	4213      	tst	r3, r2
   1fcc6:	d1ea      	bne.n	1fc9e <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   1fcc8:	2300      	movs	r3, #0
   1fcca:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   1fccc:	2000      	movs	r0, #0
	break;
   1fcce:	e7e6      	b.n	1fc9e <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   1fcd0:	4b05      	ldr	r3, [pc, #20]	; (1fce8 <disk_ioctl+0x68>)
   1fcd2:	4798      	blx	r3
   1fcd4:	2800      	cmp	r0, #0
   1fcd6:	d001      	beq.n	1fcdc <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   1fcd8:	2003      	movs	r0, #3
   1fcda:	e7e0      	b.n	1fc9e <disk_ioctl+0x1e>
			res = RES_OK;
   1fcdc:	2000      	movs	r0, #0
   1fcde:	e7de      	b.n	1fc9e <disk_ioctl+0x1e>
   1fce0:	0001d475 	.word	0x0001d475
   1fce4:	0001d491 	.word	0x0001d491
   1fce8:	0001d45d 	.word	0x0001d45d

0001fcec <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   1fcec:	b500      	push	{lr}
   1fcee:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   1fcf0:	4669      	mov	r1, sp
   1fcf2:	480f      	ldr	r0, [pc, #60]	; (1fd30 <get_fattime+0x44>)
   1fcf4:	4b0f      	ldr	r3, [pc, #60]	; (1fd34 <get_fattime+0x48>)
   1fcf6:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   1fcf8:	466b      	mov	r3, sp
   1fcfa:	7958      	ldrb	r0, [r3, #5]
   1fcfc:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   1fcfe:	791b      	ldrb	r3, [r3, #4]
   1fd00:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   1fd02:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   1fd04:	466b      	mov	r3, sp
   1fd06:	789b      	ldrb	r3, [r3, #2]
   1fd08:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   1fd0a:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   1fd0c:	466b      	mov	r3, sp
   1fd0e:	785b      	ldrb	r3, [r3, #1]
   1fd10:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   1fd12:	4318      	orrs	r0, r3
   1fd14:	466b      	mov	r3, sp
   1fd16:	781b      	ldrb	r3, [r3, #0]
   1fd18:	085b      	lsrs	r3, r3, #1
   1fd1a:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   1fd1c:	466b      	mov	r3, sp
   1fd1e:	88db      	ldrh	r3, [r3, #6]
   1fd20:	4a05      	ldr	r2, [pc, #20]	; (1fd38 <get_fattime+0x4c>)
   1fd22:	4694      	mov	ip, r2
   1fd24:	4463      	add	r3, ip
   1fd26:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   1fd28:	4318      	orrs	r0, r3

	return ul_time;
}
   1fd2a:	b003      	add	sp, #12
   1fd2c:	bd00      	pop	{pc}
   1fd2e:	46c0      	nop			; (mov r8, r8)
   1fd30:	20005588 	.word	0x20005588
   1fd34:	0001d879 	.word	0x0001d879
   1fd38:	fffff844 	.word	0xfffff844

0001fd3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   1fd3c:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   1fd3e:	2a00      	cmp	r2, #0
   1fd40:	d005      	beq.n	1fd4e <mem_cpy+0x12>
   1fd42:	2300      	movs	r3, #0
		*d++ = *s++;
   1fd44:	5ccc      	ldrb	r4, [r1, r3]
   1fd46:	54c4      	strb	r4, [r0, r3]
   1fd48:	3301      	adds	r3, #1
	while (cnt--)
   1fd4a:	4293      	cmp	r3, r2
   1fd4c:	d1fa      	bne.n	1fd44 <mem_cpy+0x8>
}
   1fd4e:	bd10      	pop	{r4, pc}

0001fd50 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   1fd50:	2a00      	cmp	r2, #0
   1fd52:	d005      	beq.n	1fd60 <mem_set+0x10>
   1fd54:	0003      	movs	r3, r0
   1fd56:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   1fd58:	7019      	strb	r1, [r3, #0]
   1fd5a:	3301      	adds	r3, #1
	while (cnt--)
   1fd5c:	4293      	cmp	r3, r2
   1fd5e:	d1fb      	bne.n	1fd58 <mem_set+0x8>
}
   1fd60:	4770      	bx	lr

0001fd62 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   1fd62:	0002      	movs	r2, r0
	clst -= 2;
   1fd64:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   1fd66:	6983      	ldr	r3, [r0, #24]
   1fd68:	3b02      	subs	r3, #2
   1fd6a:	2000      	movs	r0, #0
   1fd6c:	4299      	cmp	r1, r3
   1fd6e:	d203      	bcs.n	1fd78 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   1fd70:	7890      	ldrb	r0, [r2, #2]
   1fd72:	4341      	muls	r1, r0
   1fd74:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1fd76:	1808      	adds	r0, r1, r0
}
   1fd78:	4770      	bx	lr

0001fd7a <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   1fd7a:	0002      	movs	r2, r0
   1fd7c:	0001      	movs	r1, r0
   1fd7e:	310b      	adds	r1, #11
	BYTE sum = 0;
   1fd80:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   1fd82:	0843      	lsrs	r3, r0, #1
   1fd84:	01c0      	lsls	r0, r0, #7
   1fd86:	4303      	orrs	r3, r0
   1fd88:	7810      	ldrb	r0, [r2, #0]
   1fd8a:	1818      	adds	r0, r3, r0
   1fd8c:	b2c0      	uxtb	r0, r0
   1fd8e:	3201      	adds	r2, #1
   1fd90:	428a      	cmp	r2, r1
   1fd92:	d1f6      	bne.n	1fd82 <sum_sfn+0x8>
	return sum;
}
   1fd94:	4770      	bx	lr
	...

0001fd98 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   1fd98:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   1fd9a:	2800      	cmp	r0, #0
   1fd9c:	d010      	beq.n	1fdc0 <validate+0x28>
   1fd9e:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   1fda0:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   1fda2:	2a00      	cmp	r2, #0
   1fda4:	d101      	bne.n	1fdaa <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   1fda6:	0018      	movs	r0, r3
   1fda8:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   1fdaa:	88c2      	ldrh	r2, [r0, #6]
   1fdac:	428a      	cmp	r2, r1
   1fdae:	d1fa      	bne.n	1fda6 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   1fdb0:	7840      	ldrb	r0, [r0, #1]
   1fdb2:	4b04      	ldr	r3, [pc, #16]	; (1fdc4 <validate+0x2c>)
   1fdb4:	4798      	blx	r3
		return FR_NOT_READY;
   1fdb6:	2303      	movs	r3, #3
	return FR_OK;
   1fdb8:	07c0      	lsls	r0, r0, #31
   1fdba:	17c0      	asrs	r0, r0, #31
   1fdbc:	4003      	ands	r3, r0
   1fdbe:	e7f2      	b.n	1fda6 <validate+0xe>
		return FR_INVALID_OBJECT;
   1fdc0:	2309      	movs	r3, #9
   1fdc2:	e7f0      	b.n	1fda6 <validate+0xe>
   1fdc4:	0001fb5d 	.word	0x0001fb5d

0001fdc8 <check_fs>:
{
   1fdc8:	b570      	push	{r4, r5, r6, lr}
   1fdca:	0004      	movs	r4, r0
   1fdcc:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1fdce:	0001      	movs	r1, r0
   1fdd0:	3130      	adds	r1, #48	; 0x30
   1fdd2:	7840      	ldrb	r0, [r0, #1]
   1fdd4:	2301      	movs	r3, #1
   1fdd6:	4d1f      	ldr	r5, [pc, #124]	; (1fe54 <check_fs+0x8c>)
   1fdd8:	47a8      	blx	r5
		return 3;
   1fdda:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   1fddc:	2800      	cmp	r0, #0
   1fdde:	d001      	beq.n	1fde4 <check_fs+0x1c>
}
   1fde0:	0018      	movs	r0, r3
   1fde2:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1fde4:	4b1c      	ldr	r3, [pc, #112]	; (1fe58 <check_fs+0x90>)
   1fde6:	5ce3      	ldrb	r3, [r4, r3]
   1fde8:	021b      	lsls	r3, r3, #8
   1fdea:	4a1c      	ldr	r2, [pc, #112]	; (1fe5c <check_fs+0x94>)
   1fdec:	5ca2      	ldrb	r2, [r4, r2]
   1fdee:	431a      	orrs	r2, r3
   1fdf0:	491b      	ldr	r1, [pc, #108]	; (1fe60 <check_fs+0x98>)
   1fdf2:	b212      	sxth	r2, r2
		return 2;
   1fdf4:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1fdf6:	428a      	cmp	r2, r1
   1fdf8:	d1f2      	bne.n	1fde0 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   1fdfa:	3367      	adds	r3, #103	; 0x67
   1fdfc:	5ce3      	ldrb	r3, [r4, r3]
   1fdfe:	061b      	lsls	r3, r3, #24
   1fe00:	2268      	movs	r2, #104	; 0x68
   1fe02:	5ca2      	ldrb	r2, [r4, r2]
   1fe04:	0412      	lsls	r2, r2, #16
   1fe06:	4313      	orrs	r3, r2
   1fe08:	2266      	movs	r2, #102	; 0x66
   1fe0a:	5ca2      	ldrb	r2, [r4, r2]
   1fe0c:	4313      	orrs	r3, r2
   1fe0e:	2267      	movs	r2, #103	; 0x67
   1fe10:	5ca2      	ldrb	r2, [r4, r2]
   1fe12:	0212      	lsls	r2, r2, #8
   1fe14:	4313      	orrs	r3, r2
   1fe16:	021b      	lsls	r3, r3, #8
   1fe18:	0a1b      	lsrs	r3, r3, #8
   1fe1a:	4a12      	ldr	r2, [pc, #72]	; (1fe64 <check_fs+0x9c>)
   1fe1c:	4293      	cmp	r3, r2
   1fe1e:	d016      	beq.n	1fe4e <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   1fe20:	2385      	movs	r3, #133	; 0x85
   1fe22:	5ce3      	ldrb	r3, [r4, r3]
   1fe24:	061b      	lsls	r3, r3, #24
   1fe26:	2284      	movs	r2, #132	; 0x84
   1fe28:	5ca2      	ldrb	r2, [r4, r2]
   1fe2a:	0412      	lsls	r2, r2, #16
   1fe2c:	4313      	orrs	r3, r2
   1fe2e:	2282      	movs	r2, #130	; 0x82
   1fe30:	5ca2      	ldrb	r2, [r4, r2]
   1fe32:	4313      	orrs	r3, r2
   1fe34:	2283      	movs	r2, #131	; 0x83
   1fe36:	5ca2      	ldrb	r2, [r4, r2]
   1fe38:	0212      	lsls	r2, r2, #8
   1fe3a:	4313      	orrs	r3, r2
   1fe3c:	021b      	lsls	r3, r3, #8
   1fe3e:	0a1b      	lsrs	r3, r3, #8
   1fe40:	4a09      	ldr	r2, [pc, #36]	; (1fe68 <check_fs+0xa0>)
   1fe42:	4694      	mov	ip, r2
   1fe44:	4463      	add	r3, ip
   1fe46:	1e58      	subs	r0, r3, #1
   1fe48:	4183      	sbcs	r3, r0
		return 3;
   1fe4a:	b2db      	uxtb	r3, r3
   1fe4c:	e7c8      	b.n	1fde0 <check_fs+0x18>
		return 0;
   1fe4e:	2300      	movs	r3, #0
   1fe50:	e7c6      	b.n	1fde0 <check_fs+0x18>
   1fe52:	46c0      	nop			; (mov r8, r8)
   1fe54:	0001fb79 	.word	0x0001fb79
   1fe58:	0000022f 	.word	0x0000022f
   1fe5c:	0000022e 	.word	0x0000022e
   1fe60:	ffffaa55 	.word	0xffffaa55
   1fe64:	00544146 	.word	0x00544146
   1fe68:	ffabbeba 	.word	0xffabbeba

0001fe6c <chk_mounted>:
{
   1fe6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe6e:	46d6      	mov	lr, sl
   1fe70:	464f      	mov	r7, r9
   1fe72:	4646      	mov	r6, r8
   1fe74:	b5c0      	push	{r6, r7, lr}
   1fe76:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   1fe78:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   1fe7a:	781c      	ldrb	r4, [r3, #0]
   1fe7c:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   1fe7e:	2c09      	cmp	r4, #9
   1fe80:	d80e      	bhi.n	1fea0 <chk_mounted+0x34>
   1fe82:	785a      	ldrb	r2, [r3, #1]
   1fe84:	2a3a      	cmp	r2, #58	; 0x3a
   1fe86:	d001      	beq.n	1fe8c <chk_mounted+0x20>
   1fe88:	2400      	movs	r4, #0
   1fe8a:	e00a      	b.n	1fea2 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   1fe8c:	3302      	adds	r3, #2
   1fe8e:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   1fe90:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   1fe92:	2c07      	cmp	r4, #7
   1fe94:	d905      	bls.n	1fea2 <chk_mounted+0x36>
}
   1fe96:	bc1c      	pop	{r2, r3, r4}
   1fe98:	4690      	mov	r8, r2
   1fe9a:	4699      	mov	r9, r3
   1fe9c:	46a2      	mov	sl, r4
   1fe9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fea0:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1fea2:	00a3      	lsls	r3, r4, #2
   1fea4:	4ac5      	ldr	r2, [pc, #788]	; (201bc <chk_mounted+0x350>)
   1fea6:	589e      	ldr	r6, [r3, r2]
   1fea8:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   1feaa:	2e00      	cmp	r6, #0
   1feac:	d100      	bne.n	1feb0 <chk_mounted+0x44>
   1feae:	e0e8      	b.n	20082 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   1feb0:	7833      	ldrb	r3, [r6, #0]
   1feb2:	2b00      	cmp	r3, #0
   1feb4:	d00d      	beq.n	1fed2 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   1feb6:	7870      	ldrb	r0, [r6, #1]
   1feb8:	4bc1      	ldr	r3, [pc, #772]	; (201c0 <chk_mounted+0x354>)
   1feba:	4798      	blx	r3
   1febc:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   1febe:	07c2      	lsls	r2, r0, #31
   1fec0:	d407      	bmi.n	1fed2 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   1fec2:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1fec4:	2d00      	cmp	r5, #0
   1fec6:	d0e6      	beq.n	1fe96 <chk_mounted+0x2a>
   1fec8:	075b      	lsls	r3, r3, #29
   1feca:	d400      	bmi.n	1fece <chk_mounted+0x62>
   1fecc:	e0db      	b.n	20086 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   1fece:	300a      	adds	r0, #10
   1fed0:	e7e1      	b.n	1fe96 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   1fed2:	2300      	movs	r3, #0
   1fed4:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1fed6:	b2e0      	uxtb	r0, r4
   1fed8:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   1feda:	4bba      	ldr	r3, [pc, #744]	; (201c4 <chk_mounted+0x358>)
   1fedc:	4798      	blx	r3
   1fede:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   1fee0:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1fee2:	07da      	lsls	r2, r3, #31
   1fee4:	d4d7      	bmi.n	1fe96 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1fee6:	2d00      	cmp	r5, #0
   1fee8:	d002      	beq.n	1fef0 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   1feea:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1feec:	075b      	lsls	r3, r3, #29
   1feee:	d4d2      	bmi.n	1fe96 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   1fef0:	2100      	movs	r1, #0
   1fef2:	0030      	movs	r0, r6
   1fef4:	4bb4      	ldr	r3, [pc, #720]	; (201c8 <chk_mounted+0x35c>)
   1fef6:	4798      	blx	r3
   1fef8:	0003      	movs	r3, r0
   1fefa:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   1fefc:	2801      	cmp	r0, #1
   1fefe:	d100      	bne.n	1ff02 <chk_mounted+0x96>
   1ff00:	e09a      	b.n	20038 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   1ff02:	2b03      	cmp	r3, #3
   1ff04:	d100      	bne.n	1ff08 <chk_mounted+0x9c>
   1ff06:	e0c0      	b.n	2008a <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   1ff08:	200d      	movs	r0, #13
   1ff0a:	2b00      	cmp	r3, #0
   1ff0c:	d1c3      	bne.n	1fe96 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   1ff0e:	333c      	adds	r3, #60	; 0x3c
   1ff10:	5cf2      	ldrb	r2, [r6, r3]
   1ff12:	0212      	lsls	r2, r2, #8
   1ff14:	3b01      	subs	r3, #1
   1ff16:	5cf3      	ldrb	r3, [r6, r3]
   1ff18:	4313      	orrs	r3, r2
   1ff1a:	2280      	movs	r2, #128	; 0x80
   1ff1c:	0092      	lsls	r2, r2, #2
   1ff1e:	b21b      	sxth	r3, r3
   1ff20:	4293      	cmp	r3, r2
   1ff22:	d1b8      	bne.n	1fe96 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   1ff24:	2347      	movs	r3, #71	; 0x47
   1ff26:	5cf3      	ldrb	r3, [r6, r3]
   1ff28:	021b      	lsls	r3, r3, #8
   1ff2a:	3abb      	subs	r2, #187	; 0xbb
   1ff2c:	3aff      	subs	r2, #255	; 0xff
   1ff2e:	5cb5      	ldrb	r5, [r6, r2]
   1ff30:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   1ff32:	d10d      	bne.n	1ff50 <chk_mounted+0xe4>
   1ff34:	2357      	movs	r3, #87	; 0x57
   1ff36:	5cf5      	ldrb	r5, [r6, r3]
   1ff38:	062d      	lsls	r5, r5, #24
   1ff3a:	3b01      	subs	r3, #1
   1ff3c:	5cf3      	ldrb	r3, [r6, r3]
   1ff3e:	041b      	lsls	r3, r3, #16
   1ff40:	431d      	orrs	r5, r3
   1ff42:	2354      	movs	r3, #84	; 0x54
   1ff44:	5cf3      	ldrb	r3, [r6, r3]
   1ff46:	431d      	orrs	r5, r3
   1ff48:	2355      	movs	r3, #85	; 0x55
   1ff4a:	5cf3      	ldrb	r3, [r6, r3]
   1ff4c:	021b      	lsls	r3, r3, #8
   1ff4e:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   1ff50:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   1ff52:	2340      	movs	r3, #64	; 0x40
   1ff54:	5cf2      	ldrb	r2, [r6, r3]
   1ff56:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   1ff58:	1e53      	subs	r3, r2, #1
   1ff5a:	200d      	movs	r0, #13
   1ff5c:	2b01      	cmp	r3, #1
   1ff5e:	d89a      	bhi.n	1fe96 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   1ff60:	233d      	movs	r3, #61	; 0x3d
   1ff62:	5cf1      	ldrb	r1, [r6, r3]
   1ff64:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   1ff66:	2900      	cmp	r1, #0
   1ff68:	d095      	beq.n	1fe96 <chk_mounted+0x2a>
   1ff6a:	1e4b      	subs	r3, r1, #1
   1ff6c:	4219      	tst	r1, r3
   1ff6e:	d192      	bne.n	1fe96 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   1ff70:	2342      	movs	r3, #66	; 0x42
   1ff72:	5cf3      	ldrb	r3, [r6, r3]
   1ff74:	021b      	lsls	r3, r3, #8
   1ff76:	3034      	adds	r0, #52	; 0x34
   1ff78:	5c30      	ldrb	r0, [r6, r0]
   1ff7a:	4318      	orrs	r0, r3
   1ff7c:	4680      	mov	r8, r0
   1ff7e:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   1ff80:	200d      	movs	r0, #13
   1ff82:	4643      	mov	r3, r8
   1ff84:	071b      	lsls	r3, r3, #28
   1ff86:	d000      	beq.n	1ff8a <chk_mounted+0x11e>
   1ff88:	e785      	b.n	1fe96 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   1ff8a:	2344      	movs	r3, #68	; 0x44
   1ff8c:	5cf3      	ldrb	r3, [r6, r3]
   1ff8e:	021b      	lsls	r3, r3, #8
   1ff90:	3036      	adds	r0, #54	; 0x36
   1ff92:	5c30      	ldrb	r0, [r6, r0]
   1ff94:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   1ff96:	d10d      	bne.n	1ffb4 <chk_mounted+0x148>
   1ff98:	3353      	adds	r3, #83	; 0x53
   1ff9a:	5cf3      	ldrb	r3, [r6, r3]
   1ff9c:	061b      	lsls	r3, r3, #24
   1ff9e:	2052      	movs	r0, #82	; 0x52
   1ffa0:	5c30      	ldrb	r0, [r6, r0]
   1ffa2:	0400      	lsls	r0, r0, #16
   1ffa4:	4303      	orrs	r3, r0
   1ffa6:	2050      	movs	r0, #80	; 0x50
   1ffa8:	5c30      	ldrb	r0, [r6, r0]
   1ffaa:	4303      	orrs	r3, r0
   1ffac:	2051      	movs	r0, #81	; 0x51
   1ffae:	5c30      	ldrb	r0, [r6, r0]
   1ffb0:	0200      	lsls	r0, r0, #8
   1ffb2:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   1ffb4:	203f      	movs	r0, #63	; 0x3f
   1ffb6:	5c30      	ldrb	r0, [r6, r0]
   1ffb8:	0200      	lsls	r0, r0, #8
   1ffba:	273e      	movs	r7, #62	; 0x3e
   1ffbc:	5df7      	ldrb	r7, [r6, r7]
   1ffbe:	4307      	orrs	r7, r0
   1ffc0:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   1ffc2:	200d      	movs	r0, #13
   1ffc4:	2f00      	cmp	r7, #0
   1ffc6:	d100      	bne.n	1ffca <chk_mounted+0x15e>
   1ffc8:	e765      	b.n	1fe96 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   1ffca:	436a      	muls	r2, r5
   1ffcc:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   1ffce:	4642      	mov	r2, r8
   1ffd0:	0917      	lsrs	r7, r2, #4
   1ffd2:	4457      	add	r7, sl
   1ffd4:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   1ffd6:	42bb      	cmp	r3, r7
   1ffd8:	d200      	bcs.n	1ffdc <chk_mounted+0x170>
   1ffda:	e75c      	b.n	1fe96 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   1ffdc:	1bd8      	subs	r0, r3, r7
   1ffde:	4b7b      	ldr	r3, [pc, #492]	; (201cc <chk_mounted+0x360>)
   1ffe0:	4798      	blx	r3
   1ffe2:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   1ffe4:	200d      	movs	r0, #13
   1ffe6:	2b00      	cmp	r3, #0
   1ffe8:	d100      	bne.n	1ffec <chk_mounted+0x180>
   1ffea:	e754      	b.n	1fe96 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   1ffec:	4a78      	ldr	r2, [pc, #480]	; (201d0 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   1ffee:	429a      	cmp	r2, r3
   1fff0:	4192      	sbcs	r2, r2
   1fff2:	4252      	negs	r2, r2
   1fff4:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   1fff6:	4977      	ldr	r1, [pc, #476]	; (201d4 <chk_mounted+0x368>)
   1fff8:	428b      	cmp	r3, r1
   1fffa:	d848      	bhi.n	2008e <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   1fffc:	3302      	adds	r3, #2
   1fffe:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   20000:	19e7      	adds	r7, r4, r7
   20002:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   20004:	4454      	add	r4, sl
   20006:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   20008:	200d      	movs	r0, #13
   2000a:	4641      	mov	r1, r8
   2000c:	2900      	cmp	r1, #0
   2000e:	d100      	bne.n	20012 <chk_mounted+0x1a6>
   20010:	e741      	b.n	1fe96 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   20012:	444c      	add	r4, r9
   20014:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   20016:	2a02      	cmp	r2, #2
   20018:	d12c      	bne.n	20074 <chk_mounted+0x208>
   2001a:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2001c:	496e      	ldr	r1, [pc, #440]	; (201d8 <chk_mounted+0x36c>)
   2001e:	468c      	mov	ip, r1
   20020:	4463      	add	r3, ip
   20022:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   20024:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   20026:	429d      	cmp	r5, r3
   20028:	d200      	bcs.n	2002c <chk_mounted+0x1c0>
   2002a:	e734      	b.n	1fe96 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   2002c:	2301      	movs	r3, #1
   2002e:	425b      	negs	r3, r3
   20030:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   20032:	2300      	movs	r3, #0
   20034:	60f3      	str	r3, [r6, #12]
   20036:	e0b6      	b.n	201a6 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   20038:	33f2      	adds	r3, #242	; 0xf2
   2003a:	33ff      	adds	r3, #255	; 0xff
   2003c:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2003e:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   20040:	2b00      	cmp	r3, #0
   20042:	d100      	bne.n	20046 <chk_mounted+0x1da>
   20044:	e727      	b.n	1fe96 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   20046:	23fa      	movs	r3, #250	; 0xfa
   20048:	33ff      	adds	r3, #255	; 0xff
   2004a:	5cf4      	ldrb	r4, [r6, r3]
   2004c:	0624      	lsls	r4, r4, #24
   2004e:	3b01      	subs	r3, #1
   20050:	5cf3      	ldrb	r3, [r6, r3]
   20052:	041b      	lsls	r3, r3, #16
   20054:	431c      	orrs	r4, r3
   20056:	23fb      	movs	r3, #251	; 0xfb
   20058:	005b      	lsls	r3, r3, #1
   2005a:	5cf3      	ldrb	r3, [r6, r3]
   2005c:	431c      	orrs	r4, r3
   2005e:	23f8      	movs	r3, #248	; 0xf8
   20060:	33ff      	adds	r3, #255	; 0xff
   20062:	5cf2      	ldrb	r2, [r6, r3]
   20064:	0212      	lsls	r2, r2, #8
   20066:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   20068:	0021      	movs	r1, r4
   2006a:	0030      	movs	r0, r6
   2006c:	4b56      	ldr	r3, [pc, #344]	; (201c8 <chk_mounted+0x35c>)
   2006e:	4798      	blx	r3
   20070:	0003      	movs	r3, r0
   20072:	e746      	b.n	1ff02 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   20074:	2103      	movs	r1, #3
   20076:	4359      	muls	r1, r3
   20078:	0849      	lsrs	r1, r1, #1
   2007a:	2001      	movs	r0, #1
   2007c:	4003      	ands	r3, r0
   2007e:	18cb      	adds	r3, r1, r3
   20080:	e7cc      	b.n	2001c <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   20082:	200c      	movs	r0, #12
   20084:	e707      	b.n	1fe96 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   20086:	2000      	movs	r0, #0
   20088:	e705      	b.n	1fe96 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   2008a:	2001      	movs	r0, #1
   2008c:	e703      	b.n	1fe96 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2008e:	3302      	adds	r3, #2
   20090:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   20092:	19e7      	adds	r7, r4, r7
   20094:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   20096:	4652      	mov	r2, sl
   20098:	18a2      	adds	r2, r4, r2
   2009a:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2009c:	200d      	movs	r0, #13
   2009e:	4642      	mov	r2, r8
   200a0:	2a00      	cmp	r2, #0
   200a2:	d000      	beq.n	200a6 <chk_mounted+0x23a>
   200a4:	e6f7      	b.n	1fe96 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   200a6:	225f      	movs	r2, #95	; 0x5f
   200a8:	5cb2      	ldrb	r2, [r6, r2]
   200aa:	0612      	lsls	r2, r2, #24
   200ac:	215e      	movs	r1, #94	; 0x5e
   200ae:	5c71      	ldrb	r1, [r6, r1]
   200b0:	0409      	lsls	r1, r1, #16
   200b2:	430a      	orrs	r2, r1
   200b4:	215c      	movs	r1, #92	; 0x5c
   200b6:	5c71      	ldrb	r1, [r6, r1]
   200b8:	430a      	orrs	r2, r1
   200ba:	215d      	movs	r1, #93	; 0x5d
   200bc:	5c71      	ldrb	r1, [r6, r1]
   200be:	0209      	lsls	r1, r1, #8
   200c0:	430a      	orrs	r2, r1
   200c2:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   200c4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   200c6:	4a44      	ldr	r2, [pc, #272]	; (201d8 <chk_mounted+0x36c>)
   200c8:	4694      	mov	ip, r2
   200ca:	4463      	add	r3, ip
   200cc:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   200ce:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   200d0:	429d      	cmp	r5, r3
   200d2:	d200      	bcs.n	200d6 <chk_mounted+0x26a>
   200d4:	e6df      	b.n	1fe96 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   200d6:	2301      	movs	r3, #1
   200d8:	425b      	negs	r3, r3
   200da:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   200dc:	2300      	movs	r3, #0
   200de:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   200e0:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   200e2:	3361      	adds	r3, #97	; 0x61
   200e4:	5cf3      	ldrb	r3, [r6, r3]
   200e6:	021b      	lsls	r3, r3, #8
   200e8:	2260      	movs	r2, #96	; 0x60
   200ea:	5cb2      	ldrb	r2, [r6, r2]
   200ec:	431a      	orrs	r2, r3
   200ee:	1912      	adds	r2, r2, r4
   200f0:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   200f2:	0031      	movs	r1, r6
   200f4:	3130      	adds	r1, #48	; 0x30
   200f6:	7870      	ldrb	r0, [r6, #1]
   200f8:	2301      	movs	r3, #1
   200fa:	4c38      	ldr	r4, [pc, #224]	; (201dc <chk_mounted+0x370>)
   200fc:	47a0      	blx	r4
   200fe:	2203      	movs	r2, #3
   20100:	2800      	cmp	r0, #0
   20102:	d150      	bne.n	201a6 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   20104:	4b36      	ldr	r3, [pc, #216]	; (201e0 <chk_mounted+0x374>)
   20106:	5cf2      	ldrb	r2, [r6, r3]
   20108:	0212      	lsls	r2, r2, #8
   2010a:	4b36      	ldr	r3, [pc, #216]	; (201e4 <chk_mounted+0x378>)
   2010c:	5cf3      	ldrb	r3, [r6, r3]
   2010e:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   20110:	4935      	ldr	r1, [pc, #212]	; (201e8 <chk_mounted+0x37c>)
   20112:	b21b      	sxth	r3, r3
   20114:	2203      	movs	r2, #3
   20116:	428b      	cmp	r3, r1
   20118:	d145      	bne.n	201a6 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2011a:	2333      	movs	r3, #51	; 0x33
   2011c:	5cf3      	ldrb	r3, [r6, r3]
   2011e:	061b      	lsls	r3, r3, #24
   20120:	322f      	adds	r2, #47	; 0x2f
   20122:	5cb2      	ldrb	r2, [r6, r2]
   20124:	0412      	lsls	r2, r2, #16
   20126:	4313      	orrs	r3, r2
   20128:	2230      	movs	r2, #48	; 0x30
   2012a:	5cb2      	ldrb	r2, [r6, r2]
   2012c:	4313      	orrs	r3, r2
   2012e:	2231      	movs	r2, #49	; 0x31
   20130:	5cb2      	ldrb	r2, [r6, r2]
   20132:	0212      	lsls	r2, r2, #8
   20134:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   20136:	492d      	ldr	r1, [pc, #180]	; (201ec <chk_mounted+0x380>)
   20138:	2203      	movs	r2, #3
   2013a:	428b      	cmp	r3, r1
   2013c:	d133      	bne.n	201a6 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2013e:	4b2c      	ldr	r3, [pc, #176]	; (201f0 <chk_mounted+0x384>)
   20140:	5cf3      	ldrb	r3, [r6, r3]
   20142:	061b      	lsls	r3, r3, #24
   20144:	4a2b      	ldr	r2, [pc, #172]	; (201f4 <chk_mounted+0x388>)
   20146:	5cb2      	ldrb	r2, [r6, r2]
   20148:	0412      	lsls	r2, r2, #16
   2014a:	4313      	orrs	r3, r2
   2014c:	2285      	movs	r2, #133	; 0x85
   2014e:	0092      	lsls	r2, r2, #2
   20150:	5cb2      	ldrb	r2, [r6, r2]
   20152:	4313      	orrs	r3, r2
   20154:	4a28      	ldr	r2, [pc, #160]	; (201f8 <chk_mounted+0x38c>)
   20156:	5cb2      	ldrb	r2, [r6, r2]
   20158:	0212      	lsls	r2, r2, #8
   2015a:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2015c:	4927      	ldr	r1, [pc, #156]	; (201fc <chk_mounted+0x390>)
   2015e:	2203      	movs	r2, #3
   20160:	428b      	cmp	r3, r1
   20162:	d120      	bne.n	201a6 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   20164:	4b26      	ldr	r3, [pc, #152]	; (20200 <chk_mounted+0x394>)
   20166:	5cf3      	ldrb	r3, [r6, r3]
   20168:	061b      	lsls	r3, r3, #24
   2016a:	4a26      	ldr	r2, [pc, #152]	; (20204 <chk_mounted+0x398>)
   2016c:	5cb2      	ldrb	r2, [r6, r2]
   2016e:	0412      	lsls	r2, r2, #16
   20170:	4313      	orrs	r3, r2
   20172:	2287      	movs	r2, #135	; 0x87
   20174:	0092      	lsls	r2, r2, #2
   20176:	5cb2      	ldrb	r2, [r6, r2]
   20178:	4313      	orrs	r3, r2
   2017a:	4a23      	ldr	r2, [pc, #140]	; (20208 <chk_mounted+0x39c>)
   2017c:	5cb2      	ldrb	r2, [r6, r2]
   2017e:	0212      	lsls	r2, r2, #8
   20180:	4313      	orrs	r3, r2
   20182:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   20184:	4b21      	ldr	r3, [pc, #132]	; (2020c <chk_mounted+0x3a0>)
   20186:	5cf3      	ldrb	r3, [r6, r3]
   20188:	061b      	lsls	r3, r3, #24
   2018a:	4a21      	ldr	r2, [pc, #132]	; (20210 <chk_mounted+0x3a4>)
   2018c:	5cb2      	ldrb	r2, [r6, r2]
   2018e:	0412      	lsls	r2, r2, #16
   20190:	4313      	orrs	r3, r2
   20192:	2286      	movs	r2, #134	; 0x86
   20194:	0092      	lsls	r2, r2, #2
   20196:	5cb2      	ldrb	r2, [r6, r2]
   20198:	4313      	orrs	r3, r2
   2019a:	4a1e      	ldr	r2, [pc, #120]	; (20214 <chk_mounted+0x3a8>)
   2019c:	5cb2      	ldrb	r2, [r6, r2]
   2019e:	0212      	lsls	r2, r2, #8
   201a0:	4313      	orrs	r3, r2
   201a2:	6133      	str	r3, [r6, #16]
   201a4:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   201a6:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   201a8:	4a1b      	ldr	r2, [pc, #108]	; (20218 <chk_mounted+0x3ac>)
   201aa:	8813      	ldrh	r3, [r2, #0]
   201ac:	3301      	adds	r3, #1
   201ae:	b29b      	uxth	r3, r3
   201b0:	8013      	strh	r3, [r2, #0]
   201b2:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   201b4:	2000      	movs	r0, #0
   201b6:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   201b8:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   201ba:	e66c      	b.n	1fe96 <chk_mounted+0x2a>
   201bc:	20003dc8 	.word	0x20003dc8
   201c0:	0001fb5d 	.word	0x0001fb5d
   201c4:	0001fac1 	.word	0x0001fac1
   201c8:	0001fdc9 	.word	0x0001fdc9
   201cc:	00023fe1 	.word	0x00023fe1
   201d0:	00000ff5 	.word	0x00000ff5
   201d4:	0000fff5 	.word	0x0000fff5
   201d8:	000001ff 	.word	0x000001ff
   201dc:	0001fb79 	.word	0x0001fb79
   201e0:	0000022f 	.word	0x0000022f
   201e4:	0000022e 	.word	0x0000022e
   201e8:	ffffaa55 	.word	0xffffaa55
   201ec:	41615252 	.word	0x41615252
   201f0:	00000217 	.word	0x00000217
   201f4:	00000216 	.word	0x00000216
   201f8:	00000215 	.word	0x00000215
   201fc:	61417272 	.word	0x61417272
   20200:	0000021f 	.word	0x0000021f
   20204:	0000021e 	.word	0x0000021e
   20208:	0000021d 	.word	0x0000021d
   2020c:	0000021b 	.word	0x0000021b
   20210:	0000021a 	.word	0x0000021a
   20214:	00000219 	.word	0x00000219
   20218:	20003de8 	.word	0x20003de8

0002021c <move_window>:
{
   2021c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2021e:	46ce      	mov	lr, r9
   20220:	b500      	push	{lr}
   20222:	b082      	sub	sp, #8
   20224:	0004      	movs	r4, r0
   20226:	000f      	movs	r7, r1
	wsect = fs->winsect;
   20228:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   2022a:	428d      	cmp	r5, r1
   2022c:	d03f      	beq.n	202ae <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   2022e:	7903      	ldrb	r3, [r0, #4]
   20230:	2b00      	cmp	r3, #0
   20232:	d107      	bne.n	20244 <move_window+0x28>
	return FR_OK;
   20234:	2300      	movs	r3, #0
		if (sector) {
   20236:	2f00      	cmp	r7, #0
   20238:	d12c      	bne.n	20294 <move_window+0x78>
}
   2023a:	0018      	movs	r0, r3
   2023c:	b002      	add	sp, #8
   2023e:	bc04      	pop	{r2}
   20240:	4691      	mov	r9, r2
   20242:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   20244:	2330      	movs	r3, #48	; 0x30
   20246:	469c      	mov	ip, r3
   20248:	4484      	add	ip, r0
   2024a:	4663      	mov	r3, ip
   2024c:	4661      	mov	r1, ip
   2024e:	9301      	str	r3, [sp, #4]
   20250:	7840      	ldrb	r0, [r0, #1]
   20252:	2301      	movs	r3, #1
   20254:	002a      	movs	r2, r5
   20256:	4e17      	ldr	r6, [pc, #92]	; (202b4 <move_window+0x98>)
   20258:	47b0      	blx	r6
				return FR_DISK_ERR;
   2025a:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2025c:	2800      	cmp	r0, #0
   2025e:	d1ec      	bne.n	2023a <move_window+0x1e>
			fs->wflag = 0;
   20260:	2300      	movs	r3, #0
   20262:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   20264:	6a23      	ldr	r3, [r4, #32]
   20266:	69e2      	ldr	r2, [r4, #28]
   20268:	4694      	mov	ip, r2
   2026a:	4463      	add	r3, ip
   2026c:	429d      	cmp	r5, r3
   2026e:	d2e1      	bcs.n	20234 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   20270:	78e6      	ldrb	r6, [r4, #3]
   20272:	2e01      	cmp	r6, #1
   20274:	d9de      	bls.n	20234 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   20276:	4b0f      	ldr	r3, [pc, #60]	; (202b4 <move_window+0x98>)
   20278:	4699      	mov	r9, r3
					wsect += fs->fsize;
   2027a:	69e3      	ldr	r3, [r4, #28]
   2027c:	469c      	mov	ip, r3
   2027e:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   20280:	7860      	ldrb	r0, [r4, #1]
   20282:	2301      	movs	r3, #1
   20284:	002a      	movs	r2, r5
   20286:	9901      	ldr	r1, [sp, #4]
   20288:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2028a:	3e01      	subs	r6, #1
   2028c:	b2f6      	uxtb	r6, r6
   2028e:	2e01      	cmp	r6, #1
   20290:	d1f3      	bne.n	2027a <move_window+0x5e>
   20292:	e7cf      	b.n	20234 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   20294:	0021      	movs	r1, r4
   20296:	3130      	adds	r1, #48	; 0x30
   20298:	7860      	ldrb	r0, [r4, #1]
   2029a:	3301      	adds	r3, #1
   2029c:	003a      	movs	r2, r7
   2029e:	4d06      	ldr	r5, [pc, #24]	; (202b8 <move_window+0x9c>)
   202a0:	47a8      	blx	r5
				return FR_DISK_ERR;
   202a2:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   202a4:	2800      	cmp	r0, #0
   202a6:	d1c8      	bne.n	2023a <move_window+0x1e>
			fs->winsect = sector;
   202a8:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   202aa:	2300      	movs	r3, #0
   202ac:	e7c5      	b.n	2023a <move_window+0x1e>
   202ae:	2300      	movs	r3, #0
   202b0:	e7c3      	b.n	2023a <move_window+0x1e>
   202b2:	46c0      	nop			; (mov r8, r8)
   202b4:	0001fbfd 	.word	0x0001fbfd
   202b8:	0001fb79 	.word	0x0001fb79

000202bc <get_fat>:
{
   202bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202be:	0005      	movs	r5, r0
   202c0:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   202c2:	2901      	cmp	r1, #1
   202c4:	d974      	bls.n	203b0 <get_fat+0xf4>
		return 1;
   202c6:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   202c8:	69ab      	ldr	r3, [r5, #24]
   202ca:	4299      	cmp	r1, r3
   202cc:	d271      	bcs.n	203b2 <get_fat+0xf6>
	switch (fs->fs_type) {
   202ce:	782b      	ldrb	r3, [r5, #0]
   202d0:	2b02      	cmp	r3, #2
   202d2:	d034      	beq.n	2033e <get_fat+0x82>
   202d4:	2b03      	cmp	r3, #3
   202d6:	d049      	beq.n	2036c <get_fat+0xb0>
   202d8:	2b01      	cmp	r3, #1
   202da:	d002      	beq.n	202e2 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   202dc:	2001      	movs	r0, #1
   202de:	4240      	negs	r0, r0
   202e0:	e067      	b.n	203b2 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   202e2:	084e      	lsrs	r6, r1, #1
   202e4:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   202e6:	0a71      	lsrs	r1, r6, #9
   202e8:	6a2b      	ldr	r3, [r5, #32]
   202ea:	469c      	mov	ip, r3
   202ec:	4461      	add	r1, ip
   202ee:	0028      	movs	r0, r5
   202f0:	4b30      	ldr	r3, [pc, #192]	; (203b4 <get_fat+0xf8>)
   202f2:	4798      	blx	r3
   202f4:	2800      	cmp	r0, #0
   202f6:	d002      	beq.n	202fe <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   202f8:	2001      	movs	r0, #1
   202fa:	4240      	negs	r0, r0
   202fc:	e059      	b.n	203b2 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   202fe:	05f3      	lsls	r3, r6, #23
   20300:	0ddb      	lsrs	r3, r3, #23
   20302:	18eb      	adds	r3, r5, r3
   20304:	3330      	adds	r3, #48	; 0x30
   20306:	781f      	ldrb	r7, [r3, #0]
   20308:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2030a:	0a71      	lsrs	r1, r6, #9
   2030c:	6a2b      	ldr	r3, [r5, #32]
   2030e:	469c      	mov	ip, r3
   20310:	4461      	add	r1, ip
   20312:	0028      	movs	r0, r5
   20314:	4b27      	ldr	r3, [pc, #156]	; (203b4 <get_fat+0xf8>)
   20316:	4798      	blx	r3
   20318:	2800      	cmp	r0, #0
   2031a:	d002      	beq.n	20322 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2031c:	2001      	movs	r0, #1
   2031e:	4240      	negs	r0, r0
   20320:	e047      	b.n	203b2 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   20322:	05f6      	lsls	r6, r6, #23
   20324:	0df6      	lsrs	r6, r6, #23
   20326:	19ad      	adds	r5, r5, r6
   20328:	3530      	adds	r5, #48	; 0x30
   2032a:	7828      	ldrb	r0, [r5, #0]
   2032c:	0200      	lsls	r0, r0, #8
   2032e:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   20330:	07e3      	lsls	r3, r4, #31
   20332:	d501      	bpl.n	20338 <get_fat+0x7c>
   20334:	0900      	lsrs	r0, r0, #4
   20336:	e03c      	b.n	203b2 <get_fat+0xf6>
   20338:	0500      	lsls	r0, r0, #20
   2033a:	0d00      	lsrs	r0, r0, #20
   2033c:	e039      	b.n	203b2 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2033e:	0a09      	lsrs	r1, r1, #8
   20340:	6a2b      	ldr	r3, [r5, #32]
   20342:	469c      	mov	ip, r3
   20344:	4461      	add	r1, ip
   20346:	0028      	movs	r0, r5
   20348:	4b1a      	ldr	r3, [pc, #104]	; (203b4 <get_fat+0xf8>)
   2034a:	4798      	blx	r3
   2034c:	2800      	cmp	r0, #0
   2034e:	d002      	beq.n	20356 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   20350:	2001      	movs	r0, #1
   20352:	4240      	negs	r0, r0
   20354:	e02d      	b.n	203b2 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   20356:	0064      	lsls	r4, r4, #1
   20358:	23ff      	movs	r3, #255	; 0xff
   2035a:	005b      	lsls	r3, r3, #1
   2035c:	401c      	ands	r4, r3
		return LD_WORD(p);
   2035e:	192d      	adds	r5, r5, r4
   20360:	3530      	adds	r5, #48	; 0x30
   20362:	786b      	ldrb	r3, [r5, #1]
   20364:	021b      	lsls	r3, r3, #8
   20366:	7828      	ldrb	r0, [r5, #0]
   20368:	4318      	orrs	r0, r3
   2036a:	e022      	b.n	203b2 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2036c:	09c9      	lsrs	r1, r1, #7
   2036e:	6a2b      	ldr	r3, [r5, #32]
   20370:	469c      	mov	ip, r3
   20372:	4461      	add	r1, ip
   20374:	0028      	movs	r0, r5
   20376:	4b0f      	ldr	r3, [pc, #60]	; (203b4 <get_fat+0xf8>)
   20378:	4798      	blx	r3
   2037a:	2800      	cmp	r0, #0
   2037c:	d002      	beq.n	20384 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2037e:	2001      	movs	r0, #1
   20380:	4240      	negs	r0, r0
   20382:	e016      	b.n	203b2 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   20384:	00a4      	lsls	r4, r4, #2
   20386:	23fe      	movs	r3, #254	; 0xfe
   20388:	005b      	lsls	r3, r3, #1
   2038a:	401c      	ands	r4, r3
   2038c:	0023      	movs	r3, r4
   2038e:	3330      	adds	r3, #48	; 0x30
   20390:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   20392:	78d8      	ldrb	r0, [r3, #3]
   20394:	0600      	lsls	r0, r0, #24
   20396:	789a      	ldrb	r2, [r3, #2]
   20398:	0412      	lsls	r2, r2, #16
   2039a:	4310      	orrs	r0, r2
   2039c:	192c      	adds	r4, r5, r4
   2039e:	3430      	adds	r4, #48	; 0x30
   203a0:	7822      	ldrb	r2, [r4, #0]
   203a2:	4310      	orrs	r0, r2
   203a4:	785b      	ldrb	r3, [r3, #1]
   203a6:	021b      	lsls	r3, r3, #8
   203a8:	4318      	orrs	r0, r3
   203aa:	0100      	lsls	r0, r0, #4
   203ac:	0900      	lsrs	r0, r0, #4
   203ae:	e000      	b.n	203b2 <get_fat+0xf6>
		return 1;
   203b0:	2001      	movs	r0, #1
}
   203b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   203b4:	0002021d 	.word	0x0002021d

000203b8 <dir_sdi>:
{
   203b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203ba:	0004      	movs	r4, r0
   203bc:	000d      	movs	r5, r1
	dj->index = idx;
   203be:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   203c0:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   203c2:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   203c4:	2901      	cmp	r1, #1
   203c6:	d003      	beq.n	203d0 <dir_sdi+0x18>
   203c8:	6823      	ldr	r3, [r4, #0]
   203ca:	699a      	ldr	r2, [r3, #24]
   203cc:	4291      	cmp	r1, r2
   203ce:	d300      	bcc.n	203d2 <dir_sdi+0x1a>
}
   203d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   203d2:	2900      	cmp	r1, #0
   203d4:	d119      	bne.n	2040a <dir_sdi+0x52>
   203d6:	781a      	ldrb	r2, [r3, #0]
   203d8:	2a03      	cmp	r2, #3
   203da:	d013      	beq.n	20404 <dir_sdi+0x4c>
		dj->clust = clst;
   203dc:	2200      	movs	r2, #0
   203de:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   203e0:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   203e2:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   203e4:	42aa      	cmp	r2, r5
   203e6:	d9f3      	bls.n	203d0 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   203e8:	092a      	lsrs	r2, r5, #4
   203ea:	b292      	uxth	r2, r2
   203ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   203ee:	189b      	adds	r3, r3, r2
   203f0:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   203f2:	6823      	ldr	r3, [r4, #0]
   203f4:	3330      	adds	r3, #48	; 0x30
   203f6:	220f      	movs	r2, #15
   203f8:	4015      	ands	r5, r2
   203fa:	016d      	lsls	r5, r5, #5
   203fc:	195d      	adds	r5, r3, r5
   203fe:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   20400:	2000      	movs	r0, #0
   20402:	e7e5      	b.n	203d0 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   20404:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   20406:	2900      	cmp	r1, #0
   20408:	d0e8      	beq.n	203dc <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2040a:	789e      	ldrb	r6, [r3, #2]
   2040c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   2040e:	42b5      	cmp	r5, r6
   20410:	d313      	bcc.n	2043a <dir_sdi+0x82>
   20412:	1bad      	subs	r5, r5, r6
   20414:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   20416:	4f10      	ldr	r7, [pc, #64]	; (20458 <dir_sdi+0xa0>)
   20418:	e000      	b.n	2041c <dir_sdi+0x64>
   2041a:	001d      	movs	r5, r3
   2041c:	6820      	ldr	r0, [r4, #0]
   2041e:	47b8      	blx	r7
   20420:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   20422:	1c43      	adds	r3, r0, #1
   20424:	d012      	beq.n	2044c <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   20426:	2801      	cmp	r0, #1
   20428:	d912      	bls.n	20450 <dir_sdi+0x98>
   2042a:	6823      	ldr	r3, [r4, #0]
   2042c:	699b      	ldr	r3, [r3, #24]
   2042e:	4298      	cmp	r0, r3
   20430:	d210      	bcs.n	20454 <dir_sdi+0x9c>
   20432:	1bab      	subs	r3, r5, r6
   20434:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   20436:	42b5      	cmp	r5, r6
   20438:	d2ef      	bcs.n	2041a <dir_sdi+0x62>
		dj->clust = clst;
   2043a:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2043c:	6820      	ldr	r0, [r4, #0]
   2043e:	4b07      	ldr	r3, [pc, #28]	; (2045c <dir_sdi+0xa4>)
   20440:	4798      	blx	r3
   20442:	092b      	lsrs	r3, r5, #4
   20444:	b29b      	uxth	r3, r3
   20446:	1818      	adds	r0, r3, r0
   20448:	6120      	str	r0, [r4, #16]
   2044a:	e7d2      	b.n	203f2 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2044c:	2001      	movs	r0, #1
   2044e:	e7bf      	b.n	203d0 <dir_sdi+0x18>
				return FR_INT_ERR;
   20450:	2002      	movs	r0, #2
   20452:	e7bd      	b.n	203d0 <dir_sdi+0x18>
   20454:	2002      	movs	r0, #2
   20456:	e7bb      	b.n	203d0 <dir_sdi+0x18>
   20458:	000202bd 	.word	0x000202bd
   2045c:	0001fd63 	.word	0x0001fd63

00020460 <put_fat>:
{
   20460:	b5f0      	push	{r4, r5, r6, r7, lr}
   20462:	46c6      	mov	lr, r8
   20464:	b500      	push	{lr}
   20466:	0007      	movs	r7, r0
   20468:	000c      	movs	r4, r1
   2046a:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   2046c:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2046e:	2901      	cmp	r1, #1
   20470:	d902      	bls.n	20478 <put_fat+0x18>
   20472:	6983      	ldr	r3, [r0, #24]
   20474:	4299      	cmp	r1, r3
   20476:	d303      	bcc.n	20480 <put_fat+0x20>
}
   20478:	0028      	movs	r0, r5
   2047a:	bc04      	pop	{r2}
   2047c:	4690      	mov	r8, r2
   2047e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   20480:	7803      	ldrb	r3, [r0, #0]
   20482:	2b02      	cmp	r3, #2
   20484:	d053      	beq.n	2052e <put_fat+0xce>
   20486:	2b03      	cmp	r3, #3
   20488:	d063      	beq.n	20552 <put_fat+0xf2>
			res = FR_INT_ERR;
   2048a:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   2048c:	2b01      	cmp	r3, #1
   2048e:	d002      	beq.n	20496 <put_fat+0x36>
		fs->wflag = 1;
   20490:	2301      	movs	r3, #1
   20492:	713b      	strb	r3, [r7, #4]
   20494:	e7f0      	b.n	20478 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   20496:	084b      	lsrs	r3, r1, #1
   20498:	4698      	mov	r8, r3
   2049a:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2049c:	4643      	mov	r3, r8
   2049e:	0a59      	lsrs	r1, r3, #9
   204a0:	6a03      	ldr	r3, [r0, #32]
   204a2:	469c      	mov	ip, r3
   204a4:	4461      	add	r1, ip
   204a6:	4b3b      	ldr	r3, [pc, #236]	; (20594 <put_fat+0x134>)
   204a8:	4798      	blx	r3
   204aa:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   204ac:	d1f0      	bne.n	20490 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   204ae:	4643      	mov	r3, r8
   204b0:	05db      	lsls	r3, r3, #23
   204b2:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   204b4:	07e2      	lsls	r2, r4, #31
   204b6:	d51f      	bpl.n	204f8 <put_fat+0x98>
   204b8:	18fb      	adds	r3, r7, r3
   204ba:	3330      	adds	r3, #48	; 0x30
   204bc:	7819      	ldrb	r1, [r3, #0]
   204be:	220f      	movs	r2, #15
   204c0:	400a      	ands	r2, r1
   204c2:	0131      	lsls	r1, r6, #4
   204c4:	20ff      	movs	r0, #255	; 0xff
   204c6:	0100      	lsls	r0, r0, #4
   204c8:	4001      	ands	r1, r0
   204ca:	430a      	orrs	r2, r1
   204cc:	701a      	strb	r2, [r3, #0]
			bc++;
   204ce:	4644      	mov	r4, r8
   204d0:	3401      	adds	r4, #1
			fs->wflag = 1;
   204d2:	2301      	movs	r3, #1
   204d4:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   204d6:	0a61      	lsrs	r1, r4, #9
   204d8:	6a3b      	ldr	r3, [r7, #32]
   204da:	469c      	mov	ip, r3
   204dc:	4461      	add	r1, ip
   204de:	0038      	movs	r0, r7
   204e0:	4b2c      	ldr	r3, [pc, #176]	; (20594 <put_fat+0x134>)
   204e2:	4798      	blx	r3
			if (res != FR_OK) break;
   204e4:	2800      	cmp	r0, #0
   204e6:	d151      	bne.n	2058c <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   204e8:	05e4      	lsls	r4, r4, #23
   204ea:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   204ec:	0936      	lsrs	r6, r6, #4
   204ee:	b2f6      	uxtb	r6, r6
   204f0:	193c      	adds	r4, r7, r4
   204f2:	3430      	adds	r4, #48	; 0x30
   204f4:	7026      	strb	r6, [r4, #0]
			break;
   204f6:	e7cb      	b.n	20490 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   204f8:	18fb      	adds	r3, r7, r3
   204fa:	3330      	adds	r3, #48	; 0x30
   204fc:	701e      	strb	r6, [r3, #0]
			bc++;
   204fe:	4644      	mov	r4, r8
   20500:	3401      	adds	r4, #1
			fs->wflag = 1;
   20502:	2301      	movs	r3, #1
   20504:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   20506:	0a61      	lsrs	r1, r4, #9
   20508:	6a3b      	ldr	r3, [r7, #32]
   2050a:	469c      	mov	ip, r3
   2050c:	4461      	add	r1, ip
   2050e:	0038      	movs	r0, r7
   20510:	4b20      	ldr	r3, [pc, #128]	; (20594 <put_fat+0x134>)
   20512:	4798      	blx	r3
			if (res != FR_OK) break;
   20514:	2800      	cmp	r0, #0
   20516:	d13b      	bne.n	20590 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   20518:	05e4      	lsls	r4, r4, #23
   2051a:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2051c:	193b      	adds	r3, r7, r4
   2051e:	3330      	adds	r3, #48	; 0x30
   20520:	781b      	ldrb	r3, [r3, #0]
   20522:	220f      	movs	r2, #15
   20524:	4393      	bics	r3, r2
   20526:	0536      	lsls	r6, r6, #20
   20528:	0f36      	lsrs	r6, r6, #28
   2052a:	431e      	orrs	r6, r3
   2052c:	e7e0      	b.n	204f0 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2052e:	0a09      	lsrs	r1, r1, #8
   20530:	6a03      	ldr	r3, [r0, #32]
   20532:	469c      	mov	ip, r3
   20534:	4461      	add	r1, ip
   20536:	4b17      	ldr	r3, [pc, #92]	; (20594 <put_fat+0x134>)
   20538:	4798      	blx	r3
   2053a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   2053c:	d1a8      	bne.n	20490 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   2053e:	0063      	lsls	r3, r4, #1
   20540:	24ff      	movs	r4, #255	; 0xff
   20542:	0064      	lsls	r4, r4, #1
   20544:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   20546:	18fb      	adds	r3, r7, r3
   20548:	3330      	adds	r3, #48	; 0x30
   2054a:	701e      	strb	r6, [r3, #0]
   2054c:	0a36      	lsrs	r6, r6, #8
   2054e:	705e      	strb	r6, [r3, #1]
			break;
   20550:	e79e      	b.n	20490 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   20552:	09c9      	lsrs	r1, r1, #7
   20554:	6a03      	ldr	r3, [r0, #32]
   20556:	469c      	mov	ip, r3
   20558:	4461      	add	r1, ip
   2055a:	4b0e      	ldr	r3, [pc, #56]	; (20594 <put_fat+0x134>)
   2055c:	4798      	blx	r3
   2055e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   20560:	d196      	bne.n	20490 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   20562:	00a4      	lsls	r4, r4, #2
   20564:	23fe      	movs	r3, #254	; 0xfe
   20566:	005b      	lsls	r3, r3, #1
   20568:	401c      	ands	r4, r3
   2056a:	0022      	movs	r2, r4
   2056c:	3230      	adds	r2, #48	; 0x30
   2056e:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   20570:	78d3      	ldrb	r3, [r2, #3]
   20572:	193c      	adds	r4, r7, r4
   20574:	3430      	adds	r4, #48	; 0x30
   20576:	091b      	lsrs	r3, r3, #4
   20578:	071b      	lsls	r3, r3, #28
   2057a:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   2057c:	7026      	strb	r6, [r4, #0]
   2057e:	0a33      	lsrs	r3, r6, #8
   20580:	7053      	strb	r3, [r2, #1]
   20582:	0c33      	lsrs	r3, r6, #16
   20584:	7093      	strb	r3, [r2, #2]
   20586:	0e36      	lsrs	r6, r6, #24
   20588:	70d6      	strb	r6, [r2, #3]
			break;
   2058a:	e781      	b.n	20490 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2058c:	0005      	movs	r5, r0
   2058e:	e77f      	b.n	20490 <put_fat+0x30>
   20590:	0005      	movs	r5, r0
   20592:	e77d      	b.n	20490 <put_fat+0x30>
   20594:	0002021d 	.word	0x0002021d

00020598 <create_chain>:
{
   20598:	b5f0      	push	{r4, r5, r6, r7, lr}
   2059a:	46c6      	mov	lr, r8
   2059c:	b500      	push	{lr}
   2059e:	0005      	movs	r5, r0
   205a0:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   205a2:	2900      	cmp	r1, #0
   205a4:	d107      	bne.n	205b6 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   205a6:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   205a8:	2e00      	cmp	r6, #0
   205aa:	d00d      	beq.n	205c8 <create_chain+0x30>
   205ac:	6983      	ldr	r3, [r0, #24]
   205ae:	429e      	cmp	r6, r3
   205b0:	d30b      	bcc.n	205ca <create_chain+0x32>
   205b2:	2601      	movs	r6, #1
   205b4:	e009      	b.n	205ca <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   205b6:	4b26      	ldr	r3, [pc, #152]	; (20650 <create_chain+0xb8>)
   205b8:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   205ba:	2801      	cmp	r0, #1
   205bc:	d93d      	bls.n	2063a <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   205be:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   205c0:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   205c2:	4298      	cmp	r0, r3
   205c4:	d201      	bcs.n	205ca <create_chain+0x32>
   205c6:	e03d      	b.n	20644 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   205c8:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   205ca:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   205cc:	4f20      	ldr	r7, [pc, #128]	; (20650 <create_chain+0xb8>)
   205ce:	e00a      	b.n	205e6 <create_chain+0x4e>
   205d0:	0021      	movs	r1, r4
   205d2:	0028      	movs	r0, r5
   205d4:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   205d6:	2800      	cmp	r0, #0
   205d8:	d00d      	beq.n	205f6 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   205da:	1c43      	adds	r3, r0, #1
   205dc:	d032      	beq.n	20644 <create_chain+0xac>
   205de:	2801      	cmp	r0, #1
   205e0:	d030      	beq.n	20644 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   205e2:	42b4      	cmp	r4, r6
   205e4:	d02d      	beq.n	20642 <create_chain+0xaa>
		ncl++;							/* Next cluster */
   205e6:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   205e8:	69ab      	ldr	r3, [r5, #24]
   205ea:	429c      	cmp	r4, r3
   205ec:	d3f0      	bcc.n	205d0 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   205ee:	2e01      	cmp	r6, #1
   205f0:	d925      	bls.n	2063e <create_chain+0xa6>
			ncl = 2;
   205f2:	2402      	movs	r4, #2
   205f4:	e7ec      	b.n	205d0 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   205f6:	4a17      	ldr	r2, [pc, #92]	; (20654 <create_chain+0xbc>)
   205f8:	0021      	movs	r1, r4
   205fa:	0028      	movs	r0, r5
   205fc:	4b16      	ldr	r3, [pc, #88]	; (20658 <create_chain+0xc0>)
   205fe:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   20600:	2800      	cmp	r0, #0
   20602:	d113      	bne.n	2062c <create_chain+0x94>
   20604:	4643      	mov	r3, r8
   20606:	2b00      	cmp	r3, #0
   20608:	d109      	bne.n	2061e <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   2060a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2060c:	692b      	ldr	r3, [r5, #16]
   2060e:	1c5a      	adds	r2, r3, #1
   20610:	d01b      	beq.n	2064a <create_chain+0xb2>
			fs->free_clust--;
   20612:	3b01      	subs	r3, #1
   20614:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   20616:	2301      	movs	r3, #1
   20618:	716b      	strb	r3, [r5, #5]
   2061a:	0020      	movs	r0, r4
   2061c:	e012      	b.n	20644 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2061e:	0022      	movs	r2, r4
   20620:	4641      	mov	r1, r8
   20622:	0028      	movs	r0, r5
   20624:	4b0c      	ldr	r3, [pc, #48]	; (20658 <create_chain+0xc0>)
   20626:	4798      	blx	r3
	if (res == FR_OK) {
   20628:	2800      	cmp	r0, #0
   2062a:	d0ee      	beq.n	2060a <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2062c:	3801      	subs	r0, #1
   2062e:	4242      	negs	r2, r0
   20630:	4142      	adcs	r2, r0
   20632:	4250      	negs	r0, r2
   20634:	2301      	movs	r3, #1
   20636:	4318      	orrs	r0, r3
   20638:	e004      	b.n	20644 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2063a:	2001      	movs	r0, #1
   2063c:	e002      	b.n	20644 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   2063e:	2000      	movs	r0, #0
   20640:	e000      	b.n	20644 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   20642:	2000      	movs	r0, #0
}
   20644:	bc04      	pop	{r2}
   20646:	4690      	mov	r8, r2
   20648:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2064a:	0020      	movs	r0, r4
   2064c:	e7fa      	b.n	20644 <create_chain+0xac>
   2064e:	46c0      	nop			; (mov r8, r8)
   20650:	000202bd 	.word	0x000202bd
   20654:	0fffffff 	.word	0x0fffffff
   20658:	00020461 	.word	0x00020461

0002065c <remove_chain>:
{
   2065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2065e:	46ce      	mov	lr, r9
   20660:	4647      	mov	r7, r8
   20662:	b580      	push	{r7, lr}
   20664:	0004      	movs	r4, r0
   20666:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   20668:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2066a:	2901      	cmp	r1, #1
   2066c:	d902      	bls.n	20674 <remove_chain+0x18>
   2066e:	69a3      	ldr	r3, [r4, #24]
   20670:	4299      	cmp	r1, r3
   20672:	d303      	bcc.n	2067c <remove_chain+0x20>
}
   20674:	bc0c      	pop	{r2, r3}
   20676:	4690      	mov	r8, r2
   20678:	4699      	mov	r9, r3
   2067a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2067c:	4f13      	ldr	r7, [pc, #76]	; (206cc <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2067e:	4b14      	ldr	r3, [pc, #80]	; (206d0 <remove_chain+0x74>)
   20680:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   20682:	2301      	movs	r3, #1
   20684:	4699      	mov	r9, r3
   20686:	e003      	b.n	20690 <remove_chain+0x34>
   20688:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2068a:	69a3      	ldr	r3, [r4, #24]
   2068c:	42b3      	cmp	r3, r6
   2068e:	d9f1      	bls.n	20674 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   20690:	0029      	movs	r1, r5
   20692:	0020      	movs	r0, r4
   20694:	47b8      	blx	r7
   20696:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   20698:	d011      	beq.n	206be <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2069a:	2801      	cmp	r0, #1
   2069c:	d011      	beq.n	206c2 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2069e:	1c43      	adds	r3, r0, #1
   206a0:	d011      	beq.n	206c6 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   206a2:	2200      	movs	r2, #0
   206a4:	0029      	movs	r1, r5
   206a6:	0020      	movs	r0, r4
   206a8:	47c0      	blx	r8
			if (res != FR_OK) break;
   206aa:	2800      	cmp	r0, #0
   206ac:	d1e2      	bne.n	20674 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   206ae:	6923      	ldr	r3, [r4, #16]
   206b0:	1c5a      	adds	r2, r3, #1
   206b2:	d0e9      	beq.n	20688 <remove_chain+0x2c>
				fs->free_clust++;
   206b4:	3301      	adds	r3, #1
   206b6:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   206b8:	464b      	mov	r3, r9
   206ba:	7163      	strb	r3, [r4, #5]
   206bc:	e7e4      	b.n	20688 <remove_chain+0x2c>
   206be:	2000      	movs	r0, #0
   206c0:	e7d8      	b.n	20674 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   206c2:	2002      	movs	r0, #2
   206c4:	e7d6      	b.n	20674 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   206c6:	2001      	movs	r0, #1
   206c8:	e7d4      	b.n	20674 <remove_chain+0x18>
   206ca:	46c0      	nop			; (mov r8, r8)
   206cc:	000202bd 	.word	0x000202bd
   206d0:	00020461 	.word	0x00020461

000206d4 <dir_next>:
{
   206d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   206d6:	46d6      	mov	lr, sl
   206d8:	4647      	mov	r7, r8
   206da:	b580      	push	{r7, lr}
   206dc:	0006      	movs	r6, r0
   206de:	000d      	movs	r5, r1
	i = dj->index + 1;
   206e0:	88c4      	ldrh	r4, [r0, #6]
   206e2:	3401      	adds	r4, #1
   206e4:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   206e6:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   206e8:	2c00      	cmp	r4, #0
   206ea:	d103      	bne.n	206f4 <dir_next+0x20>
}
   206ec:	bc0c      	pop	{r2, r3}
   206ee:	4690      	mov	r8, r2
   206f0:	469a      	mov	sl, r3
   206f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   206f4:	6933      	ldr	r3, [r6, #16]
   206f6:	2b00      	cmp	r3, #0
   206f8:	d0f8      	beq.n	206ec <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   206fa:	270f      	movs	r7, #15
   206fc:	4027      	ands	r7, r4
   206fe:	d10f      	bne.n	20720 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   20700:	3301      	adds	r3, #1
   20702:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   20704:	68f1      	ldr	r1, [r6, #12]
   20706:	2900      	cmp	r1, #0
   20708:	d104      	bne.n	20714 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2070a:	6833      	ldr	r3, [r6, #0]
   2070c:	891b      	ldrh	r3, [r3, #8]
   2070e:	42a3      	cmp	r3, r4
   20710:	d9ec      	bls.n	206ec <dir_next+0x18>
   20712:	e005      	b.n	20720 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   20714:	6830      	ldr	r0, [r6, #0]
   20716:	7883      	ldrb	r3, [r0, #2]
   20718:	3b01      	subs	r3, #1
   2071a:	0922      	lsrs	r2, r4, #4
   2071c:	421a      	tst	r2, r3
   2071e:	d007      	beq.n	20730 <dir_next+0x5c>
	dj->index = i;
   20720:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   20722:	6833      	ldr	r3, [r6, #0]
   20724:	3330      	adds	r3, #48	; 0x30
   20726:	017f      	lsls	r7, r7, #5
   20728:	19df      	adds	r7, r3, r7
   2072a:	6177      	str	r7, [r6, #20]
	return FR_OK;
   2072c:	2000      	movs	r0, #0
   2072e:	e7dd      	b.n	206ec <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   20730:	4b2c      	ldr	r3, [pc, #176]	; (207e4 <dir_next+0x110>)
   20732:	4798      	blx	r3
   20734:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   20736:	2002      	movs	r0, #2
   20738:	4643      	mov	r3, r8
   2073a:	2b01      	cmp	r3, #1
   2073c:	d9d6      	bls.n	206ec <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2073e:	3301      	adds	r3, #1
   20740:	d04b      	beq.n	207da <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   20742:	6833      	ldr	r3, [r6, #0]
   20744:	699a      	ldr	r2, [r3, #24]
   20746:	4590      	cmp	r8, r2
   20748:	d33f      	bcc.n	207ca <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2074a:	3002      	adds	r0, #2
   2074c:	2d00      	cmp	r5, #0
   2074e:	d0cd      	beq.n	206ec <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   20750:	68f1      	ldr	r1, [r6, #12]
   20752:	0018      	movs	r0, r3
   20754:	4b24      	ldr	r3, [pc, #144]	; (207e8 <dir_next+0x114>)
   20756:	4798      	blx	r3
   20758:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2075a:	2007      	movs	r0, #7
   2075c:	4643      	mov	r3, r8
   2075e:	2b00      	cmp	r3, #0
   20760:	d0c4      	beq.n	206ec <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   20762:	3805      	subs	r0, #5
   20764:	2b01      	cmp	r3, #1
   20766:	d0c1      	beq.n	206ec <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   20768:	3801      	subs	r0, #1
   2076a:	3301      	adds	r3, #1
   2076c:	d0be      	beq.n	206ec <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2076e:	2100      	movs	r1, #0
   20770:	6830      	ldr	r0, [r6, #0]
   20772:	4b1e      	ldr	r3, [pc, #120]	; (207ec <dir_next+0x118>)
   20774:	4798      	blx	r3
   20776:	0003      	movs	r3, r0
   20778:	2001      	movs	r0, #1
   2077a:	2b00      	cmp	r3, #0
   2077c:	d1b6      	bne.n	206ec <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2077e:	6830      	ldr	r0, [r6, #0]
   20780:	3030      	adds	r0, #48	; 0x30
   20782:	2280      	movs	r2, #128	; 0x80
   20784:	0092      	lsls	r2, r2, #2
   20786:	2100      	movs	r1, #0
   20788:	4b19      	ldr	r3, [pc, #100]	; (207f0 <dir_next+0x11c>)
   2078a:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2078c:	6835      	ldr	r5, [r6, #0]
   2078e:	4641      	mov	r1, r8
   20790:	0028      	movs	r0, r5
   20792:	4b18      	ldr	r3, [pc, #96]	; (207f4 <dir_next+0x120>)
   20794:	4798      	blx	r3
   20796:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   20798:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   2079a:	2301      	movs	r3, #1
   2079c:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2079e:	6833      	ldr	r3, [r6, #0]
   207a0:	789a      	ldrb	r2, [r3, #2]
   207a2:	42aa      	cmp	r2, r5
   207a4:	d90e      	bls.n	207c4 <dir_next+0xf0>
						dj->fs->wflag = 1;
   207a6:	4652      	mov	r2, sl
   207a8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   207aa:	2100      	movs	r1, #0
   207ac:	6830      	ldr	r0, [r6, #0]
   207ae:	4b0f      	ldr	r3, [pc, #60]	; (207ec <dir_next+0x118>)
   207b0:	4798      	blx	r3
   207b2:	2800      	cmp	r0, #0
   207b4:	d113      	bne.n	207de <dir_next+0x10a>
						dj->fs->winsect++;
   207b6:	6832      	ldr	r2, [r6, #0]
   207b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   207ba:	3301      	adds	r3, #1
   207bc:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   207be:	3501      	adds	r5, #1
   207c0:	b2ed      	uxtb	r5, r5
   207c2:	e7ec      	b.n	2079e <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   207c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   207c6:	1b52      	subs	r2, r2, r5
   207c8:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   207ca:	4643      	mov	r3, r8
   207cc:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   207ce:	4641      	mov	r1, r8
   207d0:	6830      	ldr	r0, [r6, #0]
   207d2:	4b08      	ldr	r3, [pc, #32]	; (207f4 <dir_next+0x120>)
   207d4:	4798      	blx	r3
   207d6:	6130      	str	r0, [r6, #16]
   207d8:	e7a2      	b.n	20720 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   207da:	2001      	movs	r0, #1
   207dc:	e786      	b.n	206ec <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   207de:	2001      	movs	r0, #1
   207e0:	e784      	b.n	206ec <dir_next+0x18>
   207e2:	46c0      	nop			; (mov r8, r8)
   207e4:	000202bd 	.word	0x000202bd
   207e8:	00020599 	.word	0x00020599
   207ec:	0002021d 	.word	0x0002021d
   207f0:	0001fd51 	.word	0x0001fd51
   207f4:	0001fd63 	.word	0x0001fd63

000207f8 <dir_find>:
{
   207f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   207fa:	46de      	mov	lr, fp
   207fc:	4657      	mov	r7, sl
   207fe:	464e      	mov	r6, r9
   20800:	4645      	mov	r5, r8
   20802:	b5e0      	push	{r5, r6, r7, lr}
   20804:	b083      	sub	sp, #12
   20806:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   20808:	2100      	movs	r1, #0
   2080a:	4b5a      	ldr	r3, [pc, #360]	; (20974 <dir_find+0x17c>)
   2080c:	4798      	blx	r3
   2080e:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   20810:	d000      	beq.n	20814 <dir_find+0x1c>
   20812:	e09e      	b.n	20952 <dir_find+0x15a>
   20814:	23ff      	movs	r3, #255	; 0xff
   20816:	4699      	mov	r9, r3
   20818:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   2081a:	4b57      	ldr	r3, [pc, #348]	; (20978 <dir_find+0x180>)
   2081c:	469b      	mov	fp, r3
   2081e:	e01b      	b.n	20858 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   20820:	2b0f      	cmp	r3, #15
   20822:	d030      	beq.n	20886 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   20824:	4653      	mov	r3, sl
   20826:	2b00      	cmp	r3, #0
   20828:	d105      	bne.n	20836 <dir_find+0x3e>
   2082a:	0020      	movs	r0, r4
   2082c:	4b53      	ldr	r3, [pc, #332]	; (2097c <dir_find+0x184>)
   2082e:	4798      	blx	r3
   20830:	4581      	cmp	r9, r0
   20832:	d100      	bne.n	20836 <dir_find+0x3e>
   20834:	e08d      	b.n	20952 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   20836:	2301      	movs	r3, #1
   20838:	425b      	negs	r3, r3
   2083a:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2083c:	69a8      	ldr	r0, [r5, #24]
   2083e:	7ac3      	ldrb	r3, [r0, #11]
   20840:	07db      	lsls	r3, r3, #31
   20842:	d400      	bmi.n	20846 <dir_find+0x4e>
   20844:	e07d      	b.n	20942 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   20846:	23ff      	movs	r3, #255	; 0xff
   20848:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   2084a:	2100      	movs	r1, #0
   2084c:	0028      	movs	r0, r5
   2084e:	4b4c      	ldr	r3, [pc, #304]	; (20980 <dir_find+0x188>)
   20850:	4798      	blx	r3
   20852:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   20854:	d000      	beq.n	20858 <dir_find+0x60>
   20856:	e07c      	b.n	20952 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   20858:	6929      	ldr	r1, [r5, #16]
   2085a:	6828      	ldr	r0, [r5, #0]
   2085c:	47d8      	blx	fp
   2085e:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   20860:	d177      	bne.n	20952 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   20862:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   20864:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   20866:	2e00      	cmp	r6, #0
   20868:	d100      	bne.n	2086c <dir_find+0x74>
   2086a:	e080      	b.n	2096e <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   2086c:	7ae2      	ldrb	r2, [r4, #11]
   2086e:	233f      	movs	r3, #63	; 0x3f
   20870:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   20872:	2ee5      	cmp	r6, #229	; 0xe5
   20874:	d100      	bne.n	20878 <dir_find+0x80>
   20876:	e077      	b.n	20968 <dir_find+0x170>
   20878:	0712      	lsls	r2, r2, #28
   2087a:	d5d1      	bpl.n	20820 <dir_find+0x28>
   2087c:	2b0f      	cmp	r3, #15
   2087e:	d002      	beq.n	20886 <dir_find+0x8e>
			ord = 0xFF;
   20880:	23ff      	movs	r3, #255	; 0xff
   20882:	469a      	mov	sl, r3
   20884:	e7e1      	b.n	2084a <dir_find+0x52>
				if (dj->lfn) {
   20886:	69ef      	ldr	r7, [r5, #28]
   20888:	2f00      	cmp	r7, #0
   2088a:	d0de      	beq.n	2084a <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2088c:	0673      	lsls	r3, r6, #25
   2088e:	d518      	bpl.n	208c2 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   20890:	7b63      	ldrb	r3, [r4, #13]
   20892:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   20894:	2340      	movs	r3, #64	; 0x40
   20896:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   20898:	88eb      	ldrh	r3, [r5, #6]
   2089a:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2089c:	7b63      	ldrb	r3, [r4, #13]
   2089e:	9300      	str	r3, [sp, #0]
   208a0:	22ff      	movs	r2, #255	; 0xff
   208a2:	4692      	mov	sl, r2
   208a4:	454b      	cmp	r3, r9
   208a6:	d1d0      	bne.n	2084a <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   208a8:	7823      	ldrb	r3, [r4, #0]
   208aa:	3abf      	subs	r2, #191	; 0xbf
   208ac:	4393      	bics	r3, r2
   208ae:	3b01      	subs	r3, #1
   208b0:	005a      	lsls	r2, r3, #1
   208b2:	18d2      	adds	r2, r2, r3
   208b4:	0092      	lsls	r2, r2, #2
   208b6:	4692      	mov	sl, r2
   208b8:	449a      	add	sl, r3
	s = 0; wc = 1;
   208ba:	2201      	movs	r2, #1
   208bc:	2300      	movs	r3, #0
   208be:	4699      	mov	r9, r3
   208c0:	e01d      	b.n	208fe <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   208c2:	45b2      	cmp	sl, r6
   208c4:	d0ea      	beq.n	2089c <dir_find+0xa4>
   208c6:	23ff      	movs	r3, #255	; 0xff
   208c8:	469a      	mov	sl, r3
   208ca:	e7be      	b.n	2084a <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   208cc:	4b2d      	ldr	r3, [pc, #180]	; (20984 <dir_find+0x18c>)
   208ce:	4798      	blx	r3
   208d0:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   208d2:	4653      	mov	r3, sl
   208d4:	2bfe      	cmp	r3, #254	; 0xfe
   208d6:	d81f      	bhi.n	20918 <dir_find+0x120>
   208d8:	2301      	movs	r3, #1
   208da:	4453      	add	r3, sl
   208dc:	4698      	mov	r8, r3
   208de:	4653      	mov	r3, sl
   208e0:	005b      	lsls	r3, r3, #1
   208e2:	5bd8      	ldrh	r0, [r3, r7]
   208e4:	4b27      	ldr	r3, [pc, #156]	; (20984 <dir_find+0x18c>)
   208e6:	4798      	blx	r3
   208e8:	0002      	movs	r2, r0
   208ea:	9b01      	ldr	r3, [sp, #4]
   208ec:	4283      	cmp	r3, r0
   208ee:	d113      	bne.n	20918 <dir_find+0x120>
   208f0:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   208f2:	2301      	movs	r3, #1
   208f4:	469c      	mov	ip, r3
   208f6:	44e1      	add	r9, ip
   208f8:	464b      	mov	r3, r9
   208fa:	2b0d      	cmp	r3, #13
   208fc:	d011      	beq.n	20922 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   208fe:	4b22      	ldr	r3, [pc, #136]	; (20988 <dir_find+0x190>)
   20900:	4649      	mov	r1, r9
   20902:	5cc9      	ldrb	r1, [r1, r3]
   20904:	1863      	adds	r3, r4, r1
   20906:	785b      	ldrb	r3, [r3, #1]
   20908:	021b      	lsls	r3, r3, #8
   2090a:	5c60      	ldrb	r0, [r4, r1]
   2090c:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   2090e:	2a00      	cmp	r2, #0
   20910:	d1dc      	bne.n	208cc <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   20912:	4b1e      	ldr	r3, [pc, #120]	; (2098c <dir_find+0x194>)
   20914:	4298      	cmp	r0, r3
   20916:	d0ec      	beq.n	208f2 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   20918:	9b00      	ldr	r3, [sp, #0]
   2091a:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2091c:	23ff      	movs	r3, #255	; 0xff
   2091e:	469a      	mov	sl, r3
   20920:	e793      	b.n	2084a <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   20922:	7823      	ldrb	r3, [r4, #0]
   20924:	065b      	lsls	r3, r3, #25
   20926:	d506      	bpl.n	20936 <dir_find+0x13e>
   20928:	2a00      	cmp	r2, #0
   2092a:	d004      	beq.n	20936 <dir_find+0x13e>
   2092c:	4653      	mov	r3, sl
   2092e:	005b      	lsls	r3, r3, #1
   20930:	5bdb      	ldrh	r3, [r3, r7]
   20932:	2b00      	cmp	r3, #0
   20934:	d1f0      	bne.n	20918 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   20936:	3e01      	subs	r6, #1
   20938:	b2f3      	uxtb	r3, r6
   2093a:	469a      	mov	sl, r3
   2093c:	9b00      	ldr	r3, [sp, #0]
   2093e:	4699      	mov	r9, r3
   20940:	e783      	b.n	2084a <dir_find+0x52>
   20942:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   20944:	5ce1      	ldrb	r1, [r4, r3]
   20946:	5cc2      	ldrb	r2, [r0, r3]
   20948:	4291      	cmp	r1, r2
   2094a:	d10a      	bne.n	20962 <dir_find+0x16a>
   2094c:	3301      	adds	r3, #1
   2094e:	2b0b      	cmp	r3, #11
   20950:	d1f8      	bne.n	20944 <dir_find+0x14c>
}
   20952:	0038      	movs	r0, r7
   20954:	b003      	add	sp, #12
   20956:	bc3c      	pop	{r2, r3, r4, r5}
   20958:	4690      	mov	r8, r2
   2095a:	4699      	mov	r9, r3
   2095c:	46a2      	mov	sl, r4
   2095e:	46ab      	mov	fp, r5
   20960:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   20962:	23ff      	movs	r3, #255	; 0xff
   20964:	469a      	mov	sl, r3
   20966:	e770      	b.n	2084a <dir_find+0x52>
			ord = 0xFF;
   20968:	23ff      	movs	r3, #255	; 0xff
   2096a:	469a      	mov	sl, r3
   2096c:	e76d      	b.n	2084a <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2096e:	2704      	movs	r7, #4
   20970:	e7ef      	b.n	20952 <dir_find+0x15a>
   20972:	46c0      	nop			; (mov r8, r8)
   20974:	000203b9 	.word	0x000203b9
   20978:	0002021d 	.word	0x0002021d
   2097c:	0001fd7b 	.word	0x0001fd7b
   20980:	000206d5 	.word	0x000206d5
   20984:	00021589 	.word	0x00021589
   20988:	0002a298 	.word	0x0002a298
   2098c:	0000ffff 	.word	0x0000ffff

00020990 <dir_register>:
{
   20990:	b5f0      	push	{r4, r5, r6, r7, lr}
   20992:	46de      	mov	lr, fp
   20994:	4657      	mov	r7, sl
   20996:	464e      	mov	r6, r9
   20998:	4645      	mov	r5, r8
   2099a:	b5e0      	push	{r5, r6, r7, lr}
   2099c:	b089      	sub	sp, #36	; 0x24
   2099e:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   209a0:	6987      	ldr	r7, [r0, #24]
   209a2:	69c3      	ldr	r3, [r0, #28]
   209a4:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   209a6:	ad05      	add	r5, sp, #20
   209a8:	220c      	movs	r2, #12
   209aa:	0039      	movs	r1, r7
   209ac:	0028      	movs	r0, r5
   209ae:	4ba7      	ldr	r3, [pc, #668]	; (20c4c <dir_register+0x2bc>)
   209b0:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   209b2:	7aeb      	ldrb	r3, [r5, #11]
   209b4:	07db      	lsls	r3, r3, #31
   209b6:	d400      	bmi.n	209ba <dir_register+0x2a>
   209b8:	e070      	b.n	20a9c <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   209ba:	2300      	movs	r3, #0
   209bc:	72fb      	strb	r3, [r7, #11]
   209be:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   209c0:	220b      	movs	r2, #11
   209c2:	a905      	add	r1, sp, #20
   209c4:	0038      	movs	r0, r7
   209c6:	4ba1      	ldr	r3, [pc, #644]	; (20c4c <dir_register+0x2bc>)
   209c8:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   209ca:	2301      	movs	r3, #1
		ns[i--] = c;
   209cc:	ad03      	add	r5, sp, #12
   209ce:	001e      	movs	r6, r3
   209d0:	46a0      	mov	r8, r4
   209d2:	e049      	b.n	20a68 <dir_register+0xd8>
   209d4:	3801      	subs	r0, #1
   209d6:	1829      	adds	r1, r5, r0
   209d8:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   209da:	091b      	lsrs	r3, r3, #4
   209dc:	b29b      	uxth	r3, r3
	} while (seq);
   209de:	2b00      	cmp	r3, #0
   209e0:	d007      	beq.n	209f2 <dir_register+0x62>
		c = (seq % 16) + '0';
   209e2:	0021      	movs	r1, r4
   209e4:	4019      	ands	r1, r3
   209e6:	000a      	movs	r2, r1
   209e8:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   209ea:	2a39      	cmp	r2, #57	; 0x39
   209ec:	d9f2      	bls.n	209d4 <dir_register+0x44>
   209ee:	3207      	adds	r2, #7
   209f0:	e7f0      	b.n	209d4 <dir_register+0x44>
	ns[i] = '~';
   209f2:	337e      	adds	r3, #126	; 0x7e
   209f4:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   209f6:	2800      	cmp	r0, #0
   209f8:	d00a      	beq.n	20a10 <dir_register+0x80>
   209fa:	783b      	ldrb	r3, [r7, #0]
   209fc:	2b20      	cmp	r3, #32
   209fe:	d009      	beq.n	20a14 <dir_register+0x84>
   20a00:	2300      	movs	r3, #0
   20a02:	3301      	adds	r3, #1
   20a04:	4298      	cmp	r0, r3
   20a06:	d007      	beq.n	20a18 <dir_register+0x88>
   20a08:	5cfa      	ldrb	r2, [r7, r3]
   20a0a:	2a20      	cmp	r2, #32
   20a0c:	d1f9      	bne.n	20a02 <dir_register+0x72>
   20a0e:	e009      	b.n	20a24 <dir_register+0x94>
   20a10:	0003      	movs	r3, r0
   20a12:	e007      	b.n	20a24 <dir_register+0x94>
   20a14:	2300      	movs	r3, #0
   20a16:	e005      	b.n	20a24 <dir_register+0x94>
   20a18:	0003      	movs	r3, r0
   20a1a:	e003      	b.n	20a24 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   20a1c:	54fa      	strb	r2, [r7, r3]
   20a1e:	3301      	adds	r3, #1
	} while (j < 8);
   20a20:	2b07      	cmp	r3, #7
   20a22:	d805      	bhi.n	20a30 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   20a24:	2220      	movs	r2, #32
   20a26:	2807      	cmp	r0, #7
   20a28:	d8f8      	bhi.n	20a1c <dir_register+0x8c>
   20a2a:	5c2a      	ldrb	r2, [r5, r0]
   20a2c:	3001      	adds	r0, #1
   20a2e:	e7f5      	b.n	20a1c <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   20a30:	4640      	mov	r0, r8
   20a32:	4b87      	ldr	r3, [pc, #540]	; (20c50 <dir_register+0x2c0>)
   20a34:	4798      	blx	r3
			if (res != FR_OK) break;
   20a36:	2800      	cmp	r0, #0
   20a38:	d11c      	bne.n	20a74 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   20a3a:	3601      	adds	r6, #1
   20a3c:	b2b6      	uxth	r6, r6
   20a3e:	2e64      	cmp	r6, #100	; 0x64
   20a40:	d015      	beq.n	20a6e <dir_register+0xde>
	mem_cpy(dst, src, 11);
   20a42:	220b      	movs	r2, #11
   20a44:	a905      	add	r1, sp, #20
   20a46:	0038      	movs	r0, r7
   20a48:	4b80      	ldr	r3, [pc, #512]	; (20c4c <dir_register+0x2bc>)
   20a4a:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   20a4c:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   20a4e:	2e05      	cmp	r6, #5
   20a50:	d90a      	bls.n	20a68 <dir_register+0xd8>
   20a52:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   20a54:	085a      	lsrs	r2, r3, #1
   20a56:	03db      	lsls	r3, r3, #15
   20a58:	4313      	orrs	r3, r2
   20a5a:	880a      	ldrh	r2, [r1, #0]
   20a5c:	189b      	adds	r3, r3, r2
   20a5e:	b29b      	uxth	r3, r3
   20a60:	3102      	adds	r1, #2
   20a62:	880a      	ldrh	r2, [r1, #0]
   20a64:	2a00      	cmp	r2, #0
   20a66:	d1f5      	bne.n	20a54 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   20a68:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   20a6a:	240f      	movs	r4, #15
   20a6c:	e7b9      	b.n	209e2 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   20a6e:	2307      	movs	r3, #7
   20a70:	4698      	mov	r8, r3
   20a72:	e006      	b.n	20a82 <dir_register+0xf2>
   20a74:	4644      	mov	r4, r8
   20a76:	4680      	mov	r8, r0
   20a78:	2e64      	cmp	r6, #100	; 0x64
   20a7a:	d100      	bne.n	20a7e <dir_register+0xee>
   20a7c:	e0a5      	b.n	20bca <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   20a7e:	2804      	cmp	r0, #4
   20a80:	d007      	beq.n	20a92 <dir_register+0x102>
}
   20a82:	4640      	mov	r0, r8
   20a84:	b009      	add	sp, #36	; 0x24
   20a86:	bc3c      	pop	{r2, r3, r4, r5}
   20a88:	4690      	mov	r8, r2
   20a8a:	4699      	mov	r9, r3
   20a8c:	46a2      	mov	sl, r4
   20a8e:	46ab      	mov	fp, r5
   20a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   20a92:	ab05      	add	r3, sp, #20
   20a94:	7adb      	ldrb	r3, [r3, #11]
   20a96:	72fb      	strb	r3, [r7, #11]
   20a98:	4653      	mov	r3, sl
   20a9a:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   20a9c:	ab05      	add	r3, sp, #20
   20a9e:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   20aa0:	2201      	movs	r2, #1
   20aa2:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   20aa4:	079b      	lsls	r3, r3, #30
   20aa6:	d511      	bpl.n	20acc <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   20aa8:	4653      	mov	r3, sl
   20aaa:	881b      	ldrh	r3, [r3, #0]
   20aac:	2b00      	cmp	r3, #0
   20aae:	d01b      	beq.n	20ae8 <dir_register+0x158>
   20ab0:	2000      	movs	r0, #0
   20ab2:	4652      	mov	r2, sl
   20ab4:	3001      	adds	r0, #1
   20ab6:	b280      	uxth	r0, r0
   20ab8:	0043      	lsls	r3, r0, #1
   20aba:	5a9b      	ldrh	r3, [r3, r2]
   20abc:	2b00      	cmp	r3, #0
   20abe:	d1f9      	bne.n	20ab4 <dir_register+0x124>
		ne = (ne + 25) / 13;
   20ac0:	3019      	adds	r0, #25
   20ac2:	210d      	movs	r1, #13
   20ac4:	4b63      	ldr	r3, [pc, #396]	; (20c54 <dir_register+0x2c4>)
   20ac6:	4798      	blx	r3
   20ac8:	b283      	uxth	r3, r0
   20aca:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   20acc:	2100      	movs	r1, #0
   20ace:	0020      	movs	r0, r4
   20ad0:	4b61      	ldr	r3, [pc, #388]	; (20c58 <dir_register+0x2c8>)
   20ad2:	4798      	blx	r3
   20ad4:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   20ad6:	2800      	cmp	r0, #0
   20ad8:	d1d3      	bne.n	20a82 <dir_register+0xf2>
   20ada:	4682      	mov	sl, r0
   20adc:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   20ade:	4f5f      	ldr	r7, [pc, #380]	; (20c5c <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   20ae0:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   20ae2:	4b5f      	ldr	r3, [pc, #380]	; (20c60 <dir_register+0x2d0>)
   20ae4:	4699      	mov	r9, r3
   20ae6:	e00b      	b.n	20b00 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   20ae8:	2000      	movs	r0, #0
   20aea:	e7e9      	b.n	20ac0 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   20aec:	1c6b      	adds	r3, r5, #1
   20aee:	b29b      	uxth	r3, r3
   20af0:	459b      	cmp	fp, r3
   20af2:	d06d      	beq.n	20bd0 <dir_register+0x240>
   20af4:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   20af6:	2101      	movs	r1, #1
   20af8:	0020      	movs	r0, r4
   20afa:	47c8      	blx	r9
	} while (res == FR_OK);
   20afc:	2800      	cmp	r0, #0
   20afe:	d112      	bne.n	20b26 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   20b00:	6921      	ldr	r1, [r4, #16]
   20b02:	6820      	ldr	r0, [r4, #0]
   20b04:	47b8      	blx	r7
		if (res != FR_OK) break;
   20b06:	2800      	cmp	r0, #0
   20b08:	d000      	beq.n	20b0c <dir_register+0x17c>
   20b0a:	e098      	b.n	20c3e <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   20b0c:	6963      	ldr	r3, [r4, #20]
   20b0e:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   20b10:	2be5      	cmp	r3, #229	; 0xe5
   20b12:	d001      	beq.n	20b18 <dir_register+0x188>
   20b14:	2b00      	cmp	r3, #0
   20b16:	d104      	bne.n	20b22 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   20b18:	2d00      	cmp	r5, #0
   20b1a:	d1e7      	bne.n	20aec <dir_register+0x15c>
   20b1c:	88e3      	ldrh	r3, [r4, #6]
   20b1e:	469a      	mov	sl, r3
   20b20:	e7e4      	b.n	20aec <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   20b22:	0035      	movs	r5, r6
   20b24:	e7e7      	b.n	20af6 <dir_register+0x166>
   20b26:	4680      	mov	r8, r0
   20b28:	e7ab      	b.n	20a82 <dir_register+0xf2>
		res = dir_sdi(dj, is);
   20b2a:	4651      	mov	r1, sl
   20b2c:	0020      	movs	r0, r4
   20b2e:	4b4a      	ldr	r3, [pc, #296]	; (20c58 <dir_register+0x2c8>)
   20b30:	4798      	blx	r3
   20b32:	4680      	mov	r8, r0
		if (res == FR_OK) {
   20b34:	2800      	cmp	r0, #0
   20b36:	d1a4      	bne.n	20a82 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   20b38:	69a0      	ldr	r0, [r4, #24]
   20b3a:	4b4a      	ldr	r3, [pc, #296]	; (20c64 <dir_register+0x2d4>)
   20b3c:	4798      	blx	r3
   20b3e:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20b40:	46a8      	mov	r8, r5
   20b42:	e01f      	b.n	20b84 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20b44:	0022      	movs	r2, r4
   20b46:	e067      	b.n	20c18 <dir_register+0x288>
   20b48:	465e      	mov	r6, fp
   20b4a:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   20b4c:	4946      	ldr	r1, [pc, #280]	; (20c68 <dir_register+0x2d8>)
   20b4e:	428b      	cmp	r3, r1
   20b50:	d003      	beq.n	20b5a <dir_register+0x1ca>
   20b52:	0052      	lsls	r2, r2, #1
   20b54:	5b93      	ldrh	r3, [r2, r6]
   20b56:	2b00      	cmp	r3, #0
   20b58:	d103      	bne.n	20b62 <dir_register+0x1d2>
   20b5a:	2340      	movs	r3, #64	; 0x40
   20b5c:	464a      	mov	r2, r9
   20b5e:	431a      	orrs	r2, r3
   20b60:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   20b62:	464b      	mov	r3, r9
   20b64:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   20b66:	2301      	movs	r3, #1
   20b68:	6822      	ldr	r2, [r4, #0]
   20b6a:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   20b6c:	2100      	movs	r1, #0
   20b6e:	0020      	movs	r0, r4
   20b70:	4b3b      	ldr	r3, [pc, #236]	; (20c60 <dir_register+0x2d0>)
   20b72:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   20b74:	2800      	cmp	r0, #0
   20b76:	d166      	bne.n	20c46 <dir_register+0x2b6>
   20b78:	4645      	mov	r5, r8
   20b7a:	3d01      	subs	r5, #1
   20b7c:	b2ab      	uxth	r3, r5
   20b7e:	4698      	mov	r8, r3
   20b80:	2b00      	cmp	r3, #0
   20b82:	d027      	beq.n	20bd4 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   20b84:	6921      	ldr	r1, [r4, #16]
   20b86:	6820      	ldr	r0, [r4, #0]
   20b88:	4b34      	ldr	r3, [pc, #208]	; (20c5c <dir_register+0x2cc>)
   20b8a:	4798      	blx	r3
				if (res != FR_OK) break;
   20b8c:	2800      	cmp	r0, #0
   20b8e:	d158      	bne.n	20c42 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   20b90:	69e6      	ldr	r6, [r4, #28]
   20b92:	6960      	ldr	r0, [r4, #20]
   20b94:	4643      	mov	r3, r8
   20b96:	466a      	mov	r2, sp
   20b98:	70d3      	strb	r3, [r2, #3]
   20b9a:	78d3      	ldrb	r3, [r2, #3]
   20b9c:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   20b9e:	7913      	ldrb	r3, [r2, #4]
   20ba0:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   20ba2:	230f      	movs	r3, #15
   20ba4:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   20ba6:	2300      	movs	r3, #0
   20ba8:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   20baa:	7683      	strb	r3, [r0, #26]
   20bac:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   20bae:	464b      	mov	r3, r9
   20bb0:	3b01      	subs	r3, #1
   20bb2:	005a      	lsls	r2, r3, #1
   20bb4:	18d2      	adds	r2, r2, r3
   20bb6:	0092      	lsls	r2, r2, #2
   20bb8:	18d2      	adds	r2, r2, r3
   20bba:	492c      	ldr	r1, [pc, #176]	; (20c6c <dir_register+0x2dc>)
   20bbc:	000d      	movs	r5, r1
   20bbe:	350d      	adds	r5, #13
	s = wc = 0;
   20bc0:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20bc2:	4f29      	ldr	r7, [pc, #164]	; (20c68 <dir_register+0x2d8>)
   20bc4:	46b3      	mov	fp, r6
   20bc6:	46a4      	mov	ip, r4
   20bc8:	e029      	b.n	20c1e <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   20bca:	2307      	movs	r3, #7
   20bcc:	4698      	mov	r8, r3
   20bce:	e758      	b.n	20a82 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   20bd0:	2b01      	cmp	r3, #1
   20bd2:	d8aa      	bhi.n	20b2a <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   20bd4:	6921      	ldr	r1, [r4, #16]
   20bd6:	6820      	ldr	r0, [r4, #0]
   20bd8:	4b20      	ldr	r3, [pc, #128]	; (20c5c <dir_register+0x2cc>)
   20bda:	4798      	blx	r3
   20bdc:	4680      	mov	r8, r0
		if (res == FR_OK) {
   20bde:	2800      	cmp	r0, #0
   20be0:	d000      	beq.n	20be4 <dir_register+0x254>
   20be2:	e74e      	b.n	20a82 <dir_register+0xf2>
			dir = dj->dir;
   20be4:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   20be6:	2220      	movs	r2, #32
   20be8:	2100      	movs	r1, #0
   20bea:	0028      	movs	r0, r5
   20bec:	4b20      	ldr	r3, [pc, #128]	; (20c70 <dir_register+0x2e0>)
   20bee:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   20bf0:	220b      	movs	r2, #11
   20bf2:	69a1      	ldr	r1, [r4, #24]
   20bf4:	0028      	movs	r0, r5
   20bf6:	4b15      	ldr	r3, [pc, #84]	; (20c4c <dir_register+0x2bc>)
   20bf8:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   20bfa:	69a3      	ldr	r3, [r4, #24]
   20bfc:	7ada      	ldrb	r2, [r3, #11]
   20bfe:	2318      	movs	r3, #24
   20c00:	4013      	ands	r3, r2
   20c02:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   20c04:	6823      	ldr	r3, [r4, #0]
   20c06:	2201      	movs	r2, #1
   20c08:	711a      	strb	r2, [r3, #4]
   20c0a:	e73a      	b.n	20a82 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20c0c:	780c      	ldrb	r4, [r1, #0]
   20c0e:	26ff      	movs	r6, #255	; 0xff
   20c10:	5506      	strb	r6, [r0, r4]
   20c12:	1904      	adds	r4, r0, r4
   20c14:	26ff      	movs	r6, #255	; 0xff
   20c16:	7066      	strb	r6, [r4, #1]
   20c18:	3101      	adds	r1, #1
	} while (++s < 13);
   20c1a:	42a9      	cmp	r1, r5
   20c1c:	d094      	beq.n	20b48 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20c1e:	42bb      	cmp	r3, r7
   20c20:	d0f4      	beq.n	20c0c <dir_register+0x27c>
   20c22:	1c54      	adds	r4, r2, #1
   20c24:	0052      	lsls	r2, r2, #1
   20c26:	465b      	mov	r3, fp
   20c28:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   20c2a:	780a      	ldrb	r2, [r1, #0]
   20c2c:	5483      	strb	r3, [r0, r2]
   20c2e:	1882      	adds	r2, r0, r2
   20c30:	0a1e      	lsrs	r6, r3, #8
   20c32:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   20c34:	2b00      	cmp	r3, #0
   20c36:	d185      	bne.n	20b44 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   20c38:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   20c3a:	003b      	movs	r3, r7
   20c3c:	e7ec      	b.n	20c18 <dir_register+0x288>
   20c3e:	4680      	mov	r8, r0
   20c40:	e71f      	b.n	20a82 <dir_register+0xf2>
   20c42:	4680      	mov	r8, r0
   20c44:	e71d      	b.n	20a82 <dir_register+0xf2>
   20c46:	4680      	mov	r8, r0
   20c48:	e71b      	b.n	20a82 <dir_register+0xf2>
   20c4a:	46c0      	nop			; (mov r8, r8)
   20c4c:	0001fd3d 	.word	0x0001fd3d
   20c50:	000207f9 	.word	0x000207f9
   20c54:	000240f5 	.word	0x000240f5
   20c58:	000203b9 	.word	0x000203b9
   20c5c:	0002021d 	.word	0x0002021d
   20c60:	000206d5 	.word	0x000206d5
   20c64:	0001fd7b 	.word	0x0001fd7b
   20c68:	0000ffff 	.word	0x0000ffff
   20c6c:	0002a298 	.word	0x0002a298
   20c70:	0001fd51 	.word	0x0001fd51

00020c74 <sync>:
{
   20c74:	b570      	push	{r4, r5, r6, lr}
   20c76:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   20c78:	2100      	movs	r1, #0
   20c7a:	4b2c      	ldr	r3, [pc, #176]	; (20d2c <sync+0xb8>)
   20c7c:	4798      	blx	r3
	if (res == FR_OK) {
   20c7e:	2800      	cmp	r0, #0
   20c80:	d10a      	bne.n	20c98 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   20c82:	7823      	ldrb	r3, [r4, #0]
   20c84:	2b03      	cmp	r3, #3
   20c86:	d008      	beq.n	20c9a <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   20c88:	7860      	ldrb	r0, [r4, #1]
   20c8a:	2200      	movs	r2, #0
   20c8c:	2100      	movs	r1, #0
   20c8e:	4b28      	ldr	r3, [pc, #160]	; (20d30 <sync+0xbc>)
   20c90:	4798      	blx	r3
   20c92:	1e43      	subs	r3, r0, #1
   20c94:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   20c96:	b2c0      	uxtb	r0, r0
}
   20c98:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   20c9a:	7963      	ldrb	r3, [r4, #5]
   20c9c:	2b00      	cmp	r3, #0
   20c9e:	d0f3      	beq.n	20c88 <sync+0x14>
			fs->winsect = 0;
   20ca0:	2600      	movs	r6, #0
   20ca2:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   20ca4:	0025      	movs	r5, r4
   20ca6:	3530      	adds	r5, #48	; 0x30
   20ca8:	2280      	movs	r2, #128	; 0x80
   20caa:	0092      	lsls	r2, r2, #2
   20cac:	2100      	movs	r1, #0
   20cae:	0028      	movs	r0, r5
   20cb0:	4b20      	ldr	r3, [pc, #128]	; (20d34 <sync+0xc0>)
   20cb2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   20cb4:	2255      	movs	r2, #85	; 0x55
   20cb6:	4b20      	ldr	r3, [pc, #128]	; (20d38 <sync+0xc4>)
   20cb8:	54e2      	strb	r2, [r4, r3]
   20cba:	3255      	adds	r2, #85	; 0x55
   20cbc:	4b1f      	ldr	r3, [pc, #124]	; (20d3c <sync+0xc8>)
   20cbe:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   20cc0:	3bde      	subs	r3, #222	; 0xde
   20cc2:	3bff      	subs	r3, #255	; 0xff
   20cc4:	3a7a      	subs	r2, #122	; 0x7a
   20cc6:	54a3      	strb	r3, [r4, r2]
   20cc8:	3201      	adds	r2, #1
   20cca:	54a3      	strb	r3, [r4, r2]
   20ccc:	330f      	adds	r3, #15
   20cce:	3201      	adds	r2, #1
   20cd0:	54a3      	strb	r3, [r4, r2]
   20cd2:	320f      	adds	r2, #15
   20cd4:	2133      	movs	r1, #51	; 0x33
   20cd6:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   20cd8:	313f      	adds	r1, #63	; 0x3f
   20cda:	2085      	movs	r0, #133	; 0x85
   20cdc:	0080      	lsls	r0, r0, #2
   20cde:	5421      	strb	r1, [r4, r0]
   20ce0:	4817      	ldr	r0, [pc, #92]	; (20d40 <sync+0xcc>)
   20ce2:	5421      	strb	r1, [r4, r0]
   20ce4:	4917      	ldr	r1, [pc, #92]	; (20d44 <sync+0xd0>)
   20ce6:	5462      	strb	r2, [r4, r1]
   20ce8:	4a17      	ldr	r2, [pc, #92]	; (20d48 <sync+0xd4>)
   20cea:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   20cec:	6923      	ldr	r3, [r4, #16]
   20cee:	3201      	adds	r2, #1
   20cf0:	54a3      	strb	r3, [r4, r2]
   20cf2:	0a19      	lsrs	r1, r3, #8
   20cf4:	4a15      	ldr	r2, [pc, #84]	; (20d4c <sync+0xd8>)
   20cf6:	54a1      	strb	r1, [r4, r2]
   20cf8:	0c19      	lsrs	r1, r3, #16
   20cfa:	4a15      	ldr	r2, [pc, #84]	; (20d50 <sync+0xdc>)
   20cfc:	54a1      	strb	r1, [r4, r2]
   20cfe:	0e1b      	lsrs	r3, r3, #24
   20d00:	4a14      	ldr	r2, [pc, #80]	; (20d54 <sync+0xe0>)
   20d02:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   20d04:	68e3      	ldr	r3, [r4, #12]
   20d06:	3201      	adds	r2, #1
   20d08:	54a3      	strb	r3, [r4, r2]
   20d0a:	0a19      	lsrs	r1, r3, #8
   20d0c:	4a12      	ldr	r2, [pc, #72]	; (20d58 <sync+0xe4>)
   20d0e:	54a1      	strb	r1, [r4, r2]
   20d10:	0c19      	lsrs	r1, r3, #16
   20d12:	4a12      	ldr	r2, [pc, #72]	; (20d5c <sync+0xe8>)
   20d14:	54a1      	strb	r1, [r4, r2]
   20d16:	0e1b      	lsrs	r3, r3, #24
   20d18:	4a11      	ldr	r2, [pc, #68]	; (20d60 <sync+0xec>)
   20d1a:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   20d1c:	7860      	ldrb	r0, [r4, #1]
   20d1e:	2301      	movs	r3, #1
   20d20:	6962      	ldr	r2, [r4, #20]
   20d22:	0029      	movs	r1, r5
   20d24:	4d0f      	ldr	r5, [pc, #60]	; (20d64 <sync+0xf0>)
   20d26:	47a8      	blx	r5
			fs->fsi_flag = 0;
   20d28:	7166      	strb	r6, [r4, #5]
   20d2a:	e7ad      	b.n	20c88 <sync+0x14>
   20d2c:	0002021d 	.word	0x0002021d
   20d30:	0001fc81 	.word	0x0001fc81
   20d34:	0001fd51 	.word	0x0001fd51
   20d38:	0000022e 	.word	0x0000022e
   20d3c:	0000022f 	.word	0x0000022f
   20d40:	00000215 	.word	0x00000215
   20d44:	00000216 	.word	0x00000216
   20d48:	00000217 	.word	0x00000217
   20d4c:	00000219 	.word	0x00000219
   20d50:	0000021a 	.word	0x0000021a
   20d54:	0000021b 	.word	0x0000021b
   20d58:	0000021d 	.word	0x0000021d
   20d5c:	0000021e 	.word	0x0000021e
   20d60:	0000021f 	.word	0x0000021f
   20d64:	0001fbfd 	.word	0x0001fbfd

00020d68 <follow_path>:
{
   20d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d6a:	46de      	mov	lr, fp
   20d6c:	4657      	mov	r7, sl
   20d6e:	464e      	mov	r6, r9
   20d70:	4645      	mov	r5, r8
   20d72:	b5e0      	push	{r5, r6, r7, lr}
   20d74:	b083      	sub	sp, #12
   20d76:	4682      	mov	sl, r0
   20d78:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   20d7a:	780b      	ldrb	r3, [r1, #0]
   20d7c:	2b2f      	cmp	r3, #47	; 0x2f
   20d7e:	d00f      	beq.n	20da0 <follow_path+0x38>
   20d80:	2b5c      	cmp	r3, #92	; 0x5c
   20d82:	d00d      	beq.n	20da0 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   20d84:	2300      	movs	r3, #0
   20d86:	4652      	mov	r2, sl
   20d88:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   20d8a:	782b      	ldrb	r3, [r5, #0]
   20d8c:	4657      	mov	r7, sl
   20d8e:	2b1f      	cmp	r3, #31
   20d90:	d809      	bhi.n	20da6 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   20d92:	2100      	movs	r1, #0
   20d94:	4650      	mov	r0, sl
   20d96:	4bb2      	ldr	r3, [pc, #712]	; (21060 <follow_path+0x2f8>)
   20d98:	4798      	blx	r3
		dj->dir = 0;
   20d9a:	2300      	movs	r3, #0
   20d9c:	617b      	str	r3, [r7, #20]
   20d9e:	e13a      	b.n	21016 <follow_path+0x2ae>
		path++;
   20da0:	3501      	adds	r5, #1
   20da2:	e7ef      	b.n	20d84 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   20da4:	3501      	adds	r5, #1
   20da6:	7828      	ldrb	r0, [r5, #0]
   20da8:	282f      	cmp	r0, #47	; 0x2f
   20daa:	d0fb      	beq.n	20da4 <follow_path+0x3c>
   20dac:	285c      	cmp	r0, #92	; 0x5c
   20dae:	d0f9      	beq.n	20da4 <follow_path+0x3c>
	lfn = dj->lfn;
   20db0:	69fb      	ldr	r3, [r7, #28]
   20db2:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   20db4:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   20db6:	281f      	cmp	r0, #31
   20db8:	d800      	bhi.n	20dbc <follow_path+0x54>
   20dba:	e13b      	b.n	21034 <follow_path+0x2cc>
   20dbc:	282f      	cmp	r0, #47	; 0x2f
   20dbe:	d100      	bne.n	20dc2 <follow_path+0x5a>
   20dc0:	e13b      	b.n	2103a <follow_path+0x2d2>
   20dc2:	285c      	cmp	r0, #92	; 0x5c
   20dc4:	d100      	bne.n	20dc8 <follow_path+0x60>
   20dc6:	e13b      	b.n	21040 <follow_path+0x2d8>
   20dc8:	1c6e      	adds	r6, r5, #1
   20dca:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   20dcc:	2380      	movs	r3, #128	; 0x80
   20dce:	005b      	lsls	r3, r3, #1
   20dd0:	4698      	mov	r8, r3
   20dd2:	46bb      	mov	fp, r7
   20dd4:	002b      	movs	r3, r5
   20dd6:	0025      	movs	r5, r4
   20dd8:	0034      	movs	r4, r6
   20dda:	4656      	mov	r6, sl
   20ddc:	4699      	mov	r9, r3
   20dde:	e011      	b.n	20e04 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   20de0:	2b00      	cmp	r3, #0
   20de2:	d135      	bne.n	20e50 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   20de4:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   20de6:	1c6b      	adds	r3, r5, #1
   20de8:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   20dea:	281f      	cmp	r0, #31
   20dec:	d91e      	bls.n	20e2c <follow_path+0xc4>
   20dee:	282f      	cmp	r0, #47	; 0x2f
   20df0:	d100      	bne.n	20df4 <follow_path+0x8c>
   20df2:	e128      	b.n	21046 <follow_path+0x2de>
   20df4:	285c      	cmp	r0, #92	; 0x5c
   20df6:	d100      	bne.n	20dfa <follow_path+0x92>
   20df8:	e142      	b.n	21080 <follow_path+0x318>
   20dfa:	3602      	adds	r6, #2
   20dfc:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   20dfe:	4543      	cmp	r3, r8
   20e00:	d026      	beq.n	20e50 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   20e02:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   20e04:	2101      	movs	r1, #1
   20e06:	4b97      	ldr	r3, [pc, #604]	; (21064 <follow_path+0x2fc>)
   20e08:	4798      	blx	r3
   20e0a:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   20e0c:	d020      	beq.n	20e50 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   20e0e:	287f      	cmp	r0, #127	; 0x7f
   20e10:	d8e8      	bhi.n	20de4 <follow_path+0x7c>
	while (*str && *str != chr) str++;
   20e12:	2822      	cmp	r0, #34	; 0x22
   20e14:	d100      	bne.n	20e18 <follow_path+0xb0>
   20e16:	e0fd      	b.n	21014 <follow_path+0x2ac>
   20e18:	232a      	movs	r3, #42	; 0x2a
   20e1a:	4a93      	ldr	r2, [pc, #588]	; (21068 <follow_path+0x300>)
   20e1c:	b29f      	uxth	r7, r3
   20e1e:	428f      	cmp	r7, r1
   20e20:	d0de      	beq.n	20de0 <follow_path+0x78>
   20e22:	3201      	adds	r2, #1
   20e24:	7813      	ldrb	r3, [r2, #0]
   20e26:	2b00      	cmp	r3, #0
   20e28:	d1f8      	bne.n	20e1c <follow_path+0xb4>
   20e2a:	e7db      	b.n	20de4 <follow_path+0x7c>
   20e2c:	002c      	movs	r4, r5
   20e2e:	465f      	mov	r7, fp
   20e30:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   20e32:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   20e34:	2604      	movs	r6, #4
   20e36:	e10b      	b.n	21050 <follow_path+0x2e8>
		di--;
   20e38:	3c01      	subs	r4, #1
   20e3a:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   20e3c:	2c00      	cmp	r4, #0
   20e3e:	d100      	bne.n	20e42 <follow_path+0xda>
   20e40:	e0e8      	b.n	21014 <follow_path+0x2ac>
		w = lfn[di-1];
   20e42:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   20e44:	2a20      	cmp	r2, #32
   20e46:	d0f7      	beq.n	20e38 <follow_path+0xd0>
   20e48:	2a2e      	cmp	r2, #46	; 0x2e
   20e4a:	d0f5      	beq.n	20e38 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   20e4c:	2c00      	cmp	r4, #0
   20e4e:	d101      	bne.n	20e54 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   20e50:	2006      	movs	r0, #6
	return res;
   20e52:	e0e0      	b.n	21016 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   20e54:	0063      	lsls	r3, r4, #1
   20e56:	4698      	mov	r8, r3
   20e58:	2300      	movs	r3, #0
   20e5a:	4652      	mov	r2, sl
   20e5c:	4641      	mov	r1, r8
   20e5e:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   20e60:	220b      	movs	r2, #11
   20e62:	2120      	movs	r1, #32
   20e64:	69b8      	ldr	r0, [r7, #24]
   20e66:	4b81      	ldr	r3, [pc, #516]	; (2106c <follow_path+0x304>)
   20e68:	4798      	blx	r3
   20e6a:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   20e6c:	2300      	movs	r3, #0
   20e6e:	e001      	b.n	20e74 <follow_path+0x10c>
   20e70:	3301      	adds	r3, #1
   20e72:	3202      	adds	r2, #2
   20e74:	8811      	ldrh	r1, [r2, #0]
   20e76:	2920      	cmp	r1, #32
   20e78:	d0fa      	beq.n	20e70 <follow_path+0x108>
   20e7a:	292e      	cmp	r1, #46	; 0x2e
   20e7c:	d0f8      	beq.n	20e70 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   20e7e:	2b00      	cmp	r3, #0
   20e80:	d001      	beq.n	20e86 <follow_path+0x11e>
   20e82:	2203      	movs	r2, #3
   20e84:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   20e86:	4652      	mov	r2, sl
   20e88:	4442      	add	r2, r8
   20e8a:	3a02      	subs	r2, #2
   20e8c:	8812      	ldrh	r2, [r2, #0]
   20e8e:	2a2e      	cmp	r2, #46	; 0x2e
   20e90:	d009      	beq.n	20ea6 <follow_path+0x13e>
   20e92:	4642      	mov	r2, r8
   20e94:	3a04      	subs	r2, #4
   20e96:	4452      	add	r2, sl
   20e98:	3c01      	subs	r4, #1
   20e9a:	2c00      	cmp	r4, #0
   20e9c:	d003      	beq.n	20ea6 <follow_path+0x13e>
   20e9e:	3a02      	subs	r2, #2
   20ea0:	8851      	ldrh	r1, [r2, #2]
   20ea2:	292e      	cmp	r1, #46	; 0x2e
   20ea4:	d1f8      	bne.n	20e98 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   20ea6:	2208      	movs	r2, #8
   20ea8:	9201      	str	r2, [sp, #4]
   20eaa:	2200      	movs	r2, #0
   20eac:	4693      	mov	fp, r2
   20eae:	4691      	mov	r9, r2
   20eb0:	46a0      	mov	r8, r4
   20eb2:	e006      	b.n	20ec2 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   20eb4:	4544      	cmp	r4, r8
   20eb6:	d100      	bne.n	20eba <follow_path+0x152>
   20eb8:	e0e6      	b.n	21088 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   20eba:	2303      	movs	r3, #3
   20ebc:	431e      	orrs	r6, r3
   20ebe:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   20ec0:	0023      	movs	r3, r4
   20ec2:	1c5c      	adds	r4, r3, #1
   20ec4:	005b      	lsls	r3, r3, #1
   20ec6:	4652      	mov	r2, sl
   20ec8:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   20eca:	2800      	cmp	r0, #0
   20ecc:	d02c      	beq.n	20f28 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   20ece:	2820      	cmp	r0, #32
   20ed0:	d0f3      	beq.n	20eba <follow_path+0x152>
   20ed2:	282e      	cmp	r0, #46	; 0x2e
   20ed4:	d0ee      	beq.n	20eb4 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   20ed6:	9b01      	ldr	r3, [sp, #4]
   20ed8:	459b      	cmp	fp, r3
   20eda:	d219      	bcs.n	20f10 <follow_path+0x1a8>
   20edc:	4544      	cmp	r4, r8
   20ede:	d100      	bne.n	20ee2 <follow_path+0x17a>
   20ee0:	e0d2      	b.n	21088 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   20ee2:	287f      	cmp	r0, #127	; 0x7f
   20ee4:	d85e      	bhi.n	20fa4 <follow_path+0x23c>
	while (*str && *str != chr) str++;
   20ee6:	282b      	cmp	r0, #43	; 0x2b
   20ee8:	d06e      	beq.n	20fc8 <follow_path+0x260>
   20eea:	232c      	movs	r3, #44	; 0x2c
   20eec:	4a60      	ldr	r2, [pc, #384]	; (21070 <follow_path+0x308>)
   20eee:	b299      	uxth	r1, r3
   20ef0:	4281      	cmp	r1, r0
   20ef2:	d067      	beq.n	20fc4 <follow_path+0x25c>
   20ef4:	3201      	adds	r2, #1
   20ef6:	7813      	ldrb	r3, [r2, #0]
   20ef8:	2b00      	cmp	r3, #0
   20efa:	d1f8      	bne.n	20eee <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   20efc:	0003      	movs	r3, r0
   20efe:	3b41      	subs	r3, #65	; 0x41
   20f00:	b29b      	uxth	r3, r3
   20f02:	2b19      	cmp	r3, #25
   20f04:	d86c      	bhi.n	20fe0 <follow_path+0x278>
					b |= 2;
   20f06:	2302      	movs	r3, #2
   20f08:	464a      	mov	r2, r9
   20f0a:	431a      	orrs	r2, r3
   20f0c:	4691      	mov	r9, r2
   20f0e:	e05f      	b.n	20fd0 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   20f10:	9b01      	ldr	r3, [sp, #4]
   20f12:	2b0b      	cmp	r3, #11
   20f14:	d03b      	beq.n	20f8e <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   20f16:	4544      	cmp	r4, r8
   20f18:	d100      	bne.n	20f1c <follow_path+0x1b4>
   20f1a:	e0b9      	b.n	21090 <follow_path+0x328>
   20f1c:	2303      	movs	r3, #3
   20f1e:	431e      	orrs	r6, r3
   20f20:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   20f22:	4544      	cmp	r4, r8
   20f24:	d800      	bhi.n	20f28 <follow_path+0x1c0>
   20f26:	e0b3      	b.n	21090 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   20f28:	69bb      	ldr	r3, [r7, #24]
   20f2a:	781a      	ldrb	r2, [r3, #0]
   20f2c:	2ae5      	cmp	r2, #229	; 0xe5
   20f2e:	d036      	beq.n	20f9e <follow_path+0x236>
	if (ni == 8) b <<= 2;
   20f30:	9b01      	ldr	r3, [sp, #4]
   20f32:	2b08      	cmp	r3, #8
   20f34:	d060      	beq.n	20ff8 <follow_path+0x290>
   20f36:	230c      	movs	r3, #12
   20f38:	464a      	mov	r2, r9
   20f3a:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   20f3c:	2b0c      	cmp	r3, #12
   20f3e:	d060      	beq.n	21002 <follow_path+0x29a>
   20f40:	43d2      	mvns	r2, r2
   20f42:	0792      	lsls	r2, r2, #30
   20f44:	d05d      	beq.n	21002 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   20f46:	07b2      	lsls	r2, r6, #30
   20f48:	d406      	bmi.n	20f58 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   20f4a:	2203      	movs	r2, #3
   20f4c:	4649      	mov	r1, r9
   20f4e:	400a      	ands	r2, r1
   20f50:	2a01      	cmp	r2, #1
   20f52:	d059      	beq.n	21008 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   20f54:	2b04      	cmp	r3, #4
   20f56:	d05a      	beq.n	2100e <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   20f58:	69bb      	ldr	r3, [r7, #24]
   20f5a:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   20f5c:	0038      	movs	r0, r7
   20f5e:	4b45      	ldr	r3, [pc, #276]	; (21074 <follow_path+0x30c>)
   20f60:	4798      	blx	r3
			ns = *(dj->fn+NS);
   20f62:	69bb      	ldr	r3, [r7, #24]
   20f64:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   20f66:	2800      	cmp	r0, #0
   20f68:	d15c      	bne.n	21024 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   20f6a:	075b      	lsls	r3, r3, #29
   20f6c:	d453      	bmi.n	21016 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   20f6e:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   20f70:	7ad3      	ldrb	r3, [r2, #11]
   20f72:	06db      	lsls	r3, r3, #27
   20f74:	d55c      	bpl.n	21030 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   20f76:	7d51      	ldrb	r1, [r2, #21]
   20f78:	0209      	lsls	r1, r1, #8
   20f7a:	7d13      	ldrb	r3, [r2, #20]
   20f7c:	430b      	orrs	r3, r1
   20f7e:	041b      	lsls	r3, r3, #16
   20f80:	7ed1      	ldrb	r1, [r2, #27]
   20f82:	0209      	lsls	r1, r1, #8
   20f84:	7e92      	ldrb	r2, [r2, #26]
   20f86:	430a      	orrs	r2, r1
   20f88:	4313      	orrs	r3, r2
   20f8a:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   20f8c:	e70b      	b.n	20da6 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   20f8e:	2303      	movs	r3, #3
   20f90:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   20f92:	69bb      	ldr	r3, [r7, #24]
   20f94:	781a      	ldrb	r2, [r3, #0]
   20f96:	2ae5      	cmp	r2, #229	; 0xe5
   20f98:	d1cd      	bne.n	20f36 <follow_path+0x1ce>
   20f9a:	220b      	movs	r2, #11
   20f9c:	9201      	str	r2, [sp, #4]
   20f9e:	2205      	movs	r2, #5
   20fa0:	701a      	strb	r2, [r3, #0]
   20fa2:	e7c5      	b.n	20f30 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   20fa4:	2100      	movs	r1, #0
   20fa6:	4b2f      	ldr	r3, [pc, #188]	; (21064 <follow_path+0x2fc>)
   20fa8:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   20faa:	2800      	cmp	r0, #0
   20fac:	d100      	bne.n	20fb0 <follow_path+0x248>
   20fae:	e079      	b.n	210a4 <follow_path+0x33c>
   20fb0:	4b31      	ldr	r3, [pc, #196]	; (21078 <follow_path+0x310>)
   20fb2:	469c      	mov	ip, r3
   20fb4:	4460      	add	r0, ip
   20fb6:	3880      	subs	r0, #128	; 0x80
   20fb8:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   20fba:	2302      	movs	r3, #2
   20fbc:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   20fbe:	2800      	cmp	r0, #0
   20fc0:	d002      	beq.n	20fc8 <follow_path+0x260>
   20fc2:	e790      	b.n	20ee6 <follow_path+0x17e>
   20fc4:	2b00      	cmp	r3, #0
   20fc6:	d099      	beq.n	20efc <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   20fc8:	2303      	movs	r3, #3
   20fca:	431e      	orrs	r6, r3
   20fcc:	b2f6      	uxtb	r6, r6
   20fce:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   20fd0:	69bb      	ldr	r3, [r7, #24]
   20fd2:	465a      	mov	r2, fp
   20fd4:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   20fd6:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   20fd8:	2201      	movs	r2, #1
   20fda:	4694      	mov	ip, r2
   20fdc:	44e3      	add	fp, ip
   20fde:	e770      	b.n	20ec2 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   20fe0:	0003      	movs	r3, r0
   20fe2:	3b61      	subs	r3, #97	; 0x61
   20fe4:	b29b      	uxth	r3, r3
   20fe6:	2b19      	cmp	r3, #25
   20fe8:	d8f2      	bhi.n	20fd0 <follow_path+0x268>
						b |= 1; w -= 0x20;
   20fea:	2301      	movs	r3, #1
   20fec:	464a      	mov	r2, r9
   20fee:	431a      	orrs	r2, r3
   20ff0:	4691      	mov	r9, r2
   20ff2:	3820      	subs	r0, #32
   20ff4:	b280      	uxth	r0, r0
   20ff6:	e7eb      	b.n	20fd0 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   20ff8:	464b      	mov	r3, r9
   20ffa:	009b      	lsls	r3, r3, #2
   20ffc:	b2db      	uxtb	r3, r3
   20ffe:	4699      	mov	r9, r3
   21000:	e799      	b.n	20f36 <follow_path+0x1ce>
		cf |= NS_LFN;
   21002:	2202      	movs	r2, #2
   21004:	4316      	orrs	r6, r2
   21006:	e79e      	b.n	20f46 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   21008:	320f      	adds	r2, #15
   2100a:	4316      	orrs	r6, r2
   2100c:	e7a2      	b.n	20f54 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2100e:	3304      	adds	r3, #4
   21010:	431e      	orrs	r6, r3
   21012:	e7a1      	b.n	20f58 <follow_path+0x1f0>
   21014:	2006      	movs	r0, #6
}
   21016:	b003      	add	sp, #12
   21018:	bc3c      	pop	{r2, r3, r4, r5}
   2101a:	4690      	mov	r8, r2
   2101c:	4699      	mov	r9, r3
   2101e:	46a2      	mov	sl, r4
   21020:	46ab      	mov	fp, r5
   21022:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   21024:	2804      	cmp	r0, #4
   21026:	d1f6      	bne.n	21016 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   21028:	075b      	lsls	r3, r3, #29
   2102a:	d4f4      	bmi.n	21016 <follow_path+0x2ae>
   2102c:	3001      	adds	r0, #1
   2102e:	e7f2      	b.n	21016 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   21030:	2005      	movs	r0, #5
   21032:	e7f0      	b.n	21016 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   21034:	2301      	movs	r3, #1
	si = di = 0;
   21036:	2400      	movs	r4, #0
   21038:	e6fb      	b.n	20e32 <follow_path+0xca>
		w = p[si++];					/* Get a character */
   2103a:	2301      	movs	r3, #1
	si = di = 0;
   2103c:	2400      	movs	r4, #0
   2103e:	e005      	b.n	2104c <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   21040:	2301      	movs	r3, #1
	si = di = 0;
   21042:	2400      	movs	r4, #0
   21044:	e002      	b.n	2104c <follow_path+0x2e4>
   21046:	002c      	movs	r4, r5
   21048:	465f      	mov	r7, fp
   2104a:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   2104c:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2104e:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   21050:	2c00      	cmp	r4, #0
   21052:	d0df      	beq.n	21014 <follow_path+0x2ac>
   21054:	4b09      	ldr	r3, [pc, #36]	; (2107c <follow_path+0x314>)
   21056:	18e3      	adds	r3, r4, r3
   21058:	005b      	lsls	r3, r3, #1
   2105a:	4453      	add	r3, sl
   2105c:	e6f1      	b.n	20e42 <follow_path+0xda>
   2105e:	46c0      	nop			; (mov r8, r8)
   21060:	000203b9 	.word	0x000203b9
   21064:	00021541 	.word	0x00021541
   21068:	0002a329 	.word	0x0002a329
   2106c:	0001fd51 	.word	0x0001fd51
   21070:	0002a335 	.word	0x0002a335
   21074:	000207f9 	.word	0x000207f9
   21078:	0002a2a8 	.word	0x0002a2a8
   2107c:	7fffffff 	.word	0x7fffffff
   21080:	002c      	movs	r4, r5
   21082:	465f      	mov	r7, fp
   21084:	464d      	mov	r5, r9
   21086:	e7e1      	b.n	2104c <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   21088:	9b01      	ldr	r3, [sp, #4]
   2108a:	2b0b      	cmp	r3, #11
   2108c:	d100      	bne.n	21090 <follow_path+0x328>
   2108e:	e77e      	b.n	20f8e <follow_path+0x226>
			b <<= 2; continue;
   21090:	464b      	mov	r3, r9
   21092:	009b      	lsls	r3, r3, #2
   21094:	b2db      	uxtb	r3, r3
   21096:	4699      	mov	r9, r3
   21098:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2109a:	220b      	movs	r2, #11
   2109c:	9201      	str	r2, [sp, #4]
   2109e:	3a03      	subs	r2, #3
   210a0:	4693      	mov	fp, r2
   210a2:	e70e      	b.n	20ec2 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   210a4:	2302      	movs	r3, #2
   210a6:	431e      	orrs	r6, r3
   210a8:	e78e      	b.n	20fc8 <follow_path+0x260>
   210aa:	46c0      	nop			; (mov r8, r8)

000210ac <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   210ac:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   210ae:	2807      	cmp	r0, #7
   210b0:	d901      	bls.n	210b6 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   210b2:	0018      	movs	r0, r3
   210b4:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   210b6:	0083      	lsls	r3, r0, #2
   210b8:	4a07      	ldr	r2, [pc, #28]	; (210d8 <f_mount+0x2c>)
   210ba:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   210bc:	2b00      	cmp	r3, #0
   210be:	d001      	beq.n	210c4 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   210c0:	2200      	movs	r2, #0
   210c2:	701a      	strb	r2, [r3, #0]
	if (fs) {
   210c4:	2900      	cmp	r1, #0
   210c6:	d001      	beq.n	210cc <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   210c8:	2300      	movs	r3, #0
   210ca:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   210cc:	0080      	lsls	r0, r0, #2
   210ce:	4b02      	ldr	r3, [pc, #8]	; (210d8 <f_mount+0x2c>)
   210d0:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   210d2:	2300      	movs	r3, #0
   210d4:	e7ed      	b.n	210b2 <f_mount+0x6>
   210d6:	46c0      	nop			; (mov r8, r8)
   210d8:	20003dc8 	.word	0x20003dc8

000210dc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   210dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   210de:	46c6      	mov	lr, r8
   210e0:	b500      	push	{lr}
   210e2:	4c59      	ldr	r4, [pc, #356]	; (21248 <f_open+0x16c>)
   210e4:	44a5      	add	sp, r4
   210e6:	0005      	movs	r5, r0
   210e8:	9101      	str	r1, [sp, #4]
   210ea:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   210ec:	2300      	movs	r3, #0
   210ee:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   210f0:	261f      	movs	r6, #31
   210f2:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   210f4:	221e      	movs	r2, #30
   210f6:	403a      	ands	r2, r7
   210f8:	a985      	add	r1, sp, #532	; 0x214
   210fa:	a801      	add	r0, sp, #4
   210fc:	4b53      	ldr	r3, [pc, #332]	; (2124c <f_open+0x170>)
   210fe:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   21100:	ab82      	add	r3, sp, #520	; 0x208
   21102:	938b      	str	r3, [sp, #556]	; 0x22c
   21104:	ab02      	add	r3, sp, #8
   21106:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   21108:	2800      	cmp	r0, #0
   2110a:	d006      	beq.n	2111a <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   2110c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2110e:	231c      	movs	r3, #28
   21110:	423b      	tst	r3, r7
   21112:	d145      	bne.n	211a0 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   21114:	2800      	cmp	r0, #0
   21116:	d13d      	bne.n	21194 <f_open+0xb8>
   21118:	e00c      	b.n	21134 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   2111a:	9901      	ldr	r1, [sp, #4]
   2111c:	a885      	add	r0, sp, #532	; 0x214
   2111e:	4b4c      	ldr	r3, [pc, #304]	; (21250 <f_open+0x174>)
   21120:	4798      	blx	r3
	dir = dj.dir;
   21122:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   21124:	2800      	cmp	r0, #0
   21126:	d1f2      	bne.n	2110e <f_open+0x32>
		if (!dir)	/* Current dir itself */
   21128:	2c00      	cmp	r4, #0
   2112a:	d100      	bne.n	2112e <f_open+0x52>
   2112c:	e086      	b.n	2123c <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2112e:	231c      	movs	r3, #28
   21130:	423b      	tst	r3, r7
   21132:	d146      	bne.n	211c2 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   21134:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   21136:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   21138:	06da      	lsls	r2, r3, #27
   2113a:	d42b      	bmi.n	21194 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2113c:	07ba      	lsls	r2, r7, #30
   2113e:	d502      	bpl.n	21146 <f_open+0x6a>
					res = FR_DENIED;
   21140:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   21142:	07db      	lsls	r3, r3, #31
   21144:	d426      	bmi.n	21194 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   21146:	073b      	lsls	r3, r7, #28
   21148:	d501      	bpl.n	2114e <f_open+0x72>
			mode |= FA__WRITTEN;
   2114a:	2320      	movs	r3, #32
   2114c:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2114e:	9b85      	ldr	r3, [sp, #532]	; 0x214
   21150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21152:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   21154:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   21156:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   21158:	7d62      	ldrb	r2, [r4, #21]
   2115a:	0212      	lsls	r2, r2, #8
   2115c:	7d23      	ldrb	r3, [r4, #20]
   2115e:	4313      	orrs	r3, r2
   21160:	041b      	lsls	r3, r3, #16
   21162:	7ee1      	ldrb	r1, [r4, #27]
   21164:	0209      	lsls	r1, r1, #8
   21166:	7ea2      	ldrb	r2, [r4, #26]
   21168:	430a      	orrs	r2, r1
   2116a:	4313      	orrs	r3, r2
   2116c:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2116e:	7fe3      	ldrb	r3, [r4, #31]
   21170:	061b      	lsls	r3, r3, #24
   21172:	7fa2      	ldrb	r2, [r4, #30]
   21174:	0412      	lsls	r2, r2, #16
   21176:	4313      	orrs	r3, r2
   21178:	7f22      	ldrb	r2, [r4, #28]
   2117a:	4313      	orrs	r3, r2
   2117c:	7f62      	ldrb	r2, [r4, #29]
   2117e:	0212      	lsls	r2, r2, #8
   21180:	4313      	orrs	r3, r2
   21182:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   21184:	2300      	movs	r3, #0
   21186:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   21188:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2118a:	9b85      	ldr	r3, [sp, #532]	; 0x214
   2118c:	602b      	str	r3, [r5, #0]
   2118e:	88db      	ldrh	r3, [r3, #6]
   21190:	80ab      	strh	r3, [r5, #4]
   21192:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   21194:	238e      	movs	r3, #142	; 0x8e
   21196:	009b      	lsls	r3, r3, #2
   21198:	449d      	add	sp, r3
   2119a:	bc04      	pop	{r2}
   2119c:	4690      	mov	r8, r2
   2119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   211a0:	2804      	cmp	r0, #4
   211a2:	d005      	beq.n	211b0 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   211a4:	2308      	movs	r3, #8
   211a6:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   211a8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   211aa:	2800      	cmp	r0, #0
   211ac:	d0d3      	beq.n	21156 <f_open+0x7a>
   211ae:	e7f1      	b.n	21194 <f_open+0xb8>
				res = dir_register(&dj);
   211b0:	a885      	add	r0, sp, #532	; 0x214
   211b2:	4b28      	ldr	r3, [pc, #160]	; (21254 <f_open+0x178>)
   211b4:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   211b6:	2308      	movs	r3, #8
   211b8:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   211ba:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   211bc:	2800      	cmp	r0, #0
   211be:	d008      	beq.n	211d2 <f_open+0xf6>
   211c0:	e7e8      	b.n	21194 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   211c2:	7ae3      	ldrb	r3, [r4, #11]
   211c4:	2211      	movs	r2, #17
				res = FR_DENIED;
   211c6:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   211c8:	421a      	tst	r2, r3
   211ca:	d1e3      	bne.n	21194 <f_open+0xb8>
					res = FR_EXIST;
   211cc:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   211ce:	077b      	lsls	r3, r7, #29
   211d0:	d4e0      	bmi.n	21194 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   211d2:	0733      	lsls	r3, r6, #28
   211d4:	d5bb      	bpl.n	2114e <f_open+0x72>
			dw = get_fattime();					/* Created time */
   211d6:	4b20      	ldr	r3, [pc, #128]	; (21258 <f_open+0x17c>)
   211d8:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   211da:	73a0      	strb	r0, [r4, #14]
   211dc:	0a03      	lsrs	r3, r0, #8
   211de:	73e3      	strb	r3, [r4, #15]
   211e0:	0c03      	lsrs	r3, r0, #16
   211e2:	7423      	strb	r3, [r4, #16]
   211e4:	0e00      	lsrs	r0, r0, #24
   211e6:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   211e8:	2300      	movs	r3, #0
   211ea:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   211ec:	7723      	strb	r3, [r4, #28]
   211ee:	7763      	strb	r3, [r4, #29]
   211f0:	77a3      	strb	r3, [r4, #30]
   211f2:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   211f4:	7d62      	ldrb	r2, [r4, #21]
   211f6:	0212      	lsls	r2, r2, #8
   211f8:	7d27      	ldrb	r7, [r4, #20]
   211fa:	4317      	orrs	r7, r2
   211fc:	043f      	lsls	r7, r7, #16
   211fe:	7ee1      	ldrb	r1, [r4, #27]
   21200:	0209      	lsls	r1, r1, #8
   21202:	7ea2      	ldrb	r2, [r4, #26]
   21204:	430a      	orrs	r2, r1
   21206:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   21208:	76a3      	strb	r3, [r4, #26]
   2120a:	76e3      	strb	r3, [r4, #27]
   2120c:	7523      	strb	r3, [r4, #20]
   2120e:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   21210:	9885      	ldr	r0, [sp, #532]	; 0x214
   21212:	3301      	adds	r3, #1
   21214:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   21216:	2f00      	cmp	r7, #0
   21218:	d097      	beq.n	2114a <f_open+0x6e>
				dw = dj.fs->winsect;
   2121a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2121c:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   2121e:	0039      	movs	r1, r7
   21220:	4b0e      	ldr	r3, [pc, #56]	; (2125c <f_open+0x180>)
   21222:	4798      	blx	r3
				if (res == FR_OK) {
   21224:	2800      	cmp	r0, #0
   21226:	d1b5      	bne.n	21194 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   21228:	9885      	ldr	r0, [sp, #532]	; 0x214
   2122a:	3f01      	subs	r7, #1
   2122c:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   2122e:	4641      	mov	r1, r8
   21230:	4b0b      	ldr	r3, [pc, #44]	; (21260 <f_open+0x184>)
   21232:	4798      	blx	r3
	if (res == FR_OK) {
   21234:	2800      	cmp	r0, #0
   21236:	d100      	bne.n	2123a <f_open+0x15e>
   21238:	e787      	b.n	2114a <f_open+0x6e>
   2123a:	e7ab      	b.n	21194 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2123c:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   2123e:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   21240:	423b      	tst	r3, r7
   21242:	d0b2      	beq.n	211aa <f_open+0xce>
			res = FR_INVALID_NAME;
   21244:	2006      	movs	r0, #6
   21246:	e7ad      	b.n	211a4 <f_open+0xc8>
   21248:	fffffdc8 	.word	0xfffffdc8
   2124c:	0001fe6d 	.word	0x0001fe6d
   21250:	00020d69 	.word	0x00020d69
   21254:	00020991 	.word	0x00020991
   21258:	0001fced 	.word	0x0001fced
   2125c:	0002065d 	.word	0x0002065d
   21260:	0002021d 	.word	0x0002021d

00021264 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   21264:	b5f0      	push	{r4, r5, r6, r7, lr}
   21266:	46de      	mov	lr, fp
   21268:	4657      	mov	r7, sl
   2126a:	464e      	mov	r6, r9
   2126c:	4645      	mov	r5, r8
   2126e:	b5e0      	push	{r5, r6, r7, lr}
   21270:	b083      	sub	sp, #12
   21272:	0004      	movs	r4, r0
   21274:	000d      	movs	r5, r1
   21276:	0016      	movs	r6, r2
   21278:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2127a:	2300      	movs	r3, #0
   2127c:	464a      	mov	r2, r9
   2127e:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   21280:	8881      	ldrh	r1, [r0, #4]
   21282:	6800      	ldr	r0, [r0, #0]
   21284:	4b7f      	ldr	r3, [pc, #508]	; (21484 <f_write+0x220>)
   21286:	4798      	blx	r3
   21288:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2128a:	2800      	cmp	r0, #0
   2128c:	d000      	beq.n	21290 <f_write+0x2c>
   2128e:	e0f1      	b.n	21474 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   21290:	79a3      	ldrb	r3, [r4, #6]
   21292:	b25a      	sxtb	r2, r3
   21294:	2a00      	cmp	r2, #0
   21296:	da00      	bge.n	2129a <f_write+0x36>
   21298:	e0ea      	b.n	21470 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2129a:	079b      	lsls	r3, r3, #30
   2129c:	d402      	bmi.n	212a4 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   2129e:	2307      	movs	r3, #7
   212a0:	9300      	str	r3, [sp, #0]
   212a2:	e0e7      	b.n	21474 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   212a4:	68e3      	ldr	r3, [r4, #12]
   212a6:	199a      	adds	r2, r3, r6
   212a8:	4293      	cmp	r3, r2
   212aa:	d810      	bhi.n	212ce <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   212ac:	2e00      	cmp	r6, #0
   212ae:	d00e      	beq.n	212ce <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   212b0:	002f      	movs	r7, r5
   212b2:	e07b      	b.n	213ac <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   212b4:	2100      	movs	r1, #0
   212b6:	4b74      	ldr	r3, [pc, #464]	; (21488 <f_write+0x224>)
   212b8:	4798      	blx	r3
   212ba:	0003      	movs	r3, r0
   212bc:	6120      	str	r0, [r4, #16]
   212be:	e003      	b.n	212c8 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   212c0:	6961      	ldr	r1, [r4, #20]
   212c2:	4b71      	ldr	r3, [pc, #452]	; (21488 <f_write+0x224>)
   212c4:	4798      	blx	r3
   212c6:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   212c8:	2b00      	cmp	r3, #0
   212ca:	d000      	beq.n	212ce <f_write+0x6a>
   212cc:	e080      	b.n	213d0 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   212ce:	68a3      	ldr	r3, [r4, #8]
   212d0:	68e2      	ldr	r2, [r4, #12]
   212d2:	4293      	cmp	r3, r2
   212d4:	d900      	bls.n	212d8 <f_write+0x74>
   212d6:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   212d8:	79a3      	ldrb	r3, [r4, #6]
   212da:	2220      	movs	r2, #32
   212dc:	4313      	orrs	r3, r2
   212de:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   212e0:	e0c8      	b.n	21474 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   212e2:	79a2      	ldrb	r2, [r4, #6]
   212e4:	3b81      	subs	r3, #129	; 0x81
   212e6:	4313      	orrs	r3, r2
   212e8:	71a3      	strb	r3, [r4, #6]
   212ea:	2302      	movs	r3, #2
   212ec:	9300      	str	r3, [sp, #0]
   212ee:	e0c1      	b.n	21474 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   212f0:	79a2      	ldrb	r2, [r4, #6]
   212f2:	3b7f      	subs	r3, #127	; 0x7f
   212f4:	4313      	orrs	r3, r2
   212f6:	71a3      	strb	r3, [r4, #6]
   212f8:	2301      	movs	r3, #1
   212fa:	9300      	str	r3, [sp, #0]
   212fc:	e0ba      	b.n	21474 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   212fe:	2100      	movs	r1, #0
   21300:	4b62      	ldr	r3, [pc, #392]	; (2148c <f_write+0x228>)
   21302:	4798      	blx	r3
   21304:	2800      	cmp	r0, #0
   21306:	d06d      	beq.n	213e4 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   21308:	79a2      	ldrb	r2, [r4, #6]
   2130a:	2380      	movs	r3, #128	; 0x80
   2130c:	425b      	negs	r3, r3
   2130e:	4313      	orrs	r3, r2
   21310:	71a3      	strb	r3, [r4, #6]
   21312:	2301      	movs	r3, #1
   21314:	9300      	str	r3, [sp, #0]
   21316:	e0ad      	b.n	21474 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   21318:	79a2      	ldrb	r2, [r4, #6]
   2131a:	2380      	movs	r3, #128	; 0x80
   2131c:	425b      	negs	r3, r3
   2131e:	4313      	orrs	r3, r2
   21320:	71a3      	strb	r3, [r4, #6]
   21322:	2302      	movs	r3, #2
   21324:	9300      	str	r3, [sp, #0]
   21326:	e0a5      	b.n	21474 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   21328:	79a2      	ldrb	r2, [r4, #6]
   2132a:	2380      	movs	r3, #128	; 0x80
   2132c:	425b      	negs	r3, r3
   2132e:	4313      	orrs	r3, r2
   21330:	71a3      	strb	r3, [r4, #6]
   21332:	2301      	movs	r3, #1
   21334:	9300      	str	r3, [sp, #0]
   21336:	e09d      	b.n	21474 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   21338:	0240      	lsls	r0, r0, #9
   2133a:	1839      	adds	r1, r7, r0
   2133c:	3330      	adds	r3, #48	; 0x30
   2133e:	0018      	movs	r0, r3
   21340:	2280      	movs	r2, #128	; 0x80
   21342:	0092      	lsls	r2, r2, #2
   21344:	4b52      	ldr	r3, [pc, #328]	; (21490 <f_write+0x22c>)
   21346:	4798      	blx	r3
					fp->fs->wflag = 0;
   21348:	2300      	movs	r3, #0
   2134a:	6822      	ldr	r2, [r4, #0]
   2134c:	7113      	strb	r3, [r2, #4]
   2134e:	e072      	b.n	21436 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   21350:	68a3      	ldr	r3, [r4, #8]
   21352:	68e2      	ldr	r2, [r4, #12]
   21354:	4293      	cmp	r3, r2
   21356:	d271      	bcs.n	2143c <f_write+0x1d8>
			fp->dsect = sect;
   21358:	4643      	mov	r3, r8
   2135a:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2135c:	68a3      	ldr	r3, [r4, #8]
   2135e:	05dd      	lsls	r5, r3, #23
   21360:	0ded      	lsrs	r5, r5, #23
   21362:	2380      	movs	r3, #128	; 0x80
   21364:	009b      	lsls	r3, r3, #2
   21366:	1b5d      	subs	r5, r3, r5
   21368:	42b5      	cmp	r5, r6
   2136a:	d900      	bls.n	2136e <f_write+0x10a>
   2136c:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2136e:	69a1      	ldr	r1, [r4, #24]
   21370:	6820      	ldr	r0, [r4, #0]
   21372:	4b46      	ldr	r3, [pc, #280]	; (2148c <f_write+0x228>)
   21374:	4798      	blx	r3
   21376:	2800      	cmp	r0, #0
   21378:	d172      	bne.n	21460 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2137a:	68a3      	ldr	r3, [r4, #8]
   2137c:	05d8      	lsls	r0, r3, #23
   2137e:	0dc0      	lsrs	r0, r0, #23
   21380:	3030      	adds	r0, #48	; 0x30
   21382:	6823      	ldr	r3, [r4, #0]
   21384:	469c      	mov	ip, r3
   21386:	4460      	add	r0, ip
   21388:	002a      	movs	r2, r5
   2138a:	0039      	movs	r1, r7
   2138c:	4b40      	ldr	r3, [pc, #256]	; (21490 <f_write+0x22c>)
   2138e:	4798      	blx	r3
		fp->fs->wflag = 1;
   21390:	2301      	movs	r3, #1
   21392:	6822      	ldr	r2, [r4, #0]
   21394:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   21396:	197f      	adds	r7, r7, r5
   21398:	68a3      	ldr	r3, [r4, #8]
   2139a:	195b      	adds	r3, r3, r5
   2139c:	60a3      	str	r3, [r4, #8]
   2139e:	464b      	mov	r3, r9
   213a0:	681b      	ldr	r3, [r3, #0]
   213a2:	195b      	adds	r3, r3, r5
   213a4:	464a      	mov	r2, r9
   213a6:	6013      	str	r3, [r2, #0]
   213a8:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   213aa:	d090      	beq.n	212ce <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   213ac:	68a3      	ldr	r3, [r4, #8]
   213ae:	05da      	lsls	r2, r3, #23
   213b0:	d1d4      	bne.n	2135c <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   213b2:	6820      	ldr	r0, [r4, #0]
   213b4:	7882      	ldrb	r2, [r0, #2]
   213b6:	3a01      	subs	r2, #1
   213b8:	0a5d      	lsrs	r5, r3, #9
   213ba:	4015      	ands	r5, r2
   213bc:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   213be:	2d00      	cmp	r5, #0
   213c0:	d10b      	bne.n	213da <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   213c2:	2b00      	cmp	r3, #0
   213c4:	d000      	beq.n	213c8 <f_write+0x164>
   213c6:	e77b      	b.n	212c0 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   213c8:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   213ca:	2b00      	cmp	r3, #0
   213cc:	d100      	bne.n	213d0 <f_write+0x16c>
   213ce:	e771      	b.n	212b4 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   213d0:	2b01      	cmp	r3, #1
   213d2:	d086      	beq.n	212e2 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   213d4:	1c5a      	adds	r2, r3, #1
   213d6:	d08b      	beq.n	212f0 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   213d8:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   213da:	6820      	ldr	r0, [r4, #0]
   213dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   213de:	69a2      	ldr	r2, [r4, #24]
   213e0:	4293      	cmp	r3, r2
   213e2:	d08c      	beq.n	212fe <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   213e4:	6823      	ldr	r3, [r4, #0]
   213e6:	469a      	mov	sl, r3
   213e8:	6961      	ldr	r1, [r4, #20]
   213ea:	0018      	movs	r0, r3
   213ec:	4b29      	ldr	r3, [pc, #164]	; (21494 <f_write+0x230>)
   213ee:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   213f0:	2800      	cmp	r0, #0
   213f2:	d091      	beq.n	21318 <f_write+0xb4>
			sect += csect;
   213f4:	4680      	mov	r8, r0
   213f6:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   213f8:	0a73      	lsrs	r3, r6, #9
   213fa:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   213fc:	d0a8      	beq.n	21350 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   213fe:	4653      	mov	r3, sl
   21400:	789b      	ldrb	r3, [r3, #2]
   21402:	465a      	mov	r2, fp
   21404:	18aa      	adds	r2, r5, r2
   21406:	429a      	cmp	r2, r3
   21408:	d901      	bls.n	2140e <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   2140a:	1b5b      	subs	r3, r3, r5
   2140c:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2140e:	465b      	mov	r3, fp
   21410:	466a      	mov	r2, sp
   21412:	71d3      	strb	r3, [r2, #7]
   21414:	79d3      	ldrb	r3, [r2, #7]
   21416:	4652      	mov	r2, sl
   21418:	7850      	ldrb	r0, [r2, #1]
   2141a:	4642      	mov	r2, r8
   2141c:	0039      	movs	r1, r7
   2141e:	4d1e      	ldr	r5, [pc, #120]	; (21498 <f_write+0x234>)
   21420:	47a8      	blx	r5
   21422:	2800      	cmp	r0, #0
   21424:	d000      	beq.n	21428 <f_write+0x1c4>
   21426:	e77f      	b.n	21328 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   21428:	6823      	ldr	r3, [r4, #0]
   2142a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2142c:	4641      	mov	r1, r8
   2142e:	1a50      	subs	r0, r2, r1
   21430:	4583      	cmp	fp, r0
   21432:	d900      	bls.n	21436 <f_write+0x1d2>
   21434:	e780      	b.n	21338 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   21436:	465b      	mov	r3, fp
   21438:	025d      	lsls	r5, r3, #9
				continue;
   2143a:	e7ac      	b.n	21396 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2143c:	2100      	movs	r1, #0
   2143e:	4650      	mov	r0, sl
   21440:	4b12      	ldr	r3, [pc, #72]	; (2148c <f_write+0x228>)
   21442:	4798      	blx	r3
   21444:	2800      	cmp	r0, #0
   21446:	d103      	bne.n	21450 <f_write+0x1ec>
				fp->fs->winsect = sect;
   21448:	6823      	ldr	r3, [r4, #0]
   2144a:	4642      	mov	r2, r8
   2144c:	62da      	str	r2, [r3, #44]	; 0x2c
   2144e:	e783      	b.n	21358 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   21450:	79a2      	ldrb	r2, [r4, #6]
   21452:	2380      	movs	r3, #128	; 0x80
   21454:	425b      	negs	r3, r3
   21456:	4313      	orrs	r3, r2
   21458:	71a3      	strb	r3, [r4, #6]
   2145a:	2301      	movs	r3, #1
   2145c:	9300      	str	r3, [sp, #0]
   2145e:	e009      	b.n	21474 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   21460:	79a2      	ldrb	r2, [r4, #6]
   21462:	2380      	movs	r3, #128	; 0x80
   21464:	425b      	negs	r3, r3
   21466:	4313      	orrs	r3, r2
   21468:	71a3      	strb	r3, [r4, #6]
   2146a:	2301      	movs	r3, #1
   2146c:	9300      	str	r3, [sp, #0]
   2146e:	e001      	b.n	21474 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   21470:	2302      	movs	r3, #2
   21472:	9300      	str	r3, [sp, #0]
}
   21474:	9800      	ldr	r0, [sp, #0]
   21476:	b003      	add	sp, #12
   21478:	bc3c      	pop	{r2, r3, r4, r5}
   2147a:	4690      	mov	r8, r2
   2147c:	4699      	mov	r9, r3
   2147e:	46a2      	mov	sl, r4
   21480:	46ab      	mov	fp, r5
   21482:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21484:	0001fd99 	.word	0x0001fd99
   21488:	00020599 	.word	0x00020599
   2148c:	0002021d 	.word	0x0002021d
   21490:	0001fd3d 	.word	0x0001fd3d
   21494:	0001fd63 	.word	0x0001fd63
   21498:	0001fbfd 	.word	0x0001fbfd

0002149c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2149c:	b570      	push	{r4, r5, r6, lr}
   2149e:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   214a0:	8881      	ldrh	r1, [r0, #4]
   214a2:	6800      	ldr	r0, [r0, #0]
   214a4:	4b1c      	ldr	r3, [pc, #112]	; (21518 <f_sync+0x7c>)
   214a6:	4798      	blx	r3
	if (res == FR_OK) {
   214a8:	2800      	cmp	r0, #0
   214aa:	d102      	bne.n	214b2 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   214ac:	79a3      	ldrb	r3, [r4, #6]
   214ae:	069b      	lsls	r3, r3, #26
   214b0:	d400      	bmi.n	214b4 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   214b2:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   214b4:	69e1      	ldr	r1, [r4, #28]
   214b6:	6820      	ldr	r0, [r4, #0]
   214b8:	4b18      	ldr	r3, [pc, #96]	; (2151c <f_sync+0x80>)
   214ba:	4798      	blx	r3
			if (res == FR_OK) {
   214bc:	2800      	cmp	r0, #0
   214be:	d1f8      	bne.n	214b2 <f_sync+0x16>
				dir = fp->dir_ptr;
   214c0:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   214c2:	7aeb      	ldrb	r3, [r5, #11]
   214c4:	2220      	movs	r2, #32
   214c6:	4313      	orrs	r3, r2
   214c8:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   214ca:	7b23      	ldrb	r3, [r4, #12]
   214cc:	772b      	strb	r3, [r5, #28]
   214ce:	89a3      	ldrh	r3, [r4, #12]
   214d0:	0a1b      	lsrs	r3, r3, #8
   214d2:	776b      	strb	r3, [r5, #29]
   214d4:	89e3      	ldrh	r3, [r4, #14]
   214d6:	77ab      	strb	r3, [r5, #30]
   214d8:	7be3      	ldrb	r3, [r4, #15]
   214da:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   214dc:	7c23      	ldrb	r3, [r4, #16]
   214de:	76ab      	strb	r3, [r5, #26]
   214e0:	8a23      	ldrh	r3, [r4, #16]
   214e2:	0a1b      	lsrs	r3, r3, #8
   214e4:	76eb      	strb	r3, [r5, #27]
   214e6:	8a63      	ldrh	r3, [r4, #18]
   214e8:	752b      	strb	r3, [r5, #20]
   214ea:	8a63      	ldrh	r3, [r4, #18]
   214ec:	0a1b      	lsrs	r3, r3, #8
   214ee:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   214f0:	4b0b      	ldr	r3, [pc, #44]	; (21520 <f_sync+0x84>)
   214f2:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   214f4:	75a8      	strb	r0, [r5, #22]
   214f6:	0a03      	lsrs	r3, r0, #8
   214f8:	75eb      	strb	r3, [r5, #23]
   214fa:	0c03      	lsrs	r3, r0, #16
   214fc:	762b      	strb	r3, [r5, #24]
   214fe:	0e00      	lsrs	r0, r0, #24
   21500:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   21502:	79a3      	ldrb	r3, [r4, #6]
   21504:	2220      	movs	r2, #32
   21506:	4393      	bics	r3, r2
   21508:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   2150a:	2301      	movs	r3, #1
   2150c:	6822      	ldr	r2, [r4, #0]
   2150e:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   21510:	6820      	ldr	r0, [r4, #0]
   21512:	4b04      	ldr	r3, [pc, #16]	; (21524 <f_sync+0x88>)
   21514:	4798      	blx	r3
   21516:	e7cc      	b.n	214b2 <f_sync+0x16>
   21518:	0001fd99 	.word	0x0001fd99
   2151c:	0002021d 	.word	0x0002021d
   21520:	0001fced 	.word	0x0001fced
   21524:	00020c75 	.word	0x00020c75

00021528 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   21528:	b510      	push	{r4, lr}
   2152a:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2152c:	4b03      	ldr	r3, [pc, #12]	; (2153c <f_close+0x14>)
   2152e:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   21530:	2800      	cmp	r0, #0
   21532:	d101      	bne.n	21538 <f_close+0x10>
   21534:	2300      	movs	r3, #0
   21536:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   21538:	bd10      	pop	{r4, pc}
   2153a:	46c0      	nop			; (mov r8, r8)
   2153c:	0002149d 	.word	0x0002149d

00021540 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   21540:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   21542:	287f      	cmp	r0, #127	; 0x7f
   21544:	d911      	bls.n	2156a <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   21546:	2900      	cmp	r1, #0
   21548:	d111      	bne.n	2156e <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   2154a:	28c7      	cmp	r0, #199	; 0xc7
   2154c:	d017      	beq.n	2157e <ff_convert+0x3e>
   2154e:	4a0d      	ldr	r2, [pc, #52]	; (21584 <ff_convert+0x44>)
   21550:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   21552:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   21554:	8811      	ldrh	r1, [r2, #0]
   21556:	4281      	cmp	r1, r0
   21558:	d004      	beq.n	21564 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   2155a:	3301      	adds	r3, #1
   2155c:	b29b      	uxth	r3, r3
   2155e:	3202      	adds	r2, #2
   21560:	2b80      	cmp	r3, #128	; 0x80
   21562:	d1f7      	bne.n	21554 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   21564:	3380      	adds	r3, #128	; 0x80
   21566:	20ff      	movs	r0, #255	; 0xff
   21568:	4003      	ands	r3, r0
		}
	}

	return c;
}
   2156a:	0018      	movs	r0, r3
   2156c:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2156e:	2300      	movs	r3, #0
   21570:	28ff      	cmp	r0, #255	; 0xff
   21572:	d8fa      	bhi.n	2156a <ff_convert+0x2a>
   21574:	3880      	subs	r0, #128	; 0x80
   21576:	0040      	lsls	r0, r0, #1
   21578:	4b02      	ldr	r3, [pc, #8]	; (21584 <ff_convert+0x44>)
   2157a:	5ac3      	ldrh	r3, [r0, r3]
   2157c:	e7f5      	b.n	2156a <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   2157e:	2300      	movs	r3, #0
   21580:	e7f0      	b.n	21564 <ff_convert+0x24>
   21582:	46c0      	nop			; (mov r8, r8)
   21584:	0002a33c 	.word	0x0002a33c

00021588 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   21588:	2861      	cmp	r0, #97	; 0x61
   2158a:	d014      	beq.n	215b6 <ff_wtoupper+0x2e>
   2158c:	4b0b      	ldr	r3, [pc, #44]	; (215bc <ff_wtoupper+0x34>)
   2158e:	3304      	adds	r3, #4
   21590:	2101      	movs	r1, #1
   21592:	2262      	movs	r2, #98	; 0x62
   21594:	4290      	cmp	r0, r2
   21596:	d007      	beq.n	215a8 <ff_wtoupper+0x20>
   21598:	3101      	adds	r1, #1
   2159a:	3302      	adds	r3, #2
   2159c:	1e9a      	subs	r2, r3, #2
   2159e:	8812      	ldrh	r2, [r2, #0]
   215a0:	2a00      	cmp	r2, #0
   215a2:	d1f7      	bne.n	21594 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   215a4:	0003      	movs	r3, r0
   215a6:	e004      	b.n	215b2 <ff_wtoupper+0x2a>
   215a8:	1e03      	subs	r3, r0, #0
   215aa:	d002      	beq.n	215b2 <ff_wtoupper+0x2a>
   215ac:	0049      	lsls	r1, r1, #1
   215ae:	4b04      	ldr	r3, [pc, #16]	; (215c0 <ff_wtoupper+0x38>)
   215b0:	5acb      	ldrh	r3, [r1, r3]
}
   215b2:	0018      	movs	r0, r3
   215b4:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   215b6:	2100      	movs	r1, #0
   215b8:	e7f8      	b.n	215ac <ff_wtoupper+0x24>
   215ba:	46c0      	nop			; (mov r8, r8)
   215bc:	0002a43c 	.word	0x0002a43c
   215c0:	0002a61c 	.word	0x0002a61c

000215c4 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   215c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   215c6:	46de      	mov	lr, fp
   215c8:	4657      	mov	r7, sl
   215ca:	464e      	mov	r6, r9
   215cc:	4645      	mov	r5, r8
   215ce:	b5e0      	push	{r5, r6, r7, lr}
   215d0:	b083      	sub	sp, #12
   215d2:	0007      	movs	r7, r0
   215d4:	4688      	mov	r8, r1
   215d6:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   215d8:	2400      	movs	r4, #0
   215da:	2900      	cmp	r1, #0
   215dc:	dd18      	ble.n	21610 <sendPacket+0x4c>
   215de:	4b15      	ldr	r3, [pc, #84]	; (21634 <sendPacket+0x70>)
   215e0:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   215e2:	4b15      	ldr	r3, [pc, #84]	; (21638 <sendPacket+0x74>)
   215e4:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   215e6:	9801      	ldr	r0, [sp, #4]
   215e8:	47d0      	blx	sl
   215ea:	2800      	cmp	r0, #0
   215ec:	d110      	bne.n	21610 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   215ee:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   215f0:	68f3      	ldr	r3, [r6, #12]
   215f2:	4699      	mov	r9, r3
   215f4:	693b      	ldr	r3, [r7, #16]
   215f6:	191d      	adds	r5, r3, r4
   215f8:	9801      	ldr	r0, [sp, #4]
   215fa:	47d8      	blx	fp
   215fc:	0003      	movs	r3, r0
   215fe:	4642      	mov	r2, r8
   21600:	0029      	movs	r1, r5
   21602:	0030      	movs	r0, r6
   21604:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   21606:	2800      	cmp	r0, #0
   21608:	db02      	blt.n	21610 <sendPacket+0x4c>
            break;
        sent += rc;
   2160a:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   2160c:	45a0      	cmp	r8, r4
   2160e:	dcea      	bgt.n	215e6 <sendPacket+0x22>
    }
    if (sent == length)
   21610:	45a0      	cmp	r8, r4
   21612:	d10c      	bne.n	2162e <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   21614:	69b9      	ldr	r1, [r7, #24]
   21616:	0038      	movs	r0, r7
   21618:	3054      	adds	r0, #84	; 0x54
   2161a:	4b08      	ldr	r3, [pc, #32]	; (2163c <sendPacket+0x78>)
   2161c:	4798      	blx	r3
        rc = SUCCESS;
   2161e:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   21620:	b003      	add	sp, #12
   21622:	bc3c      	pop	{r2, r3, r4, r5}
   21624:	4690      	mov	r8, r2
   21626:	4699      	mov	r9, r3
   21628:	46a2      	mov	sl, r4
   2162a:	46ab      	mov	fp, r5
   2162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   2162e:	2001      	movs	r0, #1
   21630:	4240      	negs	r0, r0
    return rc;
   21632:	e7f5      	b.n	21620 <sendPacket+0x5c>
   21634:	00021f31 	.word	0x00021f31
   21638:	00021f69 	.word	0x00021f69
   2163c:	00021f59 	.word	0x00021f59

00021640 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   21640:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   21642:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   21644:	2100      	movs	r1, #0
   21646:	6241      	str	r1, [r0, #36]	; 0x24
   21648:	62c1      	str	r1, [r0, #44]	; 0x2c
   2164a:	6341      	str	r1, [r0, #52]	; 0x34
   2164c:	63c1      	str	r1, [r0, #60]	; 0x3c
   2164e:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   21650:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   21652:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   21654:	9b02      	ldr	r3, [sp, #8]
   21656:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   21658:	9b03      	ldr	r3, [sp, #12]
   2165a:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   2165c:	9b04      	ldr	r3, [sp, #16]
   2165e:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   21660:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   21662:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   21664:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   21666:	2301      	movs	r3, #1
   21668:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   2166a:	3054      	adds	r0, #84	; 0x54
   2166c:	4b01      	ldr	r3, [pc, #4]	; (21674 <MQTTClientInit+0x34>)
   2166e:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   21670:	bd10      	pop	{r4, pc}
   21672:	46c0      	nop			; (mov r8, r8)
   21674:	00021f81 	.word	0x00021f81

00021678 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   21678:	b5f0      	push	{r4, r5, r6, r7, lr}
   2167a:	46de      	mov	lr, fp
   2167c:	4657      	mov	r7, sl
   2167e:	464e      	mov	r6, r9
   21680:	4645      	mov	r5, r8
   21682:	b5e0      	push	{r5, r6, r7, lr}
   21684:	b085      	sub	sp, #20
   21686:	4682      	mov	sl, r0
   21688:	000f      	movs	r7, r1
   2168a:	4691      	mov	r9, r2
   2168c:	0004      	movs	r4, r0
   2168e:	3424      	adds	r4, #36	; 0x24
   21690:	234c      	movs	r3, #76	; 0x4c
   21692:	4453      	add	r3, sl
   21694:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   21696:	2301      	movs	r3, #1
   21698:	425b      	negs	r3, r3
   2169a:	9301      	str	r3, [sp, #4]
   2169c:	e056      	b.n	2174c <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2169e:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   216a0:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   216a2:	687a      	ldr	r2, [r7, #4]
   216a4:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   216a6:	780a      	ldrb	r2, [r1, #0]
   216a8:	2a00      	cmp	r2, #0
   216aa:	d04a      	beq.n	21742 <deliverMessage+0xca>
   216ac:	42b3      	cmp	r3, r6
   216ae:	d24a      	bcs.n	21746 <deliverMessage+0xce>
   216b0:	3101      	adds	r1, #1
   216b2:	1e70      	subs	r0, r6, #1
   216b4:	e008      	b.n	216c8 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   216b6:	2a2f      	cmp	r2, #47	; 0x2f
   216b8:	d10f      	bne.n	216da <deliverMessage+0x62>
        curn++;
   216ba:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   216bc:	780a      	ldrb	r2, [r1, #0]
   216be:	2a00      	cmp	r2, #0
   216c0:	d03f      	beq.n	21742 <deliverMessage+0xca>
   216c2:	429e      	cmp	r6, r3
   216c4:	d93f      	bls.n	21746 <deliverMessage+0xce>
   216c6:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   216c8:	781d      	ldrb	r5, [r3, #0]
   216ca:	2d2f      	cmp	r5, #47	; 0x2f
   216cc:	d0f3      	beq.n	216b6 <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   216ce:	2a2b      	cmp	r2, #43	; 0x2b
   216d0:	d008      	beq.n	216e4 <deliverMessage+0x6c>
   216d2:	2a23      	cmp	r2, #35	; 0x23
   216d4:	d013      	beq.n	216fe <deliverMessage+0x86>
   216d6:	4295      	cmp	r5, r2
   216d8:	d0ef      	beq.n	216ba <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   216da:	429e      	cmp	r6, r3
   216dc:	d133      	bne.n	21746 <deliverMessage+0xce>
   216de:	2a00      	cmp	r2, #0
   216e0:	d03d      	beq.n	2175e <deliverMessage+0xe6>
   216e2:	e030      	b.n	21746 <deliverMessage+0xce>
            char* nextpos = curn + 1;
   216e4:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   216e6:	42ae      	cmp	r6, r5
   216e8:	d927      	bls.n	2173a <deliverMessage+0xc2>
   216ea:	785a      	ldrb	r2, [r3, #1]
   216ec:	2a2f      	cmp	r2, #47	; 0x2f
   216ee:	d01f      	beq.n	21730 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   216f0:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   216f2:	4283      	cmp	r3, r0
   216f4:	d0e1      	beq.n	216ba <deliverMessage+0x42>
   216f6:	785a      	ldrb	r2, [r3, #1]
   216f8:	2a2f      	cmp	r2, #47	; 0x2f
   216fa:	d1f9      	bne.n	216f0 <deliverMessage+0x78>
   216fc:	e7dd      	b.n	216ba <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   216fe:	1e73      	subs	r3, r6, #1
   21700:	e7db      	b.n	216ba <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   21702:	9b01      	ldr	r3, [sp, #4]
   21704:	3301      	adds	r3, #1
   21706:	d007      	beq.n	21718 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   21708:	9801      	ldr	r0, [sp, #4]
   2170a:	b005      	add	sp, #20
   2170c:	bc3c      	pop	{r2, r3, r4, r5}
   2170e:	4690      	mov	r8, r2
   21710:	4699      	mov	r9, r3
   21712:	46a2      	mov	sl, r4
   21714:	46ab      	mov	fp, r5
   21716:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   21718:	4653      	mov	r3, sl
   2171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2171c:	2b00      	cmp	r3, #0
   2171e:	d0f3      	beq.n	21708 <deliverMessage+0x90>
    md->topicName = aTopicName;
   21720:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   21722:	464a      	mov	r2, r9
   21724:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   21726:	a802      	add	r0, sp, #8
   21728:	4798      	blx	r3
        rc = SUCCESS;
   2172a:	2300      	movs	r3, #0
   2172c:	9301      	str	r3, [sp, #4]
    return rc;
   2172e:	e7eb      	b.n	21708 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   21730:	780a      	ldrb	r2, [r1, #0]
   21732:	2a00      	cmp	r2, #0
   21734:	d007      	beq.n	21746 <deliverMessage+0xce>
        curn++;
   21736:	002b      	movs	r3, r5
   21738:	e7c5      	b.n	216c6 <deliverMessage+0x4e>
   2173a:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   2173c:	780a      	ldrb	r2, [r1, #0]
   2173e:	2a00      	cmp	r2, #0
   21740:	d101      	bne.n	21746 <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   21742:	429e      	cmp	r6, r3
   21744:	d00b      	beq.n	2175e <deliverMessage+0xe6>
   21746:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   21748:	4544      	cmp	r4, r8
   2174a:	d0da      	beq.n	21702 <deliverMessage+0x8a>
   2174c:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2174e:	6821      	ldr	r1, [r4, #0]
   21750:	2900      	cmp	r1, #0
   21752:	d0f8      	beq.n	21746 <deliverMessage+0xce>
   21754:	0038      	movs	r0, r7
   21756:	4b08      	ldr	r3, [pc, #32]	; (21778 <deliverMessage+0x100>)
   21758:	4798      	blx	r3
   2175a:	2800      	cmp	r0, #0
   2175c:	d09f      	beq.n	2169e <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   2175e:	465b      	mov	r3, fp
   21760:	685b      	ldr	r3, [r3, #4]
   21762:	2b00      	cmp	r3, #0
   21764:	d0ef      	beq.n	21746 <deliverMessage+0xce>
    md->topicName = aTopicName;
   21766:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   21768:	464a      	mov	r2, r9
   2176a:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   2176c:	a802      	add	r0, sp, #8
   2176e:	4798      	blx	r3
                rc = SUCCESS;
   21770:	2300      	movs	r3, #0
   21772:	9301      	str	r3, [sp, #4]
   21774:	e7e7      	b.n	21746 <deliverMessage+0xce>
   21776:	46c0      	nop			; (mov r8, r8)
   21778:	00022855 	.word	0x00022855

0002177c <keepalive>:


int keepalive(MQTTClient* c)
{
   2177c:	b510      	push	{r4, lr}
   2177e:	b082      	sub	sp, #8
   21780:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   21782:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   21784:	69a3      	ldr	r3, [r4, #24]
   21786:	2b00      	cmp	r3, #0
   21788:	d101      	bne.n	2178e <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   2178a:	b002      	add	sp, #8
   2178c:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   2178e:	0020      	movs	r0, r4
   21790:	3054      	adds	r0, #84	; 0x54
   21792:	4b14      	ldr	r3, [pc, #80]	; (217e4 <keepalive+0x68>)
   21794:	4798      	blx	r3
   21796:	2800      	cmp	r0, #0
   21798:	d01d      	beq.n	217d6 <keepalive+0x5a>
        if (!c->ping_outstanding)
   2179a:	7f23      	ldrb	r3, [r4, #28]
   2179c:	2b00      	cmp	r3, #0
   2179e:	d11d      	bne.n	217dc <keepalive+0x60>
            TimerInit(&timer);
   217a0:	4668      	mov	r0, sp
   217a2:	4b11      	ldr	r3, [pc, #68]	; (217e8 <keepalive+0x6c>)
   217a4:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   217a6:	21fa      	movs	r1, #250	; 0xfa
   217a8:	0089      	lsls	r1, r1, #2
   217aa:	4668      	mov	r0, sp
   217ac:	4b0f      	ldr	r3, [pc, #60]	; (217ec <keepalive+0x70>)
   217ae:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   217b0:	68a1      	ldr	r1, [r4, #8]
   217b2:	6920      	ldr	r0, [r4, #16]
   217b4:	4b0e      	ldr	r3, [pc, #56]	; (217f0 <keepalive+0x74>)
   217b6:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   217b8:	2800      	cmp	r0, #0
   217ba:	dd09      	ble.n	217d0 <keepalive+0x54>
   217bc:	466a      	mov	r2, sp
   217be:	0001      	movs	r1, r0
   217c0:	0020      	movs	r0, r4
   217c2:	4b0c      	ldr	r3, [pc, #48]	; (217f4 <keepalive+0x78>)
   217c4:	4798      	blx	r3
   217c6:	2800      	cmp	r0, #0
   217c8:	d1df      	bne.n	2178a <keepalive+0xe>
                c->ping_outstanding = 1;
   217ca:	2301      	movs	r3, #1
   217cc:	7723      	strb	r3, [r4, #28]
   217ce:	e7dc      	b.n	2178a <keepalive+0xe>
    int rc = FAILURE;
   217d0:	2001      	movs	r0, #1
   217d2:	4240      	negs	r0, r0
   217d4:	e7d9      	b.n	2178a <keepalive+0xe>
   217d6:	2001      	movs	r0, #1
   217d8:	4240      	negs	r0, r0
   217da:	e7d6      	b.n	2178a <keepalive+0xe>
   217dc:	2001      	movs	r0, #1
   217de:	4240      	negs	r0, r0
    return rc;
   217e0:	e7d3      	b.n	2178a <keepalive+0xe>
   217e2:	46c0      	nop			; (mov r8, r8)
   217e4:	00021f31 	.word	0x00021f31
   217e8:	00021f81 	.word	0x00021f81
   217ec:	00021f45 	.word	0x00021f45
   217f0:	0002253d 	.word	0x0002253d
   217f4:	000215c5 	.word	0x000215c5

000217f8 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   217f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   217fa:	46de      	mov	lr, fp
   217fc:	464f      	mov	r7, r9
   217fe:	4646      	mov	r6, r8
   21800:	b5c0      	push	{r6, r7, lr}
   21802:	b090      	sub	sp, #64	; 0x40
   21804:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   21806:	6d05      	ldr	r5, [r0, #80]	; 0x50
   21808:	68ae      	ldr	r6, [r5, #8]
   2180a:	6947      	ldr	r7, [r0, #20]
   2180c:	9107      	str	r1, [sp, #28]
   2180e:	0008      	movs	r0, r1
   21810:	4b65      	ldr	r3, [pc, #404]	; (219a8 <cycle+0x1b0>)
   21812:	4798      	blx	r3
   21814:	0003      	movs	r3, r0
   21816:	2201      	movs	r2, #1
   21818:	0039      	movs	r1, r7
   2181a:	0028      	movs	r0, r5
   2181c:	47b0      	blx	r6
   2181e:	0005      	movs	r5, r0
   21820:	2801      	cmp	r0, #1
   21822:	d000      	beq.n	21826 <cycle+0x2e>
   21824:	e0bd      	b.n	219a2 <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   21826:	9807      	ldr	r0, [sp, #28]
   21828:	4b5f      	ldr	r3, [pc, #380]	; (219a8 <cycle+0x1b0>)
   2182a:	4798      	blx	r3
   2182c:	9006      	str	r0, [sp, #24]
   2182e:	2604      	movs	r6, #4
    *value = 0;
   21830:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   21832:	237f      	movs	r3, #127	; 0x7f
   21834:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   21836:	6d20      	ldr	r0, [r4, #80]	; 0x50
   21838:	6883      	ldr	r3, [r0, #8]
   2183a:	4698      	mov	r8, r3
   2183c:	9b06      	ldr	r3, [sp, #24]
   2183e:	2201      	movs	r2, #1
   21840:	a90c      	add	r1, sp, #48	; 0x30
   21842:	47c0      	blx	r8
        if (rc != 1)
   21844:	2801      	cmp	r0, #1
   21846:	d10e      	bne.n	21866 <cycle+0x6e>
        *value += (i & 127) * multiplier;
   21848:	ab02      	add	r3, sp, #8
   2184a:	2228      	movs	r2, #40	; 0x28
   2184c:	189b      	adds	r3, r3, r2
   2184e:	781b      	ldrb	r3, [r3, #0]
   21850:	465a      	mov	r2, fp
   21852:	401a      	ands	r2, r3
   21854:	436a      	muls	r2, r5
   21856:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   21858:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   2185a:	b25b      	sxtb	r3, r3
   2185c:	2b00      	cmp	r3, #0
   2185e:	da02      	bge.n	21866 <cycle+0x6e>
   21860:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   21862:	2e00      	cmp	r6, #0
   21864:	d1e7      	bne.n	21836 <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   21866:	6963      	ldr	r3, [r4, #20]
   21868:	1c58      	adds	r0, r3, #1
   2186a:	0039      	movs	r1, r7
   2186c:	4b4f      	ldr	r3, [pc, #316]	; (219ac <cycle+0x1b4>)
   2186e:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   21870:	2f00      	cmp	r7, #0
   21872:	dd10      	ble.n	21896 <cycle+0x9e>
   21874:	6d26      	ldr	r6, [r4, #80]	; 0x50
   21876:	68b3      	ldr	r3, [r6, #8]
   21878:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2187a:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2187c:	6963      	ldr	r3, [r4, #20]
   2187e:	181d      	adds	r5, r3, r0
   21880:	9807      	ldr	r0, [sp, #28]
   21882:	4b49      	ldr	r3, [pc, #292]	; (219a8 <cycle+0x1b0>)
   21884:	4798      	blx	r3
   21886:	0003      	movs	r3, r0
   21888:	003a      	movs	r2, r7
   2188a:	0029      	movs	r1, r5
   2188c:	0030      	movs	r0, r6
   2188e:	47c8      	blx	r9
   21890:	42b8      	cmp	r0, r7
   21892:	d000      	beq.n	21896 <cycle+0x9e>
   21894:	e085      	b.n	219a2 <cycle+0x1aa>
    header.byte = c->readbuf[0];
   21896:	6963      	ldr	r3, [r4, #20]
   21898:	781d      	ldrb	r5, [r3, #0]
   2189a:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   2189c:	2d05      	cmp	r5, #5
   2189e:	d051      	beq.n	21944 <cycle+0x14c>
   218a0:	2d0d      	cmp	r5, #13
   218a2:	d06e      	beq.n	21982 <cycle+0x18a>
        rc = SUCCESS;
   218a4:	2600      	movs	r6, #0
    switch (packet_type)
   218a6:	2d03      	cmp	r5, #3
   218a8:	d16e      	bne.n	21988 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   218aa:	68e2      	ldr	r2, [r4, #12]
   218ac:	9204      	str	r2, [sp, #16]
   218ae:	9303      	str	r3, [sp, #12]
   218b0:	ab0f      	add	r3, sp, #60	; 0x3c
   218b2:	9302      	str	r3, [sp, #8]
   218b4:	ab0e      	add	r3, sp, #56	; 0x38
   218b6:	9301      	str	r3, [sp, #4]
   218b8:	ab09      	add	r3, sp, #36	; 0x24
   218ba:	9300      	str	r3, [sp, #0]
   218bc:	ab0d      	add	r3, sp, #52	; 0x34
   218be:	2229      	movs	r2, #41	; 0x29
   218c0:	a902      	add	r1, sp, #8
   218c2:	468c      	mov	ip, r1
   218c4:	4462      	add	r2, ip
   218c6:	a908      	add	r1, sp, #32
   218c8:	202a      	movs	r0, #42	; 0x2a
   218ca:	4460      	add	r0, ip
   218cc:	4e38      	ldr	r6, [pc, #224]	; (219b0 <cycle+0x1b8>)
   218ce:	47b0      	blx	r6
        rc = SUCCESS;
   218d0:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   218d2:	2801      	cmp	r0, #1
   218d4:	d15b      	bne.n	2198e <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   218d6:	ae0c      	add	r6, sp, #48	; 0x30
   218d8:	ab02      	add	r3, sp, #8
   218da:	7e1b      	ldrb	r3, [r3, #24]
   218dc:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   218de:	0032      	movs	r2, r6
   218e0:	a909      	add	r1, sp, #36	; 0x24
   218e2:	0020      	movs	r0, r4
   218e4:	4b33      	ldr	r3, [pc, #204]	; (219b4 <cycle+0x1bc>)
   218e6:	4798      	blx	r3
            if (msg.qos != QOS0)
   218e8:	7833      	ldrb	r3, [r6, #0]
   218ea:	2b00      	cmp	r3, #0
   218ec:	d028      	beq.n	21940 <cycle+0x148>
            {
                if (msg.qos == QOS1)
   218ee:	2b01      	cmp	r3, #1
   218f0:	d004      	beq.n	218fc <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   218f2:	2b02      	cmp	r3, #2
   218f4:	d016      	beq.n	21924 <cycle+0x12c>
   218f6:	2601      	movs	r6, #1
   218f8:	4276      	negs	r6, r6
   218fa:	e048      	b.n	2198e <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   218fc:	ab0c      	add	r3, sp, #48	; 0x30
   218fe:	889b      	ldrh	r3, [r3, #4]
   21900:	9300      	str	r3, [sp, #0]
   21902:	2300      	movs	r3, #0
   21904:	2204      	movs	r2, #4
   21906:	68a1      	ldr	r1, [r4, #8]
   21908:	6920      	ldr	r0, [r4, #16]
   2190a:	4e2b      	ldr	r6, [pc, #172]	; (219b8 <cycle+0x1c0>)
   2190c:	47b0      	blx	r6
   2190e:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   21910:	2900      	cmp	r1, #0
   21912:	dd12      	ble.n	2193a <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   21914:	9a07      	ldr	r2, [sp, #28]
   21916:	0020      	movs	r0, r4
   21918:	4b28      	ldr	r3, [pc, #160]	; (219bc <cycle+0x1c4>)
   2191a:	4798      	blx	r3
   2191c:	0006      	movs	r6, r0
                if (rc == FAILURE)
   2191e:	1c43      	adds	r3, r0, #1
   21920:	d132      	bne.n	21988 <cycle+0x190>
   21922:	e034      	b.n	2198e <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   21924:	ab0c      	add	r3, sp, #48	; 0x30
   21926:	889b      	ldrh	r3, [r3, #4]
   21928:	9300      	str	r3, [sp, #0]
   2192a:	2300      	movs	r3, #0
   2192c:	2205      	movs	r2, #5
   2192e:	68a1      	ldr	r1, [r4, #8]
   21930:	6920      	ldr	r0, [r4, #16]
   21932:	4e21      	ldr	r6, [pc, #132]	; (219b8 <cycle+0x1c0>)
   21934:	47b0      	blx	r6
   21936:	0001      	movs	r1, r0
   21938:	e7ea      	b.n	21910 <cycle+0x118>
   2193a:	2601      	movs	r6, #1
   2193c:	4276      	negs	r6, r6
   2193e:	e026      	b.n	2198e <cycle+0x196>
        rc = SUCCESS;
   21940:	2600      	movs	r6, #0
   21942:	e021      	b.n	21988 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   21944:	68e2      	ldr	r2, [r4, #12]
   21946:	9200      	str	r2, [sp, #0]
   21948:	aa0c      	add	r2, sp, #48	; 0x30
   2194a:	a908      	add	r1, sp, #32
   2194c:	a809      	add	r0, sp, #36	; 0x24
   2194e:	4e1c      	ldr	r6, [pc, #112]	; (219c0 <cycle+0x1c8>)
   21950:	47b0      	blx	r6
   21952:	2801      	cmp	r0, #1
   21954:	d002      	beq.n	2195c <cycle+0x164>
   21956:	2601      	movs	r6, #1
   21958:	4276      	negs	r6, r6
   2195a:	e01b      	b.n	21994 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2195c:	ab0c      	add	r3, sp, #48	; 0x30
   2195e:	881b      	ldrh	r3, [r3, #0]
   21960:	9300      	str	r3, [sp, #0]
   21962:	2300      	movs	r3, #0
   21964:	2206      	movs	r2, #6
   21966:	68a1      	ldr	r1, [r4, #8]
   21968:	6920      	ldr	r0, [r4, #16]
   2196a:	4e13      	ldr	r6, [pc, #76]	; (219b8 <cycle+0x1c0>)
   2196c:	47b0      	blx	r6
   2196e:	2800      	cmp	r0, #0
   21970:	ddf1      	ble.n	21956 <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   21972:	9a07      	ldr	r2, [sp, #28]
   21974:	0001      	movs	r1, r0
   21976:	0020      	movs	r0, r4
   21978:	4b10      	ldr	r3, [pc, #64]	; (219bc <cycle+0x1c4>)
   2197a:	4798      	blx	r3
   2197c:	1e06      	subs	r6, r0, #0
   2197e:	d1ea      	bne.n	21956 <cycle+0x15e>
   21980:	e002      	b.n	21988 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   21982:	2300      	movs	r3, #0
   21984:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   21986:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   21988:	0020      	movs	r0, r4
   2198a:	4b0e      	ldr	r3, [pc, #56]	; (219c4 <cycle+0x1cc>)
   2198c:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   2198e:	2e00      	cmp	r6, #0
   21990:	d100      	bne.n	21994 <cycle+0x19c>
   21992:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   21994:	0030      	movs	r0, r6
   21996:	b010      	add	sp, #64	; 0x40
   21998:	bc1c      	pop	{r2, r3, r4}
   2199a:	4690      	mov	r8, r2
   2199c:	4699      	mov	r9, r3
   2199e:	46a3      	mov	fp, r4
   219a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   219a2:	4d09      	ldr	r5, [pc, #36]	; (219c8 <cycle+0x1d0>)
        rc = SUCCESS;
   219a4:	2600      	movs	r6, #0
   219a6:	e7ef      	b.n	21988 <cycle+0x190>
   219a8:	00021f69 	.word	0x00021f69
   219ac:	00022655 	.word	0x00022655
   219b0:	0002254d 	.word	0x0002254d
   219b4:	00021679 	.word	0x00021679
   219b8:	00022989 	.word	0x00022989
   219bc:	000215c5 	.word	0x000215c5
   219c0:	000225e5 	.word	0x000225e5
   219c4:	0002177d 	.word	0x0002177d
   219c8:	0000ffff 	.word	0x0000ffff

000219cc <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   219cc:	b570      	push	{r4, r5, r6, lr}
   219ce:	b082      	sub	sp, #8
   219d0:	0005      	movs	r5, r0
   219d2:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   219d4:	4668      	mov	r0, sp
   219d6:	4b0a      	ldr	r3, [pc, #40]	; (21a00 <MQTTYield+0x34>)
   219d8:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   219da:	0021      	movs	r1, r4
   219dc:	4668      	mov	r0, sp
   219de:	4b09      	ldr	r3, [pc, #36]	; (21a04 <MQTTYield+0x38>)
   219e0:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   219e2:	4c09      	ldr	r4, [pc, #36]	; (21a08 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   219e4:	4e09      	ldr	r6, [pc, #36]	; (21a0c <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   219e6:	4669      	mov	r1, sp
   219e8:	0028      	movs	r0, r5
   219ea:	47a0      	blx	r4
   219ec:	1c43      	adds	r3, r0, #1
   219ee:	d004      	beq.n	219fa <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   219f0:	4668      	mov	r0, sp
   219f2:	47b0      	blx	r6
   219f4:	2800      	cmp	r0, #0
   219f6:	d0f6      	beq.n	219e6 <MQTTYield+0x1a>
    int rc = SUCCESS;
   219f8:	2000      	movs	r0, #0
        
    return rc;
}
   219fa:	b002      	add	sp, #8
   219fc:	bd70      	pop	{r4, r5, r6, pc}
   219fe:	46c0      	nop			; (mov r8, r8)
   21a00:	00021f81 	.word	0x00021f81
   21a04:	00021f45 	.word	0x00021f45
   21a08:	000217f9 	.word	0x000217f9
   21a0c:	00021f31 	.word	0x00021f31

00021a10 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   21a10:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a12:	b083      	sub	sp, #12
   21a14:	9001      	str	r0, [sp, #4]
   21a16:	000e      	movs	r6, r1
   21a18:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   21a1a:	2401      	movs	r4, #1
   21a1c:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   21a1e:	4f08      	ldr	r7, [pc, #32]	; (21a40 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   21a20:	4d08      	ldr	r5, [pc, #32]	; (21a44 <waitfor+0x34>)
        if (TimerIsExpired(timer))
   21a22:	9800      	ldr	r0, [sp, #0]
   21a24:	47b8      	blx	r7
   21a26:	2800      	cmp	r0, #0
   21a28:	d106      	bne.n	21a38 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   21a2a:	9900      	ldr	r1, [sp, #0]
   21a2c:	9801      	ldr	r0, [sp, #4]
   21a2e:	47a8      	blx	r5
   21a30:	0004      	movs	r4, r0
   21a32:	42b0      	cmp	r0, r6
   21a34:	d1f5      	bne.n	21a22 <waitfor+0x12>
   21a36:	0034      	movs	r4, r6
    
    return rc;
}
   21a38:	0020      	movs	r0, r4
   21a3a:	b003      	add	sp, #12
   21a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a3e:	46c0      	nop			; (mov r8, r8)
   21a40:	00021f31 	.word	0x00021f31
   21a44:	000217f9 	.word	0x000217f9

00021a48 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   21a48:	b530      	push	{r4, r5, lr}
   21a4a:	b09b      	sub	sp, #108	; 0x6c
   21a4c:	0004      	movs	r4, r0
   21a4e:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   21a50:	2258      	movs	r2, #88	; 0x58
   21a52:	4928      	ldr	r1, [pc, #160]	; (21af4 <MQTTConnect+0xac>)
   21a54:	a802      	add	r0, sp, #8
   21a56:	4b28      	ldr	r3, [pc, #160]	; (21af8 <MQTTConnect+0xb0>)
   21a58:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   21a5a:	6a23      	ldr	r3, [r4, #32]
   21a5c:	2b00      	cmp	r3, #0
   21a5e:	d13f      	bne.n	21ae0 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   21a60:	a818      	add	r0, sp, #96	; 0x60
   21a62:	4b26      	ldr	r3, [pc, #152]	; (21afc <MQTTConnect+0xb4>)
   21a64:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   21a66:	6861      	ldr	r1, [r4, #4]
   21a68:	a818      	add	r0, sp, #96	; 0x60
   21a6a:	4b25      	ldr	r3, [pc, #148]	; (21b00 <MQTTConnect+0xb8>)
   21a6c:	4798      	blx	r3

    if (options == 0)
   21a6e:	2d00      	cmp	r5, #0
   21a70:	d015      	beq.n	21a9e <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   21a72:	8b29      	ldrh	r1, [r5, #24]
   21a74:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   21a76:	0020      	movs	r0, r4
   21a78:	3054      	adds	r0, #84	; 0x54
   21a7a:	4b22      	ldr	r3, [pc, #136]	; (21b04 <MQTTConnect+0xbc>)
   21a7c:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   21a7e:	002a      	movs	r2, r5
   21a80:	68a1      	ldr	r1, [r4, #8]
   21a82:	6920      	ldr	r0, [r4, #16]
   21a84:	4b20      	ldr	r3, [pc, #128]	; (21b08 <MQTTConnect+0xc0>)
   21a86:	4798      	blx	r3
   21a88:	2800      	cmp	r0, #0
   21a8a:	dd2c      	ble.n	21ae6 <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   21a8c:	aa18      	add	r2, sp, #96	; 0x60
   21a8e:	0001      	movs	r1, r0
   21a90:	0020      	movs	r0, r4
   21a92:	4b1e      	ldr	r3, [pc, #120]	; (21b0c <MQTTConnect+0xc4>)
   21a94:	4798      	blx	r3
   21a96:	2800      	cmp	r0, #0
   21a98:	d003      	beq.n	21aa2 <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   21a9a:	b01b      	add	sp, #108	; 0x6c
   21a9c:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   21a9e:	ad02      	add	r5, sp, #8
   21aa0:	e7e7      	b.n	21a72 <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   21aa2:	aa18      	add	r2, sp, #96	; 0x60
   21aa4:	2102      	movs	r1, #2
   21aa6:	0020      	movs	r0, r4
   21aa8:	4b19      	ldr	r3, [pc, #100]	; (21b10 <MQTTConnect+0xc8>)
   21aaa:	4798      	blx	r3
   21aac:	2802      	cmp	r0, #2
   21aae:	d11d      	bne.n	21aec <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   21ab0:	466b      	mov	r3, sp
   21ab2:	1d99      	adds	r1, r3, #6
   21ab4:	23ff      	movs	r3, #255	; 0xff
   21ab6:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   21ab8:	466b      	mov	r3, sp
   21aba:	1dd8      	adds	r0, r3, #7
   21abc:	2300      	movs	r3, #0
   21abe:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   21ac0:	68e3      	ldr	r3, [r4, #12]
   21ac2:	6962      	ldr	r2, [r4, #20]
   21ac4:	4d13      	ldr	r5, [pc, #76]	; (21b14 <MQTTConnect+0xcc>)
   21ac6:	47a8      	blx	r5
   21ac8:	2801      	cmp	r0, #1
   21aca:	d002      	beq.n	21ad2 <MQTTConnect+0x8a>
            rc = FAILURE;
   21acc:	2001      	movs	r0, #1
   21ace:	4240      	negs	r0, r0
   21ad0:	e7e3      	b.n	21a9a <MQTTConnect+0x52>
            rc = connack_rc;
   21ad2:	466b      	mov	r3, sp
   21ad4:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   21ad6:	2800      	cmp	r0, #0
   21ad8:	d1df      	bne.n	21a9a <MQTTConnect+0x52>
        c->isconnected = 1;
   21ada:	2301      	movs	r3, #1
   21adc:	6223      	str	r3, [r4, #32]
    return rc;
   21ade:	e7dc      	b.n	21a9a <MQTTConnect+0x52>
    int rc = FAILURE;
   21ae0:	2001      	movs	r0, #1
   21ae2:	4240      	negs	r0, r0
   21ae4:	e7d9      	b.n	21a9a <MQTTConnect+0x52>
   21ae6:	2001      	movs	r0, #1
   21ae8:	4240      	negs	r0, r0
   21aea:	e7d6      	b.n	21a9a <MQTTConnect+0x52>
        rc = FAILURE;
   21aec:	2001      	movs	r0, #1
   21aee:	4240      	negs	r0, r0
   21af0:	e7d3      	b.n	21a9a <MQTTConnect+0x52>
   21af2:	46c0      	nop			; (mov r8, r8)
   21af4:	0002a7fc 	.word	0x0002a7fc
   21af8:	00026215 	.word	0x00026215
   21afc:	00021f81 	.word	0x00021f81
   21b00:	00021f45 	.word	0x00021f45
   21b04:	00021f59 	.word	0x00021f59
   21b08:	00022359 	.word	0x00022359
   21b0c:	000215c5 	.word	0x000215c5
   21b10:	00021a11 	.word	0x00021a11
   21b14:	000224a1 	.word	0x000224a1

00021b18 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   21b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b1a:	b091      	sub	sp, #68	; 0x44
   21b1c:	0004      	movs	r4, r0
   21b1e:	000f      	movs	r7, r1
   21b20:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   21b22:	2300      	movs	r3, #0
   21b24:	930c      	str	r3, [sp, #48]	; 0x30
   21b26:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   21b28:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   21b2a:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   21b2c:	6a03      	ldr	r3, [r0, #32]
   21b2e:	2b00      	cmp	r3, #0
   21b30:	d05c      	beq.n	21bec <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   21b32:	a80e      	add	r0, sp, #56	; 0x38
   21b34:	4b32      	ldr	r3, [pc, #200]	; (21c00 <MQTTSubscribe+0xe8>)
   21b36:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21b38:	6861      	ldr	r1, [r4, #4]
   21b3a:	a80e      	add	r0, sp, #56	; 0x38
   21b3c:	4b31      	ldr	r3, [pc, #196]	; (21c04 <MQTTSubscribe+0xec>)
   21b3e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   21b40:	6920      	ldr	r0, [r4, #16]
   21b42:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21b44:	6823      	ldr	r3, [r4, #0]
   21b46:	4a30      	ldr	r2, [pc, #192]	; (21c08 <MQTTSubscribe+0xf0>)
   21b48:	4293      	cmp	r3, r2
   21b4a:	d017      	beq.n	21b7c <MQTTSubscribe+0x64>
   21b4c:	3301      	adds	r3, #1
   21b4e:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   21b50:	b29b      	uxth	r3, r3
   21b52:	aa0a      	add	r2, sp, #40	; 0x28
   21b54:	9202      	str	r2, [sp, #8]
   21b56:	aa0b      	add	r2, sp, #44	; 0x2c
   21b58:	9201      	str	r2, [sp, #4]
   21b5a:	2201      	movs	r2, #1
   21b5c:	9200      	str	r2, [sp, #0]
   21b5e:	2200      	movs	r2, #0
   21b60:	4e2a      	ldr	r6, [pc, #168]	; (21c0c <MQTTSubscribe+0xf4>)
   21b62:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   21b64:	2800      	cmp	r0, #0
   21b66:	dd44      	ble.n	21bf2 <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21b68:	aa0e      	add	r2, sp, #56	; 0x38
   21b6a:	0001      	movs	r1, r0
   21b6c:	0020      	movs	r0, r4
   21b6e:	4b28      	ldr	r3, [pc, #160]	; (21c10 <MQTTSubscribe+0xf8>)
   21b70:	4798      	blx	r3
   21b72:	1e06      	subs	r6, r0, #0
   21b74:	d004      	beq.n	21b80 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21b76:	0030      	movs	r0, r6
   21b78:	b011      	add	sp, #68	; 0x44
   21b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21b7c:	2301      	movs	r3, #1
   21b7e:	e7e6      	b.n	21b4e <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   21b80:	aa0e      	add	r2, sp, #56	; 0x38
   21b82:	2109      	movs	r1, #9
   21b84:	0020      	movs	r0, r4
   21b86:	4b23      	ldr	r3, [pc, #140]	; (21c14 <MQTTSubscribe+0xfc>)
   21b88:	4798      	blx	r3
   21b8a:	2809      	cmp	r0, #9
   21b8c:	d134      	bne.n	21bf8 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   21b8e:	2300      	movs	r3, #0
   21b90:	9308      	str	r3, [sp, #32]
   21b92:	3b01      	subs	r3, #1
   21b94:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   21b96:	68e3      	ldr	r3, [r4, #12]
   21b98:	9301      	str	r3, [sp, #4]
   21b9a:	6963      	ldr	r3, [r4, #20]
   21b9c:	9300      	str	r3, [sp, #0]
   21b9e:	ab09      	add	r3, sp, #36	; 0x24
   21ba0:	aa08      	add	r2, sp, #32
   21ba2:	2101      	movs	r1, #1
   21ba4:	300d      	adds	r0, #13
   21ba6:	ad02      	add	r5, sp, #8
   21ba8:	46ac      	mov	ip, r5
   21baa:	4460      	add	r0, ip
   21bac:	4d1a      	ldr	r5, [pc, #104]	; (21c18 <MQTTSubscribe+0x100>)
   21bae:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21bb0:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   21bb2:	2801      	cmp	r0, #1
   21bb4:	d00e      	beq.n	21bd4 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   21bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21bb8:	2b00      	cmp	r3, #0
   21bba:	d010      	beq.n	21bde <MQTTSubscribe+0xc6>
   21bbc:	0022      	movs	r2, r4
   21bbe:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   21bc0:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   21bc2:	6810      	ldr	r0, [r2, #0]
   21bc4:	2800      	cmp	r0, #0
   21bc6:	d00b      	beq.n	21be0 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   21bc8:	3301      	adds	r3, #1
   21bca:	3208      	adds	r2, #8
   21bcc:	2b05      	cmp	r3, #5
   21bce:	d1f8      	bne.n	21bc2 <MQTTSubscribe+0xaa>
   21bd0:	000e      	movs	r6, r1
   21bd2:	e7d0      	b.n	21b76 <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   21bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   21bd6:	2980      	cmp	r1, #128	; 0x80
   21bd8:	d1ed      	bne.n	21bb6 <MQTTSubscribe+0x9e>
   21bda:	000e      	movs	r6, r1
   21bdc:	e7cb      	b.n	21b76 <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   21bde:	0033      	movs	r3, r6
   21be0:	00db      	lsls	r3, r3, #3
   21be2:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   21be4:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   21be6:	9b05      	ldr	r3, [sp, #20]
   21be8:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   21bea:	e7c4      	b.n	21b76 <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   21bec:	2601      	movs	r6, #1
   21bee:	4276      	negs	r6, r6
   21bf0:	e7c1      	b.n	21b76 <MQTTSubscribe+0x5e>
   21bf2:	2601      	movs	r6, #1
   21bf4:	4276      	negs	r6, r6
   21bf6:	e7be      	b.n	21b76 <MQTTSubscribe+0x5e>
        rc = FAILURE;
   21bf8:	2601      	movs	r6, #1
   21bfa:	4276      	negs	r6, r6
    return rc;
   21bfc:	e7bb      	b.n	21b76 <MQTTSubscribe+0x5e>
   21bfe:	46c0      	nop			; (mov r8, r8)
   21c00:	00021f81 	.word	0x00021f81
   21c04:	00021f45 	.word	0x00021f45
   21c08:	0000ffff 	.word	0x0000ffff
   21c0c:	00022a21 	.word	0x00022a21
   21c10:	000215c5 	.word	0x000215c5
   21c14:	00021a11 	.word	0x00021a11
   21c18:	00022ad5 	.word	0x00022ad5

00021c1c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   21c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c1e:	b08f      	sub	sp, #60	; 0x3c
   21c20:	0005      	movs	r5, r0
   21c22:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   21c24:	2300      	movs	r3, #0
   21c26:	930a      	str	r3, [sp, #40]	; 0x28
   21c28:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   21c2a:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   21c2c:	6a03      	ldr	r3, [r0, #32]
   21c2e:	2b00      	cmp	r3, #0
   21c30:	d062      	beq.n	21cf8 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   21c32:	a80c      	add	r0, sp, #48	; 0x30
   21c34:	4b36      	ldr	r3, [pc, #216]	; (21d10 <MQTTPublish+0xf4>)
   21c36:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21c38:	6869      	ldr	r1, [r5, #4]
   21c3a:	a80c      	add	r0, sp, #48	; 0x30
   21c3c:	4b35      	ldr	r3, [pc, #212]	; (21d14 <MQTTPublish+0xf8>)
   21c3e:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   21c40:	7823      	ldrb	r3, [r4, #0]
   21c42:	3b01      	subs	r3, #1
   21c44:	2b01      	cmp	r3, #1
   21c46:	d921      	bls.n	21c8c <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   21c48:	7823      	ldrb	r3, [r4, #0]
   21c4a:	68e2      	ldr	r2, [r4, #12]
   21c4c:	9206      	str	r2, [sp, #24]
   21c4e:	68a2      	ldr	r2, [r4, #8]
   21c50:	9205      	str	r2, [sp, #20]
   21c52:	aa09      	add	r2, sp, #36	; 0x24
   21c54:	a902      	add	r1, sp, #8
   21c56:	cac1      	ldmia	r2!, {r0, r6, r7}
   21c58:	c1c1      	stmia	r1!, {r0, r6, r7}
   21c5a:	88a2      	ldrh	r2, [r4, #4]
   21c5c:	9201      	str	r2, [sp, #4]
   21c5e:	7862      	ldrb	r2, [r4, #1]
   21c60:	9200      	str	r2, [sp, #0]
   21c62:	2200      	movs	r2, #0
   21c64:	68a9      	ldr	r1, [r5, #8]
   21c66:	6928      	ldr	r0, [r5, #16]
   21c68:	4e2b      	ldr	r6, [pc, #172]	; (21d18 <MQTTPublish+0xfc>)
   21c6a:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   21c6c:	2800      	cmp	r0, #0
   21c6e:	dd46      	ble.n	21cfe <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   21c70:	aa0c      	add	r2, sp, #48	; 0x30
   21c72:	0001      	movs	r1, r0
   21c74:	0028      	movs	r0, r5
   21c76:	4b29      	ldr	r3, [pc, #164]	; (21d1c <MQTTPublish+0x100>)
   21c78:	4798      	blx	r3
   21c7a:	2800      	cmp	r0, #0
   21c7c:	d104      	bne.n	21c88 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   21c7e:	7823      	ldrb	r3, [r4, #0]
   21c80:	2b01      	cmp	r3, #1
   21c82:	d00d      	beq.n	21ca0 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   21c84:	2b02      	cmp	r3, #2
   21c86:	d021      	beq.n	21ccc <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21c88:	b00f      	add	sp, #60	; 0x3c
   21c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21c8c:	682b      	ldr	r3, [r5, #0]
   21c8e:	4a24      	ldr	r2, [pc, #144]	; (21d20 <MQTTPublish+0x104>)
   21c90:	4293      	cmp	r3, r2
   21c92:	d003      	beq.n	21c9c <MQTTPublish+0x80>
   21c94:	3301      	adds	r3, #1
   21c96:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   21c98:	80a3      	strh	r3, [r4, #4]
   21c9a:	e7d5      	b.n	21c48 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   21c9c:	2301      	movs	r3, #1
   21c9e:	e7fa      	b.n	21c96 <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   21ca0:	aa0c      	add	r2, sp, #48	; 0x30
   21ca2:	2104      	movs	r1, #4
   21ca4:	0028      	movs	r0, r5
   21ca6:	4b1f      	ldr	r3, [pc, #124]	; (21d24 <MQTTPublish+0x108>)
   21ca8:	4798      	blx	r3
   21caa:	2804      	cmp	r0, #4
   21cac:	d12a      	bne.n	21d04 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   21cae:	696b      	ldr	r3, [r5, #20]
   21cb0:	68ea      	ldr	r2, [r5, #12]
   21cb2:	9200      	str	r2, [sp, #0]
   21cb4:	2222      	movs	r2, #34	; 0x22
   21cb6:	446a      	add	r2, sp
   21cb8:	a908      	add	r1, sp, #32
   21cba:	301d      	adds	r0, #29
   21cbc:	4468      	add	r0, sp
   21cbe:	4c1a      	ldr	r4, [pc, #104]	; (21d28 <MQTTPublish+0x10c>)
   21cc0:	47a0      	blx	r4
   21cc2:	3801      	subs	r0, #1
   21cc4:	1e43      	subs	r3, r0, #1
   21cc6:	4198      	sbcs	r0, r3
   21cc8:	4240      	negs	r0, r0
   21cca:	e7dd      	b.n	21c88 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   21ccc:	aa0c      	add	r2, sp, #48	; 0x30
   21cce:	2107      	movs	r1, #7
   21cd0:	0028      	movs	r0, r5
   21cd2:	4b14      	ldr	r3, [pc, #80]	; (21d24 <MQTTPublish+0x108>)
   21cd4:	4798      	blx	r3
   21cd6:	2807      	cmp	r0, #7
   21cd8:	d117      	bne.n	21d0a <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   21cda:	696b      	ldr	r3, [r5, #20]
   21cdc:	68ea      	ldr	r2, [r5, #12]
   21cde:	9200      	str	r2, [sp, #0]
   21ce0:	2222      	movs	r2, #34	; 0x22
   21ce2:	446a      	add	r2, sp
   21ce4:	a908      	add	r1, sp, #32
   21ce6:	301a      	adds	r0, #26
   21ce8:	4468      	add	r0, sp
   21cea:	4c0f      	ldr	r4, [pc, #60]	; (21d28 <MQTTPublish+0x10c>)
   21cec:	47a0      	blx	r4
   21cee:	3801      	subs	r0, #1
   21cf0:	1e43      	subs	r3, r0, #1
   21cf2:	4198      	sbcs	r0, r3
   21cf4:	4240      	negs	r0, r0
   21cf6:	e7c7      	b.n	21c88 <MQTTPublish+0x6c>
    int rc = FAILURE;
   21cf8:	2001      	movs	r0, #1
   21cfa:	4240      	negs	r0, r0
   21cfc:	e7c4      	b.n	21c88 <MQTTPublish+0x6c>
   21cfe:	2001      	movs	r0, #1
   21d00:	4240      	negs	r0, r0
   21d02:	e7c1      	b.n	21c88 <MQTTPublish+0x6c>
            rc = FAILURE;
   21d04:	2001      	movs	r0, #1
   21d06:	4240      	negs	r0, r0
   21d08:	e7be      	b.n	21c88 <MQTTPublish+0x6c>
            rc = FAILURE;
   21d0a:	2001      	movs	r0, #1
   21d0c:	4240      	negs	r0, r0
    return rc;
   21d0e:	e7bb      	b.n	21c88 <MQTTPublish+0x6c>
   21d10:	00021f81 	.word	0x00021f81
   21d14:	00021f45 	.word	0x00021f45
   21d18:	000228c1 	.word	0x000228c1
   21d1c:	000215c5 	.word	0x000215c5
   21d20:	0000ffff 	.word	0x0000ffff
   21d24:	00021a11 	.word	0x00021a11
   21d28:	000225e5 	.word	0x000225e5

00021d2c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   21d2c:	b510      	push	{r4, lr}
   21d2e:	b082      	sub	sp, #8
   21d30:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   21d32:	4668      	mov	r0, sp
   21d34:	4b0b      	ldr	r3, [pc, #44]	; (21d64 <MQTTDisconnect+0x38>)
   21d36:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   21d38:	6861      	ldr	r1, [r4, #4]
   21d3a:	4668      	mov	r0, sp
   21d3c:	4b0a      	ldr	r3, [pc, #40]	; (21d68 <MQTTDisconnect+0x3c>)
   21d3e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   21d40:	68a1      	ldr	r1, [r4, #8]
   21d42:	6920      	ldr	r0, [r4, #16]
   21d44:	4b09      	ldr	r3, [pc, #36]	; (21d6c <MQTTDisconnect+0x40>)
   21d46:	4798      	blx	r3
    if (len > 0)
   21d48:	2800      	cmp	r0, #0
   21d4a:	dd08      	ble.n	21d5e <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   21d4c:	466a      	mov	r2, sp
   21d4e:	0001      	movs	r1, r0
   21d50:	0020      	movs	r0, r4
   21d52:	4b07      	ldr	r3, [pc, #28]	; (21d70 <MQTTDisconnect+0x44>)
   21d54:	4798      	blx	r3
        
    c->isconnected = 0;
   21d56:	2300      	movs	r3, #0
   21d58:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   21d5a:	b002      	add	sp, #8
   21d5c:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   21d5e:	2001      	movs	r0, #1
   21d60:	4240      	negs	r0, r0
   21d62:	e7f8      	b.n	21d56 <MQTTDisconnect+0x2a>
   21d64:	00021f81 	.word	0x00021f81
   21d68:	00021f45 	.word	0x00021f45
   21d6c:	0002252d 	.word	0x0002252d
   21d70:	000215c5 	.word	0x000215c5

00021d74 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   21d74:	b510      	push	{r4, lr}
   21d76:	0004      	movs	r4, r0
	close(n->socket);
   21d78:	2000      	movs	r0, #0
   21d7a:	5620      	ldrsb	r0, [r4, r0]
   21d7c:	4b04      	ldr	r3, [pc, #16]	; (21d90 <WINC1500_disconnect+0x1c>)
   21d7e:	4798      	blx	r3
	n->socket=-1;
   21d80:	2301      	movs	r3, #1
   21d82:	425b      	negs	r3, r3
   21d84:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   21d86:	2200      	movs	r2, #0
   21d88:	4b02      	ldr	r3, [pc, #8]	; (21d94 <WINC1500_disconnect+0x20>)
   21d8a:	701a      	strb	r2, [r3, #0]
}
   21d8c:	bd10      	pop	{r4, pc}
   21d8e:	46c0      	nop			; (mov r8, r8)
   21d90:	0001d235 	.word	0x0001d235
   21d94:	20003dea 	.word	0x20003dea

00021d98 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   21d98:	b570      	push	{r4, r5, r6, lr}
   21d9a:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   21d9c:	2200      	movs	r2, #0
   21d9e:	4b0d      	ldr	r3, [pc, #52]	; (21dd4 <WINC1500_write+0x3c>)
   21da0:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   21da2:	b2b2      	uxth	r2, r6
   21da4:	7800      	ldrb	r0, [r0, #0]
   21da6:	b240      	sxtb	r0, r0
   21da8:	2300      	movs	r3, #0
   21daa:	4c0b      	ldr	r4, [pc, #44]	; (21dd8 <WINC1500_write+0x40>)
   21dac:	47a0      	blx	r4
   21dae:	2800      	cmp	r0, #0
   21db0:	d10c      	bne.n	21dcc <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   21db2:	4b08      	ldr	r3, [pc, #32]	; (21dd4 <WINC1500_write+0x3c>)
   21db4:	781b      	ldrb	r3, [r3, #0]
   21db6:	2b00      	cmp	r3, #0
   21db8:	d106      	bne.n	21dc8 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   21dba:	4d08      	ldr	r5, [pc, #32]	; (21ddc <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   21dbc:	4c05      	ldr	r4, [pc, #20]	; (21dd4 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   21dbe:	2000      	movs	r0, #0
   21dc0:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   21dc2:	7823      	ldrb	r3, [r4, #0]
   21dc4:	2b00      	cmp	r3, #0
   21dc6:	d0fa      	beq.n	21dbe <WINC1500_write+0x26>
}
   21dc8:	0030      	movs	r0, r6
   21dca:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   21dcc:	2601      	movs	r6, #1
   21dce:	4276      	negs	r6, r6
   21dd0:	e7fa      	b.n	21dc8 <WINC1500_write+0x30>
   21dd2:	46c0      	nop			; (mov r8, r8)
   21dd4:	20003ded 	.word	0x20003ded
   21dd8:	0001d109 	.word	0x0001d109
   21ddc:	0001b121 	.word	0x0001b121

00021de0 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   21de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21de2:	b083      	sub	sp, #12
   21de4:	9101      	str	r1, [sp, #4]
   21de6:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   21de8:	2b00      	cmp	r3, #0
   21dea:	d100      	bne.n	21dee <WINC1500_read+0xe>
   21dec:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   21dee:	4a22      	ldr	r2, [pc, #136]	; (21e78 <WINC1500_read+0x98>)
   21df0:	6812      	ldr	r2, [r2, #0]
   21df2:	2a00      	cmp	r2, #0
   21df4:	d013      	beq.n	21e1e <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   21df6:	4b20      	ldr	r3, [pc, #128]	; (21e78 <WINC1500_read+0x98>)
   21df8:	681d      	ldr	r5, [r3, #0]
   21dfa:	42a5      	cmp	r5, r4
   21dfc:	db39      	blt.n	21e72 <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   21dfe:	4e1f      	ldr	r6, [pc, #124]	; (21e7c <WINC1500_read+0x9c>)
   21e00:	6837      	ldr	r7, [r6, #0]
   21e02:	491f      	ldr	r1, [pc, #124]	; (21e80 <WINC1500_read+0xa0>)
   21e04:	19c9      	adds	r1, r1, r7
   21e06:	0022      	movs	r2, r4
   21e08:	9801      	ldr	r0, [sp, #4]
   21e0a:	4b1e      	ldr	r3, [pc, #120]	; (21e84 <WINC1500_read+0xa4>)
   21e0c:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   21e0e:	1b2d      	subs	r5, r5, r4
   21e10:	4b19      	ldr	r3, [pc, #100]	; (21e78 <WINC1500_read+0x98>)
   21e12:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   21e14:	193f      	adds	r7, r7, r4
   21e16:	6037      	str	r7, [r6, #0]
  return len;
   21e18:	0020      	movs	r0, r4
}
   21e1a:	b003      	add	sp, #12
   21e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   21e1e:	2100      	movs	r1, #0
   21e20:	4a19      	ldr	r2, [pc, #100]	; (21e88 <WINC1500_read+0xa8>)
   21e22:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   21e24:	7800      	ldrb	r0, [r0, #0]
   21e26:	b240      	sxtb	r0, r0
   21e28:	2280      	movs	r2, #128	; 0x80
   21e2a:	0052      	lsls	r2, r2, #1
   21e2c:	4914      	ldr	r1, [pc, #80]	; (21e80 <WINC1500_read+0xa0>)
   21e2e:	4d17      	ldr	r5, [pc, #92]	; (21e8c <WINC1500_read+0xac>)
   21e30:	47a8      	blx	r5
   21e32:	2800      	cmp	r0, #0
   21e34:	d11a      	bne.n	21e6c <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   21e36:	4b14      	ldr	r3, [pc, #80]	; (21e88 <WINC1500_read+0xa8>)
   21e38:	781b      	ldrb	r3, [r3, #0]
   21e3a:	2b00      	cmp	r3, #0
   21e3c:	d106      	bne.n	21e4c <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   21e3e:	4f14      	ldr	r7, [pc, #80]	; (21e90 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   21e40:	4d11      	ldr	r5, [pc, #68]	; (21e88 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   21e42:	2000      	movs	r0, #0
   21e44:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   21e46:	782b      	ldrb	r3, [r5, #0]
   21e48:	2b00      	cmp	r3, #0
   21e4a:	d0fa      	beq.n	21e42 <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   21e4c:	4b11      	ldr	r3, [pc, #68]	; (21e94 <WINC1500_read+0xb4>)
   21e4e:	6818      	ldr	r0, [r3, #0]
   21e50:	2800      	cmp	r0, #0
   21e52:	dd05      	ble.n	21e60 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   21e54:	4b08      	ldr	r3, [pc, #32]	; (21e78 <WINC1500_read+0x98>)
   21e56:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   21e58:	2200      	movs	r2, #0
   21e5a:	4b08      	ldr	r3, [pc, #32]	; (21e7c <WINC1500_read+0x9c>)
   21e5c:	601a      	str	r2, [r3, #0]
   21e5e:	e7ca      	b.n	21df6 <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   21e60:	2300      	movs	r3, #0
   21e62:	4a05      	ldr	r2, [pc, #20]	; (21e78 <WINC1500_read+0x98>)
   21e64:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   21e66:	4a05      	ldr	r2, [pc, #20]	; (21e7c <WINC1500_read+0x9c>)
   21e68:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   21e6a:	e7d6      	b.n	21e1a <WINC1500_read+0x3a>
		  return -1;
   21e6c:	2001      	movs	r0, #1
   21e6e:	4240      	negs	r0, r0
   21e70:	e7d3      	b.n	21e1a <WINC1500_read+0x3a>
	  return -1;
   21e72:	2001      	movs	r0, #1
   21e74:	4240      	negs	r0, r0
   21e76:	e7d0      	b.n	21e1a <WINC1500_read+0x3a>
   21e78:	20003efc 	.word	0x20003efc
   21e7c:	20003f00 	.word	0x20003f00
   21e80:	20003df0 	.word	0x20003df0
   21e84:	00026215 	.word	0x00026215
   21e88:	20003dec 	.word	0x20003dec
   21e8c:	0001d1a1 	.word	0x0001d1a1
   21e90:	0001b121 	.word	0x0001b121
   21e94:	20003ef4 	.word	0x20003ef4

00021e98 <dnsResolveCallback>:
{
   21e98:	b510      	push	{r4, lr}
   21e9a:	0002      	movs	r2, r0
   21e9c:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   21e9e:	4b08      	ldr	r3, [pc, #32]	; (21ec0 <dnsResolveCallback+0x28>)
   21ea0:	781b      	ldrb	r3, [r3, #0]
   21ea2:	2b00      	cmp	r3, #0
   21ea4:	d10b      	bne.n	21ebe <dnsResolveCallback+0x26>
   21ea6:	4b07      	ldr	r3, [pc, #28]	; (21ec4 <dnsResolveCallback+0x2c>)
   21ea8:	6818      	ldr	r0, [r3, #0]
   21eaa:	0011      	movs	r1, r2
   21eac:	4b06      	ldr	r3, [pc, #24]	; (21ec8 <dnsResolveCallback+0x30>)
   21eae:	4798      	blx	r3
   21eb0:	2800      	cmp	r0, #0
   21eb2:	d104      	bne.n	21ebe <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   21eb4:	4b05      	ldr	r3, [pc, #20]	; (21ecc <dnsResolveCallback+0x34>)
   21eb6:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   21eb8:	2201      	movs	r2, #1
   21eba:	4b01      	ldr	r3, [pc, #4]	; (21ec0 <dnsResolveCallback+0x28>)
   21ebc:	701a      	strb	r2, [r3, #0]
}
   21ebe:	bd10      	pop	{r4, pc}
   21ec0:	20003deb 	.word	0x20003deb
   21ec4:	20003ef8 	.word	0x20003ef8
   21ec8:	000265a3 	.word	0x000265a3
   21ecc:	20003ef0 	.word	0x20003ef0

00021ed0 <tcpClientSocketEventHandler>:
{
   21ed0:	b530      	push	{r4, r5, lr}
   21ed2:	4b12      	ldr	r3, [pc, #72]	; (21f1c <tcpClientSocketEventHandler+0x4c>)
   21ed4:	24a8      	movs	r4, #168	; 0xa8
   21ed6:	00a4      	lsls	r4, r4, #2
   21ed8:	191d      	adds	r5, r3, r4
   21eda:	e002      	b.n	21ee2 <tcpClientSocketEventHandler+0x12>
   21edc:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   21ede:	42ab      	cmp	r3, r5
   21ee0:	d00b      	beq.n	21efa <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   21ee2:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   21ee4:	2c00      	cmp	r4, #0
   21ee6:	d0f9      	beq.n	21edc <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   21ee8:	6a24      	ldr	r4, [r4, #32]
   21eea:	4284      	cmp	r4, r0
   21eec:	d1f6      	bne.n	21edc <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   21eee:	2906      	cmp	r1, #6
   21ef0:	d00c      	beq.n	21f0c <tcpClientSocketEventHandler+0x3c>
   21ef2:	2907      	cmp	r1, #7
   21ef4:	d006      	beq.n	21f04 <tcpClientSocketEventHandler+0x34>
   21ef6:	2905      	cmp	r1, #5
   21ef8:	d000      	beq.n	21efc <tcpClientSocketEventHandler+0x2c>
}
   21efa:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   21efc:	2201      	movs	r2, #1
   21efe:	4b08      	ldr	r3, [pc, #32]	; (21f20 <tcpClientSocketEventHandler+0x50>)
   21f00:	701a      	strb	r2, [r3, #0]
			break;
   21f02:	e7fa      	b.n	21efa <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   21f04:	2201      	movs	r2, #1
   21f06:	4b07      	ldr	r3, [pc, #28]	; (21f24 <tcpClientSocketEventHandler+0x54>)
   21f08:	701a      	strb	r2, [r3, #0]
			break;
   21f0a:	e7f6      	b.n	21efa <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   21f0c:	2304      	movs	r3, #4
   21f0e:	5ed2      	ldrsh	r2, [r2, r3]
   21f10:	4b05      	ldr	r3, [pc, #20]	; (21f28 <tcpClientSocketEventHandler+0x58>)
   21f12:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   21f14:	2201      	movs	r2, #1
   21f16:	4b05      	ldr	r3, [pc, #20]	; (21f2c <tcpClientSocketEventHandler+0x5c>)
   21f18:	701a      	strb	r2, [r3, #0]
}
   21f1a:	e7ee      	b.n	21efa <tcpClientSocketEventHandler+0x2a>
   21f1c:	20003f04 	.word	0x20003f04
   21f20:	20003dea 	.word	0x20003dea
   21f24:	20003ded 	.word	0x20003ded
   21f28:	20003ef4 	.word	0x20003ef4
   21f2c:	20003dec 	.word	0x20003dec

00021f30 <TimerIsExpired>:
char TimerIsExpired(Timer* timer) {
   21f30:	b510      	push	{r4, lr}
	long left = timer->end_time - xTaskGetTickCount();
   21f32:	6844      	ldr	r4, [r0, #4]
   21f34:	4b02      	ldr	r3, [pc, #8]	; (21f40 <TimerIsExpired+0x10>)
   21f36:	4798      	blx	r3
   21f38:	1a20      	subs	r0, r4, r0
	return (left < 0);
   21f3a:	0fc0      	lsrs	r0, r0, #31
}
   21f3c:	bd10      	pop	{r4, pc}
   21f3e:	46c0      	nop			; (mov r8, r8)
   21f40:	00017d81 	.word	0x00017d81

00021f44 <TimerCountdownMS>:
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
   21f44:	b570      	push	{r4, r5, r6, lr}
   21f46:	0004      	movs	r4, r0
   21f48:	000d      	movs	r5, r1
	timer->end_time = xTaskGetTickCount() + timeout;
   21f4a:	4b02      	ldr	r3, [pc, #8]	; (21f54 <TimerCountdownMS+0x10>)
   21f4c:	4798      	blx	r3
   21f4e:	1940      	adds	r0, r0, r5
   21f50:	6060      	str	r0, [r4, #4]
}
   21f52:	bd70      	pop	{r4, r5, r6, pc}
   21f54:	00017d81 	.word	0x00017d81

00021f58 <TimerCountdown>:
void TimerCountdown(Timer* timer, unsigned int timeout) {
   21f58:	b510      	push	{r4, lr}
   21f5a:	0004      	movs	r4, r0
	timer->end_time = xTaskGetTickCount(); + (timeout * 1000);
   21f5c:	4b01      	ldr	r3, [pc, #4]	; (21f64 <TimerCountdown+0xc>)
   21f5e:	4798      	blx	r3
   21f60:	6060      	str	r0, [r4, #4]
}
   21f62:	bd10      	pop	{r4, pc}
   21f64:	00017d81 	.word	0x00017d81

00021f68 <TimerLeftMS>:
int TimerLeftMS(Timer* timer) {
   21f68:	b510      	push	{r4, lr}
	long left = timer->end_time - xTaskGetTickCount();
   21f6a:	6844      	ldr	r4, [r0, #4]
   21f6c:	4b03      	ldr	r3, [pc, #12]	; (21f7c <TimerLeftMS+0x14>)
   21f6e:	4798      	blx	r3
   21f70:	1a20      	subs	r0, r4, r0
	return (left < 0) ? 0 : left;
   21f72:	43c3      	mvns	r3, r0
   21f74:	17db      	asrs	r3, r3, #31
   21f76:	4018      	ands	r0, r3
}
   21f78:	bd10      	pop	{r4, pc}
   21f7a:	46c0      	nop			; (mov r8, r8)
   21f7c:	00017d81 	.word	0x00017d81

00021f80 <TimerInit>:
	timer->end_time = 0;
   21f80:	2300      	movs	r3, #0
   21f82:	6043      	str	r3, [r0, #4]
}
   21f84:	4770      	bx	lr
	...

00021f88 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   21f88:	2301      	movs	r3, #1
   21f8a:	425b      	negs	r3, r3
   21f8c:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   21f8e:	4b03      	ldr	r3, [pc, #12]	; (21f9c <NetworkInit+0x14>)
   21f90:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   21f92:	4b03      	ldr	r3, [pc, #12]	; (21fa0 <NetworkInit+0x18>)
   21f94:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   21f96:	4b03      	ldr	r3, [pc, #12]	; (21fa4 <NetworkInit+0x1c>)
   21f98:	6103      	str	r3, [r0, #16]
}
   21f9a:	4770      	bx	lr
   21f9c:	00021de1 	.word	0x00021de1
   21fa0:	00021d99 	.word	0x00021d99
   21fa4:	00021d75 	.word	0x00021d75

00021fa8 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   21fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21faa:	b087      	sub	sp, #28
   21fac:	0006      	movs	r6, r0
   21fae:	0015      	movs	r5, r2
   21fb0:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   21fb2:	4c25      	ldr	r4, [pc, #148]	; (22048 <ConnectNetwork+0xa0>)
   21fb4:	2300      	movs	r3, #0
   21fb6:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   21fb8:	4b24      	ldr	r3, [pc, #144]	; (2204c <ConnectNetwork+0xa4>)
   21fba:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   21fbc:	0008      	movs	r0, r1
   21fbe:	4b24      	ldr	r3, [pc, #144]	; (22050 <ConnectNetwork+0xa8>)
   21fc0:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   21fc2:	7823      	ldrb	r3, [r4, #0]
   21fc4:	2b00      	cmp	r3, #0
   21fc6:	d106      	bne.n	21fd6 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   21fc8:	4f22      	ldr	r7, [pc, #136]	; (22054 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   21fca:	4c1f      	ldr	r4, [pc, #124]	; (22048 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   21fcc:	2000      	movs	r0, #0
   21fce:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   21fd0:	7823      	ldrb	r3, [r4, #0]
   21fd2:	2b00      	cmp	r3, #0
   21fd4:	d0fa      	beq.n	21fcc <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   21fd6:	4b20      	ldr	r3, [pc, #128]	; (22058 <ConnectNetwork+0xb0>)
   21fd8:	681a      	ldr	r2, [r3, #0]
   21fda:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   21fdc:	2302      	movs	r3, #2
   21fde:	a902      	add	r1, sp, #8
   21fe0:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   21fe2:	022b      	lsls	r3, r5, #8
   21fe4:	491d      	ldr	r1, [pc, #116]	; (2205c <ConnectNetwork+0xb4>)
   21fe6:	400b      	ands	r3, r1
   21fe8:	b2ad      	uxth	r5, r5
   21fea:	0a2d      	lsrs	r5, r5, #8
   21fec:	431d      	orrs	r5, r3
   21fee:	ab02      	add	r3, sp, #8
   21ff0:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   21ff2:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   21ff4:	6833      	ldr	r3, [r6, #0]
   21ff6:	2b00      	cmp	r3, #0
   21ff8:	db16      	blt.n	22028 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   21ffa:	6830      	ldr	r0, [r6, #0]
   21ffc:	1c43      	adds	r3, r0, #1
   21ffe:	d01b      	beq.n	22038 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   22000:	b240      	sxtb	r0, r0
   22002:	2210      	movs	r2, #16
   22004:	a902      	add	r1, sp, #8
   22006:	4b16      	ldr	r3, [pc, #88]	; (22060 <ConnectNetwork+0xb8>)
   22008:	4798      	blx	r3
   2200a:	2800      	cmp	r0, #0
   2200c:	d119      	bne.n	22042 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   2200e:	2200      	movs	r2, #0
   22010:	4b14      	ldr	r3, [pc, #80]	; (22064 <ConnectNetwork+0xbc>)
   22012:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   22014:	4d0f      	ldr	r5, [pc, #60]	; (22054 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   22016:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   22018:	2000      	movs	r0, #0
   2201a:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   2201c:	7823      	ldrb	r3, [r4, #0]
   2201e:	2b00      	cmp	r3, #0
   22020:	d0fa      	beq.n	22018 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   22022:	2000      	movs	r0, #0
   22024:	b007      	add	sp, #28
   22026:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   22028:	466b      	mov	r3, sp
   2202a:	791a      	ldrb	r2, [r3, #4]
   2202c:	2101      	movs	r1, #1
   2202e:	2002      	movs	r0, #2
   22030:	4b0d      	ldr	r3, [pc, #52]	; (22068 <ConnectNetwork+0xc0>)
   22032:	4798      	blx	r3
   22034:	6030      	str	r0, [r6, #0]
   22036:	e7e0      	b.n	21ffa <ConnectNetwork+0x52>
   close(n->socket);
   22038:	4b0c      	ldr	r3, [pc, #48]	; (2206c <ConnectNetwork+0xc4>)
   2203a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2203c:	2009      	movs	r0, #9
   2203e:	4240      	negs	r0, r0
   22040:	e7f0      	b.n	22024 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   22042:	2009      	movs	r0, #9
   22044:	4240      	negs	r0, r0
   22046:	e7ed      	b.n	22024 <ConnectNetwork+0x7c>
   22048:	20003deb 	.word	0x20003deb
   2204c:	20003ef8 	.word	0x20003ef8
   22050:	0001d339 	.word	0x0001d339
   22054:	0001b121 	.word	0x0001b121
   22058:	20003ef0 	.word	0x20003ef0
   2205c:	00ffff00 	.word	0x00ffff00
   22060:	0001d079 	.word	0x0001d079
   22064:	20003dea 	.word	0x20003dea
   22068:	0001cef9 	.word	0x0001cef9
   2206c:	0001d235 	.word	0x0001d235

00022070 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   22070:	b5f0      	push	{r4, r5, r6, r7, lr}
   22072:	b085      	sub	sp, #20
   22074:	0006      	movs	r6, r0
   22076:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   22078:	2800      	cmp	r0, #0
   2207a:	d03d      	beq.n	220f8 <mqtt_init+0x88>
   2207c:	2900      	cmp	r1, #0
   2207e:	d03e      	beq.n	220fe <mqtt_init+0x8e>
   22080:	690b      	ldr	r3, [r1, #16]
   22082:	2b00      	cmp	r3, #0
   22084:	d03e      	beq.n	22104 <mqtt_init+0x94>
   22086:	688b      	ldr	r3, [r1, #8]
   22088:	2b00      	cmp	r3, #0
   2208a:	d03e      	beq.n	2210a <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   2208c:	888b      	ldrh	r3, [r1, #4]
   2208e:	27fa      	movs	r7, #250	; 0xfa
   22090:	00bf      	lsls	r7, r7, #2
   22092:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   22094:	0004      	movs	r4, r0
   22096:	3420      	adds	r4, #32
   22098:	0020      	movs	r0, r4
   2209a:	4b1f      	ldr	r3, [pc, #124]	; (22118 <mqtt_init+0xa8>)
   2209c:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2209e:	1d30      	adds	r0, r6, #4
   220a0:	2218      	movs	r2, #24
   220a2:	0029      	movs	r1, r5
   220a4:	4b1d      	ldr	r3, [pc, #116]	; (2211c <mqtt_init+0xac>)
   220a6:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   220a8:	4b1d      	ldr	r3, [pc, #116]	; (22120 <mqtt_init+0xb0>)
   220aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   220ac:	2b00      	cmp	r3, #0
   220ae:	d01a      	beq.n	220e6 <mqtt_init+0x76>
   220b0:	4b1b      	ldr	r3, [pc, #108]	; (22120 <mqtt_init+0xb0>)
   220b2:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   220b4:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   220b6:	6819      	ldr	r1, [r3, #0]
   220b8:	2900      	cmp	r1, #0
   220ba:	d015      	beq.n	220e8 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   220bc:	3201      	adds	r2, #1
   220be:	3360      	adds	r3, #96	; 0x60
   220c0:	2a07      	cmp	r2, #7
   220c2:	d1f8      	bne.n	220b6 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   220c4:	69f0      	ldr	r0, [r6, #28]
   220c6:	2800      	cmp	r0, #0
   220c8:	d022      	beq.n	22110 <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   220ca:	692b      	ldr	r3, [r5, #16]
   220cc:	68ea      	ldr	r2, [r5, #12]
   220ce:	9202      	str	r2, [sp, #8]
   220d0:	68aa      	ldr	r2, [r5, #8]
   220d2:	9201      	str	r2, [sp, #4]
   220d4:	696a      	ldr	r2, [r5, #20]
   220d6:	9200      	str	r2, [sp, #0]
   220d8:	003a      	movs	r2, r7
   220da:	0021      	movs	r1, r4
   220dc:	4c11      	ldr	r4, [pc, #68]	; (22124 <mqtt_init+0xb4>)
   220de:	47a0      	blx	r4
		return SUCCESS;
   220e0:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   220e2:	b005      	add	sp, #20
   220e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   220e6:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   220e8:	480d      	ldr	r0, [pc, #52]	; (22120 <mqtt_init+0xb0>)
   220ea:	0053      	lsls	r3, r2, #1
   220ec:	1899      	adds	r1, r3, r2
   220ee:	0149      	lsls	r1, r1, #5
   220f0:	1841      	adds	r1, r0, r1
   220f2:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   220f4:	61f1      	str	r1, [r6, #28]
   220f6:	e7e5      	b.n	220c4 <mqtt_init+0x54>
		return FAILURE;
   220f8:	2001      	movs	r0, #1
   220fa:	4240      	negs	r0, r0
   220fc:	e7f1      	b.n	220e2 <mqtt_init+0x72>
   220fe:	2001      	movs	r0, #1
   22100:	4240      	negs	r0, r0
   22102:	e7ee      	b.n	220e2 <mqtt_init+0x72>
   22104:	2001      	movs	r0, #1
   22106:	4240      	negs	r0, r0
   22108:	e7eb      	b.n	220e2 <mqtt_init+0x72>
   2210a:	2001      	movs	r0, #1
   2210c:	4240      	negs	r0, r0
   2210e:	e7e8      	b.n	220e2 <mqtt_init+0x72>
		return FAILURE;
   22110:	2001      	movs	r0, #1
   22112:	4240      	negs	r0, r0
   22114:	e7e5      	b.n	220e2 <mqtt_init+0x72>
   22116:	46c0      	nop			; (mov r8, r8)
   22118:	00021f89 	.word	0x00021f89
   2211c:	00026215 	.word	0x00026215
   22120:	20003f04 	.word	0x20003f04
   22124:	00021641 	.word	0x00021641

00022128 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   22128:	4b05      	ldr	r3, [pc, #20]	; (22140 <mqtt_get_config_defaults+0x18>)
   2212a:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   2212c:	2300      	movs	r3, #0
   2212e:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   22130:	223c      	movs	r2, #60	; 0x3c
   22132:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   22134:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   22136:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   22138:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   2213a:	6143      	str	r3, [r0, #20]
}
   2213c:	4770      	bx	lr
   2213e:	46c0      	nop			; (mov r8, r8)
   22140:	0000075b 	.word	0x0000075b

00022144 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   22144:	2800      	cmp	r0, #0
   22146:	d002      	beq.n	2214e <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   22148:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   2214a:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   2214c:	4770      	bx	lr
		return FAILURE;
   2214e:	2001      	movs	r0, #1
   22150:	4240      	negs	r0, r0
   22152:	e7fb      	b.n	2214c <mqtt_register_callback+0x8>

00022154 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   22154:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   22156:	4b01      	ldr	r3, [pc, #4]	; (2215c <mqtt_socket_event_handler+0x8>)
   22158:	4798      	blx	r3
}
   2215a:	bd10      	pop	{r4, pc}
   2215c:	00021ed1 	.word	0x00021ed1

00022160 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   22160:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   22162:	4b01      	ldr	r3, [pc, #4]	; (22168 <mqtt_socket_resolve_handler+0x8>)
   22164:	4798      	blx	r3
}
   22166:	bd10      	pop	{r4, pc}
   22168:	00021e99 	.word	0x00021e99

0002216c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2216c:	b530      	push	{r4, r5, lr}
   2216e:	b083      	sub	sp, #12
   22170:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   22172:	7983      	ldrb	r3, [r0, #6]
   22174:	8882      	ldrh	r2, [r0, #4]
   22176:	3020      	adds	r0, #32
   22178:	4d06      	ldr	r5, [pc, #24]	; (22194 <mqtt_connect+0x28>)
   2217a:	47a8      	blx	r5
   2217c:	9001      	str	r0, [sp, #4]
	if(module->callback)
   2217e:	6823      	ldr	r3, [r4, #0]
   22180:	2b00      	cmp	r3, #0
   22182:	d003      	beq.n	2218c <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   22184:	aa01      	add	r2, sp, #4
   22186:	2100      	movs	r1, #0
   22188:	0020      	movs	r0, r4
   2218a:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   2218c:	9801      	ldr	r0, [sp, #4]
   2218e:	b003      	add	sp, #12
   22190:	bd30      	pop	{r4, r5, pc}
   22192:	46c0      	nop			; (mov r8, r8)
   22194:	00021fa9 	.word	0x00021fa9

00022198 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   22198:	b5f0      	push	{r4, r5, r6, r7, lr}
   2219a:	46de      	mov	lr, fp
   2219c:	4657      	mov	r7, sl
   2219e:	464e      	mov	r6, r9
   221a0:	b5c0      	push	{r6, r7, lr}
   221a2:	b098      	sub	sp, #96	; 0x60
   221a4:	0005      	movs	r5, r0
   221a6:	4689      	mov	r9, r1
   221a8:	4693      	mov	fp, r2
   221aa:	469a      	mov	sl, r3
   221ac:	ab24      	add	r3, sp, #144	; 0x90
   221ae:	781f      	ldrb	r7, [r3, #0]
   221b0:	ab25      	add	r3, sp, #148	; 0x94
   221b2:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   221b4:	ac01      	add	r4, sp, #4
   221b6:	2258      	movs	r2, #88	; 0x58
   221b8:	491a      	ldr	r1, [pc, #104]	; (22224 <mqtt_connect_broker+0x8c>)
   221ba:	0020      	movs	r0, r4
   221bc:	4b1a      	ldr	r3, [pc, #104]	; (22228 <mqtt_connect_broker+0x90>)
   221be:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   221c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   221c2:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   221c4:	465b      	mov	r3, fp
   221c6:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   221c8:	4653      	mov	r3, sl
   221ca:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   221cc:	464b      	mov	r3, r9
   221ce:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   221d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   221d2:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   221d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   221d6:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   221d8:	233c      	movs	r3, #60	; 0x3c
   221da:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   221dc:	3301      	adds	r3, #1
   221de:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   221e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   221e2:	2b00      	cmp	r3, #0
   221e4:	d005      	beq.n	221f2 <mqtt_connect_broker+0x5a>
   221e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   221e8:	2b00      	cmp	r3, #0
   221ea:	d002      	beq.n	221f2 <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   221ec:	2201      	movs	r2, #1
   221ee:	ab01      	add	r3, sp, #4
   221f0:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   221f2:	a901      	add	r1, sp, #4
   221f4:	69e8      	ldr	r0, [r5, #28]
   221f6:	4b0d      	ldr	r3, [pc, #52]	; (2222c <mqtt_connect_broker+0x94>)
   221f8:	4798      	blx	r3
   221fa:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   221fc:	ab17      	add	r3, sp, #92	; 0x5c
   221fe:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   22200:	682b      	ldr	r3, [r5, #0]
   22202:	2b00      	cmp	r3, #0
   22204:	d003      	beq.n	2220e <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   22206:	aa17      	add	r2, sp, #92	; 0x5c
   22208:	2101      	movs	r1, #1
   2220a:	0028      	movs	r0, r5
   2220c:	4798      	blx	r3
	
	module->isConnected = true;
   2220e:	2201      	movs	r2, #1
   22210:	2334      	movs	r3, #52	; 0x34
   22212:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   22214:	0020      	movs	r0, r4
   22216:	b018      	add	sp, #96	; 0x60
   22218:	bc1c      	pop	{r2, r3, r4}
   2221a:	4691      	mov	r9, r2
   2221c:	469a      	mov	sl, r3
   2221e:	46a3      	mov	fp, r4
   22220:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22222:	46c0      	nop			; (mov r8, r8)
   22224:	0002a854 	.word	0x0002a854
   22228:	00026215 	.word	0x00026215
   2222c:	00021a49 	.word	0x00021a49

00022230 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   22230:	b530      	push	{r4, r5, lr}
   22232:	b083      	sub	sp, #12
   22234:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   22236:	69c0      	ldr	r0, [r0, #28]
   22238:	4b08      	ldr	r3, [pc, #32]	; (2225c <mqtt_disconnect+0x2c>)
   2223a:	4798      	blx	r3
   2223c:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   2223e:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   22240:	6823      	ldr	r3, [r4, #0]
   22242:	2b00      	cmp	r3, #0
   22244:	d003      	beq.n	2224e <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   22246:	aa01      	add	r2, sp, #4
   22248:	2105      	movs	r1, #5
   2224a:	0020      	movs	r0, r4
   2224c:	4798      	blx	r3
	
	module->isConnected = false;
   2224e:	2200      	movs	r2, #0
   22250:	2334      	movs	r3, #52	; 0x34
   22252:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   22254:	0028      	movs	r0, r5
   22256:	b003      	add	sp, #12
   22258:	bd30      	pop	{r4, r5, pc}
   2225a:	46c0      	nop			; (mov r8, r8)
   2225c:	00021d2d 	.word	0x00021d2d

00022260 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   22260:	b570      	push	{r4, r5, r6, lr}
   22262:	b084      	sub	sp, #16
   22264:	0004      	movs	r4, r0
   22266:	a808      	add	r0, sp, #32
   22268:	7805      	ldrb	r5, [r0, #0]
   2226a:	a809      	add	r0, sp, #36	; 0x24
   2226c:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2226e:	466e      	mov	r6, sp
   22270:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   22272:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   22274:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   22276:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   22278:	466a      	mov	r2, sp
   2227a:	69e0      	ldr	r0, [r4, #28]
   2227c:	4b06      	ldr	r3, [pc, #24]	; (22298 <mqtt_publish+0x38>)
   2227e:	4798      	blx	r3
   22280:	0005      	movs	r5, r0
	
	if(module->callback)
   22282:	6823      	ldr	r3, [r4, #0]
   22284:	2b00      	cmp	r3, #0
   22286:	d003      	beq.n	22290 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   22288:	2200      	movs	r2, #0
   2228a:	2102      	movs	r1, #2
   2228c:	0020      	movs	r0, r4
   2228e:	4798      	blx	r3
	
	return rc;
}
   22290:	0028      	movs	r0, r5
   22292:	b004      	add	sp, #16
   22294:	bd70      	pop	{r4, r5, r6, pc}
   22296:	46c0      	nop			; (mov r8, r8)
   22298:	00021c1d 	.word	0x00021c1d

0002229c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2229c:	b570      	push	{r4, r5, r6, lr}
   2229e:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   222a0:	69c0      	ldr	r0, [r0, #28]
   222a2:	4d06      	ldr	r5, [pc, #24]	; (222bc <mqtt_subscribe+0x20>)
   222a4:	47a8      	blx	r5
   222a6:	0005      	movs	r5, r0
	
	if(module->callback)
   222a8:	6823      	ldr	r3, [r4, #0]
   222aa:	2b00      	cmp	r3, #0
   222ac:	d003      	beq.n	222b6 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   222ae:	2200      	movs	r2, #0
   222b0:	2103      	movs	r1, #3
   222b2:	0020      	movs	r0, r4
   222b4:	4798      	blx	r3
	
	return rc;
}
   222b6:	0028      	movs	r0, r5
   222b8:	bd70      	pop	{r4, r5, r6, pc}
   222ba:	46c0      	nop			; (mov r8, r8)
   222bc:	00021b19 	.word	0x00021b19

000222c0 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   222c0:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   222c2:	69c0      	ldr	r0, [r0, #28]
   222c4:	4b01      	ldr	r3, [pc, #4]	; (222cc <mqtt_yield+0xc>)
   222c6:	4798      	blx	r3
   222c8:	bd10      	pop	{r4, pc}
   222ca:	46c0      	nop			; (mov r8, r8)
   222cc:	000219cd 	.word	0x000219cd

000222d0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   222d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222d2:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   222d4:	7a03      	ldrb	r3, [r0, #8]
   222d6:	2b03      	cmp	r3, #3
   222d8:	d024      	beq.n	22324 <MQTTSerialize_connectLength+0x54>
	int len = 0;
   222da:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   222dc:	2b04      	cmp	r3, #4
   222de:	d01f      	beq.n	22320 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   222e0:	68e0      	ldr	r0, [r4, #12]
   222e2:	6921      	ldr	r1, [r4, #16]
   222e4:	6962      	ldr	r2, [r4, #20]
   222e6:	4b1b      	ldr	r3, [pc, #108]	; (22354 <MQTTSerialize_connectLength+0x84>)
   222e8:	4798      	blx	r3
   222ea:	1c85      	adds	r5, r0, #2
   222ec:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   222ee:	7ee3      	ldrb	r3, [r4, #27]
   222f0:	2b00      	cmp	r3, #0
   222f2:	d119      	bne.n	22328 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   222f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   222f6:	2b00      	cmp	r3, #0
   222f8:	d024      	beq.n	22344 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   222fa:	6c20      	ldr	r0, [r4, #64]	; 0x40
   222fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   222fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22300:	4b14      	ldr	r3, [pc, #80]	; (22354 <MQTTSerialize_connectLength+0x84>)
   22302:	4798      	blx	r3
   22304:	3002      	adds	r0, #2
   22306:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   22308:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2230a:	2b00      	cmp	r3, #0
   2230c:	d01e      	beq.n	2234c <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   2230e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   22310:	6d21      	ldr	r1, [r4, #80]	; 0x50
   22312:	6d62      	ldr	r2, [r4, #84]	; 0x54
   22314:	4b0f      	ldr	r3, [pc, #60]	; (22354 <MQTTSerialize_connectLength+0x84>)
   22316:	4798      	blx	r3
   22318:	3002      	adds	r0, #2
   2231a:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   2231c:	0028      	movs	r0, r5
   2231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   22320:	360a      	adds	r6, #10
   22322:	e7dd      	b.n	222e0 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   22324:	260c      	movs	r6, #12
   22326:	e7db      	b.n	222e0 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   22328:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2232a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2232c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2232e:	4f09      	ldr	r7, [pc, #36]	; (22354 <MQTTSerialize_connectLength+0x84>)
   22330:	47b8      	blx	r7
   22332:	0006      	movs	r6, r0
   22334:	6b20      	ldr	r0, [r4, #48]	; 0x30
   22336:	6b61      	ldr	r1, [r4, #52]	; 0x34
   22338:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2233a:	47b8      	blx	r7
   2233c:	1836      	adds	r6, r6, r0
   2233e:	3604      	adds	r6, #4
   22340:	19ad      	adds	r5, r5, r6
   22342:	e7d7      	b.n	222f4 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   22344:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   22346:	2b00      	cmp	r3, #0
   22348:	d1d7      	bne.n	222fa <MQTTSerialize_connectLength+0x2a>
   2234a:	e7dd      	b.n	22308 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   2234c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2234e:	2b00      	cmp	r3, #0
   22350:	d1dd      	bne.n	2230e <MQTTSerialize_connectLength+0x3e>
   22352:	e7e3      	b.n	2231c <MQTTSerialize_connectLength+0x4c>
   22354:	00022839 	.word	0x00022839

00022358 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   22358:	b5f0      	push	{r4, r5, r6, r7, lr}
   2235a:	b083      	sub	sp, #12
   2235c:	0006      	movs	r6, r0
   2235e:	000f      	movs	r7, r1
   22360:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   22362:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   22364:	0010      	movs	r0, r2
   22366:	4b45      	ldr	r3, [pc, #276]	; (2247c <MQTTSerialize_connect+0x124>)
   22368:	4798      	blx	r3
   2236a:	0004      	movs	r4, r0
   2236c:	4b44      	ldr	r3, [pc, #272]	; (22480 <MQTTSerialize_connect+0x128>)
   2236e:	4798      	blx	r3
   22370:	42b8      	cmp	r0, r7
   22372:	dd00      	ble.n	22376 <MQTTSerialize_connect+0x1e>
   22374:	e07f      	b.n	22476 <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   22376:	2110      	movs	r1, #16
   22378:	a801      	add	r0, sp, #4
   2237a:	4b42      	ldr	r3, [pc, #264]	; (22484 <MQTTSerialize_connect+0x12c>)
   2237c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2237e:	0021      	movs	r1, r4
   22380:	9801      	ldr	r0, [sp, #4]
   22382:	4b41      	ldr	r3, [pc, #260]	; (22488 <MQTTSerialize_connect+0x130>)
   22384:	4798      	blx	r3
   22386:	9b01      	ldr	r3, [sp, #4]
   22388:	469c      	mov	ip, r3
   2238a:	4460      	add	r0, ip
   2238c:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   2238e:	7a2b      	ldrb	r3, [r5, #8]
   22390:	2b04      	cmp	r3, #4
   22392:	d045      	beq.n	22420 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   22394:	493d      	ldr	r1, [pc, #244]	; (2248c <MQTTSerialize_connect+0x134>)
   22396:	a801      	add	r0, sp, #4
   22398:	4b3d      	ldr	r3, [pc, #244]	; (22490 <MQTTSerialize_connect+0x138>)
   2239a:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2239c:	2103      	movs	r1, #3
   2239e:	a801      	add	r0, sp, #4
   223a0:	4b38      	ldr	r3, [pc, #224]	; (22484 <MQTTSerialize_connect+0x12c>)
   223a2:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   223a4:	7ea9      	ldrb	r1, [r5, #26]
   223a6:	2301      	movs	r3, #1
   223a8:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   223aa:	7eea      	ldrb	r2, [r5, #27]
   223ac:	1e50      	subs	r0, r2, #1
   223ae:	4182      	sbcs	r2, r0
   223b0:	b2d2      	uxtb	r2, r2
   223b2:	4013      	ands	r3, r2
   223b4:	009b      	lsls	r3, r3, #2
   223b6:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   223b8:	4319      	orrs	r1, r3
   223ba:	2b00      	cmp	r3, #0
   223bc:	d00b      	beq.n	223d6 <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   223be:	233d      	movs	r3, #61	; 0x3d
   223c0:	5cea      	ldrb	r2, [r5, r3]
   223c2:	3b3a      	subs	r3, #58	; 0x3a
   223c4:	4013      	ands	r3, r2
   223c6:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   223c8:	223c      	movs	r2, #60	; 0x3c
   223ca:	5ca8      	ldrb	r0, [r5, r2]
   223cc:	3a3b      	subs	r2, #59	; 0x3b
   223ce:	4002      	ands	r2, r0
   223d0:	0152      	lsls	r2, r2, #5
   223d2:	4319      	orrs	r1, r3
   223d4:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   223d6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   223d8:	2b00      	cmp	r3, #0
   223da:	d02a      	beq.n	22432 <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   223dc:	2380      	movs	r3, #128	; 0x80
   223de:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   223e0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   223e2:	2b00      	cmp	r3, #0
   223e4:	d029      	beq.n	2243a <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   223e6:	2340      	movs	r3, #64	; 0x40
   223e8:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   223ea:	b2cc      	uxtb	r4, r1
   223ec:	0021      	movs	r1, r4
   223ee:	a801      	add	r0, sp, #4
   223f0:	4b24      	ldr	r3, [pc, #144]	; (22484 <MQTTSerialize_connect+0x12c>)
   223f2:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   223f4:	8b29      	ldrh	r1, [r5, #24]
   223f6:	a801      	add	r0, sp, #4
   223f8:	4b26      	ldr	r3, [pc, #152]	; (22494 <MQTTSerialize_connect+0x13c>)
   223fa:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   223fc:	68e9      	ldr	r1, [r5, #12]
   223fe:	692a      	ldr	r2, [r5, #16]
   22400:	696b      	ldr	r3, [r5, #20]
   22402:	a801      	add	r0, sp, #4
   22404:	4f24      	ldr	r7, [pc, #144]	; (22498 <MQTTSerialize_connect+0x140>)
   22406:	47b8      	blx	r7
	if (options->willFlag)
   22408:	7eeb      	ldrb	r3, [r5, #27]
   2240a:	2b00      	cmp	r3, #0
   2240c:	d119      	bne.n	22442 <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   2240e:	b263      	sxtb	r3, r4
   22410:	2b00      	cmp	r3, #0
   22412:	db22      	blt.n	2245a <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   22414:	0663      	lsls	r3, r4, #25
   22416:	d427      	bmi.n	22468 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   22418:	9b01      	ldr	r3, [sp, #4]
   2241a:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   2241c:	b003      	add	sp, #12
   2241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   22420:	491e      	ldr	r1, [pc, #120]	; (2249c <MQTTSerialize_connect+0x144>)
   22422:	a801      	add	r0, sp, #4
   22424:	4b1a      	ldr	r3, [pc, #104]	; (22490 <MQTTSerialize_connect+0x138>)
   22426:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   22428:	2104      	movs	r1, #4
   2242a:	a801      	add	r0, sp, #4
   2242c:	4b15      	ldr	r3, [pc, #84]	; (22484 <MQTTSerialize_connect+0x12c>)
   2242e:	4798      	blx	r3
   22430:	e7b8      	b.n	223a4 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   22432:	6cab      	ldr	r3, [r5, #72]	; 0x48
   22434:	2b00      	cmp	r3, #0
   22436:	d1d1      	bne.n	223dc <MQTTSerialize_connect+0x84>
   22438:	e7d2      	b.n	223e0 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   2243a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2243c:	2b00      	cmp	r3, #0
   2243e:	d1d2      	bne.n	223e6 <MQTTSerialize_connect+0x8e>
   22440:	e7d3      	b.n	223ea <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   22442:	6a69      	ldr	r1, [r5, #36]	; 0x24
   22444:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   22446:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22448:	a801      	add	r0, sp, #4
   2244a:	4f13      	ldr	r7, [pc, #76]	; (22498 <MQTTSerialize_connect+0x140>)
   2244c:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   2244e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   22450:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   22452:	6bab      	ldr	r3, [r5, #56]	; 0x38
   22454:	a801      	add	r0, sp, #4
   22456:	47b8      	blx	r7
   22458:	e7d9      	b.n	2240e <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   2245a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2245c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   2245e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   22460:	a801      	add	r0, sp, #4
   22462:	4f0d      	ldr	r7, [pc, #52]	; (22498 <MQTTSerialize_connect+0x140>)
   22464:	47b8      	blx	r7
   22466:	e7d5      	b.n	22414 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   22468:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   2246a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   2246c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2246e:	a801      	add	r0, sp, #4
   22470:	4c09      	ldr	r4, [pc, #36]	; (22498 <MQTTSerialize_connect+0x140>)
   22472:	47a0      	blx	r4
   22474:	e7d0      	b.n	22418 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22476:	2002      	movs	r0, #2
   22478:	4240      	negs	r0, r0
	return rc;
   2247a:	e7cf      	b.n	2241c <MQTTSerialize_connect+0xc4>
   2247c:	000222d1 	.word	0x000222d1
   22480:	000226dd 	.word	0x000226dd
   22484:	0002273f 	.word	0x0002273f
   22488:	00022655 	.word	0x00022655
   2248c:	0002a8b4 	.word	0x0002a8b4
   22490:	00022775 	.word	0x00022775
   22494:	0002274b 	.word	0x0002274b
   22498:	000227ad 	.word	0x000227ad
   2249c:	0002a8ac 	.word	0x0002a8ac

000224a0 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   224a0:	b570      	push	{r4, r5, r6, lr}
   224a2:	b082      	sub	sp, #8
   224a4:	0005      	movs	r5, r0
   224a6:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   224a8:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   224aa:	a801      	add	r0, sp, #4
   224ac:	4b0e      	ldr	r3, [pc, #56]	; (224e8 <MQTTDeserialize_connack+0x48>)
   224ae:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   224b0:	23f0      	movs	r3, #240	; 0xf0
   224b2:	4003      	ands	r3, r0
	int rc = 0;
   224b4:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   224b6:	2b20      	cmp	r3, #32
   224b8:	d001      	beq.n	224be <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   224ba:	b002      	add	sp, #8
   224bc:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   224be:	4669      	mov	r1, sp
   224c0:	9801      	ldr	r0, [sp, #4]
   224c2:	4b0a      	ldr	r3, [pc, #40]	; (224ec <MQTTDeserialize_connack+0x4c>)
   224c4:	4798      	blx	r3
   224c6:	9b01      	ldr	r3, [sp, #4]
   224c8:	181b      	adds	r3, r3, r0
   224ca:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   224cc:	9b00      	ldr	r3, [sp, #0]
   224ce:	2b01      	cmp	r3, #1
   224d0:	ddf3      	ble.n	224ba <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   224d2:	a801      	add	r0, sp, #4
   224d4:	4e04      	ldr	r6, [pc, #16]	; (224e8 <MQTTDeserialize_connack+0x48>)
   224d6:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   224d8:	0600      	lsls	r0, r0, #24
   224da:	0fc0      	lsrs	r0, r0, #31
   224dc:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   224de:	a801      	add	r0, sp, #4
   224e0:	47b0      	blx	r6
   224e2:	7020      	strb	r0, [r4, #0]
	rc = 1;
   224e4:	2001      	movs	r0, #1
   224e6:	e7e8      	b.n	224ba <MQTTDeserialize_connack+0x1a>
   224e8:	00022733 	.word	0x00022733
   224ec:	00022705 	.word	0x00022705

000224f0 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   224f0:	b510      	push	{r4, lr}
   224f2:	b082      	sub	sp, #8
   224f4:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   224f6:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   224f8:	2901      	cmp	r1, #1
   224fa:	dd0f      	ble.n	2251c <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   224fc:	210f      	movs	r1, #15
   224fe:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   22500:	0109      	lsls	r1, r1, #4
   22502:	a801      	add	r0, sp, #4
   22504:	4b07      	ldr	r3, [pc, #28]	; (22524 <MQTTSerialize_zero+0x34>)
   22506:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   22508:	2100      	movs	r1, #0
   2250a:	9801      	ldr	r0, [sp, #4]
   2250c:	4b06      	ldr	r3, [pc, #24]	; (22528 <MQTTSerialize_zero+0x38>)
   2250e:	4798      	blx	r3
   22510:	9b01      	ldr	r3, [sp, #4]
   22512:	469c      	mov	ip, r3
   22514:	4460      	add	r0, ip
	rc = ptr - buf;
   22516:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22518:	b002      	add	sp, #8
   2251a:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2251c:	2002      	movs	r0, #2
   2251e:	4240      	negs	r0, r0
	return rc;
   22520:	e7fa      	b.n	22518 <MQTTSerialize_zero+0x28>
   22522:	46c0      	nop			; (mov r8, r8)
   22524:	0002273f 	.word	0x0002273f
   22528:	00022655 	.word	0x00022655

0002252c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2252c:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2252e:	220e      	movs	r2, #14
   22530:	4b01      	ldr	r3, [pc, #4]	; (22538 <MQTTSerialize_disconnect+0xc>)
   22532:	4798      	blx	r3
}
   22534:	bd10      	pop	{r4, pc}
   22536:	46c0      	nop			; (mov r8, r8)
   22538:	000224f1 	.word	0x000224f1

0002253c <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2253c:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2253e:	220c      	movs	r2, #12
   22540:	4b01      	ldr	r3, [pc, #4]	; (22548 <MQTTSerialize_pingreq+0xc>)
   22542:	4798      	blx	r3
}
   22544:	bd10      	pop	{r4, pc}
   22546:	46c0      	nop			; (mov r8, r8)
   22548:	000224f1 	.word	0x000224f1

0002254c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2254c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2254e:	b085      	sub	sp, #20
   22550:	0005      	movs	r5, r0
   22552:	000e      	movs	r6, r1
   22554:	0014      	movs	r4, r2
   22556:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   22558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2255a:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   2255c:	2300      	movs	r3, #0
   2255e:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   22560:	a803      	add	r0, sp, #12
   22562:	4b1c      	ldr	r3, [pc, #112]	; (225d4 <MQTTDeserialize_publish+0x88>)
   22564:	4798      	blx	r3
   22566:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   22568:	22f0      	movs	r2, #240	; 0xf0
   2256a:	4010      	ands	r0, r2
	int rc = 0;
   2256c:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   2256e:	2830      	cmp	r0, #48	; 0x30
   22570:	d002      	beq.n	22578 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22572:	0038      	movs	r0, r7
   22574:	b005      	add	sp, #20
   22576:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   22578:	071a      	lsls	r2, r3, #28
   2257a:	0fd2      	lsrs	r2, r2, #31
   2257c:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   2257e:	075a      	lsls	r2, r3, #29
   22580:	0f92      	lsrs	r2, r2, #30
   22582:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   22584:	07db      	lsls	r3, r3, #31
   22586:	0fdb      	lsrs	r3, r3, #31
   22588:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2258a:	a902      	add	r1, sp, #8
   2258c:	9803      	ldr	r0, [sp, #12]
   2258e:	4b12      	ldr	r3, [pc, #72]	; (225d8 <MQTTDeserialize_publish+0x8c>)
   22590:	4798      	blx	r3
   22592:	0007      	movs	r7, r0
   22594:	9b03      	ldr	r3, [sp, #12]
   22596:	181c      	adds	r4, r3, r0
   22598:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   2259a:	9b02      	ldr	r3, [sp, #8]
   2259c:	469c      	mov	ip, r3
   2259e:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   225a0:	0022      	movs	r2, r4
   225a2:	a903      	add	r1, sp, #12
   225a4:	980a      	ldr	r0, [sp, #40]	; 0x28
   225a6:	4b0d      	ldr	r3, [pc, #52]	; (225dc <MQTTDeserialize_publish+0x90>)
   225a8:	4798      	blx	r3
   225aa:	2800      	cmp	r0, #0
   225ac:	d0e1      	beq.n	22572 <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   225ae:	9b03      	ldr	r3, [sp, #12]
   225b0:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   225b2:	d4de      	bmi.n	22572 <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   225b4:	6833      	ldr	r3, [r6, #0]
   225b6:	2b00      	cmp	r3, #0
   225b8:	dd04      	ble.n	225c4 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   225ba:	a803      	add	r0, sp, #12
   225bc:	4b08      	ldr	r3, [pc, #32]	; (225e0 <MQTTDeserialize_publish+0x94>)
   225be:	4798      	blx	r3
   225c0:	9b01      	ldr	r3, [sp, #4]
   225c2:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   225c4:	9b03      	ldr	r3, [sp, #12]
   225c6:	1ae4      	subs	r4, r4, r3
   225c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   225ca:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   225cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   225ce:	6013      	str	r3, [r2, #0]
	rc = 1;
   225d0:	2701      	movs	r7, #1
   225d2:	e7ce      	b.n	22572 <MQTTDeserialize_publish+0x26>
   225d4:	00022733 	.word	0x00022733
   225d8:	00022705 	.word	0x00022705
   225dc:	000227f9 	.word	0x000227f9
   225e0:	00022721 	.word	0x00022721

000225e4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   225e4:	b570      	push	{r4, r5, r6, lr}
   225e6:	b082      	sub	sp, #8
   225e8:	0005      	movs	r5, r0
   225ea:	000e      	movs	r6, r1
   225ec:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   225ee:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   225f0:	a801      	add	r0, sp, #4
   225f2:	4b0c      	ldr	r3, [pc, #48]	; (22624 <MQTTDeserialize_ack+0x40>)
   225f4:	4798      	blx	r3
	*dup = header.bits.dup;
   225f6:	0703      	lsls	r3, r0, #28
   225f8:	0fdb      	lsrs	r3, r3, #31
   225fa:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   225fc:	0600      	lsls	r0, r0, #24
   225fe:	0f00      	lsrs	r0, r0, #28
   22600:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   22602:	4669      	mov	r1, sp
   22604:	9801      	ldr	r0, [sp, #4]
   22606:	4b08      	ldr	r3, [pc, #32]	; (22628 <MQTTDeserialize_ack+0x44>)
   22608:	4798      	blx	r3
   2260a:	9b01      	ldr	r3, [sp, #4]
   2260c:	181b      	adds	r3, r3, r0
   2260e:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   22610:	9b00      	ldr	r3, [sp, #0]
   22612:	2b01      	cmp	r3, #1
   22614:	dd04      	ble.n	22620 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   22616:	a801      	add	r0, sp, #4
   22618:	4b04      	ldr	r3, [pc, #16]	; (2262c <MQTTDeserialize_ack+0x48>)
   2261a:	4798      	blx	r3
   2261c:	8020      	strh	r0, [r4, #0]

	rc = 1;
   2261e:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22620:	b002      	add	sp, #8
   22622:	bd70      	pop	{r4, r5, r6, pc}
   22624:	00022733 	.word	0x00022733
   22628:	00022705 	.word	0x00022705
   2262c:	00022721 	.word	0x00022721

00022630 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   22630:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   22632:	2900      	cmp	r1, #0
   22634:	dd0a      	ble.n	2264c <bufchar+0x1c>
   22636:	4b06      	ldr	r3, [pc, #24]	; (22650 <bufchar+0x20>)
   22638:	681b      	ldr	r3, [r3, #0]
   2263a:	185d      	adds	r5, r3, r1
   2263c:	002c      	movs	r4, r5
		*c = *bufptr++;
   2263e:	781a      	ldrb	r2, [r3, #0]
   22640:	7002      	strb	r2, [r0, #0]
   22642:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   22644:	42a3      	cmp	r3, r4
   22646:	d1fa      	bne.n	2263e <bufchar+0xe>
   22648:	4b01      	ldr	r3, [pc, #4]	; (22650 <bufchar+0x20>)
   2264a:	601d      	str	r5, [r3, #0]
	return count;
}
   2264c:	0008      	movs	r0, r1
   2264e:	bd30      	pop	{r4, r5, pc}
   22650:	200041a4 	.word	0x200041a4

00022654 <MQTTPacket_encode>:
{
   22654:	b5f0      	push	{r4, r5, r6, r7, lr}
   22656:	b083      	sub	sp, #12
   22658:	2500      	movs	r5, #0
		char d = length % 128;
   2265a:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   2265c:	2780      	movs	r7, #128	; 0x80
   2265e:	427f      	negs	r7, r7
   22660:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   22662:	17ca      	asrs	r2, r1, #31
   22664:	0e54      	lsrs	r4, r2, #25
   22666:	190b      	adds	r3, r1, r4
   22668:	4033      	ands	r3, r6
   2266a:	1b1b      	subs	r3, r3, r4
   2266c:	b2db      	uxtb	r3, r3
		length /= 128;
   2266e:	4032      	ands	r2, r6
   22670:	1851      	adds	r1, r2, r1
   22672:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   22674:	2900      	cmp	r1, #0
   22676:	dd03      	ble.n	22680 <MQTTPacket_encode+0x2c>
			d |= 0x80;
   22678:	433b      	orrs	r3, r7
		buf[rc++] = d;
   2267a:	5543      	strb	r3, [r0, r5]
   2267c:	3501      	adds	r5, #1
   2267e:	e7ef      	b.n	22660 <MQTTPacket_encode+0xc>
   22680:	5543      	strb	r3, [r0, r5]
   22682:	9801      	ldr	r0, [sp, #4]
   22684:	3001      	adds	r0, #1
}
   22686:	b003      	add	sp, #12
   22688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002268a <MQTTPacket_decode>:
{
   2268a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2268c:	46ce      	mov	lr, r9
   2268e:	4647      	mov	r7, r8
   22690:	b580      	push	{r7, lr}
   22692:	b083      	sub	sp, #12
   22694:	4680      	mov	r8, r0
   22696:	000f      	movs	r7, r1
	*value = 0;
   22698:	2300      	movs	r3, #0
   2269a:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2269c:	2401      	movs	r4, #1
	int multiplier = 1;
   2269e:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   226a0:	466b      	mov	r3, sp
   226a2:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   226a4:	237f      	movs	r3, #127	; 0x7f
   226a6:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   226a8:	2101      	movs	r1, #1
   226aa:	0028      	movs	r0, r5
   226ac:	47c0      	blx	r8
		if (rc != 1)
   226ae:	2801      	cmp	r0, #1
   226b0:	d10e      	bne.n	226d0 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   226b2:	782b      	ldrb	r3, [r5, #0]
   226b4:	464a      	mov	r2, r9
   226b6:	401a      	ands	r2, r3
   226b8:	4372      	muls	r2, r6
   226ba:	6839      	ldr	r1, [r7, #0]
   226bc:	468c      	mov	ip, r1
   226be:	4462      	add	r2, ip
   226c0:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   226c2:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   226c4:	b25b      	sxtb	r3, r3
   226c6:	2b00      	cmp	r3, #0
   226c8:	da02      	bge.n	226d0 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   226ca:	3401      	adds	r4, #1
   226cc:	2c05      	cmp	r4, #5
   226ce:	d1eb      	bne.n	226a8 <MQTTPacket_decode+0x1e>
}
   226d0:	0020      	movs	r0, r4
   226d2:	b003      	add	sp, #12
   226d4:	bc0c      	pop	{r2, r3}
   226d6:	4690      	mov	r8, r2
   226d8:	4699      	mov	r9, r3
   226da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000226dc <MQTTPacket_len>:
{
   226dc:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   226de:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   226e0:	3002      	adds	r0, #2
	if (rem_len < 128)
   226e2:	2a7f      	cmp	r2, #127	; 0x7f
   226e4:	dd07      	ble.n	226f6 <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   226e6:	4905      	ldr	r1, [pc, #20]	; (226fc <MQTTPacket_len+0x20>)
		rem_len += 2;
   226e8:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   226ea:	428a      	cmp	r2, r1
   226ec:	dd03      	ble.n	226f6 <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   226ee:	4904      	ldr	r1, [pc, #16]	; (22700 <MQTTPacket_len+0x24>)
		rem_len += 4;
   226f0:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   226f2:	428a      	cmp	r2, r1
   226f4:	dd00      	ble.n	226f8 <MQTTPacket_len+0x1c>
}
   226f6:	4770      	bx	lr
		rem_len += 3;
   226f8:	1d18      	adds	r0, r3, #4
   226fa:	e7fc      	b.n	226f6 <MQTTPacket_len+0x1a>
   226fc:	00003fff 	.word	0x00003fff
   22700:	001ffffe 	.word	0x001ffffe

00022704 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   22704:	b510      	push	{r4, lr}
	bufptr = buf;
   22706:	4b03      	ldr	r3, [pc, #12]	; (22714 <MQTTPacket_decodeBuf+0x10>)
   22708:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2270a:	4803      	ldr	r0, [pc, #12]	; (22718 <MQTTPacket_decodeBuf+0x14>)
   2270c:	4b03      	ldr	r3, [pc, #12]	; (2271c <MQTTPacket_decodeBuf+0x18>)
   2270e:	4798      	blx	r3
}
   22710:	bd10      	pop	{r4, pc}
   22712:	46c0      	nop			; (mov r8, r8)
   22714:	200041a4 	.word	0x200041a4
   22718:	00022631 	.word	0x00022631
   2271c:	0002268b 	.word	0x0002268b

00022720 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   22720:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   22722:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   22724:	7813      	ldrb	r3, [r2, #0]
   22726:	021b      	lsls	r3, r3, #8
   22728:	7850      	ldrb	r0, [r2, #1]
   2272a:	1818      	adds	r0, r3, r0
	*pptr += 2;
   2272c:	3202      	adds	r2, #2
   2272e:	600a      	str	r2, [r1, #0]
	return len;
}
   22730:	4770      	bx	lr

00022732 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   22732:	0002      	movs	r2, r0
	char c = **pptr;
   22734:	6803      	ldr	r3, [r0, #0]
   22736:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   22738:	3301      	adds	r3, #1
   2273a:	6013      	str	r3, [r2, #0]
	return c;
}
   2273c:	4770      	bx	lr

0002273e <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   2273e:	6803      	ldr	r3, [r0, #0]
   22740:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   22742:	6803      	ldr	r3, [r0, #0]
   22744:	3301      	adds	r3, #1
   22746:	6003      	str	r3, [r0, #0]
}
   22748:	4770      	bx	lr

0002274a <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2274a:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   2274c:	17ca      	asrs	r2, r1, #31
   2274e:	23ff      	movs	r3, #255	; 0xff
   22750:	001c      	movs	r4, r3
   22752:	4014      	ands	r4, r2
   22754:	1864      	adds	r4, r4, r1
   22756:	1224      	asrs	r4, r4, #8
   22758:	6805      	ldr	r5, [r0, #0]
   2275a:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   2275c:	6804      	ldr	r4, [r0, #0]
   2275e:	1c65      	adds	r5, r4, #1
   22760:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   22762:	0e12      	lsrs	r2, r2, #24
   22764:	1889      	adds	r1, r1, r2
   22766:	400b      	ands	r3, r1
   22768:	1a9b      	subs	r3, r3, r2
   2276a:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   2276c:	6803      	ldr	r3, [r0, #0]
   2276e:	3301      	adds	r3, #1
   22770:	6003      	str	r3, [r0, #0]
}
   22772:	bd30      	pop	{r4, r5, pc}

00022774 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   22774:	b570      	push	{r4, r5, r6, lr}
   22776:	0004      	movs	r4, r0
   22778:	000e      	movs	r6, r1
	int len = strlen(string);
   2277a:	0008      	movs	r0, r1
   2277c:	4b08      	ldr	r3, [pc, #32]	; (227a0 <writeCString+0x2c>)
   2277e:	4798      	blx	r3
   22780:	0005      	movs	r5, r0
	writeInt(pptr, len);
   22782:	0001      	movs	r1, r0
   22784:	0020      	movs	r0, r4
   22786:	4b07      	ldr	r3, [pc, #28]	; (227a4 <writeCString+0x30>)
   22788:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2278a:	002a      	movs	r2, r5
   2278c:	0031      	movs	r1, r6
   2278e:	6820      	ldr	r0, [r4, #0]
   22790:	4b05      	ldr	r3, [pc, #20]	; (227a8 <writeCString+0x34>)
   22792:	4798      	blx	r3
	*pptr += len;
   22794:	6823      	ldr	r3, [r4, #0]
   22796:	469c      	mov	ip, r3
   22798:	4465      	add	r5, ip
   2279a:	6025      	str	r5, [r4, #0]
}
   2279c:	bd70      	pop	{r4, r5, r6, pc}
   2279e:	46c0      	nop			; (mov r8, r8)
   227a0:	00026603 	.word	0x00026603
   227a4:	0002274b 	.word	0x0002274b
   227a8:	00026215 	.word	0x00026215

000227ac <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   227ac:	b530      	push	{r4, r5, lr}
   227ae:	b085      	sub	sp, #20
   227b0:	0005      	movs	r5, r0
   227b2:	9101      	str	r1, [sp, #4]
   227b4:	9303      	str	r3, [sp, #12]
   227b6:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   227b8:	dc06      	bgt.n	227c8 <writeMQTTString+0x1c>
   227ba:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   227bc:	2900      	cmp	r1, #0
   227be:	d010      	beq.n	227e2 <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   227c0:	4b0a      	ldr	r3, [pc, #40]	; (227ec <writeMQTTString+0x40>)
   227c2:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   227c4:	b005      	add	sp, #20
   227c6:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   227c8:	0011      	movs	r1, r2
   227ca:	4b09      	ldr	r3, [pc, #36]	; (227f0 <writeMQTTString+0x44>)
   227cc:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   227ce:	0022      	movs	r2, r4
   227d0:	9903      	ldr	r1, [sp, #12]
   227d2:	6828      	ldr	r0, [r5, #0]
   227d4:	4b07      	ldr	r3, [pc, #28]	; (227f4 <writeMQTTString+0x48>)
   227d6:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   227d8:	682b      	ldr	r3, [r5, #0]
   227da:	469c      	mov	ip, r3
   227dc:	4464      	add	r4, ip
   227de:	602c      	str	r4, [r5, #0]
   227e0:	e7f0      	b.n	227c4 <writeMQTTString+0x18>
		writeInt(pptr, 0);
   227e2:	2100      	movs	r1, #0
   227e4:	4b02      	ldr	r3, [pc, #8]	; (227f0 <writeMQTTString+0x44>)
   227e6:	4798      	blx	r3
}
   227e8:	e7ec      	b.n	227c4 <writeMQTTString+0x18>
   227ea:	46c0      	nop			; (mov r8, r8)
   227ec:	00022775 	.word	0x00022775
   227f0:	0002274b 	.word	0x0002274b
   227f4:	00026215 	.word	0x00026215

000227f8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   227f8:	b570      	push	{r4, r5, r6, lr}
   227fa:	0005      	movs	r5, r0
   227fc:	000c      	movs	r4, r1
   227fe:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   22800:	680b      	ldr	r3, [r1, #0]
   22802:	1ad3      	subs	r3, r2, r3
   22804:	2b01      	cmp	r3, #1
   22806:	dd12      	ble.n	2282e <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   22808:	0008      	movs	r0, r1
   2280a:	4b0a      	ldr	r3, [pc, #40]	; (22834 <readMQTTLenString+0x3c>)
   2280c:	4798      	blx	r3
   2280e:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   22810:	6822      	ldr	r2, [r4, #0]
   22812:	1811      	adds	r1, r2, r0
	int rc = 0;
   22814:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   22816:	428e      	cmp	r6, r1
   22818:	d305      	bcc.n	22826 <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2281a:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   2281c:	6823      	ldr	r3, [r4, #0]
   2281e:	469c      	mov	ip, r3
   22820:	4460      	add	r0, ip
   22822:	6020      	str	r0, [r4, #0]
			rc = 1;
   22824:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   22826:	2200      	movs	r2, #0
   22828:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   2282a:	0018      	movs	r0, r3
   2282c:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   2282e:	2300      	movs	r3, #0
   22830:	e7f9      	b.n	22826 <readMQTTLenString+0x2e>
   22832:	46c0      	nop			; (mov r8, r8)
   22834:	00022721 	.word	0x00022721

00022838 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   22838:	b500      	push	{lr}
   2283a:	b085      	sub	sp, #20
   2283c:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   2283e:	2800      	cmp	r0, #0
   22840:	d003      	beq.n	2284a <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   22842:	4b03      	ldr	r3, [pc, #12]	; (22850 <MQTTstrlen+0x18>)
   22844:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   22846:	b005      	add	sp, #20
   22848:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   2284a:	9802      	ldr	r0, [sp, #8]
	return rc;
   2284c:	e7fb      	b.n	22846 <MQTTstrlen+0xe>
   2284e:	46c0      	nop			; (mov r8, r8)
   22850:	00026603 	.word	0x00026603

00022854 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   22854:	b570      	push	{r4, r5, r6, lr}
   22856:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   22858:	6806      	ldr	r6, [r0, #0]
   2285a:	2e00      	cmp	r6, #0
   2285c:	d00b      	beq.n	22876 <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   2285e:	0030      	movs	r0, r6
   22860:	4b0b      	ldr	r3, [pc, #44]	; (22890 <MQTTPacket_equals+0x3c>)
   22862:	4798      	blx	r3
   22864:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   22866:	0028      	movs	r0, r5
   22868:	4b09      	ldr	r3, [pc, #36]	; (22890 <MQTTPacket_equals+0x3c>)
   2286a:	4798      	blx	r3
   2286c:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2286e:	4284      	cmp	r4, r0
   22870:	d004      	beq.n	2287c <MQTTPacket_equals+0x28>
}
   22872:	0018      	movs	r0, r3
   22874:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   22876:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   22878:	6844      	ldr	r4, [r0, #4]
   2287a:	e7f4      	b.n	22866 <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2287c:	0022      	movs	r2, r4
   2287e:	0029      	movs	r1, r5
   22880:	0030      	movs	r0, r6
   22882:	4b04      	ldr	r3, [pc, #16]	; (22894 <MQTTPacket_equals+0x40>)
   22884:	4798      	blx	r3
   22886:	4243      	negs	r3, r0
   22888:	4143      	adcs	r3, r0
   2288a:	b2db      	uxtb	r3, r3
   2288c:	e7f1      	b.n	22872 <MQTTPacket_equals+0x1e>
   2288e:	46c0      	nop			; (mov r8, r8)
   22890:	00026603 	.word	0x00026603
   22894:	00026611 	.word	0x00026611

00022898 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   22898:	b510      	push	{r4, lr}
   2289a:	b084      	sub	sp, #16
   2289c:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2289e:	0008      	movs	r0, r1
   228a0:	0011      	movs	r1, r2
   228a2:	001a      	movs	r2, r3
   228a4:	4b05      	ldr	r3, [pc, #20]	; (228bc <MQTTSerialize_publishLength+0x24>)
   228a6:	4798      	blx	r3
   228a8:	3002      	adds	r0, #2
   228aa:	9b06      	ldr	r3, [sp, #24]
   228ac:	469c      	mov	ip, r3
   228ae:	4460      	add	r0, ip
	if (qos > 0)
   228b0:	2c00      	cmp	r4, #0
   228b2:	dd00      	ble.n	228b6 <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   228b4:	3002      	adds	r0, #2
	return len;
}
   228b6:	b004      	add	sp, #16
   228b8:	bd10      	pop	{r4, pc}
   228ba:	46c0      	nop			; (mov r8, r8)
   228bc:	00022839 	.word	0x00022839

000228c0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   228c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   228c2:	46de      	mov	lr, fp
   228c4:	4657      	mov	r7, sl
   228c6:	464e      	mov	r6, r9
   228c8:	b5c0      	push	{r6, r7, lr}
   228ca:	b084      	sub	sp, #16
   228cc:	0007      	movs	r7, r0
   228ce:	468b      	mov	fp, r1
   228d0:	4692      	mov	sl, r2
   228d2:	001e      	movs	r6, r3
   228d4:	ab0c      	add	r3, sp, #48	; 0x30
   228d6:	781b      	ldrb	r3, [r3, #0]
   228d8:	4699      	mov	r9, r3
   228da:	ab0d      	add	r3, sp, #52	; 0x34
   228dc:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   228de:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   228e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   228e2:	9300      	str	r3, [sp, #0]
   228e4:	990e      	ldr	r1, [sp, #56]	; 0x38
   228e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   228e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   228ea:	0030      	movs	r0, r6
   228ec:	4d1f      	ldr	r5, [pc, #124]	; (2296c <MQTTSerialize_publish+0xac>)
   228ee:	47a8      	blx	r5
   228f0:	0005      	movs	r5, r0
   228f2:	4b1f      	ldr	r3, [pc, #124]	; (22970 <MQTTSerialize_publish+0xb0>)
   228f4:	4798      	blx	r3
   228f6:	4558      	cmp	r0, fp
   228f8:	dc34      	bgt.n	22964 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   228fa:	2201      	movs	r2, #1
   228fc:	4653      	mov	r3, sl
   228fe:	4013      	ands	r3, r2
   22900:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   22902:	2103      	movs	r1, #3
   22904:	4031      	ands	r1, r6
   22906:	0048      	lsls	r0, r1, #1
   22908:	2130      	movs	r1, #48	; 0x30
   2290a:	4319      	orrs	r1, r3
   2290c:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   2290e:	464b      	mov	r3, r9
   22910:	4013      	ands	r3, r2
   22912:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   22914:	4319      	orrs	r1, r3
   22916:	a803      	add	r0, sp, #12
   22918:	4b16      	ldr	r3, [pc, #88]	; (22974 <MQTTSerialize_publish+0xb4>)
   2291a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2291c:	0029      	movs	r1, r5
   2291e:	9803      	ldr	r0, [sp, #12]
   22920:	4b15      	ldr	r3, [pc, #84]	; (22978 <MQTTSerialize_publish+0xb8>)
   22922:	4798      	blx	r3
   22924:	9b03      	ldr	r3, [sp, #12]
   22926:	469c      	mov	ip, r3
   22928:	4460      	add	r0, ip
   2292a:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   2292c:	990e      	ldr	r1, [sp, #56]	; 0x38
   2292e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22930:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22932:	a803      	add	r0, sp, #12
   22934:	4d11      	ldr	r5, [pc, #68]	; (2297c <MQTTSerialize_publish+0xbc>)
   22936:	47a8      	blx	r5

	if (qos > 0)
   22938:	2e00      	cmp	r6, #0
   2293a:	dd03      	ble.n	22944 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   2293c:	0021      	movs	r1, r4
   2293e:	a803      	add	r0, sp, #12
   22940:	4b0f      	ldr	r3, [pc, #60]	; (22980 <MQTTSerialize_publish+0xc0>)
   22942:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   22944:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22946:	9911      	ldr	r1, [sp, #68]	; 0x44
   22948:	9803      	ldr	r0, [sp, #12]
   2294a:	4b0e      	ldr	r3, [pc, #56]	; (22984 <MQTTSerialize_publish+0xc4>)
   2294c:	4798      	blx	r3
	ptr += payloadlen;
   2294e:	9b03      	ldr	r3, [sp, #12]
   22950:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22952:	4694      	mov	ip, r2
   22954:	4463      	add	r3, ip

	rc = ptr - buf;
   22956:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22958:	b004      	add	sp, #16
   2295a:	bc1c      	pop	{r2, r3, r4}
   2295c:	4691      	mov	r9, r2
   2295e:	469a      	mov	sl, r3
   22960:	46a3      	mov	fp, r4
   22962:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22964:	2002      	movs	r0, #2
   22966:	4240      	negs	r0, r0
	return rc;
   22968:	e7f6      	b.n	22958 <MQTTSerialize_publish+0x98>
   2296a:	46c0      	nop			; (mov r8, r8)
   2296c:	00022899 	.word	0x00022899
   22970:	000226dd 	.word	0x000226dd
   22974:	0002273f 	.word	0x0002273f
   22978:	00022655 	.word	0x00022655
   2297c:	000227ad 	.word	0x000227ad
   22980:	0002274b 	.word	0x0002274b
   22984:	00026215 	.word	0x00026215

00022988 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   22988:	b530      	push	{r4, r5, lr}
   2298a:	b083      	sub	sp, #12
   2298c:	0004      	movs	r4, r0
   2298e:	a806      	add	r0, sp, #24
   22990:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   22992:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   22994:	2903      	cmp	r1, #3
   22996:	dd1e      	ble.n	229d6 <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   22998:	210f      	movs	r1, #15
   2299a:	4011      	ands	r1, r2
	header.bits.dup = dup;
   2299c:	2001      	movs	r0, #1
   2299e:	4003      	ands	r3, r0
   229a0:	00db      	lsls	r3, r3, #3
   229a2:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   229a4:	3a06      	subs	r2, #6
   229a6:	4250      	negs	r0, r2
   229a8:	4142      	adcs	r2, r0
   229aa:	0052      	lsls	r2, r2, #1
   229ac:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   229ae:	4311      	orrs	r1, r2
   229b0:	a801      	add	r0, sp, #4
   229b2:	4b0a      	ldr	r3, [pc, #40]	; (229dc <MQTTSerialize_ack+0x54>)
   229b4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   229b6:	2102      	movs	r1, #2
   229b8:	9801      	ldr	r0, [sp, #4]
   229ba:	4b09      	ldr	r3, [pc, #36]	; (229e0 <MQTTSerialize_ack+0x58>)
   229bc:	4798      	blx	r3
   229be:	9b01      	ldr	r3, [sp, #4]
   229c0:	469c      	mov	ip, r3
   229c2:	4460      	add	r0, ip
   229c4:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   229c6:	0029      	movs	r1, r5
   229c8:	a801      	add	r0, sp, #4
   229ca:	4b06      	ldr	r3, [pc, #24]	; (229e4 <MQTTSerialize_ack+0x5c>)
   229cc:	4798      	blx	r3
	rc = ptr - buf;
   229ce:	9b01      	ldr	r3, [sp, #4]
   229d0:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   229d2:	b003      	add	sp, #12
   229d4:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   229d6:	2002      	movs	r0, #2
   229d8:	4240      	negs	r0, r0
	return rc;
   229da:	e7fa      	b.n	229d2 <MQTTSerialize_ack+0x4a>
   229dc:	0002273f 	.word	0x0002273f
   229e0:	00022655 	.word	0x00022655
   229e4:	0002274b 	.word	0x0002274b

000229e8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   229e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   229ea:	46c6      	mov	lr, r8
   229ec:	b500      	push	{lr}
   229ee:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   229f0:	dd12      	ble.n	22a18 <MQTTSerialize_subscribeLength+0x30>
   229f2:	000c      	movs	r4, r1
   229f4:	2602      	movs	r6, #2
   229f6:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   229f8:	4b08      	ldr	r3, [pc, #32]	; (22a1c <MQTTSerialize_subscribeLength+0x34>)
   229fa:	4698      	mov	r8, r3
   229fc:	6820      	ldr	r0, [r4, #0]
   229fe:	6861      	ldr	r1, [r4, #4]
   22a00:	68a2      	ldr	r2, [r4, #8]
   22a02:	47c0      	blx	r8
   22a04:	3003      	adds	r0, #3
   22a06:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   22a08:	3501      	adds	r5, #1
   22a0a:	340c      	adds	r4, #12
   22a0c:	42af      	cmp	r7, r5
   22a0e:	d1f5      	bne.n	229fc <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   22a10:	0030      	movs	r0, r6
   22a12:	bc04      	pop	{r2}
   22a14:	4690      	mov	r8, r2
   22a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   22a18:	2602      	movs	r6, #2
	return len;
   22a1a:	e7f9      	b.n	22a10 <MQTTSerialize_subscribeLength+0x28>
   22a1c:	00022839 	.word	0x00022839

00022a20 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   22a20:	b5f0      	push	{r4, r5, r6, r7, lr}
   22a22:	46d6      	mov	lr, sl
   22a24:	464f      	mov	r7, r9
   22a26:	4646      	mov	r6, r8
   22a28:	b5c0      	push	{r6, r7, lr}
   22a2a:	b084      	sub	sp, #16
   22a2c:	4682      	mov	sl, r0
   22a2e:	000e      	movs	r6, r1
   22a30:	0015      	movs	r5, r2
   22a32:	9301      	str	r3, [sp, #4]
   22a34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   22a36:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   22a38:	990d      	ldr	r1, [sp, #52]	; 0x34
   22a3a:	0038      	movs	r0, r7
   22a3c:	4b1f      	ldr	r3, [pc, #124]	; (22abc <MQTTSerialize_subscribe+0x9c>)
   22a3e:	4798      	blx	r3
   22a40:	0004      	movs	r4, r0
   22a42:	4b1f      	ldr	r3, [pc, #124]	; (22ac0 <MQTTSerialize_subscribe+0xa0>)
   22a44:	4798      	blx	r3
   22a46:	42b0      	cmp	r0, r6
   22a48:	dc34      	bgt.n	22ab4 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   22a4a:	2101      	movs	r1, #1
   22a4c:	4029      	ands	r1, r5
   22a4e:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   22a50:	2180      	movs	r1, #128	; 0x80
   22a52:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   22a54:	2302      	movs	r3, #2
   22a56:	4319      	orrs	r1, r3
   22a58:	a803      	add	r0, sp, #12
   22a5a:	4b1a      	ldr	r3, [pc, #104]	; (22ac4 <MQTTSerialize_subscribe+0xa4>)
   22a5c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   22a5e:	0021      	movs	r1, r4
   22a60:	9803      	ldr	r0, [sp, #12]
   22a62:	4b19      	ldr	r3, [pc, #100]	; (22ac8 <MQTTSerialize_subscribe+0xa8>)
   22a64:	4798      	blx	r3
   22a66:	9a03      	ldr	r2, [sp, #12]
   22a68:	4694      	mov	ip, r2
   22a6a:	4460      	add	r0, ip
   22a6c:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   22a6e:	9901      	ldr	r1, [sp, #4]
   22a70:	a803      	add	r0, sp, #12
   22a72:	4b16      	ldr	r3, [pc, #88]	; (22acc <MQTTSerialize_subscribe+0xac>)
   22a74:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   22a76:	2f00      	cmp	r7, #0
   22a78:	dd13      	ble.n	22aa2 <MQTTSerialize_subscribe+0x82>
   22a7a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   22a7c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   22a7e:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   22a80:	4b13      	ldr	r3, [pc, #76]	; (22ad0 <MQTTSerialize_subscribe+0xb0>)
   22a82:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   22a84:	4b0f      	ldr	r3, [pc, #60]	; (22ac4 <MQTTSerialize_subscribe+0xa4>)
   22a86:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   22a88:	6821      	ldr	r1, [r4, #0]
   22a8a:	6862      	ldr	r2, [r4, #4]
   22a8c:	68a3      	ldr	r3, [r4, #8]
   22a8e:	a803      	add	r0, sp, #12
   22a90:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   22a92:	ce02      	ldmia	r6!, {r1}
   22a94:	b2c9      	uxtb	r1, r1
   22a96:	a803      	add	r0, sp, #12
   22a98:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   22a9a:	3501      	adds	r5, #1
   22a9c:	340c      	adds	r4, #12
   22a9e:	42af      	cmp	r7, r5
   22aa0:	d1f2      	bne.n	22a88 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   22aa2:	9b03      	ldr	r3, [sp, #12]
   22aa4:	4652      	mov	r2, sl
   22aa6:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22aa8:	b004      	add	sp, #16
   22aaa:	bc1c      	pop	{r2, r3, r4}
   22aac:	4690      	mov	r8, r2
   22aae:	4699      	mov	r9, r3
   22ab0:	46a2      	mov	sl, r4
   22ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   22ab4:	2002      	movs	r0, #2
   22ab6:	4240      	negs	r0, r0
	return rc;
   22ab8:	e7f6      	b.n	22aa8 <MQTTSerialize_subscribe+0x88>
   22aba:	46c0      	nop			; (mov r8, r8)
   22abc:	000229e9 	.word	0x000229e9
   22ac0:	000226dd 	.word	0x000226dd
   22ac4:	0002273f 	.word	0x0002273f
   22ac8:	00022655 	.word	0x00022655
   22acc:	0002274b 	.word	0x0002274b
   22ad0:	000227ad 	.word	0x000227ad

00022ad4 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   22ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22ad6:	46ce      	mov	lr, r9
   22ad8:	4647      	mov	r7, r8
   22ada:	b580      	push	{r7, lr}
   22adc:	b083      	sub	sp, #12
   22ade:	0004      	movs	r4, r0
   22ae0:	000e      	movs	r6, r1
   22ae2:	0015      	movs	r5, r2
   22ae4:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   22ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22ae8:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   22aea:	a801      	add	r0, sp, #4
   22aec:	4b1e      	ldr	r3, [pc, #120]	; (22b68 <MQTTDeserialize_suback+0x94>)
   22aee:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   22af0:	23f0      	movs	r3, #240	; 0xf0
   22af2:	4003      	ands	r3, r0
	int rc = 0;
   22af4:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   22af6:	2b90      	cmp	r3, #144	; 0x90
   22af8:	d004      	beq.n	22b04 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   22afa:	b003      	add	sp, #12
   22afc:	bc0c      	pop	{r2, r3}
   22afe:	4690      	mov	r8, r2
   22b00:	4699      	mov	r9, r3
   22b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   22b04:	4669      	mov	r1, sp
   22b06:	9801      	ldr	r0, [sp, #4]
   22b08:	4b18      	ldr	r3, [pc, #96]	; (22b6c <MQTTDeserialize_suback+0x98>)
   22b0a:	4798      	blx	r3
   22b0c:	9b01      	ldr	r3, [sp, #4]
   22b0e:	181b      	adds	r3, r3, r0
   22b10:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   22b12:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   22b14:	2a01      	cmp	r2, #1
   22b16:	ddf0      	ble.n	22afa <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   22b18:	4698      	mov	r8, r3
   22b1a:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   22b1c:	a801      	add	r0, sp, #4
   22b1e:	4b14      	ldr	r3, [pc, #80]	; (22b70 <MQTTDeserialize_suback+0x9c>)
   22b20:	4798      	blx	r3
   22b22:	8020      	strh	r0, [r4, #0]
	*count = 0;
   22b24:	2300      	movs	r3, #0
   22b26:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   22b28:	9b01      	ldr	r3, [sp, #4]
   22b2a:	4598      	cmp	r8, r3
   22b2c:	d916      	bls.n	22b5c <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   22b2e:	2e00      	cmp	r6, #0
   22b30:	db16      	blt.n	22b60 <MQTTDeserialize_suback+0x8c>
   22b32:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   22b34:	4a0c      	ldr	r2, [pc, #48]	; (22b68 <MQTTDeserialize_suback+0x94>)
   22b36:	4691      	mov	r9, r2
   22b38:	1c5a      	adds	r2, r3, #1
   22b3a:	602a      	str	r2, [r5, #0]
   22b3c:	009b      	lsls	r3, r3, #2
   22b3e:	18fc      	adds	r4, r7, r3
   22b40:	a801      	add	r0, sp, #4
   22b42:	47c8      	blx	r9
   22b44:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   22b46:	9b01      	ldr	r3, [sp, #4]
   22b48:	4598      	cmp	r8, r3
   22b4a:	d905      	bls.n	22b58 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   22b4c:	682b      	ldr	r3, [r5, #0]
   22b4e:	42b3      	cmp	r3, r6
   22b50:	ddf2      	ble.n	22b38 <MQTTDeserialize_suback+0x64>
			rc = -1;
   22b52:	2001      	movs	r0, #1
   22b54:	4240      	negs	r0, r0
	return rc;
   22b56:	e7d0      	b.n	22afa <MQTTDeserialize_suback+0x26>
	rc = 1;
   22b58:	2001      	movs	r0, #1
   22b5a:	e7ce      	b.n	22afa <MQTTDeserialize_suback+0x26>
   22b5c:	2001      	movs	r0, #1
   22b5e:	e7cc      	b.n	22afa <MQTTDeserialize_suback+0x26>
			rc = -1;
   22b60:	2001      	movs	r0, #1
   22b62:	4240      	negs	r0, r0
   22b64:	e7c9      	b.n	22afa <MQTTDeserialize_suback+0x26>
   22b66:	46c0      	nop			; (mov r8, r8)
   22b68:	00022733 	.word	0x00022733
   22b6c:	00022705 	.word	0x00022705
   22b70:	00022721 	.word	0x00022721

00022b74 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   22b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22b76:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   22b78:	2041      	movs	r0, #65	; 0x41
   22b7a:	5c23      	ldrb	r3, [r4, r0]
   22b7c:	2501      	movs	r5, #1
   22b7e:	432b      	orrs	r3, r5
   22b80:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   22b82:	b292      	uxth	r2, r2
   22b84:	2000      	movs	r0, #0
   22b86:	5620      	ldrsb	r0, [r4, r0]
   22b88:	2300      	movs	r3, #0
   22b8a:	4d12      	ldr	r5, [pc, #72]	; (22bd4 <_http_client_send_wait+0x60>)
   22b8c:	47a8      	blx	r5
   22b8e:	2800      	cmp	r0, #0
   22b90:	db16      	blt.n	22bc0 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22b92:	2341      	movs	r3, #65	; 0x41
   22b94:	5ce3      	ldrb	r3, [r4, r3]
   22b96:	07db      	lsls	r3, r3, #31
   22b98:	d518      	bpl.n	22bcc <_http_client_send_wait+0x58>
   22b9a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   22b9c:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22b9e:	2b02      	cmp	r3, #2
   22ba0:	d917      	bls.n	22bd2 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   22ba2:	4f0d      	ldr	r7, [pc, #52]	; (22bd8 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   22ba4:	4e0d      	ldr	r6, [pc, #52]	; (22bdc <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22ba6:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   22ba8:	2000      	movs	r0, #0
   22baa:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   22bac:	6d60      	ldr	r0, [r4, #84]	; 0x54
   22bae:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   22bb0:	5d63      	ldrb	r3, [r4, r5]
   22bb2:	07db      	lsls	r3, r3, #31
   22bb4:	d50c      	bpl.n	22bd0 <_http_client_send_wait+0x5c>
   22bb6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22bb8:	2b02      	cmp	r3, #2
   22bba:	d8f5      	bhi.n	22ba8 <_http_client_send_wait+0x34>
	return 0;
   22bbc:	2000      	movs	r0, #0
   22bbe:	e008      	b.n	22bd2 <_http_client_send_wait+0x5e>
		module->sending = 0;
   22bc0:	2241      	movs	r2, #65	; 0x41
   22bc2:	5ca3      	ldrb	r3, [r4, r2]
   22bc4:	2101      	movs	r1, #1
   22bc6:	438b      	bics	r3, r1
   22bc8:	54a3      	strb	r3, [r4, r2]
		return result;
   22bca:	e002      	b.n	22bd2 <_http_client_send_wait+0x5e>
	return 0;
   22bcc:	2000      	movs	r0, #0
   22bce:	e000      	b.n	22bd2 <_http_client_send_wait+0x5e>
   22bd0:	2000      	movs	r0, #0
}
   22bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22bd4:	0001d109 	.word	0x0001d109
   22bd8:	0001b121 	.word	0x0001b121
   22bdc:	00023d09 	.word	0x00023d09

00022be0 <http_client_get_config_defaults>:
	config->port = 80;
   22be0:	2350      	movs	r3, #80	; 0x50
   22be2:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   22be4:	2300      	movs	r3, #0
   22be6:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   22be8:	4a05      	ldr	r2, [pc, #20]	; (22c00 <http_client_get_config_defaults+0x20>)
   22bea:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
   22bec:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   22bee:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   22bf0:	3301      	adds	r3, #1
   22bf2:	33ff      	adds	r3, #255	; 0xff
   22bf4:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   22bf6:	3bae      	subs	r3, #174	; 0xae
   22bf8:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   22bfa:	4b02      	ldr	r3, [pc, #8]	; (22c04 <http_client_get_config_defaults+0x24>)
   22bfc:	6183      	str	r3, [r0, #24]
}
   22bfe:	4770      	bx	lr
   22c00:	00004e20 	.word	0x00004e20
   22c04:	0002aa84 	.word	0x0002aa84

00022c08 <http_client_init>:
{
   22c08:	b570      	push	{r4, r5, r6, lr}
   22c0a:	0004      	movs	r4, r0
   22c0c:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   22c0e:	2800      	cmp	r0, #0
   22c10:	d038      	beq.n	22c84 <http_client_init+0x7c>
   22c12:	2900      	cmp	r1, #0
   22c14:	d039      	beq.n	22c8a <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   22c16:	690b      	ldr	r3, [r1, #16]
   22c18:	2b00      	cmp	r3, #0
   22c1a:	d039      	beq.n	22c90 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   22c1c:	684b      	ldr	r3, [r1, #4]
   22c1e:	2b00      	cmp	r3, #0
   22c20:	d039      	beq.n	22c96 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   22c22:	694b      	ldr	r3, [r1, #20]
   22c24:	2b51      	cmp	r3, #81	; 0x51
   22c26:	d939      	bls.n	22c9c <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   22c28:	22e8      	movs	r2, #232	; 0xe8
   22c2a:	2100      	movs	r1, #0
   22c2c:	4b1e      	ldr	r3, [pc, #120]	; (22ca8 <http_client_init+0xa0>)
   22c2e:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   22c30:	0020      	movs	r0, r4
   22c32:	3050      	adds	r0, #80	; 0x50
   22c34:	221c      	movs	r2, #28
   22c36:	0029      	movs	r1, r5
   22c38:	4b1c      	ldr	r3, [pc, #112]	; (22cac <http_client_init+0xa4>)
   22c3a:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   22c3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   22c3e:	2b00      	cmp	r3, #0
   22c40:	d008      	beq.n	22c54 <http_client_init+0x4c>
	if (config->timeout > 0) {
   22c42:	892b      	ldrh	r3, [r5, #8]
   22c44:	2b00      	cmp	r3, #0
   22c46:	d111      	bne.n	22c6c <http_client_init+0x64>
	module->req.state = STATE_INIT;
   22c48:	2300      	movs	r3, #0
   22c4a:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   22c4c:	22d8      	movs	r2, #216	; 0xd8
   22c4e:	50a3      	str	r3, [r4, r2]
	return 0;
   22c50:	2000      	movs	r0, #0
}
   22c52:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   22c54:	6928      	ldr	r0, [r5, #16]
   22c56:	4b16      	ldr	r3, [pc, #88]	; (22cb0 <http_client_init+0xa8>)
   22c58:	4798      	blx	r3
   22c5a:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   22c5c:	2800      	cmp	r0, #0
   22c5e:	d020      	beq.n	22ca2 <http_client_init+0x9a>
		module->alloc_buffer = 1;
   22c60:	2241      	movs	r2, #65	; 0x41
   22c62:	5ca3      	ldrb	r3, [r4, r2]
   22c64:	2104      	movs	r1, #4
   22c66:	430b      	orrs	r3, r1
   22c68:	54a3      	strb	r3, [r4, r2]
   22c6a:	e7ea      	b.n	22c42 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   22c6c:	6868      	ldr	r0, [r5, #4]
   22c6e:	2300      	movs	r3, #0
   22c70:	0022      	movs	r2, r4
   22c72:	4910      	ldr	r1, [pc, #64]	; (22cb4 <http_client_init+0xac>)
   22c74:	4d10      	ldr	r5, [pc, #64]	; (22cb8 <http_client_init+0xb0>)
   22c76:	47a8      	blx	r5
   22c78:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   22c7a:	2800      	cmp	r0, #0
   22c7c:	dae4      	bge.n	22c48 <http_client_init+0x40>
			return -ENOSPC;
   22c7e:	201c      	movs	r0, #28
   22c80:	4240      	negs	r0, r0
   22c82:	e7e6      	b.n	22c52 <http_client_init+0x4a>
		return -EINVAL;
   22c84:	2016      	movs	r0, #22
   22c86:	4240      	negs	r0, r0
   22c88:	e7e3      	b.n	22c52 <http_client_init+0x4a>
   22c8a:	2016      	movs	r0, #22
   22c8c:	4240      	negs	r0, r0
   22c8e:	e7e0      	b.n	22c52 <http_client_init+0x4a>
		return -EINVAL;
   22c90:	2016      	movs	r0, #22
   22c92:	4240      	negs	r0, r0
   22c94:	e7dd      	b.n	22c52 <http_client_init+0x4a>
		return -EINVAL;
   22c96:	2016      	movs	r0, #22
   22c98:	4240      	negs	r0, r0
   22c9a:	e7da      	b.n	22c52 <http_client_init+0x4a>
		return -EINVAL;
   22c9c:	2016      	movs	r0, #22
   22c9e:	4240      	negs	r0, r0
   22ca0:	e7d7      	b.n	22c52 <http_client_init+0x4a>
			return -ENOMEM;
   22ca2:	200c      	movs	r0, #12
   22ca4:	4240      	negs	r0, r0
   22ca6:	e7d4      	b.n	22c52 <http_client_init+0x4a>
   22ca8:	0002624b 	.word	0x0002624b
   22cac:	00026215 	.word	0x00026215
   22cb0:	000261ed 	.word	0x000261ed
   22cb4:	00022dcd 	.word	0x00022dcd
   22cb8:	00023c95 	.word	0x00023c95

00022cbc <http_client_register_callback>:
	if (module == NULL) {
   22cbc:	2800      	cmp	r0, #0
   22cbe:	d002      	beq.n	22cc6 <http_client_register_callback+0xa>
	module->cb = callback;
   22cc0:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   22cc2:	2000      	movs	r0, #0
}
   22cc4:	4770      	bx	lr
		return -EINVAL;
   22cc6:	2016      	movs	r0, #22
   22cc8:	4240      	negs	r0, r0
   22cca:	e7fb      	b.n	22cc4 <http_client_register_callback+0x8>

00022ccc <_http_client_clear_conn>:
{
   22ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   22cce:	b085      	sub	sp, #20
   22cd0:	0004      	movs	r4, r0
   22cd2:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   22cd4:	23c0      	movs	r3, #192	; 0xc0
   22cd6:	58c3      	ldr	r3, [r0, r3]
   22cd8:	2b00      	cmp	r3, #0
   22cda:	d002      	beq.n	22ce2 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   22cdc:	22c4      	movs	r2, #196	; 0xc4
   22cde:	5880      	ldr	r0, [r0, r2]
   22ce0:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   22ce2:	0020      	movs	r0, r4
   22ce4:	30b0      	adds	r0, #176	; 0xb0
   22ce6:	2218      	movs	r2, #24
   22ce8:	2100      	movs	r1, #0
   22cea:	4b17      	ldr	r3, [pc, #92]	; (22d48 <_http_client_clear_conn+0x7c>)
   22cec:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   22cee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22cf0:	2b00      	cmp	r3, #0
   22cf2:	d124      	bne.n	22d3e <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   22cf4:	2300      	movs	r3, #0
   22cf6:	56e3      	ldrsb	r3, [r4, r3]
   22cf8:	009b      	lsls	r3, r3, #2
   22cfa:	2500      	movs	r5, #0
   22cfc:	4a13      	ldr	r2, [pc, #76]	; (22d4c <_http_client_clear_conn+0x80>)
   22cfe:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   22d00:	0020      	movs	r0, r4
   22d02:	306c      	adds	r0, #108	; 0x6c
   22d04:	226c      	movs	r2, #108	; 0x6c
   22d06:	2100      	movs	r1, #0
   22d08:	4f0f      	ldr	r7, [pc, #60]	; (22d48 <_http_client_clear_conn+0x7c>)
   22d0a:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   22d0c:	0020      	movs	r0, r4
   22d0e:	30d8      	adds	r0, #216	; 0xd8
   22d10:	2210      	movs	r2, #16
   22d12:	2100      	movs	r1, #0
   22d14:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   22d16:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   22d18:	23d8      	movs	r3, #216	; 0xd8
   22d1a:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   22d1c:	2241      	movs	r2, #65	; 0x41
   22d1e:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   22d20:	2101      	movs	r1, #1
   22d22:	438b      	bics	r3, r1
   22d24:	3101      	adds	r1, #1
   22d26:	438b      	bics	r3, r1
   22d28:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   22d2a:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   22d2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   22d2e:	2b00      	cmp	r3, #0
   22d30:	d003      	beq.n	22d3a <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   22d32:	aa01      	add	r2, sp, #4
   22d34:	3102      	adds	r1, #2
   22d36:	0020      	movs	r0, r4
   22d38:	4798      	blx	r3
}
   22d3a:	b005      	add	sp, #20
   22d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   22d3e:	2000      	movs	r0, #0
   22d40:	5620      	ldrsb	r0, [r4, r0]
   22d42:	4b03      	ldr	r3, [pc, #12]	; (22d50 <_http_client_clear_conn+0x84>)
   22d44:	4798      	blx	r3
   22d46:	e7d5      	b.n	22cf4 <_http_client_clear_conn+0x28>
   22d48:	0002624b 	.word	0x0002624b
   22d4c:	200041a8 	.word	0x200041a8
   22d50:	0001d235 	.word	0x0001d235

00022d54 <http_client_socket_resolve_handler>:
{
   22d54:	b5f0      	push	{r4, r5, r6, r7, lr}
   22d56:	b087      	sub	sp, #28
   22d58:	9000      	str	r0, [sp, #0]
   22d5a:	9101      	str	r1, [sp, #4]
   22d5c:	4c17      	ldr	r4, [pc, #92]	; (22dbc <http_client_socket_resolve_handler+0x68>)
   22d5e:	0026      	movs	r6, r4
   22d60:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   22d62:	4f17      	ldr	r7, [pc, #92]	; (22dc0 <http_client_socket_resolve_handler+0x6c>)
   22d64:	e015      	b.n	22d92 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   22d66:	2302      	movs	r3, #2
   22d68:	aa02      	add	r2, sp, #8
   22d6a:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   22d6c:	334e      	adds	r3, #78	; 0x4e
   22d6e:	5aeb      	ldrh	r3, [r5, r3]
   22d70:	021a      	lsls	r2, r3, #8
   22d72:	0a1b      	lsrs	r3, r3, #8
   22d74:	4313      	orrs	r3, r2
   22d76:	aa02      	add	r2, sp, #8
   22d78:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   22d7a:	9b01      	ldr	r3, [sp, #4]
   22d7c:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   22d7e:	2000      	movs	r0, #0
   22d80:	5628      	ldrsb	r0, [r5, r0]
   22d82:	2210      	movs	r2, #16
   22d84:	a902      	add	r1, sp, #8
   22d86:	4b0f      	ldr	r3, [pc, #60]	; (22dc4 <http_client_socket_resolve_handler+0x70>)
   22d88:	4798      	blx	r3
				return;
   22d8a:	e015      	b.n	22db8 <http_client_socket_resolve_handler+0x64>
   22d8c:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   22d8e:	42b4      	cmp	r4, r6
   22d90:	d012      	beq.n	22db8 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   22d92:	6825      	ldr	r5, [r4, #0]
   22d94:	2d00      	cmp	r5, #0
   22d96:	d0f9      	beq.n	22d8c <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   22d98:	1c69      	adds	r1, r5, #1
   22d9a:	9800      	ldr	r0, [sp, #0]
   22d9c:	47b8      	blx	r7
   22d9e:	2800      	cmp	r0, #0
   22da0:	d1f4      	bne.n	22d8c <http_client_socket_resolve_handler+0x38>
   22da2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   22da4:	2b01      	cmp	r3, #1
   22da6:	d1f1      	bne.n	22d8c <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   22da8:	9b01      	ldr	r3, [sp, #4]
   22daa:	2b00      	cmp	r3, #0
   22dac:	d1db      	bne.n	22d66 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   22dae:	2176      	movs	r1, #118	; 0x76
   22db0:	4249      	negs	r1, r1
   22db2:	0028      	movs	r0, r5
   22db4:	4b04      	ldr	r3, [pc, #16]	; (22dc8 <http_client_socket_resolve_handler+0x74>)
   22db6:	4798      	blx	r3
}
   22db8:	b007      	add	sp, #28
   22dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22dbc:	200041a8 	.word	0x200041a8
   22dc0:	000265a3 	.word	0x000265a3
   22dc4:	0001d079 	.word	0x0001d079
   22dc8:	00022ccd 	.word	0x00022ccd

00022dcc <http_client_timer_callback>:
{
   22dcc:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   22dce:	2a00      	cmp	r2, #0
   22dd0:	d004      	beq.n	22ddc <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   22dd2:	213e      	movs	r1, #62	; 0x3e
   22dd4:	4249      	negs	r1, r1
   22dd6:	0010      	movs	r0, r2
   22dd8:	4b01      	ldr	r3, [pc, #4]	; (22de0 <http_client_timer_callback+0x14>)
   22dda:	4798      	blx	r3
}
   22ddc:	bd10      	pop	{r4, pc}
   22dde:	46c0      	nop			; (mov r8, r8)
   22de0:	00022ccd 	.word	0x00022ccd

00022de4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   22de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22de6:	46de      	mov	lr, fp
   22de8:	4657      	mov	r7, sl
   22dea:	b580      	push	{r7, lr}
   22dec:	b095      	sub	sp, #84	; 0x54
   22dee:	af02      	add	r7, sp, #8
   22df0:	0004      	movs	r4, r0
   22df2:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   22df4:	2310      	movs	r3, #16
   22df6:	2208      	movs	r2, #8
   22df8:	18ba      	adds	r2, r7, r2
   22dfa:	18d2      	adds	r2, r2, r3
   22dfc:	4bb1      	ldr	r3, [pc, #708]	; (230c4 <_http_client_request+0x2e0>)
   22dfe:	cb23      	ldmia	r3!, {r0, r1, r5}
   22e00:	c223      	stmia	r2!, {r0, r1, r5}
   22e02:	681b      	ldr	r3, [r3, #0]
   22e04:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   22e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
   22e08:	1dd3      	adds	r3, r2, #7
   22e0a:	08db      	lsrs	r3, r3, #3
   22e0c:	00db      	lsls	r3, r3, #3
   22e0e:	4669      	mov	r1, sp
   22e10:	1acb      	subs	r3, r1, r3
   22e12:	469d      	mov	sp, r3
   22e14:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   22e16:	2c00      	cmp	r4, #0
   22e18:	d100      	bne.n	22e1c <_http_client_request+0x38>
   22e1a:	e1f0      	b.n	231fe <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   22e1c:	2341      	movs	r3, #65	; 0x41
   22e1e:	5ce3      	ldrb	r3, [r4, r3]
   22e20:	07db      	lsls	r3, r3, #31
   22e22:	d500      	bpl.n	22e26 <_http_client_request+0x42>
   22e24:	e1eb      	b.n	231fe <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   22e26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   22e28:	2b03      	cmp	r3, #3
   22e2a:	d004      	beq.n	22e36 <_http_client_request+0x52>
   22e2c:	2b04      	cmp	r3, #4
   22e2e:	d100      	bne.n	22e32 <_http_client_request+0x4e>
   22e30:	e120      	b.n	23074 <_http_client_request+0x290>
   22e32:	46dd      	mov	sp, fp
   22e34:	e1e4      	b.n	23200 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   22e36:	2300      	movs	r3, #0
   22e38:	21cc      	movs	r1, #204	; 0xcc
   22e3a:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   22e3c:	3104      	adds	r1, #4
   22e3e:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   22e40:	9400      	str	r4, [sp, #0]
   22e42:	4ba1      	ldr	r3, [pc, #644]	; (230c8 <_http_client_request+0x2e4>)
   22e44:	0031      	movs	r1, r6
   22e46:	202c      	movs	r0, #44	; 0x2c
   22e48:	2508      	movs	r5, #8
   22e4a:	46ac      	mov	ip, r5
   22e4c:	44bc      	add	ip, r7
   22e4e:	4460      	add	r0, ip
   22e50:	4d9e      	ldr	r5, [pc, #632]	; (230cc <_http_client_request+0x2e8>)
   22e52:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   22e54:	23c8      	movs	r3, #200	; 0xc8
   22e56:	5ce3      	ldrb	r3, [r4, r3]
   22e58:	2b01      	cmp	r3, #1
   22e5a:	d100      	bne.n	22e5e <_http_client_request+0x7a>
   22e5c:	e0a9      	b.n	22fb2 <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   22e5e:	2b02      	cmp	r3, #2
   22e60:	d100      	bne.n	22e64 <_http_client_request+0x80>
   22e62:	e0af      	b.n	22fc4 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   22e64:	2b03      	cmp	r3, #3
   22e66:	d100      	bne.n	22e6a <_http_client_request+0x86>
   22e68:	e0b5      	b.n	22fd6 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   22e6a:	2b04      	cmp	r3, #4
   22e6c:	d100      	bne.n	22e70 <_http_client_request+0x8c>
   22e6e:	e0bb      	b.n	22fe8 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   22e70:	2b05      	cmp	r3, #5
   22e72:	d100      	bne.n	22e76 <_http_client_request+0x92>
   22e74:	e0c1      	b.n	22ffa <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   22e76:	2b06      	cmp	r3, #6
   22e78:	d100      	bne.n	22e7c <_http_client_request+0x98>
   22e7a:	e0c7      	b.n	2300c <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   22e7c:	0025      	movs	r5, r4
   22e7e:	3570      	adds	r5, #112	; 0x70
   22e80:	0028      	movs	r0, r5
   22e82:	4b93      	ldr	r3, [pc, #588]	; (230d0 <_http_client_request+0x2ec>)
   22e84:	469a      	mov	sl, r3
   22e86:	4798      	blx	r3
   22e88:	0002      	movs	r2, r0
   22e8a:	0029      	movs	r1, r5
   22e8c:	232c      	movs	r3, #44	; 0x2c
   22e8e:	2008      	movs	r0, #8
   22e90:	1838      	adds	r0, r7, r0
   22e92:	18c0      	adds	r0, r0, r3
   22e94:	4d8f      	ldr	r5, [pc, #572]	; (230d4 <_http_client_request+0x2f0>)
   22e96:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   22e98:	220b      	movs	r2, #11
   22e9a:	498f      	ldr	r1, [pc, #572]	; (230d8 <_http_client_request+0x2f4>)
   22e9c:	232c      	movs	r3, #44	; 0x2c
   22e9e:	2008      	movs	r0, #8
   22ea0:	1838      	adds	r0, r7, r0
   22ea2:	18c0      	adds	r0, r0, r3
   22ea4:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   22ea6:	220c      	movs	r2, #12
   22ea8:	498c      	ldr	r1, [pc, #560]	; (230dc <_http_client_request+0x2f8>)
   22eaa:	232c      	movs	r3, #44	; 0x2c
   22eac:	2008      	movs	r0, #8
   22eae:	1838      	adds	r0, r7, r0
   22eb0:	18c0      	adds	r0, r0, r3
   22eb2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   22eb4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   22eb6:	607b      	str	r3, [r7, #4]
   22eb8:	0018      	movs	r0, r3
   22eba:	47d0      	blx	sl
   22ebc:	0002      	movs	r2, r0
   22ebe:	6879      	ldr	r1, [r7, #4]
   22ec0:	232c      	movs	r3, #44	; 0x2c
   22ec2:	2008      	movs	r0, #8
   22ec4:	1838      	adds	r0, r7, r0
   22ec6:	18c0      	adds	r0, r0, r3
   22ec8:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   22eca:	2202      	movs	r2, #2
   22ecc:	4984      	ldr	r1, [pc, #528]	; (230e0 <_http_client_request+0x2fc>)
   22ece:	232c      	movs	r3, #44	; 0x2c
   22ed0:	2008      	movs	r0, #8
   22ed2:	1838      	adds	r0, r7, r0
   22ed4:	18c0      	adds	r0, r0, r3
   22ed6:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   22ed8:	2206      	movs	r2, #6
   22eda:	4982      	ldr	r1, [pc, #520]	; (230e4 <_http_client_request+0x300>)
   22edc:	232c      	movs	r3, #44	; 0x2c
   22ede:	2008      	movs	r0, #8
   22ee0:	1838      	adds	r0, r7, r0
   22ee2:	18c0      	adds	r0, r0, r3
   22ee4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   22ee6:	1c63      	adds	r3, r4, #1
   22ee8:	607b      	str	r3, [r7, #4]
   22eea:	0018      	movs	r0, r3
   22eec:	47d0      	blx	sl
   22eee:	0002      	movs	r2, r0
   22ef0:	6879      	ldr	r1, [r7, #4]
   22ef2:	232c      	movs	r3, #44	; 0x2c
   22ef4:	2008      	movs	r0, #8
   22ef6:	1838      	adds	r0, r7, r0
   22ef8:	18c0      	adds	r0, r0, r3
   22efa:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   22efc:	2202      	movs	r2, #2
   22efe:	4978      	ldr	r1, [pc, #480]	; (230e0 <_http_client_request+0x2fc>)
   22f00:	232c      	movs	r3, #44	; 0x2c
   22f02:	2008      	movs	r0, #8
   22f04:	1838      	adds	r0, r7, r0
   22f06:	18c0      	adds	r0, r0, r3
   22f08:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   22f0a:	2218      	movs	r2, #24
   22f0c:	4976      	ldr	r1, [pc, #472]	; (230e8 <_http_client_request+0x304>)
   22f0e:	232c      	movs	r3, #44	; 0x2c
   22f10:	2008      	movs	r0, #8
   22f12:	1838      	adds	r0, r7, r0
   22f14:	18c0      	adds	r0, r0, r3
   22f16:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   22f18:	2213      	movs	r2, #19
   22f1a:	4974      	ldr	r1, [pc, #464]	; (230ec <_http_client_request+0x308>)
   22f1c:	232c      	movs	r3, #44	; 0x2c
   22f1e:	2008      	movs	r0, #8
   22f20:	1838      	adds	r0, r7, r0
   22f22:	18c0      	adds	r0, r0, r3
   22f24:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   22f26:	2217      	movs	r2, #23
   22f28:	4971      	ldr	r1, [pc, #452]	; (230f0 <_http_client_request+0x30c>)
   22f2a:	232c      	movs	r3, #44	; 0x2c
   22f2c:	2008      	movs	r0, #8
   22f2e:	1838      	adds	r0, r7, r0
   22f30:	18c0      	adds	r0, r0, r3
   22f32:	47a8      	blx	r5

		if (entity->read != NULL) {
   22f34:	0023      	movs	r3, r4
   22f36:	33b0      	adds	r3, #176	; 0xb0
   22f38:	68db      	ldr	r3, [r3, #12]
   22f3a:	2b00      	cmp	r3, #0
   22f3c:	d07b      	beq.n	23036 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   22f3e:	23b0      	movs	r3, #176	; 0xb0
   22f40:	5ce3      	ldrb	r3, [r4, r3]
   22f42:	2b00      	cmp	r3, #0
   22f44:	d16b      	bne.n	2301e <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   22f46:	0023      	movs	r3, r4
   22f48:	33b0      	adds	r3, #176	; 0xb0
   22f4a:	689b      	ldr	r3, [r3, #8]
   22f4c:	2b00      	cmp	r3, #0
   22f4e:	d072      	beq.n	23036 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   22f50:	0022      	movs	r2, r4
   22f52:	32b0      	adds	r2, #176	; 0xb0
   22f54:	6950      	ldr	r0, [r2, #20]
   22f56:	4798      	blx	r3
   22f58:	23cc      	movs	r3, #204	; 0xcc
   22f5a:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   22f5c:	2800      	cmp	r0, #0
   22f5e:	da00      	bge.n	22f62 <_http_client_request+0x17e>
   22f60:	e0ac      	b.n	230bc <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   22f62:	0002      	movs	r2, r0
   22f64:	4963      	ldr	r1, [pc, #396]	; (230f4 <_http_client_request+0x310>)
   22f66:	2320      	movs	r3, #32
   22f68:	2008      	movs	r0, #8
   22f6a:	1838      	adds	r0, r7, r0
   22f6c:	18c0      	adds	r0, r0, r3
   22f6e:	4b62      	ldr	r3, [pc, #392]	; (230f8 <_http_client_request+0x314>)
   22f70:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   22f72:	2210      	movs	r2, #16
   22f74:	4961      	ldr	r1, [pc, #388]	; (230fc <_http_client_request+0x318>)
   22f76:	232c      	movs	r3, #44	; 0x2c
   22f78:	2008      	movs	r0, #8
   22f7a:	1838      	adds	r0, r7, r0
   22f7c:	18c0      	adds	r0, r0, r3
   22f7e:	4d55      	ldr	r5, [pc, #340]	; (230d4 <_http_client_request+0x2f0>)
   22f80:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   22f82:	2320      	movs	r3, #32
   22f84:	2208      	movs	r2, #8
   22f86:	18ba      	adds	r2, r7, r2
   22f88:	18d0      	adds	r0, r2, r3
   22f8a:	4b51      	ldr	r3, [pc, #324]	; (230d0 <_http_client_request+0x2ec>)
   22f8c:	4798      	blx	r3
   22f8e:	0002      	movs	r2, r0
   22f90:	2320      	movs	r3, #32
   22f92:	2108      	movs	r1, #8
   22f94:	1879      	adds	r1, r7, r1
   22f96:	18c9      	adds	r1, r1, r3
   22f98:	330c      	adds	r3, #12
   22f9a:	2008      	movs	r0, #8
   22f9c:	1838      	adds	r0, r7, r0
   22f9e:	18c0      	adds	r0, r0, r3
   22fa0:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   22fa2:	2202      	movs	r2, #2
   22fa4:	494e      	ldr	r1, [pc, #312]	; (230e0 <_http_client_request+0x2fc>)
   22fa6:	232c      	movs	r3, #44	; 0x2c
   22fa8:	2008      	movs	r0, #8
   22faa:	1838      	adds	r0, r7, r0
   22fac:	18c0      	adds	r0, r0, r3
   22fae:	47a8      	blx	r5
   22fb0:	e041      	b.n	23036 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   22fb2:	2204      	movs	r2, #4
   22fb4:	4952      	ldr	r1, [pc, #328]	; (23100 <_http_client_request+0x31c>)
   22fb6:	332b      	adds	r3, #43	; 0x2b
   22fb8:	2008      	movs	r0, #8
   22fba:	1838      	adds	r0, r7, r0
   22fbc:	18c0      	adds	r0, r0, r3
   22fbe:	4b45      	ldr	r3, [pc, #276]	; (230d4 <_http_client_request+0x2f0>)
   22fc0:	4798      	blx	r3
   22fc2:	e75b      	b.n	22e7c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   22fc4:	2205      	movs	r2, #5
   22fc6:	494f      	ldr	r1, [pc, #316]	; (23104 <_http_client_request+0x320>)
   22fc8:	332a      	adds	r3, #42	; 0x2a
   22fca:	2008      	movs	r0, #8
   22fcc:	1838      	adds	r0, r7, r0
   22fce:	18c0      	adds	r0, r0, r3
   22fd0:	4b40      	ldr	r3, [pc, #256]	; (230d4 <_http_client_request+0x2f0>)
   22fd2:	4798      	blx	r3
   22fd4:	e752      	b.n	22e7c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   22fd6:	2207      	movs	r2, #7
   22fd8:	494b      	ldr	r1, [pc, #300]	; (23108 <_http_client_request+0x324>)
   22fda:	3329      	adds	r3, #41	; 0x29
   22fdc:	2008      	movs	r0, #8
   22fde:	1838      	adds	r0, r7, r0
   22fe0:	18c0      	adds	r0, r0, r3
   22fe2:	4b3c      	ldr	r3, [pc, #240]	; (230d4 <_http_client_request+0x2f0>)
   22fe4:	4798      	blx	r3
   22fe6:	e749      	b.n	22e7c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   22fe8:	2204      	movs	r2, #4
   22fea:	4948      	ldr	r1, [pc, #288]	; (2310c <_http_client_request+0x328>)
   22fec:	3328      	adds	r3, #40	; 0x28
   22fee:	2008      	movs	r0, #8
   22ff0:	1838      	adds	r0, r7, r0
   22ff2:	18c0      	adds	r0, r0, r3
   22ff4:	4b37      	ldr	r3, [pc, #220]	; (230d4 <_http_client_request+0x2f0>)
   22ff6:	4798      	blx	r3
   22ff8:	e740      	b.n	22e7c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   22ffa:	2208      	movs	r2, #8
   22ffc:	4944      	ldr	r1, [pc, #272]	; (23110 <_http_client_request+0x32c>)
   22ffe:	3327      	adds	r3, #39	; 0x27
   23000:	2008      	movs	r0, #8
   23002:	1838      	adds	r0, r7, r0
   23004:	18c0      	adds	r0, r0, r3
   23006:	4b33      	ldr	r3, [pc, #204]	; (230d4 <_http_client_request+0x2f0>)
   23008:	4798      	blx	r3
   2300a:	e737      	b.n	22e7c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   2300c:	2205      	movs	r2, #5
   2300e:	4941      	ldr	r1, [pc, #260]	; (23114 <_http_client_request+0x330>)
   23010:	3326      	adds	r3, #38	; 0x26
   23012:	2008      	movs	r0, #8
   23014:	1838      	adds	r0, r7, r0
   23016:	18c0      	adds	r0, r0, r3
   23018:	4b2e      	ldr	r3, [pc, #184]	; (230d4 <_http_client_request+0x2f0>)
   2301a:	4798      	blx	r3
   2301c:	e72e      	b.n	22e7c <_http_client_request+0x98>
				module->req.content_length = -1;
   2301e:	2201      	movs	r2, #1
   23020:	4252      	negs	r2, r2
   23022:	23cc      	movs	r3, #204	; 0xcc
   23024:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   23026:	321d      	adds	r2, #29
   23028:	493b      	ldr	r1, [pc, #236]	; (23118 <_http_client_request+0x334>)
   2302a:	3ba0      	subs	r3, #160	; 0xa0
   2302c:	2008      	movs	r0, #8
   2302e:	1838      	adds	r0, r7, r0
   23030:	18c0      	adds	r0, r0, r3
   23032:	4b28      	ldr	r3, [pc, #160]	; (230d4 <_http_client_request+0x2f0>)
   23034:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   23036:	23d4      	movs	r3, #212	; 0xd4
   23038:	58e5      	ldr	r5, [r4, r3]
   2303a:	2d00      	cmp	r5, #0
   2303c:	d00a      	beq.n	23054 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   2303e:	0028      	movs	r0, r5
   23040:	4b23      	ldr	r3, [pc, #140]	; (230d0 <_http_client_request+0x2ec>)
   23042:	4798      	blx	r3
   23044:	0002      	movs	r2, r0
   23046:	0029      	movs	r1, r5
   23048:	232c      	movs	r3, #44	; 0x2c
   2304a:	2008      	movs	r0, #8
   2304c:	1838      	adds	r0, r7, r0
   2304e:	18c0      	adds	r0, r0, r3
   23050:	4b20      	ldr	r3, [pc, #128]	; (230d4 <_http_client_request+0x2f0>)
   23052:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   23054:	2202      	movs	r2, #2
   23056:	4922      	ldr	r1, [pc, #136]	; (230e0 <_http_client_request+0x2fc>)
   23058:	232c      	movs	r3, #44	; 0x2c
   2305a:	2008      	movs	r0, #8
   2305c:	1838      	adds	r0, r7, r0
   2305e:	18c0      	adds	r0, r0, r3
   23060:	4b1c      	ldr	r3, [pc, #112]	; (230d4 <_http_client_request+0x2f0>)
   23062:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   23064:	232c      	movs	r3, #44	; 0x2c
   23066:	2208      	movs	r2, #8
   23068:	18ba      	adds	r2, r7, r2
   2306a:	18d0      	adds	r0, r2, r3
   2306c:	4b2b      	ldr	r3, [pc, #172]	; (2311c <_http_client_request+0x338>)
   2306e:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   23070:	2304      	movs	r3, #4
   23072:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   23074:	23cc      	movs	r3, #204	; 0xcc
   23076:	58e2      	ldr	r2, [r4, r3]
   23078:	2a00      	cmp	r2, #0
   2307a:	db51      	blt.n	23120 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   2307c:	dc00      	bgt.n	23080 <_http_client_request+0x29c>
   2307e:	e0f0      	b.n	23262 <_http_client_request+0x47e>
   23080:	0023      	movs	r3, r4
   23082:	33b0      	adds	r3, #176	; 0xb0
   23084:	68dd      	ldr	r5, [r3, #12]
   23086:	2d00      	cmp	r5, #0
   23088:	d100      	bne.n	2308c <_http_client_request+0x2a8>
   2308a:	e0ea      	b.n	23262 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   2308c:	23d0      	movs	r3, #208	; 0xd0
   2308e:	58e3      	ldr	r3, [r4, r3]
   23090:	429a      	cmp	r2, r3
   23092:	dd00      	ble.n	23096 <_http_client_request+0x2b2>
   23094:	e0ba      	b.n	2320c <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   23096:	23c0      	movs	r3, #192	; 0xc0
   23098:	58e3      	ldr	r3, [r4, r3]
   2309a:	2b00      	cmp	r3, #0
   2309c:	d002      	beq.n	230a4 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   2309e:	22c4      	movs	r2, #196	; 0xc4
   230a0:	58a0      	ldr	r0, [r4, r2]
   230a2:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   230a4:	2302      	movs	r3, #2
   230a6:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   230a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   230aa:	2b00      	cmp	r3, #0
   230ac:	d100      	bne.n	230b0 <_http_client_request+0x2cc>
   230ae:	e6c0      	b.n	22e32 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   230b0:	220c      	movs	r2, #12
   230b2:	18ba      	adds	r2, r7, r2
   230b4:	2101      	movs	r1, #1
   230b6:	0020      	movs	r0, r4
   230b8:	4798      	blx	r3
   230ba:	e6ba      	b.n	22e32 <_http_client_request+0x4e>
					module->req.content_length = 0;
   230bc:	2200      	movs	r2, #0
   230be:	50e2      	str	r2, [r4, r3]
   230c0:	e7b9      	b.n	23036 <_http_client_request+0x252>
   230c2:	46c0      	nop			; (mov r8, r8)
   230c4:	0002a96c 	.word	0x0002a96c
   230c8:	00022b75 	.word	0x00022b75
   230cc:	00023b41 	.word	0x00023b41
   230d0:	00026603 	.word	0x00026603
   230d4:	00023b95 	.word	0x00023b95
   230d8:	0002a9e0 	.word	0x0002a9e0
   230dc:	0002a9ec 	.word	0x0002a9ec
   230e0:	0002ad9c 	.word	0x0002ad9c
   230e4:	0002a9fc 	.word	0x0002a9fc
   230e8:	0002aa04 	.word	0x0002aa04
   230ec:	0002aa20 	.word	0x0002aa20
   230f0:	0002aa34 	.word	0x0002aa34
   230f4:	0002aa6c 	.word	0x0002aa6c
   230f8:	00026509 	.word	0x00026509
   230fc:	0002aa70 	.word	0x0002aa70
   23100:	0002a9ac 	.word	0x0002a9ac
   23104:	0002a9b4 	.word	0x0002a9b4
   23108:	0002a9bc 	.word	0x0002a9bc
   2310c:	0002a9c4 	.word	0x0002a9c4
   23110:	0002a9cc 	.word	0x0002a9cc
   23114:	0002a9d8 	.word	0x0002a9d8
   23118:	0002aa4c 	.word	0x0002aa4c
   2311c:	00023b51 	.word	0x00023b51
		if (module->req.content_length < 0 && entity->read) {
   23120:	0023      	movs	r3, r4
   23122:	33b0      	adds	r3, #176	; 0xb0
   23124:	68dd      	ldr	r5, [r3, #12]
   23126:	2d00      	cmp	r5, #0
   23128:	d100      	bne.n	2312c <_http_client_request+0x348>
   2312a:	e09a      	b.n	23262 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   2312c:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   2312e:	58e3      	ldr	r3, [r4, r3]
   23130:	6e62      	ldr	r2, [r4, #100]	; 0x64
   23132:	3a07      	subs	r2, #7
   23134:	1d71      	adds	r1, r6, #5
   23136:	0020      	movs	r0, r4
   23138:	30b0      	adds	r0, #176	; 0xb0
   2313a:	6940      	ldr	r0, [r0, #20]
   2313c:	47a8      	blx	r5
   2313e:	0005      	movs	r5, r0
   23140:	43c3      	mvns	r3, r0
   23142:	17db      	asrs	r3, r3, #31
   23144:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   23146:	220a      	movs	r2, #10
   23148:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   2314a:	210d      	movs	r1, #13
   2314c:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   2314e:	1973      	adds	r3, r6, r5
   23150:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   23152:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   23154:	230f      	movs	r3, #15
   23156:	402b      	ands	r3, r5
   23158:	3206      	adds	r2, #6
   2315a:	3905      	subs	r1, #5
   2315c:	468c      	mov	ip, r1
   2315e:	44bc      	add	ip, r7
   23160:	4462      	add	r2, ip
   23162:	5cd3      	ldrb	r3, [r2, r3]
   23164:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   23166:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   23168:	2d0f      	cmp	r5, #15
   2316a:	dd0d      	ble.n	23188 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   2316c:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   2316e:	17eb      	asrs	r3, r5, #31
   23170:	220f      	movs	r2, #15
   23172:	4013      	ands	r3, r2
   23174:	195b      	adds	r3, r3, r5
   23176:	111b      	asrs	r3, r3, #4
   23178:	4013      	ands	r3, r2
   2317a:	3201      	adds	r2, #1
   2317c:	2008      	movs	r0, #8
   2317e:	4684      	mov	ip, r0
   23180:	44bc      	add	ip, r7
   23182:	4462      	add	r2, ip
   23184:	5cd3      	ldrb	r3, [r2, r3]
   23186:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   23188:	2dff      	cmp	r5, #255	; 0xff
   2318a:	dd0d      	ble.n	231a8 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   2318c:	17ea      	asrs	r2, r5, #31
   2318e:	23ff      	movs	r3, #255	; 0xff
   23190:	4013      	ands	r3, r2
   23192:	195b      	adds	r3, r3, r5
   23194:	051b      	lsls	r3, r3, #20
   23196:	0f1b      	lsrs	r3, r3, #28
   23198:	2210      	movs	r2, #16
   2319a:	2108      	movs	r1, #8
   2319c:	468c      	mov	ip, r1
   2319e:	44bc      	add	ip, r7
   231a0:	4462      	add	r2, ip
   231a2:	5cd3      	ldrb	r3, [r2, r3]
   231a4:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   231a6:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   231a8:	1cca      	adds	r2, r1, #3
   231aa:	1b92      	subs	r2, r2, r6
   231ac:	1d2b      	adds	r3, r5, #4
   231ae:	18d2      	adds	r2, r2, r3
   231b0:	b292      	uxth	r2, r2
   231b2:	2000      	movs	r0, #0
   231b4:	5620      	ldrsb	r0, [r4, r0]
   231b6:	2300      	movs	r3, #0
   231b8:	4e30      	ldr	r6, [pc, #192]	; (2327c <_http_client_request+0x498>)
   231ba:	47b0      	blx	r6
   231bc:	2800      	cmp	r0, #0
   231be:	db19      	blt.n	231f4 <_http_client_request+0x410>
			module->req.sent_length += size;
   231c0:	22d0      	movs	r2, #208	; 0xd0
   231c2:	58a3      	ldr	r3, [r4, r2]
   231c4:	195b      	adds	r3, r3, r5
   231c6:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   231c8:	2d00      	cmp	r5, #0
   231ca:	d000      	beq.n	231ce <_http_client_request+0x3ea>
   231cc:	e631      	b.n	22e32 <_http_client_request+0x4e>
				if (module->req.entity.close) {
   231ce:	23c0      	movs	r3, #192	; 0xc0
   231d0:	58e3      	ldr	r3, [r4, r3]
   231d2:	2b00      	cmp	r3, #0
   231d4:	d002      	beq.n	231dc <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   231d6:	3a0c      	subs	r2, #12
   231d8:	58a0      	ldr	r0, [r4, r2]
   231da:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   231dc:	2302      	movs	r3, #2
   231de:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   231e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   231e2:	2b00      	cmp	r3, #0
   231e4:	d100      	bne.n	231e8 <_http_client_request+0x404>
   231e6:	e624      	b.n	22e32 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   231e8:	220c      	movs	r2, #12
   231ea:	18ba      	adds	r2, r7, r2
   231ec:	2101      	movs	r1, #1
   231ee:	0020      	movs	r0, r4
   231f0:	4798      	blx	r3
   231f2:	e61e      	b.n	22e32 <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   231f4:	2105      	movs	r1, #5
   231f6:	4249      	negs	r1, r1
   231f8:	0020      	movs	r0, r4
   231fa:	4b21      	ldr	r3, [pc, #132]	; (23280 <_http_client_request+0x49c>)
   231fc:	4798      	blx	r3
   231fe:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   23200:	46bd      	mov	sp, r7
   23202:	b013      	add	sp, #76	; 0x4c
   23204:	bc0c      	pop	{r2, r3}
   23206:	4692      	mov	sl, r2
   23208:	469b      	mov	fp, r3
   2320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   2320c:	0022      	movs	r2, r4
   2320e:	32b0      	adds	r2, #176	; 0xb0
   23210:	6950      	ldr	r0, [r2, #20]
   23212:	6e62      	ldr	r2, [r4, #100]	; 0x64
   23214:	0031      	movs	r1, r6
   23216:	47a8      	blx	r5
			if (size < 0) {
   23218:	2800      	cmp	r0, #0
   2321a:	db16      	blt.n	2324a <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   2321c:	23cc      	movs	r3, #204	; 0xcc
   2321e:	58e5      	ldr	r5, [r4, r3]
   23220:	3304      	adds	r3, #4
   23222:	58e3      	ldr	r3, [r4, r3]
   23224:	1aed      	subs	r5, r5, r3
   23226:	4285      	cmp	r5, r0
   23228:	dd00      	ble.n	2322c <_http_client_request+0x448>
   2322a:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   2322c:	b2aa      	uxth	r2, r5
   2322e:	2000      	movs	r0, #0
   23230:	5620      	ldrsb	r0, [r4, r0]
   23232:	2300      	movs	r3, #0
   23234:	0031      	movs	r1, r6
   23236:	4e11      	ldr	r6, [pc, #68]	; (2327c <_http_client_request+0x498>)
   23238:	47b0      	blx	r6
   2323a:	2800      	cmp	r0, #0
   2323c:	db0b      	blt.n	23256 <_http_client_request+0x472>
				module->req.sent_length += size;
   2323e:	23d0      	movs	r3, #208	; 0xd0
   23240:	58e2      	ldr	r2, [r4, r3]
   23242:	4694      	mov	ip, r2
   23244:	4465      	add	r5, ip
   23246:	50e5      	str	r5, [r4, r3]
   23248:	e5f3      	b.n	22e32 <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   2324a:	2105      	movs	r1, #5
   2324c:	4249      	negs	r1, r1
   2324e:	0020      	movs	r0, r4
   23250:	4b0b      	ldr	r3, [pc, #44]	; (23280 <_http_client_request+0x49c>)
   23252:	4798      	blx	r3
   23254:	e5ed      	b.n	22e32 <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   23256:	2105      	movs	r1, #5
   23258:	4249      	negs	r1, r1
   2325a:	0020      	movs	r0, r4
   2325c:	4b08      	ldr	r3, [pc, #32]	; (23280 <_http_client_request+0x49c>)
   2325e:	4798      	blx	r3
					return;
   23260:	e7cd      	b.n	231fe <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   23262:	2302      	movs	r3, #2
   23264:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   23266:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23268:	2b00      	cmp	r3, #0
   2326a:	d100      	bne.n	2326e <_http_client_request+0x48a>
   2326c:	e5e1      	b.n	22e32 <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   2326e:	220c      	movs	r2, #12
   23270:	18ba      	adds	r2, r7, r2
   23272:	2101      	movs	r1, #1
   23274:	0020      	movs	r0, r4
   23276:	4798      	blx	r3
   23278:	e5db      	b.n	22e32 <_http_client_request+0x4e>
   2327a:	46c0      	nop			; (mov r8, r8)
   2327c:	0001d109 	.word	0x0001d109
   23280:	00022ccd 	.word	0x00022ccd

00023284 <http_client_send_request>:
{
   23284:	b5f0      	push	{r4, r5, r6, r7, lr}
   23286:	46d6      	mov	lr, sl
   23288:	b500      	push	{lr}
   2328a:	b088      	sub	sp, #32
   2328c:	0004      	movs	r4, r0
   2328e:	000f      	movs	r7, r1
   23290:	4692      	mov	sl, r2
   23292:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   23294:	2800      	cmp	r0, #0
   23296:	d100      	bne.n	2329a <http_client_send_request+0x16>
   23298:	e0d3      	b.n	23442 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   2329a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   2329c:	2b02      	cmp	r3, #2
   2329e:	d900      	bls.n	232a2 <http_client_send_request+0x1e>
   232a0:	e0d3      	b.n	2344a <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   232a2:	2207      	movs	r2, #7
   232a4:	4981      	ldr	r1, [pc, #516]	; (234ac <http_client_send_request+0x228>)
   232a6:	0038      	movs	r0, r7
   232a8:	4b81      	ldr	r3, [pc, #516]	; (234b0 <http_client_send_request+0x22c>)
   232aa:	4798      	blx	r3
		i = 7;
   232ac:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   232ae:	2800      	cmp	r0, #0
   232b0:	d007      	beq.n	232c2 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   232b2:	2208      	movs	r2, #8
   232b4:	497f      	ldr	r1, [pc, #508]	; (234b4 <http_client_send_request+0x230>)
   232b6:	0038      	movs	r0, r7
   232b8:	4b7d      	ldr	r3, [pc, #500]	; (234b0 <http_client_send_request+0x22c>)
   232ba:	4798      	blx	r3
		i = 8;
   232bc:	4246      	negs	r6, r0
   232be:	4146      	adcs	r6, r0
   232c0:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   232c2:	1c63      	adds	r3, r4, #1
   232c4:	19bd      	adds	r5, r7, r6
   232c6:	9302      	str	r3, [sp, #8]
   232c8:	0018      	movs	r0, r3
   232ca:	4b7b      	ldr	r3, [pc, #492]	; (234b8 <http_client_send_request+0x234>)
   232cc:	4798      	blx	r3
   232ce:	0002      	movs	r2, r0
   232d0:	0029      	movs	r1, r5
   232d2:	9802      	ldr	r0, [sp, #8]
   232d4:	4b76      	ldr	r3, [pc, #472]	; (234b0 <http_client_send_request+0x22c>)
   232d6:	4798      	blx	r3
   232d8:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   232da:	782b      	ldrb	r3, [r5, #0]
   232dc:	2b00      	cmp	r3, #0
   232de:	d052      	beq.n	23386 <http_client_send_request+0x102>
   232e0:	2b2f      	cmp	r3, #47	; 0x2f
   232e2:	d052      	beq.n	2338a <http_client_send_request+0x106>
   232e4:	1c71      	adds	r1, r6, #1
   232e6:	1879      	adds	r1, r7, r1
   232e8:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   232ea:	3201      	adds	r2, #1
   232ec:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   232ee:	000d      	movs	r5, r1
   232f0:	780b      	ldrb	r3, [r1, #0]
   232f2:	2b00      	cmp	r3, #0
   232f4:	d002      	beq.n	232fc <http_client_send_request+0x78>
   232f6:	3101      	adds	r1, #1
   232f8:	2b2f      	cmp	r3, #47	; 0x2f
   232fa:	d1f6      	bne.n	232ea <http_client_send_request+0x66>
	module->host[j] = '\0';
   232fc:	18a2      	adds	r2, r4, r2
   232fe:	2300      	movs	r3, #0
   23300:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   23302:	7863      	ldrb	r3, [r4, #1]
   23304:	2b00      	cmp	r3, #0
   23306:	d100      	bne.n	2330a <http_client_send_request+0x86>
   23308:	e0a3      	b.n	23452 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   2330a:	0028      	movs	r0, r5
   2330c:	4b6a      	ldr	r3, [pc, #424]	; (234b8 <http_client_send_request+0x234>)
   2330e:	4798      	blx	r3
   23310:	283f      	cmp	r0, #63	; 0x3f
   23312:	d900      	bls.n	23316 <http_client_send_request+0x92>
   23314:	e0a1      	b.n	2345a <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   23316:	23d4      	movs	r3, #212	; 0xd4
   23318:	58e0      	ldr	r0, [r4, r3]
   2331a:	2800      	cmp	r0, #0
   2331c:	d001      	beq.n	23322 <http_client_send_request+0x9e>
		free(module->req.ext_header);
   2331e:	4b67      	ldr	r3, [pc, #412]	; (234bc <http_client_send_request+0x238>)
   23320:	4798      	blx	r3
	if (ext_header != NULL) {
   23322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23324:	2b00      	cmp	r3, #0
   23326:	d032      	beq.n	2338e <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   23328:	0018      	movs	r0, r3
   2332a:	4b65      	ldr	r3, [pc, #404]	; (234c0 <http_client_send_request+0x23c>)
   2332c:	4798      	blx	r3
   2332e:	23d4      	movs	r3, #212	; 0xd4
   23330:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   23332:	2800      	cmp	r0, #0
   23334:	d100      	bne.n	23338 <http_client_send_request+0xb4>
   23336:	e094      	b.n	23462 <http_client_send_request+0x1de>
	module->sending = 0;
   23338:	2241      	movs	r2, #65	; 0x41
   2333a:	5ca3      	ldrb	r3, [r4, r2]
   2333c:	2101      	movs	r1, #1
   2333e:	438b      	bics	r3, r1
   23340:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   23342:	2300      	movs	r3, #0
   23344:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   23346:	782b      	ldrb	r3, [r5, #0]
   23348:	2b2f      	cmp	r3, #47	; 0x2f
   2334a:	d024      	beq.n	23396 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   2334c:	222f      	movs	r2, #47	; 0x2f
   2334e:	2370      	movs	r3, #112	; 0x70
   23350:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   23352:	782b      	ldrb	r3, [r5, #0]
   23354:	2b00      	cmp	r3, #0
   23356:	d124      	bne.n	233a2 <http_client_send_request+0x11e>
	if (entity != NULL) {
   23358:	9b03      	ldr	r3, [sp, #12]
   2335a:	2b00      	cmp	r3, #0
   2335c:	d027      	beq.n	233ae <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   2335e:	0020      	movs	r0, r4
   23360:	30b0      	adds	r0, #176	; 0xb0
   23362:	2218      	movs	r2, #24
   23364:	0019      	movs	r1, r3
   23366:	4b57      	ldr	r3, [pc, #348]	; (234c4 <http_client_send_request+0x240>)
   23368:	4798      	blx	r3
	module->req.method = method;
   2336a:	23c8      	movs	r3, #200	; 0xc8
   2336c:	4652      	mov	r2, sl
   2336e:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   23370:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   23372:	2b01      	cmp	r3, #1
   23374:	d022      	beq.n	233bc <http_client_send_request+0x138>
   23376:	2b00      	cmp	r3, #0
   23378:	d027      	beq.n	233ca <http_client_send_request+0x146>
   2337a:	2b02      	cmp	r3, #2
   2337c:	d03a      	beq.n	233f4 <http_client_send_request+0x170>
		return -EAGAIN;
   2337e:	230b      	movs	r3, #11
   23380:	425b      	negs	r3, r3
   23382:	9301      	str	r3, [sp, #4]
   23384:	e08d      	b.n	234a2 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   23386:	2200      	movs	r2, #0
   23388:	e7b8      	b.n	232fc <http_client_send_request+0x78>
   2338a:	2200      	movs	r2, #0
   2338c:	e7b6      	b.n	232fc <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   2338e:	2200      	movs	r2, #0
   23390:	23d4      	movs	r3, #212	; 0xd4
   23392:	50e2      	str	r2, [r4, r3]
   23394:	e7d0      	b.n	23338 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   23396:	0020      	movs	r0, r4
   23398:	3070      	adds	r0, #112	; 0x70
   2339a:	0029      	movs	r1, r5
   2339c:	4b4a      	ldr	r3, [pc, #296]	; (234c8 <http_client_send_request+0x244>)
   2339e:	4798      	blx	r3
   233a0:	e7da      	b.n	23358 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   233a2:	0029      	movs	r1, r5
   233a4:	0020      	movs	r0, r4
   233a6:	3071      	adds	r0, #113	; 0x71
   233a8:	4b47      	ldr	r3, [pc, #284]	; (234c8 <http_client_send_request+0x244>)
   233aa:	4798      	blx	r3
   233ac:	e7d4      	b.n	23358 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   233ae:	0020      	movs	r0, r4
   233b0:	30b0      	adds	r0, #176	; 0xb0
   233b2:	2218      	movs	r2, #24
   233b4:	2100      	movs	r1, #0
   233b6:	4b45      	ldr	r3, [pc, #276]	; (234cc <http_client_send_request+0x248>)
   233b8:	4798      	blx	r3
   233ba:	e7d6      	b.n	2336a <http_client_send_request+0xe6>
		if (!reconnect) {
   233bc:	9b01      	ldr	r3, [sp, #4]
   233be:	2b00      	cmp	r3, #0
   233c0:	d06f      	beq.n	234a2 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   233c2:	2100      	movs	r1, #0
   233c4:	0020      	movs	r0, r4
   233c6:	4b42      	ldr	r3, [pc, #264]	; (234d0 <http_client_send_request+0x24c>)
   233c8:	4798      	blx	r3
		if (module->config.tls) {
   233ca:	2352      	movs	r3, #82	; 0x52
   233cc:	5ce2      	ldrb	r2, [r4, r3]
   233ce:	1e53      	subs	r3, r2, #1
   233d0:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   233d2:	b2d2      	uxtb	r2, r2
   233d4:	2101      	movs	r1, #1
   233d6:	2002      	movs	r0, #2
   233d8:	4b3e      	ldr	r3, [pc, #248]	; (234d4 <http_client_send_request+0x250>)
   233da:	4798      	blx	r3
   233dc:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   233de:	2800      	cmp	r0, #0
   233e0:	db43      	blt.n	2346a <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   233e2:	0080      	lsls	r0, r0, #2
   233e4:	4b3c      	ldr	r3, [pc, #240]	; (234d8 <http_client_send_request+0x254>)
   233e6:	50c4      	str	r4, [r0, r3]
   233e8:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   233ea:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   233ec:	2620      	movs	r6, #32
			isv6 = 1;
   233ee:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   233f0:	2730      	movs	r7, #48	; 0x30
   233f2:	e00c      	b.n	2340e <http_client_send_request+0x18a>
		if (!reconnect) {
   233f4:	9b01      	ldr	r3, [sp, #4]
   233f6:	2b00      	cmp	r3, #0
   233f8:	d1e3      	bne.n	233c2 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   233fa:	3303      	adds	r3, #3
   233fc:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   233fe:	0020      	movs	r0, r4
   23400:	4b36      	ldr	r3, [pc, #216]	; (234dc <http_client_send_request+0x258>)
   23402:	4798      	blx	r3
			break;
   23404:	e04d      	b.n	234a2 <http_client_send_request+0x21e>
			if (isv6) {
   23406:	2900      	cmp	r1, #0
   23408:	d001      	beq.n	2340e <http_client_send_request+0x18a>
   2340a:	e012      	b.n	23432 <http_client_send_request+0x1ae>
			isv6 = 1;
   2340c:	0001      	movs	r1, r0
	while (*host != '\0') {
   2340e:	782a      	ldrb	r2, [r5, #0]
   23410:	2a00      	cmp	r2, #0
   23412:	d02e      	beq.n	23472 <http_client_send_request+0x1ee>
		ch = *host++;
   23414:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   23416:	0013      	movs	r3, r2
   23418:	43b3      	bics	r3, r6
   2341a:	3b41      	subs	r3, #65	; 0x41
   2341c:	2b05      	cmp	r3, #5
   2341e:	d9f5      	bls.n	2340c <http_client_send_request+0x188>
   23420:	2a3a      	cmp	r2, #58	; 0x3a
   23422:	d00a      	beq.n	2343a <http_client_send_request+0x1b6>
   23424:	2a2f      	cmp	r2, #47	; 0x2f
   23426:	d00a      	beq.n	2343e <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   23428:	2a2e      	cmp	r2, #46	; 0x2e
   2342a:	d0ec      	beq.n	23406 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   2342c:	403a      	ands	r2, r7
   2342e:	2a30      	cmp	r2, #48	; 0x30
   23430:	d0ed      	beq.n	2340e <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   23432:	9802      	ldr	r0, [sp, #8]
   23434:	4b2a      	ldr	r3, [pc, #168]	; (234e0 <http_client_send_request+0x25c>)
   23436:	4798      	blx	r3
   23438:	e02f      	b.n	2349a <http_client_send_request+0x216>
			isv6 = 1;
   2343a:	0001      	movs	r1, r0
   2343c:	e7e7      	b.n	2340e <http_client_send_request+0x18a>
   2343e:	0001      	movs	r1, r0
   23440:	e7e5      	b.n	2340e <http_client_send_request+0x18a>
		return -EINVAL;
   23442:	2316      	movs	r3, #22
   23444:	425b      	negs	r3, r3
   23446:	9301      	str	r3, [sp, #4]
   23448:	e02b      	b.n	234a2 <http_client_send_request+0x21e>
		return -EBUSY;
   2344a:	2310      	movs	r3, #16
   2344c:	425b      	negs	r3, r3
   2344e:	9301      	str	r3, [sp, #4]
   23450:	e027      	b.n	234a2 <http_client_send_request+0x21e>
		return -EINVAL;
   23452:	2316      	movs	r3, #22
   23454:	425b      	negs	r3, r3
   23456:	9301      	str	r3, [sp, #4]
   23458:	e023      	b.n	234a2 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   2345a:	235b      	movs	r3, #91	; 0x5b
   2345c:	425b      	negs	r3, r3
   2345e:	9301      	str	r3, [sp, #4]
   23460:	e01f      	b.n	234a2 <http_client_send_request+0x21e>
			return -ENOMEM;
   23462:	230c      	movs	r3, #12
   23464:	425b      	negs	r3, r3
   23466:	9301      	str	r3, [sp, #4]
   23468:	e01b      	b.n	234a2 <http_client_send_request+0x21e>
			return -ENOSPC;
   2346a:	231c      	movs	r3, #28
   2346c:	425b      	negs	r3, r3
   2346e:	9301      	str	r3, [sp, #4]
   23470:	e017      	b.n	234a2 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   23472:	2302      	movs	r3, #2
   23474:	aa04      	add	r2, sp, #16
   23476:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   23478:	334e      	adds	r3, #78	; 0x4e
   2347a:	5ae3      	ldrh	r3, [r4, r3]
   2347c:	021a      	lsls	r2, r3, #8
   2347e:	0a1b      	lsrs	r3, r3, #8
   23480:	4313      	orrs	r3, r2
   23482:	aa04      	add	r2, sp, #16
   23484:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   23486:	9802      	ldr	r0, [sp, #8]
   23488:	4b16      	ldr	r3, [pc, #88]	; (234e4 <http_client_send_request+0x260>)
   2348a:	4798      	blx	r3
   2348c:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2348e:	2000      	movs	r0, #0
   23490:	5620      	ldrsb	r0, [r4, r0]
   23492:	2210      	movs	r2, #16
   23494:	a904      	add	r1, sp, #16
   23496:	4b14      	ldr	r3, [pc, #80]	; (234e8 <http_client_send_request+0x264>)
   23498:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   2349a:	2301      	movs	r3, #1
   2349c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   2349e:	2300      	movs	r3, #0
   234a0:	9301      	str	r3, [sp, #4]
}
   234a2:	9801      	ldr	r0, [sp, #4]
   234a4:	b008      	add	sp, #32
   234a6:	bc04      	pop	{r2}
   234a8:	4692      	mov	sl, r2
   234aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   234ac:	0002aa90 	.word	0x0002aa90
   234b0:	00026611 	.word	0x00026611
   234b4:	0002aa98 	.word	0x0002aa98
   234b8:	00026603 	.word	0x00026603
   234bc:	00026201 	.word	0x00026201
   234c0:	000265c9 	.word	0x000265c9
   234c4:	00026215 	.word	0x00026215
   234c8:	000265b7 	.word	0x000265b7
   234cc:	0002624b 	.word	0x0002624b
   234d0:	00022ccd 	.word	0x00022ccd
   234d4:	0001cef9 	.word	0x0001cef9
   234d8:	200041a8 	.word	0x200041a8
   234dc:	00022de5 	.word	0x00022de5
   234e0:	0001d339 	.word	0x0001d339
   234e4:	0001d2cd 	.word	0x0001d2cd
   234e8:	0001d079 	.word	0x0001d079

000234ec <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   234ec:	b510      	push	{r4, lr}
	if (module == NULL) {
   234ee:	2800      	cmp	r0, #0
   234f0:	d00d      	beq.n	2350e <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   234f2:	6c41      	ldr	r1, [r0, #68]	; 0x44
   234f4:	6e02      	ldr	r2, [r0, #96]	; 0x60
   234f6:	4291      	cmp	r1, r2
   234f8:	d20a      	bcs.n	23510 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   234fa:	1a52      	subs	r2, r2, r1
   234fc:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   234fe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   23500:	469c      	mov	ip, r3
   23502:	4461      	add	r1, ip
	recv(module->sock,
   23504:	7800      	ldrb	r0, [r0, #0]
   23506:	b240      	sxtb	r0, r0
   23508:	2300      	movs	r3, #0
   2350a:	4c04      	ldr	r4, [pc, #16]	; (2351c <_http_client_recv_packet+0x30>)
   2350c:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   2350e:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   23510:	218b      	movs	r1, #139	; 0x8b
   23512:	4249      	negs	r1, r1
   23514:	4b02      	ldr	r3, [pc, #8]	; (23520 <_http_client_recv_packet+0x34>)
   23516:	4798      	blx	r3
		return;
   23518:	e7f9      	b.n	2350e <_http_client_recv_packet+0x22>
   2351a:	46c0      	nop			; (mov r8, r8)
   2351c:	0001d1a1 	.word	0x0001d1a1
   23520:	00022ccd 	.word	0x00022ccd

00023524 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   23524:	b570      	push	{r4, r5, r6, lr}
   23526:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   23528:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   2352a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   2352c:	1a5c      	subs	r4, r3, r1
   2352e:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   23530:	2c00      	cmp	r4, #0
   23532:	dc02      	bgt.n	2353a <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   23534:	2300      	movs	r3, #0
   23536:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   23538:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   2353a:	0022      	movs	r2, r4
   2353c:	4b01      	ldr	r3, [pc, #4]	; (23544 <_http_client_move_buffer+0x20>)
   2353e:	4798      	blx	r3
		module->recved_size = remain;
   23540:	646c      	str	r4, [r5, #68]	; 0x44
   23542:	e7f9      	b.n	23538 <_http_client_move_buffer+0x14>
   23544:	00026227 	.word	0x00026227

00023548 <_http_client_handle_header>:
{
   23548:	b5f0      	push	{r4, r5, r6, r7, lr}
   2354a:	46ce      	mov	lr, r9
   2354c:	b500      	push	{lr}
   2354e:	b084      	sub	sp, #16
   23550:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   23552:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   23554:	4b62      	ldr	r3, [pc, #392]	; (236e0 <_http_client_handle_header+0x198>)
   23556:	4699      	mov	r9, r3
   23558:	e049      	b.n	235ee <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   2355a:	0021      	movs	r1, r4
   2355c:	0038      	movs	r0, r7
   2355e:	4b61      	ldr	r3, [pc, #388]	; (236e4 <_http_client_handle_header+0x19c>)
   23560:	4798      	blx	r3
			return 0;
   23562:	2600      	movs	r6, #0
}
   23564:	0030      	movs	r0, r6
   23566:	b004      	add	sp, #16
   23568:	bc04      	pop	{r2}
   2356a:	4691      	mov	r9, r2
   2356c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   2356e:	1ca1      	adds	r1, r4, #2
   23570:	0038      	movs	r0, r7
   23572:	4b5c      	ldr	r3, [pc, #368]	; (236e4 <_http_client_handle_header+0x19c>)
   23574:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   23576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23578:	2b00      	cmp	r3, #0
   2357a:	d00a      	beq.n	23592 <_http_client_handle_header+0x4a>
   2357c:	22e4      	movs	r2, #228	; 0xe4
   2357e:	5ab9      	ldrh	r1, [r7, r2]
   23580:	2900      	cmp	r1, #0
   23582:	d006      	beq.n	23592 <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   23584:	3a08      	subs	r2, #8
   23586:	58b8      	ldr	r0, [r7, r2]
   23588:	2800      	cmp	r0, #0
   2358a:	db07      	blt.n	2359c <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   2358c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2358e:	4290      	cmp	r0, r2
   23590:	dc10      	bgt.n	235b4 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   23592:	2201      	movs	r2, #1
   23594:	23d8      	movs	r3, #216	; 0xd8
   23596:	50fa      	str	r2, [r7, r3]
			return 1;
   23598:	2601      	movs	r6, #1
   2359a:	e7e3      	b.n	23564 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   2359c:	aa01      	add	r2, sp, #4
   2359e:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   235a0:	2101      	movs	r1, #1
   235a2:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   235a4:	2100      	movs	r1, #0
   235a6:	20e0      	movs	r0, #224	; 0xe0
   235a8:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   235aa:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   235ac:	3102      	adds	r1, #2
   235ae:	0038      	movs	r0, r7
   235b0:	4798      	blx	r3
   235b2:	e7ee      	b.n	23592 <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   235b4:	aa01      	add	r2, sp, #4
   235b6:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   235b8:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   235ba:	2100      	movs	r1, #0
   235bc:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   235be:	20e0      	movs	r0, #224	; 0xe0
   235c0:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   235c2:	3102      	adds	r1, #2
   235c4:	0038      	movs	r0, r7
   235c6:	4798      	blx	r3
   235c8:	e7e3      	b.n	23592 <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   235ca:	0020      	movs	r0, r4
   235cc:	3010      	adds	r0, #16
   235ce:	4b46      	ldr	r3, [pc, #280]	; (236e8 <_http_client_handle_header+0x1a0>)
   235d0:	4798      	blx	r3
   235d2:	23dc      	movs	r3, #220	; 0xdc
   235d4:	50f8      	str	r0, [r7, r3]
   235d6:	e009      	b.n	235ec <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   235d8:	3201      	adds	r2, #1
   235da:	4295      	cmp	r5, r2
   235dc:	d006      	beq.n	235ec <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   235de:	7813      	ldrb	r3, [r2, #0]
   235e0:	2b20      	cmp	r3, #32
   235e2:	d12b      	bne.n	2363c <_http_client_handle_header+0xf4>
   235e4:	e7f8      	b.n	235d8 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   235e6:	3a21      	subs	r2, #33	; 0x21
   235e8:	3389      	adds	r3, #137	; 0x89
   235ea:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   235ec:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   235ee:	493f      	ldr	r1, [pc, #252]	; (236ec <_http_client_handle_header+0x1a4>)
   235f0:	0020      	movs	r0, r4
   235f2:	47c8      	blx	r9
   235f4:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   235f6:	d0b0      	beq.n	2355a <_http_client_handle_header+0x12>
   235f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   235fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   235fc:	4694      	mov	ip, r2
   235fe:	4463      	add	r3, ip
   23600:	4298      	cmp	r0, r3
   23602:	d2aa      	bcs.n	2355a <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   23604:	2202      	movs	r2, #2
   23606:	4939      	ldr	r1, [pc, #228]	; (236ec <_http_client_handle_header+0x1a4>)
   23608:	0020      	movs	r0, r4
   2360a:	4b39      	ldr	r3, [pc, #228]	; (236f0 <_http_client_handle_header+0x1a8>)
   2360c:	4798      	blx	r3
   2360e:	2800      	cmp	r0, #0
   23610:	d0ad      	beq.n	2356e <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   23612:	2210      	movs	r2, #16
   23614:	4937      	ldr	r1, [pc, #220]	; (236f4 <_http_client_handle_header+0x1ac>)
   23616:	0020      	movs	r0, r4
   23618:	4b35      	ldr	r3, [pc, #212]	; (236f0 <_http_client_handle_header+0x1a8>)
   2361a:	4798      	blx	r3
   2361c:	2800      	cmp	r0, #0
   2361e:	d0d4      	beq.n	235ca <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   23620:	2213      	movs	r2, #19
   23622:	4935      	ldr	r1, [pc, #212]	; (236f8 <_http_client_handle_header+0x1b0>)
   23624:	0020      	movs	r0, r4
   23626:	4b32      	ldr	r3, [pc, #200]	; (236f0 <_http_client_handle_header+0x1a8>)
   23628:	4798      	blx	r3
   2362a:	1e06      	subs	r6, r0, #0
   2362c:	d110      	bne.n	23650 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   2362e:	0022      	movs	r2, r4
   23630:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   23632:	4295      	cmp	r5, r2
   23634:	d9da      	bls.n	235ec <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   23636:	7ce3      	ldrb	r3, [r4, #19]
   23638:	2b20      	cmp	r3, #32
   2363a:	d0cd      	beq.n	235d8 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   2363c:	2220      	movs	r2, #32
   2363e:	4393      	bics	r3, r2
   23640:	2b43      	cmp	r3, #67	; 0x43
   23642:	d0d0      	beq.n	235e6 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   23644:	2186      	movs	r1, #134	; 0x86
   23646:	4249      	negs	r1, r1
   23648:	0038      	movs	r0, r7
   2364a:	4b2c      	ldr	r3, [pc, #176]	; (236fc <_http_client_handle_header+0x1b4>)
   2364c:	4798      	blx	r3
					return 0;
   2364e:	e789      	b.n	23564 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   23650:	220c      	movs	r2, #12
   23652:	492b      	ldr	r1, [pc, #172]	; (23700 <_http_client_handle_header+0x1b8>)
   23654:	0020      	movs	r0, r4
   23656:	4b26      	ldr	r3, [pc, #152]	; (236f0 <_http_client_handle_header+0x1a8>)
   23658:	4798      	blx	r3
   2365a:	2800      	cmp	r0, #0
   2365c:	d11d      	bne.n	2369a <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   2365e:	0022      	movs	r2, r4
   23660:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   23662:	4295      	cmp	r5, r2
   23664:	d9c2      	bls.n	235ec <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   23666:	7b23      	ldrb	r3, [r4, #12]
   23668:	2b20      	cmp	r3, #32
   2366a:	d009      	beq.n	23680 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   2366c:	2220      	movs	r2, #32
   2366e:	4393      	bics	r3, r2
   23670:	2b4b      	cmp	r3, #75	; 0x4b
   23672:	d00c      	beq.n	2368e <_http_client_handle_header+0x146>
					module->permanent = 0;
   23674:	2241      	movs	r2, #65	; 0x41
   23676:	5cbb      	ldrb	r3, [r7, r2]
   23678:	2102      	movs	r1, #2
   2367a:	438b      	bics	r3, r1
   2367c:	54bb      	strb	r3, [r7, r2]
   2367e:	e7b5      	b.n	235ec <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   23680:	3201      	adds	r2, #1
   23682:	4295      	cmp	r5, r2
   23684:	d0b2      	beq.n	235ec <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   23686:	7813      	ldrb	r3, [r2, #0]
   23688:	2b20      	cmp	r3, #32
   2368a:	d1ef      	bne.n	2366c <_http_client_handle_header+0x124>
   2368c:	e7f8      	b.n	23680 <_http_client_handle_header+0x138>
					module->permanent = 1;
   2368e:	3221      	adds	r2, #33	; 0x21
   23690:	5cbb      	ldrb	r3, [r7, r2]
   23692:	2102      	movs	r1, #2
   23694:	430b      	orrs	r3, r1
   23696:	54bb      	strb	r3, [r7, r2]
   23698:	e7a8      	b.n	235ec <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   2369a:	2205      	movs	r2, #5
   2369c:	4919      	ldr	r1, [pc, #100]	; (23704 <_http_client_handle_header+0x1bc>)
   2369e:	0020      	movs	r0, r4
   236a0:	4b13      	ldr	r3, [pc, #76]	; (236f0 <_http_client_handle_header+0x1a8>)
   236a2:	4798      	blx	r3
   236a4:	2800      	cmp	r0, #0
   236a6:	d1a1      	bne.n	235ec <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   236a8:	0020      	movs	r0, r4
   236aa:	3009      	adds	r0, #9
   236ac:	4b0e      	ldr	r3, [pc, #56]	; (236e8 <_http_client_handle_header+0x1a0>)
   236ae:	4798      	blx	r3
   236b0:	23e4      	movs	r3, #228	; 0xe4
   236b2:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   236b4:	2200      	movs	r2, #0
   236b6:	3b08      	subs	r3, #8
   236b8:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   236ba:	7963      	ldrb	r3, [r4, #5]
   236bc:	2b31      	cmp	r3, #49	; 0x31
   236be:	d802      	bhi.n	236c6 <_http_client_handle_header+0x17e>
   236c0:	79e3      	ldrb	r3, [r4, #7]
   236c2:	2b30      	cmp	r3, #48	; 0x30
   236c4:	d905      	bls.n	236d2 <_http_client_handle_header+0x18a>
				module->permanent = 1;
   236c6:	2241      	movs	r2, #65	; 0x41
   236c8:	5cbb      	ldrb	r3, [r7, r2]
   236ca:	2102      	movs	r1, #2
   236cc:	430b      	orrs	r3, r1
   236ce:	54bb      	strb	r3, [r7, r2]
   236d0:	e78c      	b.n	235ec <_http_client_handle_header+0xa4>
				module->permanent = 0;
   236d2:	2241      	movs	r2, #65	; 0x41
   236d4:	5cbb      	ldrb	r3, [r7, r2]
   236d6:	2102      	movs	r1, #2
   236d8:	438b      	bics	r3, r1
   236da:	54bb      	strb	r3, [r7, r2]
   236dc:	e786      	b.n	235ec <_http_client_handle_header+0xa4>
   236de:	46c0      	nop			; (mov r8, r8)
   236e0:	00026681 	.word	0x00026681
   236e4:	00023525 	.word	0x00023525
   236e8:	00026199 	.word	0x00026199
   236ec:	0002ad9c 	.word	0x0002ad9c
   236f0:	00026611 	.word	0x00026611
   236f4:	0002aa70 	.word	0x0002aa70
   236f8:	0002a980 	.word	0x0002a980
   236fc:	00022ccd 	.word	0x00022ccd
   23700:	0002a994 	.word	0x0002a994
   23704:	0002a9a4 	.word	0x0002a9a4

00023708 <_http_client_handle_entity>:
{
   23708:	b5f0      	push	{r4, r5, r6, r7, lr}
   2370a:	46ce      	mov	lr, r9
   2370c:	b500      	push	{lr}
   2370e:	b086      	sub	sp, #24
   23710:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   23712:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   23714:	23dc      	movs	r3, #220	; 0xdc
   23716:	58c3      	ldr	r3, [r0, r3]
   23718:	2b00      	cmp	r3, #0
   2371a:	db69      	blt.n	237f0 <_http_client_handle_entity+0xe8>
   2371c:	6e02      	ldr	r2, [r0, #96]	; 0x60
   2371e:	4293      	cmp	r3, r2
   23720:	dc2b      	bgt.n	2377a <_http_client_handle_entity+0x72>
	return 0;
   23722:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   23724:	6c62      	ldr	r2, [r4, #68]	; 0x44
   23726:	4293      	cmp	r3, r2
   23728:	dc4e      	bgt.n	237c8 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   2372a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   2372c:	2e00      	cmp	r6, #0
   2372e:	d003      	beq.n	23738 <_http_client_handle_entity+0x30>
   23730:	22e4      	movs	r2, #228	; 0xe4
   23732:	5aa1      	ldrh	r1, [r4, r2]
   23734:	2900      	cmp	r1, #0
   23736:	d10e      	bne.n	23756 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   23738:	2300      	movs	r3, #0
   2373a:	22d8      	movs	r2, #216	; 0xd8
   2373c:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   2373e:	320c      	adds	r2, #12
   23740:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   23742:	3341      	adds	r3, #65	; 0x41
   23744:	5ce3      	ldrb	r3, [r4, r3]
   23746:	079b      	lsls	r3, r3, #30
   23748:	d40f      	bmi.n	2376a <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   2374a:	2100      	movs	r1, #0
   2374c:	0020      	movs	r0, r4
   2374e:	4b71      	ldr	r3, [pc, #452]	; (23914 <_http_client_handle_entity+0x20c>)
   23750:	4798      	blx	r3
	return 0;
   23752:	2000      	movs	r0, #0
   23754:	e038      	b.n	237c8 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   23756:	aa03      	add	r2, sp, #12
   23758:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   2375a:	2100      	movs	r1, #0
   2375c:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   2375e:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   23760:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   23762:	3102      	adds	r1, #2
   23764:	0020      	movs	r0, r4
   23766:	47b0      	blx	r6
   23768:	e7e6      	b.n	23738 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   2376a:	23dc      	movs	r3, #220	; 0xdc
   2376c:	58e1      	ldr	r1, [r4, r3]
   2376e:	1869      	adds	r1, r5, r1
   23770:	0020      	movs	r0, r4
   23772:	4b69      	ldr	r3, [pc, #420]	; (23918 <_http_client_handle_entity+0x210>)
   23774:	4798      	blx	r3
				return module->recved_size;
   23776:	6c60      	ldr	r0, [r4, #68]	; 0x44
   23778:	e026      	b.n	237c8 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   2377a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2377c:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   2377e:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   23780:	21e0      	movs	r1, #224	; 0xe0
   23782:	5840      	ldr	r0, [r0, r1]
   23784:	4684      	mov	ip, r0
   23786:	4462      	add	r2, ip
   23788:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   2378a:	4293      	cmp	r3, r2
   2378c:	dc20      	bgt.n	237d0 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   2378e:	2300      	movs	r3, #0
   23790:	22d8      	movs	r2, #216	; 0xd8
   23792:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   23794:	320c      	adds	r2, #12
   23796:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   23798:	3ae3      	subs	r2, #227	; 0xe3
   2379a:	ab03      	add	r3, sp, #12
   2379c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   2379e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   237a0:	2b00      	cmp	r3, #0
   237a2:	d007      	beq.n	237b4 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   237a4:	ae03      	add	r6, sp, #12
   237a6:	0032      	movs	r2, r6
   237a8:	2103      	movs	r1, #3
   237aa:	0020      	movs	r0, r4
   237ac:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   237ae:	7a33      	ldrb	r3, [r6, #8]
   237b0:	2b01      	cmp	r3, #1
   237b2:	d103      	bne.n	237bc <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   237b4:	2341      	movs	r3, #65	; 0x41
   237b6:	5ce3      	ldrb	r3, [r4, r3]
   237b8:	079b      	lsls	r3, r3, #30
   237ba:	d510      	bpl.n	237de <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   237bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   237be:	18e9      	adds	r1, r5, r3
   237c0:	0020      	movs	r0, r4
   237c2:	4b55      	ldr	r3, [pc, #340]	; (23918 <_http_client_handle_entity+0x210>)
   237c4:	4798      	blx	r3
	return 0;
   237c6:	2000      	movs	r0, #0
}
   237c8:	b006      	add	sp, #24
   237ca:	bc04      	pop	{r2}
   237cc:	4691      	mov	r9, r2
   237ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   237d0:	2200      	movs	r2, #0
   237d2:	ab03      	add	r3, sp, #12
   237d4:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   237d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   237d8:	2b00      	cmp	r3, #0
   237da:	d0ef      	beq.n	237bc <_http_client_handle_entity+0xb4>
   237dc:	e7e2      	b.n	237a4 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   237de:	484f      	ldr	r0, [pc, #316]	; (2391c <_http_client_handle_entity+0x214>)
   237e0:	4b4f      	ldr	r3, [pc, #316]	; (23920 <_http_client_handle_entity+0x218>)
   237e2:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   237e4:	2100      	movs	r1, #0
   237e6:	0020      	movs	r0, r4
   237e8:	4b4a      	ldr	r3, [pc, #296]	; (23914 <_http_client_handle_entity+0x20c>)
   237ea:	4798      	blx	r3
					return 0;
   237ec:	2000      	movs	r0, #0
   237ee:	e7eb      	b.n	237c8 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   237f0:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   237f2:	2300      	movs	r3, #0
   237f4:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   237f6:	26e0      	movs	r6, #224	; 0xe0
   237f8:	e00a      	b.n	23810 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   237fa:	2341      	movs	r3, #65	; 0x41
   237fc:	5ce3      	ldrb	r3, [r4, r3]
   237fe:	079b      	lsls	r3, r3, #30
   23800:	d51b      	bpl.n	2383a <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   23802:	1ca9      	adds	r1, r5, #2
   23804:	0020      	movs	r0, r4
   23806:	4b44      	ldr	r3, [pc, #272]	; (23918 <_http_client_handle_entity+0x210>)
   23808:	4798      	blx	r3
	} while(module->recved_size > 0);
   2380a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2380c:	2b00      	cmp	r3, #0
   2380e:	d073      	beq.n	238f8 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   23810:	59a3      	ldr	r3, [r4, r6]
   23812:	2b00      	cmp	r3, #0
   23814:	db30      	blt.n	23878 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   23816:	d116      	bne.n	23846 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   23818:	22d8      	movs	r2, #216	; 0xd8
   2381a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   2381c:	320c      	adds	r2, #12
   2381e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   23820:	3ae3      	subs	r2, #227	; 0xe3
   23822:	4669      	mov	r1, sp
   23824:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   23826:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   23828:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   2382a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2382c:	2b00      	cmp	r3, #0
   2382e:	d0e4      	beq.n	237fa <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   23830:	466a      	mov	r2, sp
   23832:	2103      	movs	r1, #3
   23834:	0020      	movs	r0, r4
   23836:	4798      	blx	r3
   23838:	e7df      	b.n	237fa <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   2383a:	2100      	movs	r1, #0
   2383c:	0020      	movs	r0, r4
   2383e:	4b35      	ldr	r3, [pc, #212]	; (23914 <_http_client_handle_entity+0x20c>)
   23840:	4798      	blx	r3
	return 0;
   23842:	2000      	movs	r0, #0
   23844:	e7c0      	b.n	237c8 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   23846:	42bb      	cmp	r3, r7
   23848:	dcdf      	bgt.n	2380a <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   2384a:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   2384c:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   2384e:	2300      	movs	r3, #0
   23850:	466a      	mov	r2, sp
   23852:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   23854:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   23856:	2b00      	cmp	r3, #0
   23858:	d002      	beq.n	23860 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   2385a:	2103      	movs	r1, #3
   2385c:	0020      	movs	r0, r4
   2385e:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   23860:	59a3      	ldr	r3, [r4, r6]
   23862:	1c99      	adds	r1, r3, #2
   23864:	1869      	adds	r1, r5, r1
   23866:	0020      	movs	r0, r4
   23868:	4b2b      	ldr	r3, [pc, #172]	; (23918 <_http_client_handle_entity+0x210>)
   2386a:	4798      	blx	r3
				length = (int)module->recved_size;
   2386c:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   2386e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   23870:	2301      	movs	r3, #1
   23872:	425b      	negs	r3, r3
   23874:	51a3      	str	r3, [r4, r6]
   23876:	e7c8      	b.n	2380a <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   23878:	2300      	movs	r3, #0
   2387a:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   2387c:	2f00      	cmp	r7, #0
   2387e:	dd04      	ble.n	2388a <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   23880:	782b      	ldrb	r3, [r5, #0]
   23882:	2b0a      	cmp	r3, #10
   23884:	d11c      	bne.n	238c0 <_http_client_handle_entity+0x1b8>
					buffer++;
   23886:	3501      	adds	r5, #1
					length--;
   23888:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   2388a:	59a3      	ldr	r3, [r4, r6]
   2388c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2388e:	4293      	cmp	r3, r2
   23890:	dc39      	bgt.n	23906 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   23892:	2f00      	cmp	r7, #0
   23894:	d1b9      	bne.n	2380a <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   23896:	2201      	movs	r2, #1
   23898:	4252      	negs	r2, r2
   2389a:	23e0      	movs	r3, #224	; 0xe0
   2389c:	50e2      	str	r2, [r4, r3]
   2389e:	e7d0      	b.n	23842 <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   238a0:	001a      	movs	r2, r3
   238a2:	3a61      	subs	r2, #97	; 0x61
   238a4:	2a05      	cmp	r2, #5
   238a6:	d818      	bhi.n	238da <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   238a8:	59a2      	ldr	r2, [r4, r6]
   238aa:	0112      	lsls	r2, r2, #4
   238ac:	18d3      	adds	r3, r2, r3
   238ae:	3b61      	subs	r3, #97	; 0x61
   238b0:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   238b2:	3501      	adds	r5, #1
   238b4:	3f01      	subs	r7, #1
   238b6:	2f00      	cmp	r7, #0
   238b8:	d020      	beq.n	238fc <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   238ba:	782b      	ldrb	r3, [r5, #0]
   238bc:	2b0a      	cmp	r3, #10
   238be:	d0e2      	beq.n	23886 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   238c0:	464a      	mov	r2, r9
   238c2:	2a00      	cmp	r2, #0
   238c4:	d1f5      	bne.n	238b2 <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   238c6:	001a      	movs	r2, r3
   238c8:	3a30      	subs	r2, #48	; 0x30
   238ca:	2a09      	cmp	r2, #9
   238cc:	d8e8      	bhi.n	238a0 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   238ce:	59a2      	ldr	r2, [r4, r6]
   238d0:	0112      	lsls	r2, r2, #4
   238d2:	18d3      	adds	r3, r2, r3
   238d4:	3b30      	subs	r3, #48	; 0x30
   238d6:	51a3      	str	r3, [r4, r6]
   238d8:	e7eb      	b.n	238b2 <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   238da:	001a      	movs	r2, r3
   238dc:	3a41      	subs	r2, #65	; 0x41
   238de:	2a05      	cmp	r2, #5
   238e0:	d805      	bhi.n	238ee <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   238e2:	59a2      	ldr	r2, [r4, r6]
   238e4:	0112      	lsls	r2, r2, #4
   238e6:	18d3      	adds	r3, r2, r3
   238e8:	3b41      	subs	r3, #65	; 0x41
   238ea:	51a3      	str	r3, [r4, r6]
   238ec:	e7e1      	b.n	238b2 <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   238ee:	3b3b      	subs	r3, #59	; 0x3b
   238f0:	425a      	negs	r2, r3
   238f2:	415a      	adcs	r2, r3
   238f4:	4691      	mov	r9, r2
   238f6:	e7dc      	b.n	238b2 <_http_client_handle_entity+0x1aa>
	return 0;
   238f8:	2000      	movs	r0, #0
   238fa:	e765      	b.n	237c8 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   238fc:	23e0      	movs	r3, #224	; 0xe0
   238fe:	58e3      	ldr	r3, [r4, r3]
   23900:	6e22      	ldr	r2, [r4, #96]	; 0x60
   23902:	4293      	cmp	r3, r2
   23904:	ddc7      	ble.n	23896 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   23906:	218b      	movs	r1, #139	; 0x8b
   23908:	4249      	negs	r1, r1
   2390a:	0020      	movs	r0, r4
   2390c:	4b01      	ldr	r3, [pc, #4]	; (23914 <_http_client_handle_entity+0x20c>)
   2390e:	4798      	blx	r3
   23910:	e797      	b.n	23842 <_http_client_handle_entity+0x13a>
   23912:	46c0      	nop			; (mov r8, r8)
   23914:	00022ccd 	.word	0x00022ccd
   23918:	00023525 	.word	0x00023525
   2391c:	0002a97c 	.word	0x0002a97c
   23920:	0002646d 	.word	0x0002646d

00023924 <_http_client_handle_response>:
{
   23924:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   23926:	23d8      	movs	r3, #216	; 0xd8
   23928:	58c3      	ldr	r3, [r0, r3]
   2392a:	2b00      	cmp	r3, #0
   2392c:	d003      	beq.n	23936 <_http_client_handle_response+0x12>
   2392e:	2b01      	cmp	r3, #1
   23930:	d004      	beq.n	2393c <_http_client_handle_response+0x18>
	return 0;
   23932:	2000      	movs	r0, #0
   23934:	e001      	b.n	2393a <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   23936:	4b03      	ldr	r3, [pc, #12]	; (23944 <_http_client_handle_response+0x20>)
   23938:	4798      	blx	r3
}
   2393a:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   2393c:	4b02      	ldr	r3, [pc, #8]	; (23948 <_http_client_handle_response+0x24>)
   2393e:	4798      	blx	r3
   23940:	e7fb      	b.n	2393a <_http_client_handle_response+0x16>
   23942:	46c0      	nop			; (mov r8, r8)
   23944:	00023549 	.word	0x00023549
   23948:	00023709 	.word	0x00023709

0002394c <_http_client_recved_packet>:
{
   2394c:	b570      	push	{r4, r5, r6, lr}
   2394e:	0004      	movs	r4, r0
	module->recved_size += read_len;
   23950:	6c43      	ldr	r3, [r0, #68]	; 0x44
   23952:	469c      	mov	ip, r3
   23954:	4461      	add	r1, ip
   23956:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   23958:	2358      	movs	r3, #88	; 0x58
   2395a:	5ac3      	ldrh	r3, [r0, r3]
   2395c:	2b00      	cmp	r3, #0
   2395e:	d105      	bne.n	2396c <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   23960:	4d05      	ldr	r5, [pc, #20]	; (23978 <_http_client_recved_packet+0x2c>)
   23962:	0020      	movs	r0, r4
   23964:	47a8      	blx	r5
   23966:	2800      	cmp	r0, #0
   23968:	d1fb      	bne.n	23962 <_http_client_recved_packet+0x16>
}
   2396a:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   2396c:	6c81      	ldr	r1, [r0, #72]	; 0x48
   2396e:	6d40      	ldr	r0, [r0, #84]	; 0x54
   23970:	4b02      	ldr	r3, [pc, #8]	; (2397c <_http_client_recved_packet+0x30>)
   23972:	4798      	blx	r3
   23974:	e7f4      	b.n	23960 <_http_client_recved_packet+0x14>
   23976:	46c0      	nop			; (mov r8, r8)
   23978:	00023925 	.word	0x00023925
   2397c:	00023cf9 	.word	0x00023cf9

00023980 <http_client_socket_event_handler>:
{
   23980:	b510      	push	{r4, lr}
   23982:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   23984:	0080      	lsls	r0, r0, #2
   23986:	4b65      	ldr	r3, [pc, #404]	; (23b1c <http_client_socket_event_handler+0x19c>)
   23988:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   2398a:	2c00      	cmp	r4, #0
   2398c:	d006      	beq.n	2399c <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   2398e:	2906      	cmp	r1, #6
   23990:	d051      	beq.n	23a36 <http_client_socket_event_handler+0xb6>
   23992:	2907      	cmp	r1, #7
   23994:	d100      	bne.n	23998 <http_client_socket_event_handler+0x18>
   23996:	e08a      	b.n	23aae <http_client_socket_event_handler+0x12e>
   23998:	2905      	cmp	r1, #5
   2399a:	d001      	beq.n	239a0 <http_client_socket_event_handler+0x20>
}
   2399c:	b004      	add	sp, #16
   2399e:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   239a0:	2301      	movs	r3, #1
   239a2:	56d3      	ldrsb	r3, [r2, r3]
   239a4:	1e1a      	subs	r2, r3, #0
   239a6:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   239a8:	db15      	blt.n	239d6 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   239aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   239ac:	2b00      	cmp	r3, #0
   239ae:	d003      	beq.n	239b8 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   239b0:	aa01      	add	r2, sp, #4
   239b2:	2100      	movs	r1, #0
   239b4:	0020      	movs	r0, r4
   239b6:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   239b8:	2303      	movs	r3, #3
   239ba:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   239bc:	3355      	adds	r3, #85	; 0x55
   239be:	5ae2      	ldrh	r2, [r4, r3]
   239c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   239c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
   239c4:	4b56      	ldr	r3, [pc, #344]	; (23b20 <http_client_socket_event_handler+0x1a0>)
   239c6:	4798      	blx	r3
    		_http_client_recv_packet(module);
   239c8:	0020      	movs	r0, r4
   239ca:	4b56      	ldr	r3, [pc, #344]	; (23b24 <http_client_socket_event_handler+0x1a4>)
   239cc:	4798      	blx	r3
			_http_client_request(module);
   239ce:	0020      	movs	r0, r4
   239d0:	4b55      	ldr	r3, [pc, #340]	; (23b28 <http_client_socket_event_handler+0x1a8>)
   239d2:	4798      	blx	r3
   239d4:	e7e2      	b.n	2399c <http_client_socket_event_handler+0x1c>
	switch (err) {
   239d6:	330e      	adds	r3, #14
   239d8:	b2d9      	uxtb	r1, r3
   239da:	290e      	cmp	r1, #14
   239dc:	d81e      	bhi.n	23a1c <http_client_socket_event_handler+0x9c>
   239de:	008b      	lsls	r3, r1, #2
   239e0:	4952      	ldr	r1, [pc, #328]	; (23b2c <http_client_socket_event_handler+0x1ac>)
   239e2:	58cb      	ldr	r3, [r1, r3]
   239e4:	469f      	mov	pc, r3
			return -ENOENT;
   239e6:	2102      	movs	r1, #2
   239e8:	4249      	negs	r1, r1
   239ea:	e01d      	b.n	23a28 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   239ec:	2170      	movs	r1, #112	; 0x70
   239ee:	4249      	negs	r1, r1
   239f0:	e01a      	b.n	23a28 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   239f2:	210c      	movs	r1, #12
   239f4:	4249      	negs	r1, r1
   239f6:	e017      	b.n	23a28 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   239f8:	2116      	movs	r1, #22
   239fa:	4249      	negs	r1, r1
   239fc:	e014      	b.n	23a28 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   239fe:	210c      	movs	r1, #12
   23a00:	4249      	negs	r1, r1
   23a02:	e011      	b.n	23a28 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   23a04:	2179      	movs	r1, #121	; 0x79
   23a06:	4249      	negs	r1, r1
   23a08:	e00e      	b.n	23a28 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   23a0a:	2168      	movs	r1, #104	; 0x68
   23a0c:	4249      	negs	r1, r1
   23a0e:	e00b      	b.n	23a28 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   23a10:	210b      	movs	r1, #11
   23a12:	4249      	negs	r1, r1
   23a14:	e008      	b.n	23a28 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   23a16:	2110      	movs	r1, #16
   23a18:	4249      	negs	r1, r1
   23a1a:	e005      	b.n	23a28 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   23a1c:	2a00      	cmp	r2, #0
   23a1e:	db07      	blt.n	23a30 <http_client_socket_event_handler+0xb0>
			return 0;
   23a20:	2100      	movs	r1, #0
   23a22:	e001      	b.n	23a28 <http_client_socket_event_handler+0xa8>
			return -EIO;
   23a24:	2105      	movs	r1, #5
   23a26:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   23a28:	0020      	movs	r0, r4
   23a2a:	4b41      	ldr	r3, [pc, #260]	; (23b30 <http_client_socket_event_handler+0x1b0>)
   23a2c:	4798      	blx	r3
   23a2e:	e7b5      	b.n	2399c <http_client_socket_event_handler+0x1c>
				return -EIO;
   23a30:	2105      	movs	r1, #5
   23a32:	4249      	negs	r1, r1
   23a34:	e7f8      	b.n	23a28 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   23a36:	2304      	movs	r3, #4
   23a38:	5ed1      	ldrsh	r1, [r2, r3]
   23a3a:	2900      	cmp	r1, #0
   23a3c:	dd06      	ble.n	23a4c <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   23a3e:	0020      	movs	r0, r4
   23a40:	4b3c      	ldr	r3, [pc, #240]	; (23b34 <http_client_socket_event_handler+0x1b4>)
   23a42:	4798      	blx	r3
		_http_client_recv_packet(module);
   23a44:	0020      	movs	r0, r4
   23a46:	4b37      	ldr	r3, [pc, #220]	; (23b24 <http_client_socket_event_handler+0x1a4>)
   23a48:	4798      	blx	r3
		break;
   23a4a:	e7a7      	b.n	2399c <http_client_socket_event_handler+0x1c>
	switch (err) {
   23a4c:	000b      	movs	r3, r1
   23a4e:	330e      	adds	r3, #14
   23a50:	b29a      	uxth	r2, r3
   23a52:	2a0e      	cmp	r2, #14
   23a54:	d81e      	bhi.n	23a94 <http_client_socket_event_handler+0x114>
   23a56:	0093      	lsls	r3, r2, #2
   23a58:	4a37      	ldr	r2, [pc, #220]	; (23b38 <http_client_socket_event_handler+0x1b8>)
   23a5a:	58d3      	ldr	r3, [r2, r3]
   23a5c:	469f      	mov	pc, r3
			return -ENOENT;
   23a5e:	2102      	movs	r1, #2
   23a60:	4249      	negs	r1, r1
   23a62:	e01d      	b.n	23aa0 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   23a64:	2170      	movs	r1, #112	; 0x70
   23a66:	4249      	negs	r1, r1
   23a68:	e01a      	b.n	23aa0 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   23a6a:	210c      	movs	r1, #12
   23a6c:	4249      	negs	r1, r1
   23a6e:	e017      	b.n	23aa0 <http_client_socket_event_handler+0x120>
			return -EINVAL;
   23a70:	2116      	movs	r1, #22
   23a72:	4249      	negs	r1, r1
   23a74:	e014      	b.n	23aa0 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   23a76:	210c      	movs	r1, #12
   23a78:	4249      	negs	r1, r1
   23a7a:	e011      	b.n	23aa0 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   23a7c:	2179      	movs	r1, #121	; 0x79
   23a7e:	4249      	negs	r1, r1
   23a80:	e00e      	b.n	23aa0 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   23a82:	2168      	movs	r1, #104	; 0x68
   23a84:	4249      	negs	r1, r1
   23a86:	e00b      	b.n	23aa0 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   23a88:	210b      	movs	r1, #11
   23a8a:	4249      	negs	r1, r1
   23a8c:	e008      	b.n	23aa0 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   23a8e:	2110      	movs	r1, #16
   23a90:	4249      	negs	r1, r1
   23a92:	e005      	b.n	23aa0 <http_client_socket_event_handler+0x120>
			if (err < 0) {
   23a94:	2900      	cmp	r1, #0
   23a96:	db07      	blt.n	23aa8 <http_client_socket_event_handler+0x128>
			return 0;
   23a98:	2100      	movs	r1, #0
   23a9a:	e001      	b.n	23aa0 <http_client_socket_event_handler+0x120>
			return -EIO;
   23a9c:	2105      	movs	r1, #5
   23a9e:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   23aa0:	0020      	movs	r0, r4
   23aa2:	4b23      	ldr	r3, [pc, #140]	; (23b30 <http_client_socket_event_handler+0x1b0>)
   23aa4:	4798      	blx	r3
   23aa6:	e7cd      	b.n	23a44 <http_client_socket_event_handler+0xc4>
				return -EIO;
   23aa8:	2105      	movs	r1, #5
   23aaa:	4249      	negs	r1, r1
   23aac:	e7f8      	b.n	23aa0 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   23aae:	2300      	movs	r3, #0
   23ab0:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   23ab2:	2b00      	cmp	r3, #0
   23ab4:	db08      	blt.n	23ac8 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   23ab6:	0020      	movs	r0, r4
   23ab8:	4b1b      	ldr	r3, [pc, #108]	; (23b28 <http_client_socket_event_handler+0x1a8>)
   23aba:	4798      	blx	r3
		module->sending = 0;
   23abc:	2241      	movs	r2, #65	; 0x41
   23abe:	5ca3      	ldrb	r3, [r4, r2]
   23ac0:	2101      	movs	r1, #1
   23ac2:	438b      	bics	r3, r1
   23ac4:	54a3      	strb	r3, [r4, r2]
    	break;
   23ac6:	e769      	b.n	2399c <http_client_socket_event_handler+0x1c>
	switch (err) {
   23ac8:	330e      	adds	r3, #14
   23aca:	b29a      	uxth	r2, r3
   23acc:	2a0d      	cmp	r2, #13
   23ace:	d81e      	bhi.n	23b0e <http_client_socket_event_handler+0x18e>
   23ad0:	0093      	lsls	r3, r2, #2
   23ad2:	4a1a      	ldr	r2, [pc, #104]	; (23b3c <http_client_socket_event_handler+0x1bc>)
   23ad4:	58d3      	ldr	r3, [r2, r3]
   23ad6:	469f      	mov	pc, r3
			return -ENOENT;
   23ad8:	2102      	movs	r1, #2
   23ada:	4249      	negs	r1, r1
   23adc:	e019      	b.n	23b12 <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   23ade:	2170      	movs	r1, #112	; 0x70
   23ae0:	4249      	negs	r1, r1
   23ae2:	e016      	b.n	23b12 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   23ae4:	210c      	movs	r1, #12
   23ae6:	4249      	negs	r1, r1
   23ae8:	e013      	b.n	23b12 <http_client_socket_event_handler+0x192>
			return -EINVAL;
   23aea:	2116      	movs	r1, #22
   23aec:	4249      	negs	r1, r1
   23aee:	e010      	b.n	23b12 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   23af0:	210c      	movs	r1, #12
   23af2:	4249      	negs	r1, r1
   23af4:	e00d      	b.n	23b12 <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   23af6:	2179      	movs	r1, #121	; 0x79
   23af8:	4249      	negs	r1, r1
   23afa:	e00a      	b.n	23b12 <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   23afc:	2168      	movs	r1, #104	; 0x68
   23afe:	4249      	negs	r1, r1
   23b00:	e007      	b.n	23b12 <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   23b02:	210b      	movs	r1, #11
   23b04:	4249      	negs	r1, r1
   23b06:	e004      	b.n	23b12 <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   23b08:	2110      	movs	r1, #16
   23b0a:	4249      	negs	r1, r1
   23b0c:	e001      	b.n	23b12 <http_client_socket_event_handler+0x192>
			return -EIO;
   23b0e:	2105      	movs	r1, #5
   23b10:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   23b12:	0020      	movs	r0, r4
   23b14:	4b06      	ldr	r3, [pc, #24]	; (23b30 <http_client_socket_event_handler+0x1b0>)
   23b16:	4798      	blx	r3
   23b18:	e7d0      	b.n	23abc <http_client_socket_event_handler+0x13c>
   23b1a:	46c0      	nop			; (mov r8, r8)
   23b1c:	200041a8 	.word	0x200041a8
   23b20:	00023ccd 	.word	0x00023ccd
   23b24:	000234ed 	.word	0x000234ed
   23b28:	00022de5 	.word	0x00022de5
   23b2c:	0002a8bc 	.word	0x0002a8bc
   23b30:	00022ccd 	.word	0x00022ccd
   23b34:	0002394d 	.word	0x0002394d
   23b38:	0002a8f8 	.word	0x0002a8f8
   23b3c:	0002a934 	.word	0x0002a934

00023b40 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   23b40:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   23b42:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   23b44:	2200      	movs	r2, #0
   23b46:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   23b48:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   23b4a:	9b00      	ldr	r3, [sp, #0]
   23b4c:	60c3      	str	r3, [r0, #12]
}
   23b4e:	4770      	bx	lr

00023b50 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   23b50:	b510      	push	{r4, lr}
   23b52:	0004      	movs	r4, r0
	if(writer->written > 0) {
   23b54:	6842      	ldr	r2, [r0, #4]
   23b56:	2a00      	cmp	r2, #0
   23b58:	d100      	bne.n	23b5c <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   23b5a:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   23b5c:	6901      	ldr	r1, [r0, #16]
   23b5e:	68c0      	ldr	r0, [r0, #12]
   23b60:	68a3      	ldr	r3, [r4, #8]
   23b62:	4798      	blx	r3
		writer->written = 0;
   23b64:	2300      	movs	r3, #0
   23b66:	6063      	str	r3, [r4, #4]
}
   23b68:	e7f7      	b.n	23b5a <stream_writer_send_remain+0xa>
	...

00023b6c <stream_writer_send_8>:
{
   23b6c:	b570      	push	{r4, r5, r6, lr}
   23b6e:	0004      	movs	r4, r0
   23b70:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   23b72:	6803      	ldr	r3, [r0, #0]
   23b74:	6842      	ldr	r2, [r0, #4]
   23b76:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   23b78:	2b00      	cmp	r3, #0
   23b7a:	dd05      	ble.n	23b88 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   23b7c:	6922      	ldr	r2, [r4, #16]
   23b7e:	6863      	ldr	r3, [r4, #4]
   23b80:	1c59      	adds	r1, r3, #1
   23b82:	6061      	str	r1, [r4, #4]
   23b84:	54d5      	strb	r5, [r2, r3]
}
   23b86:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   23b88:	4b01      	ldr	r3, [pc, #4]	; (23b90 <stream_writer_send_8+0x24>)
   23b8a:	4798      	blx	r3
   23b8c:	e7f6      	b.n	23b7c <stream_writer_send_8+0x10>
   23b8e:	46c0      	nop			; (mov r8, r8)
   23b90:	00023b51 	.word	0x00023b51

00023b94 <stream_writer_send_buffer>:
{
   23b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23b96:	0006      	movs	r6, r0
   23b98:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   23b9a:	2a00      	cmp	r2, #0
   23b9c:	d008      	beq.n	23bb0 <stream_writer_send_buffer+0x1c>
   23b9e:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   23ba0:	4f04      	ldr	r7, [pc, #16]	; (23bb4 <stream_writer_send_buffer+0x20>)
   23ba2:	2100      	movs	r1, #0
   23ba4:	5661      	ldrsb	r1, [r4, r1]
   23ba6:	0030      	movs	r0, r6
   23ba8:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   23baa:	3401      	adds	r4, #1
   23bac:	42a5      	cmp	r5, r4
   23bae:	d1f8      	bne.n	23ba2 <stream_writer_send_buffer+0xe>
}
   23bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23bb2:	46c0      	nop			; (mov r8, r8)
   23bb4:	00023b6d 	.word	0x00023b6d

00023bb8 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   23bb8:	4a02      	ldr	r2, [pc, #8]	; (23bc4 <sw_timer_tcc_callback+0xc>)
   23bba:	6813      	ldr	r3, [r2, #0]
   23bbc:	3301      	adds	r3, #1
   23bbe:	6013      	str	r3, [r2, #0]
}
   23bc0:	4770      	bx	lr
   23bc2:	46c0      	nop			; (mov r8, r8)
   23bc4:	200041c4 	.word	0x200041c4

00023bc8 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   23bc8:	2364      	movs	r3, #100	; 0x64
   23bca:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   23bcc:	2300      	movs	r3, #0
   23bce:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   23bd0:	7043      	strb	r3, [r0, #1]
}
   23bd2:	4770      	bx	lr

00023bd4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   23bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   23bd6:	46c6      	mov	lr, r8
   23bd8:	b500      	push	{lr}
   23bda:	b0ac      	sub	sp, #176	; 0xb0
   23bdc:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   23bde:	466e      	mov	r6, sp
   23be0:	4b1d      	ldr	r3, [pc, #116]	; (23c58 <sw_timer_init+0x84>)
   23be2:	466a      	mov	r2, sp
   23be4:	cb92      	ldmia	r3!, {r1, r4, r7}
   23be6:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   23be8:	886b      	ldrh	r3, [r5, #2]
   23bea:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   23bec:	3014      	adds	r0, #20
   23bee:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   23bf0:	782b      	ldrb	r3, [r5, #0]
   23bf2:	009b      	lsls	r3, r3, #2
   23bf4:	5999      	ldr	r1, [r3, r6]
   23bf6:	0017      	movs	r7, r2
   23bf8:	0010      	movs	r0, r2
   23bfa:	4b18      	ldr	r3, [pc, #96]	; (23c5c <sw_timer_init+0x88>)
   23bfc:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   23bfe:	2000      	movs	r0, #0
   23c00:	4b17      	ldr	r3, [pc, #92]	; (23c60 <sw_timer_init+0x8c>)
   23c02:	4798      	blx	r3
   23c04:	4b17      	ldr	r3, [pc, #92]	; (23c64 <sw_timer_init+0x90>)
   23c06:	7a1b      	ldrb	r3, [r3, #8]
   23c08:	b2db      	uxtb	r3, r3
   23c0a:	40d8      	lsrs	r0, r3
   23c0c:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   23c0e:	8869      	ldrh	r1, [r5, #2]
   23c10:	20fa      	movs	r0, #250	; 0xfa
   23c12:	0200      	lsls	r0, r0, #8
   23c14:	4b14      	ldr	r3, [pc, #80]	; (23c68 <sw_timer_init+0x94>)
   23c16:	4798      	blx	r3
   23c18:	0001      	movs	r1, r0
   23c1a:	4640      	mov	r0, r8
   23c1c:	4b13      	ldr	r3, [pc, #76]	; (23c6c <sw_timer_init+0x98>)
   23c1e:	4798      	blx	r3
   23c20:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   23c22:	2305      	movs	r3, #5
   23c24:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   23c26:	782b      	ldrb	r3, [r5, #0]
   23c28:	009b      	lsls	r3, r3, #2
   23c2a:	5999      	ldr	r1, [r3, r6]
   23c2c:	003a      	movs	r2, r7
   23c2e:	0020      	movs	r0, r4
   23c30:	4b0f      	ldr	r3, [pc, #60]	; (23c70 <sw_timer_init+0x9c>)
   23c32:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   23c34:	786a      	ldrb	r2, [r5, #1]
   23c36:	3208      	adds	r2, #8
   23c38:	b2d2      	uxtb	r2, r2
   23c3a:	490e      	ldr	r1, [pc, #56]	; (23c74 <sw_timer_init+0xa0>)
   23c3c:	0020      	movs	r0, r4
   23c3e:	4b0e      	ldr	r3, [pc, #56]	; (23c78 <sw_timer_init+0xa4>)
   23c40:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   23c42:	7869      	ldrb	r1, [r5, #1]
   23c44:	3108      	adds	r1, #8
   23c46:	b2c9      	uxtb	r1, r1
   23c48:	0020      	movs	r0, r4
   23c4a:	4b0c      	ldr	r3, [pc, #48]	; (23c7c <sw_timer_init+0xa8>)
   23c4c:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   23c4e:	b02c      	add	sp, #176	; 0xb0
   23c50:	bc04      	pop	{r2}
   23c52:	4690      	mov	r8, r2
   23c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23c56:	46c0      	nop			; (mov r8, r8)
   23c58:	0002aaa4 	.word	0x0002aaa4
   23c5c:	0001f261 	.word	0x0001f261
   23c60:	0001ef8d 	.word	0x0001ef8d
   23c64:	40000400 	.word	0x40000400
   23c68:	000240f5 	.word	0x000240f5
   23c6c:	00023fe1 	.word	0x00023fe1
   23c70:	0001f3ad 	.word	0x0001f3ad
   23c74:	00023bb9 	.word	0x00023bb9
   23c78:	0001f7b9 	.word	0x0001f7b9
   23c7c:	0001f7d1 	.word	0x0001f7d1

00023c80 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   23c80:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   23c82:	2102      	movs	r1, #2
   23c84:	6893      	ldr	r3, [r2, #8]
   23c86:	4219      	tst	r1, r3
   23c88:	d1fc      	bne.n	23c84 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   23c8a:	6813      	ldr	r3, [r2, #0]
   23c8c:	2102      	movs	r1, #2
   23c8e:	430b      	orrs	r3, r1
   23c90:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   23c92:	4770      	bx	lr

00023c94 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   23c94:	b570      	push	{r4, r5, r6, lr}
   23c96:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   23c98:	7805      	ldrb	r5, [r0, #0]
   23c9a:	07e8      	lsls	r0, r5, #31
   23c9c:	d502      	bpl.n	23ca4 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   23c9e:	2001      	movs	r0, #1
   23ca0:	4240      	negs	r0, r0
}
   23ca2:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   23ca4:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   23ca6:	0029      	movs	r1, r5
   23ca8:	2002      	movs	r0, #2
   23caa:	4381      	bics	r1, r0
   23cac:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   23cae:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   23cb0:	6d61      	ldr	r1, [r4, #84]	; 0x54
   23cb2:	0018      	movs	r0, r3
   23cb4:	4b04      	ldr	r3, [pc, #16]	; (23cc8 <sw_timer_register_callback+0x34>)
   23cb6:	4798      	blx	r3
   23cb8:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   23cba:	7823      	ldrb	r3, [r4, #0]
   23cbc:	2201      	movs	r2, #1
   23cbe:	4313      	orrs	r3, r2
   23cc0:	7023      	strb	r3, [r4, #0]
			return index;
   23cc2:	2000      	movs	r0, #0
   23cc4:	e7ed      	b.n	23ca2 <sw_timer_register_callback+0xe>
   23cc6:	46c0      	nop			; (mov r8, r8)
   23cc8:	00023fe1 	.word	0x00023fe1

00023ccc <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   23ccc:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   23cce:	008b      	lsls	r3, r1, #2
   23cd0:	185d      	adds	r5, r3, r1
   23cd2:	00ad      	lsls	r5, r5, #2
   23cd4:	5c29      	ldrb	r1, [r5, r0]
   23cd6:	2602      	movs	r6, #2
   23cd8:	4331      	orrs	r1, r6
   23cda:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   23cdc:	1944      	adds	r4, r0, r5
   23cde:	6d41      	ldr	r1, [r0, #84]	; 0x54
   23ce0:	0010      	movs	r0, r2
   23ce2:	4b03      	ldr	r3, [pc, #12]	; (23cf0 <sw_timer_enable_callback+0x24>)
   23ce4:	4798      	blx	r3
   23ce6:	4b03      	ldr	r3, [pc, #12]	; (23cf4 <sw_timer_enable_callback+0x28>)
   23ce8:	681b      	ldr	r3, [r3, #0]
   23cea:	18c0      	adds	r0, r0, r3
   23cec:	6120      	str	r0, [r4, #16]
}
   23cee:	bd70      	pop	{r4, r5, r6, pc}
   23cf0:	00023fe1 	.word	0x00023fe1
   23cf4:	200041c4 	.word	0x200041c4

00023cf8 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   23cf8:	008b      	lsls	r3, r1, #2
   23cfa:	1859      	adds	r1, r3, r1
   23cfc:	0089      	lsls	r1, r1, #2
   23cfe:	5c0b      	ldrb	r3, [r1, r0]
   23d00:	2202      	movs	r2, #2
   23d02:	4393      	bics	r3, r2
   23d04:	540b      	strb	r3, [r1, r0]
}
   23d06:	4770      	bx	lr

00023d08 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   23d08:	b570      	push	{r4, r5, r6, lr}
   23d0a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   23d0c:	7803      	ldrb	r3, [r0, #0]
   23d0e:	07db      	lsls	r3, r3, #31
   23d10:	d507      	bpl.n	23d22 <sw_timer_task+0x1a>
   23d12:	7803      	ldrb	r3, [r0, #0]
   23d14:	079b      	lsls	r3, r3, #30
   23d16:	d504      	bpl.n	23d22 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   23d18:	4b10      	ldr	r3, [pc, #64]	; (23d5c <sw_timer_task+0x54>)
   23d1a:	681a      	ldr	r2, [r3, #0]
   23d1c:	6903      	ldr	r3, [r0, #16]
   23d1e:	1a9b      	subs	r3, r3, r2
   23d20:	d400      	bmi.n	23d24 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   23d22:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   23d24:	7803      	ldrb	r3, [r0, #0]
   23d26:	075b      	lsls	r3, r3, #29
   23d28:	d4fb      	bmi.n	23d22 <sw_timer_task+0x1a>
				handler->busy = 1;
   23d2a:	7803      	ldrb	r3, [r0, #0]
   23d2c:	2104      	movs	r1, #4
   23d2e:	430b      	orrs	r3, r1
   23d30:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   23d32:	68c3      	ldr	r3, [r0, #12]
   23d34:	2b00      	cmp	r3, #0
   23d36:	d00b      	beq.n	23d50 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   23d38:	18d2      	adds	r2, r2, r3
   23d3a:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   23d3c:	68a2      	ldr	r2, [r4, #8]
   23d3e:	2100      	movs	r1, #0
   23d40:	0020      	movs	r0, r4
   23d42:	6865      	ldr	r5, [r4, #4]
   23d44:	47a8      	blx	r5
				handler->busy = 0;
   23d46:	7823      	ldrb	r3, [r4, #0]
   23d48:	2204      	movs	r2, #4
   23d4a:	4393      	bics	r3, r2
   23d4c:	7023      	strb	r3, [r4, #0]
}
   23d4e:	e7e8      	b.n	23d22 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   23d50:	7802      	ldrb	r2, [r0, #0]
   23d52:	2102      	movs	r1, #2
   23d54:	438a      	bics	r2, r1
   23d56:	7002      	strb	r2, [r0, #0]
   23d58:	e7f0      	b.n	23d3c <sw_timer_task+0x34>
   23d5a:	46c0      	nop			; (mov r8, r8)
   23d5c:	200041c4 	.word	0x200041c4

00023d60 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   23d60:	b510      	push	{r4, lr}
	/* Initialize the board. */
	system_init();
   23d62:	4b05      	ldr	r3, [pc, #20]	; (23d78 <main+0x18>)
   23d64:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   23d66:	4b05      	ldr	r3, [pc, #20]	; (23d7c <main+0x1c>)
   23d68:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
   23d6a:	2001      	movs	r0, #1
   23d6c:	4b04      	ldr	r3, [pc, #16]	; (23d80 <main+0x20>)
   23d6e:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   23d70:	4b04      	ldr	r3, [pc, #16]	; (23d84 <main+0x24>)
   23d72:	4798      	blx	r3

	return 0; //Will not get here
}
   23d74:	2000      	movs	r0, #0
   23d76:	bd10      	pop	{r4, pc}
   23d78:	0001f201 	.word	0x0001f201
   23d7c:	00018d65 	.word	0x00018d65
   23d80:	00015415 	.word	0x00015415
   23d84:	00017d01 	.word	0x00017d01

00023d88 <vApplicationDaemonTaskStartupHook>:
*					here will be called before other tasks are initilized.
* @param[in]        None
* @return           None
*****************************************************************************/
void vApplicationDaemonTaskStartupHook(void)
{
   23d88:	b530      	push	{r4, r5, lr}
   23d8a:	b085      	sub	sp, #20
#ifdef BOOT_TEST
	//TestA(); //Comment me for Test B
	//TestB(); //Comment me for Test A
#endif
SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   23d8c:	485f      	ldr	r0, [pc, #380]	; (23f0c <vApplicationDaemonTaskStartupHook+0x184>)
   23d8e:	4c60      	ldr	r4, [pc, #384]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23d90:	47a0      	blx	r4

//Initialize HW that needs FreeRTOS Initialization
SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   23d92:	4860      	ldr	r0, [pc, #384]	; (23f14 <vApplicationDaemonTaskStartupHook+0x18c>)
   23d94:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
   23d96:	4b60      	ldr	r3, [pc, #384]	; (23f18 <vApplicationDaemonTaskStartupHook+0x190>)
   23d98:	4798      	blx	r3
   23d9a:	2800      	cmp	r0, #0
   23d9c:	d100      	bne.n	23da0 <vApplicationDaemonTaskStartupHook+0x18>
   23d9e:	e0a5      	b.n	23eec <vApplicationDaemonTaskStartupHook+0x164>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   23da0:	485e      	ldr	r0, [pc, #376]	; (23f1c <vApplicationDaemonTaskStartupHook+0x194>)
   23da2:	4b5b      	ldr	r3, [pc, #364]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23da4:	4798      	blx	r3
	else
	{
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
	}

	if(0 != InitializeSeesaw())
   23da6:	4b5e      	ldr	r3, [pc, #376]	; (23f20 <vApplicationDaemonTaskStartupHook+0x198>)
   23da8:	4798      	blx	r3
   23daa:	2800      	cmp	r0, #0
   23dac:	d100      	bne.n	23db0 <vApplicationDaemonTaskStartupHook+0x28>
   23dae:	e0a1      	b.n	23ef4 <vApplicationDaemonTaskStartupHook+0x16c>
	{
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   23db0:	485c      	ldr	r0, [pc, #368]	; (23f24 <vApplicationDaemonTaskStartupHook+0x19c>)
   23db2:	4b57      	ldr	r3, [pc, #348]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23db4:	4798      	blx	r3
	else
	{
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
	}

	uint8_t whoamI = 0;
   23db6:	240f      	movs	r4, #15
   23db8:	446c      	add	r4, sp
   23dba:	2300      	movs	r3, #0
   23dbc:	7023      	strb	r3, [r4, #0]
	(lsm6ds3_device_id_get(GetImuStruct(), &whoamI));
   23dbe:	4b5a      	ldr	r3, [pc, #360]	; (23f28 <vApplicationDaemonTaskStartupHook+0x1a0>)
   23dc0:	4798      	blx	r3
   23dc2:	0021      	movs	r1, r4
   23dc4:	4b59      	ldr	r3, [pc, #356]	; (23f2c <vApplicationDaemonTaskStartupHook+0x1a4>)
   23dc6:	4798      	blx	r3
	
	if (whoamI != LSM6DS3_ID){
   23dc8:	7823      	ldrb	r3, [r4, #0]
   23dca:	2b69      	cmp	r3, #105	; 0x69
   23dcc:	d100      	bne.n	23dd0 <vApplicationDaemonTaskStartupHook+0x48>
   23dce:	e095      	b.n	23efc <vApplicationDaemonTaskStartupHook+0x174>
		SerialConsoleWriteString("Cannot find IMU!\r\n");
   23dd0:	4857      	ldr	r0, [pc, #348]	; (23f30 <vApplicationDaemonTaskStartupHook+0x1a8>)
   23dd2:	4b4f      	ldr	r3, [pc, #316]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23dd4:	4798      	blx	r3
	else
	{
		SerialConsoleWriteString("IMU found!\r\n");
	}

	if(InitImu() == 0)
   23dd6:	4b57      	ldr	r3, [pc, #348]	; (23f34 <vApplicationDaemonTaskStartupHook+0x1ac>)
   23dd8:	4798      	blx	r3
   23dda:	2800      	cmp	r0, #0
   23ddc:	d100      	bne.n	23de0 <vApplicationDaemonTaskStartupHook+0x58>
   23dde:	e091      	b.n	23f04 <vApplicationDaemonTaskStartupHook+0x17c>
	{
		SerialConsoleWriteString("IMU initialized!\r\n");
	}
	else
	{
		SerialConsoleWriteString("Could not initialize IMU\r\n");
   23de0:	4855      	ldr	r0, [pc, #340]	; (23f38 <vApplicationDaemonTaskStartupHook+0x1b0>)
   23de2:	4b4b      	ldr	r3, [pc, #300]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23de4:	4798      	blx	r3
	}

	InitializeDistanceSensor();
   23de6:	4b55      	ldr	r3, [pc, #340]	; (23f3c <vApplicationDaemonTaskStartupHook+0x1b4>)
   23de8:	4798      	blx	r3
* @return           None
*****************************************************************************/
static void StartTasks(void)
{

snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   23dea:	4b55      	ldr	r3, [pc, #340]	; (23f40 <vApplicationDaemonTaskStartupHook+0x1b8>)
   23dec:	4798      	blx	r3
   23dee:	0003      	movs	r3, r0
   23df0:	4c54      	ldr	r4, [pc, #336]	; (23f44 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23df2:	4a55      	ldr	r2, [pc, #340]	; (23f48 <vApplicationDaemonTaskStartupHook+0x1c0>)
   23df4:	2140      	movs	r1, #64	; 0x40
   23df6:	0020      	movs	r0, r4
   23df8:	4d54      	ldr	r5, [pc, #336]	; (23f4c <vApplicationDaemonTaskStartupHook+0x1c4>)
   23dfa:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23dfc:	0020      	movs	r0, r4
   23dfe:	4b44      	ldr	r3, [pc, #272]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23e00:	4798      	blx	r3

//Initialize Tasks here

if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   23e02:	4b53      	ldr	r3, [pc, #332]	; (23f50 <vApplicationDaemonTaskStartupHook+0x1c8>)
   23e04:	9301      	str	r3, [sp, #4]
   23e06:	2304      	movs	r3, #4
   23e08:	9300      	str	r3, [sp, #0]
   23e0a:	2300      	movs	r3, #0
   23e0c:	2280      	movs	r2, #128	; 0x80
   23e0e:	0052      	lsls	r2, r2, #1
   23e10:	4950      	ldr	r1, [pc, #320]	; (23f54 <vApplicationDaemonTaskStartupHook+0x1cc>)
   23e12:	4851      	ldr	r0, [pc, #324]	; (23f58 <vApplicationDaemonTaskStartupHook+0x1d0>)
   23e14:	4c51      	ldr	r4, [pc, #324]	; (23f5c <vApplicationDaemonTaskStartupHook+0x1d4>)
   23e16:	47a0      	blx	r4
   23e18:	2801      	cmp	r0, #1
   23e1a:	d002      	beq.n	23e22 <vApplicationDaemonTaskStartupHook+0x9a>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   23e1c:	4850      	ldr	r0, [pc, #320]	; (23f60 <vApplicationDaemonTaskStartupHook+0x1d8>)
   23e1e:	4b3c      	ldr	r3, [pc, #240]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23e20:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   23e22:	4b47      	ldr	r3, [pc, #284]	; (23f40 <vApplicationDaemonTaskStartupHook+0x1b8>)
   23e24:	4798      	blx	r3
   23e26:	0003      	movs	r3, r0
   23e28:	4c46      	ldr	r4, [pc, #280]	; (23f44 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23e2a:	4a4e      	ldr	r2, [pc, #312]	; (23f64 <vApplicationDaemonTaskStartupHook+0x1dc>)
   23e2c:	2140      	movs	r1, #64	; 0x40
   23e2e:	0020      	movs	r0, r4
   23e30:	4d46      	ldr	r5, [pc, #280]	; (23f4c <vApplicationDaemonTaskStartupHook+0x1c4>)
   23e32:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23e34:	0020      	movs	r0, r4
   23e36:	4b36      	ldr	r3, [pc, #216]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23e38:	4798      	blx	r3


if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   23e3a:	4b4b      	ldr	r3, [pc, #300]	; (23f68 <vApplicationDaemonTaskStartupHook+0x1e0>)
   23e3c:	9301      	str	r3, [sp, #4]
   23e3e:	2303      	movs	r3, #3
   23e40:	9300      	str	r3, [sp, #0]
   23e42:	2300      	movs	r3, #0
   23e44:	22fa      	movs	r2, #250	; 0xfa
   23e46:	0092      	lsls	r2, r2, #2
   23e48:	4948      	ldr	r1, [pc, #288]	; (23f6c <vApplicationDaemonTaskStartupHook+0x1e4>)
   23e4a:	4849      	ldr	r0, [pc, #292]	; (23f70 <vApplicationDaemonTaskStartupHook+0x1e8>)
   23e4c:	4c43      	ldr	r4, [pc, #268]	; (23f5c <vApplicationDaemonTaskStartupHook+0x1d4>)
   23e4e:	47a0      	blx	r4
   23e50:	2801      	cmp	r0, #1
   23e52:	d002      	beq.n	23e5a <vApplicationDaemonTaskStartupHook+0xd2>
	SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   23e54:	4847      	ldr	r0, [pc, #284]	; (23f74 <vApplicationDaemonTaskStartupHook+0x1ec>)
   23e56:	4b2e      	ldr	r3, [pc, #184]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23e58:	4798      	blx	r3
}
snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   23e5a:	4b39      	ldr	r3, [pc, #228]	; (23f40 <vApplicationDaemonTaskStartupHook+0x1b8>)
   23e5c:	4798      	blx	r3
   23e5e:	0003      	movs	r3, r0
   23e60:	4c38      	ldr	r4, [pc, #224]	; (23f44 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23e62:	4a45      	ldr	r2, [pc, #276]	; (23f78 <vApplicationDaemonTaskStartupHook+0x1f0>)
   23e64:	2140      	movs	r1, #64	; 0x40
   23e66:	0020      	movs	r0, r4
   23e68:	4d38      	ldr	r5, [pc, #224]	; (23f4c <vApplicationDaemonTaskStartupHook+0x1c4>)
   23e6a:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23e6c:	0020      	movs	r0, r4
   23e6e:	4b28      	ldr	r3, [pc, #160]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23e70:	4798      	blx	r3


if(xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   23e72:	4b42      	ldr	r3, [pc, #264]	; (23f7c <vApplicationDaemonTaskStartupHook+0x1f4>)
   23e74:	9301      	str	r3, [sp, #4]
   23e76:	2302      	movs	r3, #2
   23e78:	9300      	str	r3, [sp, #0]
   23e7a:	2300      	movs	r3, #0
   23e7c:	22c8      	movs	r2, #200	; 0xc8
   23e7e:	0052      	lsls	r2, r2, #1
   23e80:	493f      	ldr	r1, [pc, #252]	; (23f80 <vApplicationDaemonTaskStartupHook+0x1f8>)
   23e82:	4840      	ldr	r0, [pc, #256]	; (23f84 <vApplicationDaemonTaskStartupHook+0x1fc>)
   23e84:	4c35      	ldr	r4, [pc, #212]	; (23f5c <vApplicationDaemonTaskStartupHook+0x1d4>)
   23e86:	47a0      	blx	r4
   23e88:	2801      	cmp	r0, #1
   23e8a:	d002      	beq.n	23e92 <vApplicationDaemonTaskStartupHook+0x10a>
	SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   23e8c:	483e      	ldr	r0, [pc, #248]	; (23f88 <vApplicationDaemonTaskStartupHook+0x200>)
   23e8e:	4b20      	ldr	r3, [pc, #128]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23e90:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   23e92:	4b2b      	ldr	r3, [pc, #172]	; (23f40 <vApplicationDaemonTaskStartupHook+0x1b8>)
   23e94:	4798      	blx	r3
   23e96:	0003      	movs	r3, r0
   23e98:	4c2a      	ldr	r4, [pc, #168]	; (23f44 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23e9a:	4a3c      	ldr	r2, [pc, #240]	; (23f8c <vApplicationDaemonTaskStartupHook+0x204>)
   23e9c:	2140      	movs	r1, #64	; 0x40
   23e9e:	0020      	movs	r0, r4
   23ea0:	4d2a      	ldr	r5, [pc, #168]	; (23f4c <vApplicationDaemonTaskStartupHook+0x1c4>)
   23ea2:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23ea4:	0020      	movs	r0, r4
   23ea6:	4b1a      	ldr	r3, [pc, #104]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23ea8:	4798      	blx	r3

if(xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   23eaa:	4b39      	ldr	r3, [pc, #228]	; (23f90 <vApplicationDaemonTaskStartupHook+0x208>)
   23eac:	9301      	str	r3, [sp, #4]
   23eae:	2304      	movs	r3, #4
   23eb0:	9300      	str	r3, [sp, #0]
   23eb2:	2300      	movs	r3, #0
   23eb4:	2280      	movs	r2, #128	; 0x80
   23eb6:	0052      	lsls	r2, r2, #1
   23eb8:	4936      	ldr	r1, [pc, #216]	; (23f94 <vApplicationDaemonTaskStartupHook+0x20c>)
   23eba:	4837      	ldr	r0, [pc, #220]	; (23f98 <vApplicationDaemonTaskStartupHook+0x210>)
   23ebc:	4c27      	ldr	r4, [pc, #156]	; (23f5c <vApplicationDaemonTaskStartupHook+0x1d4>)
   23ebe:	47a0      	blx	r4
   23ec0:	2801      	cmp	r0, #1
   23ec2:	d002      	beq.n	23eca <vApplicationDaemonTaskStartupHook+0x142>
	SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   23ec4:	4835      	ldr	r0, [pc, #212]	; (23f9c <vApplicationDaemonTaskStartupHook+0x214>)
   23ec6:	4b12      	ldr	r3, [pc, #72]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23ec8:	4798      	blx	r3
}
snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   23eca:	4b1d      	ldr	r3, [pc, #116]	; (23f40 <vApplicationDaemonTaskStartupHook+0x1b8>)
   23ecc:	4798      	blx	r3
   23ece:	0003      	movs	r3, r0
   23ed0:	4c1c      	ldr	r4, [pc, #112]	; (23f44 <vApplicationDaemonTaskStartupHook+0x1bc>)
   23ed2:	4a33      	ldr	r2, [pc, #204]	; (23fa0 <vApplicationDaemonTaskStartupHook+0x218>)
   23ed4:	2140      	movs	r1, #64	; 0x40
   23ed6:	0020      	movs	r0, r4
   23ed8:	4d1c      	ldr	r5, [pc, #112]	; (23f4c <vApplicationDaemonTaskStartupHook+0x1c4>)
   23eda:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   23edc:	0020      	movs	r0, r4
   23ede:	4b0c      	ldr	r3, [pc, #48]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23ee0:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
   23ee2:	2000      	movs	r0, #0
   23ee4:	4b2f      	ldr	r3, [pc, #188]	; (23fa4 <vApplicationDaemonTaskStartupHook+0x21c>)
   23ee6:	4798      	blx	r3
}
   23ee8:	b005      	add	sp, #20
   23eea:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   23eec:	482e      	ldr	r0, [pc, #184]	; (23fa8 <vApplicationDaemonTaskStartupHook+0x220>)
   23eee:	4b08      	ldr	r3, [pc, #32]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23ef0:	4798      	blx	r3
   23ef2:	e758      	b.n	23da6 <vApplicationDaemonTaskStartupHook+0x1e>
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
   23ef4:	482d      	ldr	r0, [pc, #180]	; (23fac <vApplicationDaemonTaskStartupHook+0x224>)
   23ef6:	4b06      	ldr	r3, [pc, #24]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23ef8:	4798      	blx	r3
   23efa:	e75c      	b.n	23db6 <vApplicationDaemonTaskStartupHook+0x2e>
		SerialConsoleWriteString("IMU found!\r\n");
   23efc:	482c      	ldr	r0, [pc, #176]	; (23fb0 <vApplicationDaemonTaskStartupHook+0x228>)
   23efe:	4b04      	ldr	r3, [pc, #16]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23f00:	4798      	blx	r3
   23f02:	e768      	b.n	23dd6 <vApplicationDaemonTaskStartupHook+0x4e>
		SerialConsoleWriteString("IMU initialized!\r\n");
   23f04:	482b      	ldr	r0, [pc, #172]	; (23fb4 <vApplicationDaemonTaskStartupHook+0x22c>)
   23f06:	4b02      	ldr	r3, [pc, #8]	; (23f10 <vApplicationDaemonTaskStartupHook+0x188>)
   23f08:	4798      	blx	r3
   23f0a:	e76c      	b.n	23de6 <vApplicationDaemonTaskStartupHook+0x5e>
   23f0c:	0002aab0 	.word	0x0002aab0
   23f10:	00018e8d 	.word	0x00018e8d
   23f14:	0002aad4 	.word	0x0002aad4
   23f18:	00012f69 	.word	0x00012f69
   23f1c:	0002aaec 	.word	0x0002aaec
   23f20:	000136b9 	.word	0x000136b9
   23f24:	0002ab2c 	.word	0x0002ab2c
   23f28:	000134e1 	.word	0x000134e1
   23f2c:	0001346d 	.word	0x0001346d
   23f30:	0002ab64 	.word	0x0002ab64
   23f34:	000134e9 	.word	0x000134e9
   23f38:	0002ab9c 	.word	0x0002ab9c
   23f3c:	00012ca9 	.word	0x00012ca9
   23f40:	00016761 	.word	0x00016761
   23f44:	2000559c 	.word	0x2000559c
   23f48:	0002abb8 	.word	0x0002abb8
   23f4c:	000264a5 	.word	0x000264a5
   23f50:	200041c8 	.word	0x200041c8
   23f54:	0002abdc 	.word	0x0002abdc
   23f58:	000128cd 	.word	0x000128cd
   23f5c:	00017a55 	.word	0x00017a55
   23f60:	0002abe8 	.word	0x0002abe8
   23f64:	0002ac14 	.word	0x0002ac14
   23f68:	200041d4 	.word	0x200041d4
   23f6c:	0002ac34 	.word	0x0002ac34
   23f70:	000145ad 	.word	0x000145ad
   23f74:	0002ac40 	.word	0x0002ac40
   23f78:	0002ac6c 	.word	0x0002ac6c
   23f7c:	200041d0 	.word	0x200041d0
   23f80:	0002ac8c 	.word	0x0002ac8c
   23f84:	00013841 	.word	0x00013841
   23f88:	0002ac94 	.word	0x0002ac94
   23f8c:	0002acc0 	.word	0x0002acc0
   23f90:	200041cc 	.word	0x200041cc
   23f94:	0002ace4 	.word	0x0002ace4
   23f98:	00012ab5 	.word	0x00012ab5
   23f9c:	0002acf4 	.word	0x0002acf4
   23fa0:	0002ad24 	.word	0x0002ad24
   23fa4:	000181e5 	.word	0x000181e5
   23fa8:	0002ab10 	.word	0x0002ab10
   23fac:	0002ab4c 	.word	0x0002ab4c
   23fb0:	0002ab78 	.word	0x0002ab78
   23fb4:	0002ab88 	.word	0x0002ab88

00023fb8 <vApplicationMallocFailedHook>:

#endif


void vApplicationMallocFailedHook(void)
{
   23fb8:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   23fba:	4802      	ldr	r0, [pc, #8]	; (23fc4 <vApplicationMallocFailedHook+0xc>)
   23fbc:	4b02      	ldr	r3, [pc, #8]	; (23fc8 <vApplicationMallocFailedHook+0x10>)
   23fbe:	4798      	blx	r3
   23fc0:	e7fe      	b.n	23fc0 <vApplicationMallocFailedHook+0x8>
   23fc2:	46c0      	nop			; (mov r8, r8)
   23fc4:	0002ad4c 	.word	0x0002ad4c
   23fc8:	00018e8d 	.word	0x00018e8d

00023fcc <vApplicationStackOverflowHook>:
while(1);
}

void vApplicationStackOverflowHook(void)
{
   23fcc:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   23fce:	4802      	ldr	r0, [pc, #8]	; (23fd8 <vApplicationStackOverflowHook+0xc>)
   23fd0:	4b02      	ldr	r3, [pc, #8]	; (23fdc <vApplicationStackOverflowHook+0x10>)
   23fd2:	4798      	blx	r3
   23fd4:	e7fe      	b.n	23fd4 <vApplicationStackOverflowHook+0x8>
   23fd6:	46c0      	nop			; (mov r8, r8)
   23fd8:	0002ad78 	.word	0x0002ad78
   23fdc:	00018e8d 	.word	0x00018e8d

00023fe0 <__udivsi3>:
   23fe0:	2200      	movs	r2, #0
   23fe2:	0843      	lsrs	r3, r0, #1
   23fe4:	428b      	cmp	r3, r1
   23fe6:	d374      	bcc.n	240d2 <__udivsi3+0xf2>
   23fe8:	0903      	lsrs	r3, r0, #4
   23fea:	428b      	cmp	r3, r1
   23fec:	d35f      	bcc.n	240ae <__udivsi3+0xce>
   23fee:	0a03      	lsrs	r3, r0, #8
   23ff0:	428b      	cmp	r3, r1
   23ff2:	d344      	bcc.n	2407e <__udivsi3+0x9e>
   23ff4:	0b03      	lsrs	r3, r0, #12
   23ff6:	428b      	cmp	r3, r1
   23ff8:	d328      	bcc.n	2404c <__udivsi3+0x6c>
   23ffa:	0c03      	lsrs	r3, r0, #16
   23ffc:	428b      	cmp	r3, r1
   23ffe:	d30d      	bcc.n	2401c <__udivsi3+0x3c>
   24000:	22ff      	movs	r2, #255	; 0xff
   24002:	0209      	lsls	r1, r1, #8
   24004:	ba12      	rev	r2, r2
   24006:	0c03      	lsrs	r3, r0, #16
   24008:	428b      	cmp	r3, r1
   2400a:	d302      	bcc.n	24012 <__udivsi3+0x32>
   2400c:	1212      	asrs	r2, r2, #8
   2400e:	0209      	lsls	r1, r1, #8
   24010:	d065      	beq.n	240de <__udivsi3+0xfe>
   24012:	0b03      	lsrs	r3, r0, #12
   24014:	428b      	cmp	r3, r1
   24016:	d319      	bcc.n	2404c <__udivsi3+0x6c>
   24018:	e000      	b.n	2401c <__udivsi3+0x3c>
   2401a:	0a09      	lsrs	r1, r1, #8
   2401c:	0bc3      	lsrs	r3, r0, #15
   2401e:	428b      	cmp	r3, r1
   24020:	d301      	bcc.n	24026 <__udivsi3+0x46>
   24022:	03cb      	lsls	r3, r1, #15
   24024:	1ac0      	subs	r0, r0, r3
   24026:	4152      	adcs	r2, r2
   24028:	0b83      	lsrs	r3, r0, #14
   2402a:	428b      	cmp	r3, r1
   2402c:	d301      	bcc.n	24032 <__udivsi3+0x52>
   2402e:	038b      	lsls	r3, r1, #14
   24030:	1ac0      	subs	r0, r0, r3
   24032:	4152      	adcs	r2, r2
   24034:	0b43      	lsrs	r3, r0, #13
   24036:	428b      	cmp	r3, r1
   24038:	d301      	bcc.n	2403e <__udivsi3+0x5e>
   2403a:	034b      	lsls	r3, r1, #13
   2403c:	1ac0      	subs	r0, r0, r3
   2403e:	4152      	adcs	r2, r2
   24040:	0b03      	lsrs	r3, r0, #12
   24042:	428b      	cmp	r3, r1
   24044:	d301      	bcc.n	2404a <__udivsi3+0x6a>
   24046:	030b      	lsls	r3, r1, #12
   24048:	1ac0      	subs	r0, r0, r3
   2404a:	4152      	adcs	r2, r2
   2404c:	0ac3      	lsrs	r3, r0, #11
   2404e:	428b      	cmp	r3, r1
   24050:	d301      	bcc.n	24056 <__udivsi3+0x76>
   24052:	02cb      	lsls	r3, r1, #11
   24054:	1ac0      	subs	r0, r0, r3
   24056:	4152      	adcs	r2, r2
   24058:	0a83      	lsrs	r3, r0, #10
   2405a:	428b      	cmp	r3, r1
   2405c:	d301      	bcc.n	24062 <__udivsi3+0x82>
   2405e:	028b      	lsls	r3, r1, #10
   24060:	1ac0      	subs	r0, r0, r3
   24062:	4152      	adcs	r2, r2
   24064:	0a43      	lsrs	r3, r0, #9
   24066:	428b      	cmp	r3, r1
   24068:	d301      	bcc.n	2406e <__udivsi3+0x8e>
   2406a:	024b      	lsls	r3, r1, #9
   2406c:	1ac0      	subs	r0, r0, r3
   2406e:	4152      	adcs	r2, r2
   24070:	0a03      	lsrs	r3, r0, #8
   24072:	428b      	cmp	r3, r1
   24074:	d301      	bcc.n	2407a <__udivsi3+0x9a>
   24076:	020b      	lsls	r3, r1, #8
   24078:	1ac0      	subs	r0, r0, r3
   2407a:	4152      	adcs	r2, r2
   2407c:	d2cd      	bcs.n	2401a <__udivsi3+0x3a>
   2407e:	09c3      	lsrs	r3, r0, #7
   24080:	428b      	cmp	r3, r1
   24082:	d301      	bcc.n	24088 <__udivsi3+0xa8>
   24084:	01cb      	lsls	r3, r1, #7
   24086:	1ac0      	subs	r0, r0, r3
   24088:	4152      	adcs	r2, r2
   2408a:	0983      	lsrs	r3, r0, #6
   2408c:	428b      	cmp	r3, r1
   2408e:	d301      	bcc.n	24094 <__udivsi3+0xb4>
   24090:	018b      	lsls	r3, r1, #6
   24092:	1ac0      	subs	r0, r0, r3
   24094:	4152      	adcs	r2, r2
   24096:	0943      	lsrs	r3, r0, #5
   24098:	428b      	cmp	r3, r1
   2409a:	d301      	bcc.n	240a0 <__udivsi3+0xc0>
   2409c:	014b      	lsls	r3, r1, #5
   2409e:	1ac0      	subs	r0, r0, r3
   240a0:	4152      	adcs	r2, r2
   240a2:	0903      	lsrs	r3, r0, #4
   240a4:	428b      	cmp	r3, r1
   240a6:	d301      	bcc.n	240ac <__udivsi3+0xcc>
   240a8:	010b      	lsls	r3, r1, #4
   240aa:	1ac0      	subs	r0, r0, r3
   240ac:	4152      	adcs	r2, r2
   240ae:	08c3      	lsrs	r3, r0, #3
   240b0:	428b      	cmp	r3, r1
   240b2:	d301      	bcc.n	240b8 <__udivsi3+0xd8>
   240b4:	00cb      	lsls	r3, r1, #3
   240b6:	1ac0      	subs	r0, r0, r3
   240b8:	4152      	adcs	r2, r2
   240ba:	0883      	lsrs	r3, r0, #2
   240bc:	428b      	cmp	r3, r1
   240be:	d301      	bcc.n	240c4 <__udivsi3+0xe4>
   240c0:	008b      	lsls	r3, r1, #2
   240c2:	1ac0      	subs	r0, r0, r3
   240c4:	4152      	adcs	r2, r2
   240c6:	0843      	lsrs	r3, r0, #1
   240c8:	428b      	cmp	r3, r1
   240ca:	d301      	bcc.n	240d0 <__udivsi3+0xf0>
   240cc:	004b      	lsls	r3, r1, #1
   240ce:	1ac0      	subs	r0, r0, r3
   240d0:	4152      	adcs	r2, r2
   240d2:	1a41      	subs	r1, r0, r1
   240d4:	d200      	bcs.n	240d8 <__udivsi3+0xf8>
   240d6:	4601      	mov	r1, r0
   240d8:	4152      	adcs	r2, r2
   240da:	4610      	mov	r0, r2
   240dc:	4770      	bx	lr
   240de:	e7ff      	b.n	240e0 <__udivsi3+0x100>
   240e0:	b501      	push	{r0, lr}
   240e2:	2000      	movs	r0, #0
   240e4:	f000 f8f0 	bl	242c8 <__aeabi_idiv0>
   240e8:	bd02      	pop	{r1, pc}
   240ea:	46c0      	nop			; (mov r8, r8)

000240ec <__aeabi_uidivmod>:
   240ec:	2900      	cmp	r1, #0
   240ee:	d0f7      	beq.n	240e0 <__udivsi3+0x100>
   240f0:	e776      	b.n	23fe0 <__udivsi3>
   240f2:	4770      	bx	lr

000240f4 <__divsi3>:
   240f4:	4603      	mov	r3, r0
   240f6:	430b      	orrs	r3, r1
   240f8:	d47f      	bmi.n	241fa <__divsi3+0x106>
   240fa:	2200      	movs	r2, #0
   240fc:	0843      	lsrs	r3, r0, #1
   240fe:	428b      	cmp	r3, r1
   24100:	d374      	bcc.n	241ec <__divsi3+0xf8>
   24102:	0903      	lsrs	r3, r0, #4
   24104:	428b      	cmp	r3, r1
   24106:	d35f      	bcc.n	241c8 <__divsi3+0xd4>
   24108:	0a03      	lsrs	r3, r0, #8
   2410a:	428b      	cmp	r3, r1
   2410c:	d344      	bcc.n	24198 <__divsi3+0xa4>
   2410e:	0b03      	lsrs	r3, r0, #12
   24110:	428b      	cmp	r3, r1
   24112:	d328      	bcc.n	24166 <__divsi3+0x72>
   24114:	0c03      	lsrs	r3, r0, #16
   24116:	428b      	cmp	r3, r1
   24118:	d30d      	bcc.n	24136 <__divsi3+0x42>
   2411a:	22ff      	movs	r2, #255	; 0xff
   2411c:	0209      	lsls	r1, r1, #8
   2411e:	ba12      	rev	r2, r2
   24120:	0c03      	lsrs	r3, r0, #16
   24122:	428b      	cmp	r3, r1
   24124:	d302      	bcc.n	2412c <__divsi3+0x38>
   24126:	1212      	asrs	r2, r2, #8
   24128:	0209      	lsls	r1, r1, #8
   2412a:	d065      	beq.n	241f8 <__divsi3+0x104>
   2412c:	0b03      	lsrs	r3, r0, #12
   2412e:	428b      	cmp	r3, r1
   24130:	d319      	bcc.n	24166 <__divsi3+0x72>
   24132:	e000      	b.n	24136 <__divsi3+0x42>
   24134:	0a09      	lsrs	r1, r1, #8
   24136:	0bc3      	lsrs	r3, r0, #15
   24138:	428b      	cmp	r3, r1
   2413a:	d301      	bcc.n	24140 <__divsi3+0x4c>
   2413c:	03cb      	lsls	r3, r1, #15
   2413e:	1ac0      	subs	r0, r0, r3
   24140:	4152      	adcs	r2, r2
   24142:	0b83      	lsrs	r3, r0, #14
   24144:	428b      	cmp	r3, r1
   24146:	d301      	bcc.n	2414c <__divsi3+0x58>
   24148:	038b      	lsls	r3, r1, #14
   2414a:	1ac0      	subs	r0, r0, r3
   2414c:	4152      	adcs	r2, r2
   2414e:	0b43      	lsrs	r3, r0, #13
   24150:	428b      	cmp	r3, r1
   24152:	d301      	bcc.n	24158 <__divsi3+0x64>
   24154:	034b      	lsls	r3, r1, #13
   24156:	1ac0      	subs	r0, r0, r3
   24158:	4152      	adcs	r2, r2
   2415a:	0b03      	lsrs	r3, r0, #12
   2415c:	428b      	cmp	r3, r1
   2415e:	d301      	bcc.n	24164 <__divsi3+0x70>
   24160:	030b      	lsls	r3, r1, #12
   24162:	1ac0      	subs	r0, r0, r3
   24164:	4152      	adcs	r2, r2
   24166:	0ac3      	lsrs	r3, r0, #11
   24168:	428b      	cmp	r3, r1
   2416a:	d301      	bcc.n	24170 <__divsi3+0x7c>
   2416c:	02cb      	lsls	r3, r1, #11
   2416e:	1ac0      	subs	r0, r0, r3
   24170:	4152      	adcs	r2, r2
   24172:	0a83      	lsrs	r3, r0, #10
   24174:	428b      	cmp	r3, r1
   24176:	d301      	bcc.n	2417c <__divsi3+0x88>
   24178:	028b      	lsls	r3, r1, #10
   2417a:	1ac0      	subs	r0, r0, r3
   2417c:	4152      	adcs	r2, r2
   2417e:	0a43      	lsrs	r3, r0, #9
   24180:	428b      	cmp	r3, r1
   24182:	d301      	bcc.n	24188 <__divsi3+0x94>
   24184:	024b      	lsls	r3, r1, #9
   24186:	1ac0      	subs	r0, r0, r3
   24188:	4152      	adcs	r2, r2
   2418a:	0a03      	lsrs	r3, r0, #8
   2418c:	428b      	cmp	r3, r1
   2418e:	d301      	bcc.n	24194 <__divsi3+0xa0>
   24190:	020b      	lsls	r3, r1, #8
   24192:	1ac0      	subs	r0, r0, r3
   24194:	4152      	adcs	r2, r2
   24196:	d2cd      	bcs.n	24134 <__divsi3+0x40>
   24198:	09c3      	lsrs	r3, r0, #7
   2419a:	428b      	cmp	r3, r1
   2419c:	d301      	bcc.n	241a2 <__divsi3+0xae>
   2419e:	01cb      	lsls	r3, r1, #7
   241a0:	1ac0      	subs	r0, r0, r3
   241a2:	4152      	adcs	r2, r2
   241a4:	0983      	lsrs	r3, r0, #6
   241a6:	428b      	cmp	r3, r1
   241a8:	d301      	bcc.n	241ae <__divsi3+0xba>
   241aa:	018b      	lsls	r3, r1, #6
   241ac:	1ac0      	subs	r0, r0, r3
   241ae:	4152      	adcs	r2, r2
   241b0:	0943      	lsrs	r3, r0, #5
   241b2:	428b      	cmp	r3, r1
   241b4:	d301      	bcc.n	241ba <__divsi3+0xc6>
   241b6:	014b      	lsls	r3, r1, #5
   241b8:	1ac0      	subs	r0, r0, r3
   241ba:	4152      	adcs	r2, r2
   241bc:	0903      	lsrs	r3, r0, #4
   241be:	428b      	cmp	r3, r1
   241c0:	d301      	bcc.n	241c6 <__divsi3+0xd2>
   241c2:	010b      	lsls	r3, r1, #4
   241c4:	1ac0      	subs	r0, r0, r3
   241c6:	4152      	adcs	r2, r2
   241c8:	08c3      	lsrs	r3, r0, #3
   241ca:	428b      	cmp	r3, r1
   241cc:	d301      	bcc.n	241d2 <__divsi3+0xde>
   241ce:	00cb      	lsls	r3, r1, #3
   241d0:	1ac0      	subs	r0, r0, r3
   241d2:	4152      	adcs	r2, r2
   241d4:	0883      	lsrs	r3, r0, #2
   241d6:	428b      	cmp	r3, r1
   241d8:	d301      	bcc.n	241de <__divsi3+0xea>
   241da:	008b      	lsls	r3, r1, #2
   241dc:	1ac0      	subs	r0, r0, r3
   241de:	4152      	adcs	r2, r2
   241e0:	0843      	lsrs	r3, r0, #1
   241e2:	428b      	cmp	r3, r1
   241e4:	d301      	bcc.n	241ea <__divsi3+0xf6>
   241e6:	004b      	lsls	r3, r1, #1
   241e8:	1ac0      	subs	r0, r0, r3
   241ea:	4152      	adcs	r2, r2
   241ec:	1a41      	subs	r1, r0, r1
   241ee:	d200      	bcs.n	241f2 <__divsi3+0xfe>
   241f0:	4601      	mov	r1, r0
   241f2:	4152      	adcs	r2, r2
   241f4:	4610      	mov	r0, r2
   241f6:	4770      	bx	lr
   241f8:	e05d      	b.n	242b6 <__divsi3+0x1c2>
   241fa:	0fca      	lsrs	r2, r1, #31
   241fc:	d000      	beq.n	24200 <__divsi3+0x10c>
   241fe:	4249      	negs	r1, r1
   24200:	1003      	asrs	r3, r0, #32
   24202:	d300      	bcc.n	24206 <__divsi3+0x112>
   24204:	4240      	negs	r0, r0
   24206:	4053      	eors	r3, r2
   24208:	2200      	movs	r2, #0
   2420a:	469c      	mov	ip, r3
   2420c:	0903      	lsrs	r3, r0, #4
   2420e:	428b      	cmp	r3, r1
   24210:	d32d      	bcc.n	2426e <__divsi3+0x17a>
   24212:	0a03      	lsrs	r3, r0, #8
   24214:	428b      	cmp	r3, r1
   24216:	d312      	bcc.n	2423e <__divsi3+0x14a>
   24218:	22fc      	movs	r2, #252	; 0xfc
   2421a:	0189      	lsls	r1, r1, #6
   2421c:	ba12      	rev	r2, r2
   2421e:	0a03      	lsrs	r3, r0, #8
   24220:	428b      	cmp	r3, r1
   24222:	d30c      	bcc.n	2423e <__divsi3+0x14a>
   24224:	0189      	lsls	r1, r1, #6
   24226:	1192      	asrs	r2, r2, #6
   24228:	428b      	cmp	r3, r1
   2422a:	d308      	bcc.n	2423e <__divsi3+0x14a>
   2422c:	0189      	lsls	r1, r1, #6
   2422e:	1192      	asrs	r2, r2, #6
   24230:	428b      	cmp	r3, r1
   24232:	d304      	bcc.n	2423e <__divsi3+0x14a>
   24234:	0189      	lsls	r1, r1, #6
   24236:	d03a      	beq.n	242ae <__divsi3+0x1ba>
   24238:	1192      	asrs	r2, r2, #6
   2423a:	e000      	b.n	2423e <__divsi3+0x14a>
   2423c:	0989      	lsrs	r1, r1, #6
   2423e:	09c3      	lsrs	r3, r0, #7
   24240:	428b      	cmp	r3, r1
   24242:	d301      	bcc.n	24248 <__divsi3+0x154>
   24244:	01cb      	lsls	r3, r1, #7
   24246:	1ac0      	subs	r0, r0, r3
   24248:	4152      	adcs	r2, r2
   2424a:	0983      	lsrs	r3, r0, #6
   2424c:	428b      	cmp	r3, r1
   2424e:	d301      	bcc.n	24254 <__divsi3+0x160>
   24250:	018b      	lsls	r3, r1, #6
   24252:	1ac0      	subs	r0, r0, r3
   24254:	4152      	adcs	r2, r2
   24256:	0943      	lsrs	r3, r0, #5
   24258:	428b      	cmp	r3, r1
   2425a:	d301      	bcc.n	24260 <__divsi3+0x16c>
   2425c:	014b      	lsls	r3, r1, #5
   2425e:	1ac0      	subs	r0, r0, r3
   24260:	4152      	adcs	r2, r2
   24262:	0903      	lsrs	r3, r0, #4
   24264:	428b      	cmp	r3, r1
   24266:	d301      	bcc.n	2426c <__divsi3+0x178>
   24268:	010b      	lsls	r3, r1, #4
   2426a:	1ac0      	subs	r0, r0, r3
   2426c:	4152      	adcs	r2, r2
   2426e:	08c3      	lsrs	r3, r0, #3
   24270:	428b      	cmp	r3, r1
   24272:	d301      	bcc.n	24278 <__divsi3+0x184>
   24274:	00cb      	lsls	r3, r1, #3
   24276:	1ac0      	subs	r0, r0, r3
   24278:	4152      	adcs	r2, r2
   2427a:	0883      	lsrs	r3, r0, #2
   2427c:	428b      	cmp	r3, r1
   2427e:	d301      	bcc.n	24284 <__divsi3+0x190>
   24280:	008b      	lsls	r3, r1, #2
   24282:	1ac0      	subs	r0, r0, r3
   24284:	4152      	adcs	r2, r2
   24286:	d2d9      	bcs.n	2423c <__divsi3+0x148>
   24288:	0843      	lsrs	r3, r0, #1
   2428a:	428b      	cmp	r3, r1
   2428c:	d301      	bcc.n	24292 <__divsi3+0x19e>
   2428e:	004b      	lsls	r3, r1, #1
   24290:	1ac0      	subs	r0, r0, r3
   24292:	4152      	adcs	r2, r2
   24294:	1a41      	subs	r1, r0, r1
   24296:	d200      	bcs.n	2429a <__divsi3+0x1a6>
   24298:	4601      	mov	r1, r0
   2429a:	4663      	mov	r3, ip
   2429c:	4152      	adcs	r2, r2
   2429e:	105b      	asrs	r3, r3, #1
   242a0:	4610      	mov	r0, r2
   242a2:	d301      	bcc.n	242a8 <__divsi3+0x1b4>
   242a4:	4240      	negs	r0, r0
   242a6:	2b00      	cmp	r3, #0
   242a8:	d500      	bpl.n	242ac <__divsi3+0x1b8>
   242aa:	4249      	negs	r1, r1
   242ac:	4770      	bx	lr
   242ae:	4663      	mov	r3, ip
   242b0:	105b      	asrs	r3, r3, #1
   242b2:	d300      	bcc.n	242b6 <__divsi3+0x1c2>
   242b4:	4240      	negs	r0, r0
   242b6:	b501      	push	{r0, lr}
   242b8:	2000      	movs	r0, #0
   242ba:	f000 f805 	bl	242c8 <__aeabi_idiv0>
   242be:	bd02      	pop	{r1, pc}

000242c0 <__aeabi_idivmod>:
   242c0:	2900      	cmp	r1, #0
   242c2:	d0f8      	beq.n	242b6 <__divsi3+0x1c2>
   242c4:	e716      	b.n	240f4 <__divsi3>
   242c6:	4770      	bx	lr

000242c8 <__aeabi_idiv0>:
   242c8:	4770      	bx	lr
   242ca:	46c0      	nop			; (mov r8, r8)

000242cc <__aeabi_lmul>:
   242cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   242ce:	46ce      	mov	lr, r9
   242d0:	4647      	mov	r7, r8
   242d2:	0415      	lsls	r5, r2, #16
   242d4:	0c2d      	lsrs	r5, r5, #16
   242d6:	002e      	movs	r6, r5
   242d8:	b580      	push	{r7, lr}
   242da:	0407      	lsls	r7, r0, #16
   242dc:	0c14      	lsrs	r4, r2, #16
   242de:	0c3f      	lsrs	r7, r7, #16
   242e0:	4699      	mov	r9, r3
   242e2:	0c03      	lsrs	r3, r0, #16
   242e4:	437e      	muls	r6, r7
   242e6:	435d      	muls	r5, r3
   242e8:	4367      	muls	r7, r4
   242ea:	4363      	muls	r3, r4
   242ec:	197f      	adds	r7, r7, r5
   242ee:	0c34      	lsrs	r4, r6, #16
   242f0:	19e4      	adds	r4, r4, r7
   242f2:	469c      	mov	ip, r3
   242f4:	42a5      	cmp	r5, r4
   242f6:	d903      	bls.n	24300 <__aeabi_lmul+0x34>
   242f8:	2380      	movs	r3, #128	; 0x80
   242fa:	025b      	lsls	r3, r3, #9
   242fc:	4698      	mov	r8, r3
   242fe:	44c4      	add	ip, r8
   24300:	464b      	mov	r3, r9
   24302:	4351      	muls	r1, r2
   24304:	4343      	muls	r3, r0
   24306:	0436      	lsls	r6, r6, #16
   24308:	0c36      	lsrs	r6, r6, #16
   2430a:	0c25      	lsrs	r5, r4, #16
   2430c:	0424      	lsls	r4, r4, #16
   2430e:	4465      	add	r5, ip
   24310:	19a4      	adds	r4, r4, r6
   24312:	1859      	adds	r1, r3, r1
   24314:	1949      	adds	r1, r1, r5
   24316:	0020      	movs	r0, r4
   24318:	bc0c      	pop	{r2, r3}
   2431a:	4690      	mov	r8, r2
   2431c:	4699      	mov	r9, r3
   2431e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024320 <__aeabi_fdiv>:
   24320:	b5f0      	push	{r4, r5, r6, r7, lr}
   24322:	4657      	mov	r7, sl
   24324:	464e      	mov	r6, r9
   24326:	46de      	mov	lr, fp
   24328:	4645      	mov	r5, r8
   2432a:	b5e0      	push	{r5, r6, r7, lr}
   2432c:	0244      	lsls	r4, r0, #9
   2432e:	0043      	lsls	r3, r0, #1
   24330:	0fc6      	lsrs	r6, r0, #31
   24332:	b083      	sub	sp, #12
   24334:	1c0f      	adds	r7, r1, #0
   24336:	0a64      	lsrs	r4, r4, #9
   24338:	0e1b      	lsrs	r3, r3, #24
   2433a:	46b2      	mov	sl, r6
   2433c:	d053      	beq.n	243e6 <__aeabi_fdiv+0xc6>
   2433e:	2bff      	cmp	r3, #255	; 0xff
   24340:	d027      	beq.n	24392 <__aeabi_fdiv+0x72>
   24342:	2280      	movs	r2, #128	; 0x80
   24344:	00e4      	lsls	r4, r4, #3
   24346:	04d2      	lsls	r2, r2, #19
   24348:	4314      	orrs	r4, r2
   2434a:	227f      	movs	r2, #127	; 0x7f
   2434c:	4252      	negs	r2, r2
   2434e:	4690      	mov	r8, r2
   24350:	4498      	add	r8, r3
   24352:	2300      	movs	r3, #0
   24354:	4699      	mov	r9, r3
   24356:	469b      	mov	fp, r3
   24358:	027d      	lsls	r5, r7, #9
   2435a:	0078      	lsls	r0, r7, #1
   2435c:	0ffb      	lsrs	r3, r7, #31
   2435e:	0a6d      	lsrs	r5, r5, #9
   24360:	0e00      	lsrs	r0, r0, #24
   24362:	9300      	str	r3, [sp, #0]
   24364:	d024      	beq.n	243b0 <__aeabi_fdiv+0x90>
   24366:	28ff      	cmp	r0, #255	; 0xff
   24368:	d046      	beq.n	243f8 <__aeabi_fdiv+0xd8>
   2436a:	2380      	movs	r3, #128	; 0x80
   2436c:	2100      	movs	r1, #0
   2436e:	00ed      	lsls	r5, r5, #3
   24370:	04db      	lsls	r3, r3, #19
   24372:	431d      	orrs	r5, r3
   24374:	387f      	subs	r0, #127	; 0x7f
   24376:	4647      	mov	r7, r8
   24378:	1a38      	subs	r0, r7, r0
   2437a:	464f      	mov	r7, r9
   2437c:	430f      	orrs	r7, r1
   2437e:	00bf      	lsls	r7, r7, #2
   24380:	46b9      	mov	r9, r7
   24382:	0033      	movs	r3, r6
   24384:	9a00      	ldr	r2, [sp, #0]
   24386:	4f87      	ldr	r7, [pc, #540]	; (245a4 <__aeabi_fdiv+0x284>)
   24388:	4053      	eors	r3, r2
   2438a:	464a      	mov	r2, r9
   2438c:	58ba      	ldr	r2, [r7, r2]
   2438e:	9301      	str	r3, [sp, #4]
   24390:	4697      	mov	pc, r2
   24392:	2c00      	cmp	r4, #0
   24394:	d14e      	bne.n	24434 <__aeabi_fdiv+0x114>
   24396:	2308      	movs	r3, #8
   24398:	4699      	mov	r9, r3
   2439a:	33f7      	adds	r3, #247	; 0xf7
   2439c:	4698      	mov	r8, r3
   2439e:	3bfd      	subs	r3, #253	; 0xfd
   243a0:	469b      	mov	fp, r3
   243a2:	027d      	lsls	r5, r7, #9
   243a4:	0078      	lsls	r0, r7, #1
   243a6:	0ffb      	lsrs	r3, r7, #31
   243a8:	0a6d      	lsrs	r5, r5, #9
   243aa:	0e00      	lsrs	r0, r0, #24
   243ac:	9300      	str	r3, [sp, #0]
   243ae:	d1da      	bne.n	24366 <__aeabi_fdiv+0x46>
   243b0:	2d00      	cmp	r5, #0
   243b2:	d126      	bne.n	24402 <__aeabi_fdiv+0xe2>
   243b4:	2000      	movs	r0, #0
   243b6:	2101      	movs	r1, #1
   243b8:	0033      	movs	r3, r6
   243ba:	9a00      	ldr	r2, [sp, #0]
   243bc:	4f7a      	ldr	r7, [pc, #488]	; (245a8 <__aeabi_fdiv+0x288>)
   243be:	4053      	eors	r3, r2
   243c0:	4642      	mov	r2, r8
   243c2:	1a10      	subs	r0, r2, r0
   243c4:	464a      	mov	r2, r9
   243c6:	430a      	orrs	r2, r1
   243c8:	0092      	lsls	r2, r2, #2
   243ca:	58ba      	ldr	r2, [r7, r2]
   243cc:	001d      	movs	r5, r3
   243ce:	4697      	mov	pc, r2
   243d0:	9b00      	ldr	r3, [sp, #0]
   243d2:	002c      	movs	r4, r5
   243d4:	469a      	mov	sl, r3
   243d6:	468b      	mov	fp, r1
   243d8:	465b      	mov	r3, fp
   243da:	2b02      	cmp	r3, #2
   243dc:	d131      	bne.n	24442 <__aeabi_fdiv+0x122>
   243de:	4653      	mov	r3, sl
   243e0:	21ff      	movs	r1, #255	; 0xff
   243e2:	2400      	movs	r4, #0
   243e4:	e038      	b.n	24458 <__aeabi_fdiv+0x138>
   243e6:	2c00      	cmp	r4, #0
   243e8:	d117      	bne.n	2441a <__aeabi_fdiv+0xfa>
   243ea:	2304      	movs	r3, #4
   243ec:	4699      	mov	r9, r3
   243ee:	2300      	movs	r3, #0
   243f0:	4698      	mov	r8, r3
   243f2:	3301      	adds	r3, #1
   243f4:	469b      	mov	fp, r3
   243f6:	e7af      	b.n	24358 <__aeabi_fdiv+0x38>
   243f8:	20ff      	movs	r0, #255	; 0xff
   243fa:	2d00      	cmp	r5, #0
   243fc:	d10b      	bne.n	24416 <__aeabi_fdiv+0xf6>
   243fe:	2102      	movs	r1, #2
   24400:	e7da      	b.n	243b8 <__aeabi_fdiv+0x98>
   24402:	0028      	movs	r0, r5
   24404:	f001 feaa 	bl	2615c <__clzsi2>
   24408:	1f43      	subs	r3, r0, #5
   2440a:	409d      	lsls	r5, r3
   2440c:	2376      	movs	r3, #118	; 0x76
   2440e:	425b      	negs	r3, r3
   24410:	1a18      	subs	r0, r3, r0
   24412:	2100      	movs	r1, #0
   24414:	e7af      	b.n	24376 <__aeabi_fdiv+0x56>
   24416:	2103      	movs	r1, #3
   24418:	e7ad      	b.n	24376 <__aeabi_fdiv+0x56>
   2441a:	0020      	movs	r0, r4
   2441c:	f001 fe9e 	bl	2615c <__clzsi2>
   24420:	1f43      	subs	r3, r0, #5
   24422:	409c      	lsls	r4, r3
   24424:	2376      	movs	r3, #118	; 0x76
   24426:	425b      	negs	r3, r3
   24428:	1a1b      	subs	r3, r3, r0
   2442a:	4698      	mov	r8, r3
   2442c:	2300      	movs	r3, #0
   2442e:	4699      	mov	r9, r3
   24430:	469b      	mov	fp, r3
   24432:	e791      	b.n	24358 <__aeabi_fdiv+0x38>
   24434:	230c      	movs	r3, #12
   24436:	4699      	mov	r9, r3
   24438:	33f3      	adds	r3, #243	; 0xf3
   2443a:	4698      	mov	r8, r3
   2443c:	3bfc      	subs	r3, #252	; 0xfc
   2443e:	469b      	mov	fp, r3
   24440:	e78a      	b.n	24358 <__aeabi_fdiv+0x38>
   24442:	2b03      	cmp	r3, #3
   24444:	d100      	bne.n	24448 <__aeabi_fdiv+0x128>
   24446:	e0a5      	b.n	24594 <__aeabi_fdiv+0x274>
   24448:	4655      	mov	r5, sl
   2444a:	2b01      	cmp	r3, #1
   2444c:	d000      	beq.n	24450 <__aeabi_fdiv+0x130>
   2444e:	e081      	b.n	24554 <__aeabi_fdiv+0x234>
   24450:	2301      	movs	r3, #1
   24452:	2100      	movs	r1, #0
   24454:	2400      	movs	r4, #0
   24456:	402b      	ands	r3, r5
   24458:	0264      	lsls	r4, r4, #9
   2445a:	05c9      	lsls	r1, r1, #23
   2445c:	0a60      	lsrs	r0, r4, #9
   2445e:	07db      	lsls	r3, r3, #31
   24460:	4308      	orrs	r0, r1
   24462:	4318      	orrs	r0, r3
   24464:	b003      	add	sp, #12
   24466:	bc3c      	pop	{r2, r3, r4, r5}
   24468:	4690      	mov	r8, r2
   2446a:	4699      	mov	r9, r3
   2446c:	46a2      	mov	sl, r4
   2446e:	46ab      	mov	fp, r5
   24470:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24472:	2480      	movs	r4, #128	; 0x80
   24474:	2300      	movs	r3, #0
   24476:	03e4      	lsls	r4, r4, #15
   24478:	21ff      	movs	r1, #255	; 0xff
   2447a:	e7ed      	b.n	24458 <__aeabi_fdiv+0x138>
   2447c:	21ff      	movs	r1, #255	; 0xff
   2447e:	2400      	movs	r4, #0
   24480:	e7ea      	b.n	24458 <__aeabi_fdiv+0x138>
   24482:	2301      	movs	r3, #1
   24484:	1a59      	subs	r1, r3, r1
   24486:	291b      	cmp	r1, #27
   24488:	dd66      	ble.n	24558 <__aeabi_fdiv+0x238>
   2448a:	9a01      	ldr	r2, [sp, #4]
   2448c:	4013      	ands	r3, r2
   2448e:	2100      	movs	r1, #0
   24490:	2400      	movs	r4, #0
   24492:	e7e1      	b.n	24458 <__aeabi_fdiv+0x138>
   24494:	2380      	movs	r3, #128	; 0x80
   24496:	03db      	lsls	r3, r3, #15
   24498:	421c      	tst	r4, r3
   2449a:	d038      	beq.n	2450e <__aeabi_fdiv+0x1ee>
   2449c:	421d      	tst	r5, r3
   2449e:	d051      	beq.n	24544 <__aeabi_fdiv+0x224>
   244a0:	431c      	orrs	r4, r3
   244a2:	0264      	lsls	r4, r4, #9
   244a4:	0a64      	lsrs	r4, r4, #9
   244a6:	0033      	movs	r3, r6
   244a8:	21ff      	movs	r1, #255	; 0xff
   244aa:	e7d5      	b.n	24458 <__aeabi_fdiv+0x138>
   244ac:	0163      	lsls	r3, r4, #5
   244ae:	016c      	lsls	r4, r5, #5
   244b0:	42a3      	cmp	r3, r4
   244b2:	d23b      	bcs.n	2452c <__aeabi_fdiv+0x20c>
   244b4:	261b      	movs	r6, #27
   244b6:	2100      	movs	r1, #0
   244b8:	3801      	subs	r0, #1
   244ba:	2501      	movs	r5, #1
   244bc:	001f      	movs	r7, r3
   244be:	0049      	lsls	r1, r1, #1
   244c0:	005b      	lsls	r3, r3, #1
   244c2:	2f00      	cmp	r7, #0
   244c4:	db01      	blt.n	244ca <__aeabi_fdiv+0x1aa>
   244c6:	429c      	cmp	r4, r3
   244c8:	d801      	bhi.n	244ce <__aeabi_fdiv+0x1ae>
   244ca:	1b1b      	subs	r3, r3, r4
   244cc:	4329      	orrs	r1, r5
   244ce:	3e01      	subs	r6, #1
   244d0:	2e00      	cmp	r6, #0
   244d2:	d1f3      	bne.n	244bc <__aeabi_fdiv+0x19c>
   244d4:	001c      	movs	r4, r3
   244d6:	1e63      	subs	r3, r4, #1
   244d8:	419c      	sbcs	r4, r3
   244da:	430c      	orrs	r4, r1
   244dc:	0001      	movs	r1, r0
   244de:	317f      	adds	r1, #127	; 0x7f
   244e0:	2900      	cmp	r1, #0
   244e2:	ddce      	ble.n	24482 <__aeabi_fdiv+0x162>
   244e4:	0763      	lsls	r3, r4, #29
   244e6:	d004      	beq.n	244f2 <__aeabi_fdiv+0x1d2>
   244e8:	230f      	movs	r3, #15
   244ea:	4023      	ands	r3, r4
   244ec:	2b04      	cmp	r3, #4
   244ee:	d000      	beq.n	244f2 <__aeabi_fdiv+0x1d2>
   244f0:	3404      	adds	r4, #4
   244f2:	0123      	lsls	r3, r4, #4
   244f4:	d503      	bpl.n	244fe <__aeabi_fdiv+0x1de>
   244f6:	0001      	movs	r1, r0
   244f8:	4b2c      	ldr	r3, [pc, #176]	; (245ac <__aeabi_fdiv+0x28c>)
   244fa:	3180      	adds	r1, #128	; 0x80
   244fc:	401c      	ands	r4, r3
   244fe:	29fe      	cmp	r1, #254	; 0xfe
   24500:	dd0d      	ble.n	2451e <__aeabi_fdiv+0x1fe>
   24502:	2301      	movs	r3, #1
   24504:	9a01      	ldr	r2, [sp, #4]
   24506:	21ff      	movs	r1, #255	; 0xff
   24508:	4013      	ands	r3, r2
   2450a:	2400      	movs	r4, #0
   2450c:	e7a4      	b.n	24458 <__aeabi_fdiv+0x138>
   2450e:	2380      	movs	r3, #128	; 0x80
   24510:	03db      	lsls	r3, r3, #15
   24512:	431c      	orrs	r4, r3
   24514:	0264      	lsls	r4, r4, #9
   24516:	0a64      	lsrs	r4, r4, #9
   24518:	0033      	movs	r3, r6
   2451a:	21ff      	movs	r1, #255	; 0xff
   2451c:	e79c      	b.n	24458 <__aeabi_fdiv+0x138>
   2451e:	2301      	movs	r3, #1
   24520:	9a01      	ldr	r2, [sp, #4]
   24522:	01a4      	lsls	r4, r4, #6
   24524:	0a64      	lsrs	r4, r4, #9
   24526:	b2c9      	uxtb	r1, r1
   24528:	4013      	ands	r3, r2
   2452a:	e795      	b.n	24458 <__aeabi_fdiv+0x138>
   2452c:	1b1b      	subs	r3, r3, r4
   2452e:	261a      	movs	r6, #26
   24530:	2101      	movs	r1, #1
   24532:	e7c2      	b.n	244ba <__aeabi_fdiv+0x19a>
   24534:	9b00      	ldr	r3, [sp, #0]
   24536:	468b      	mov	fp, r1
   24538:	469a      	mov	sl, r3
   2453a:	2400      	movs	r4, #0
   2453c:	e74c      	b.n	243d8 <__aeabi_fdiv+0xb8>
   2453e:	0263      	lsls	r3, r4, #9
   24540:	d5e5      	bpl.n	2450e <__aeabi_fdiv+0x1ee>
   24542:	2500      	movs	r5, #0
   24544:	2480      	movs	r4, #128	; 0x80
   24546:	03e4      	lsls	r4, r4, #15
   24548:	432c      	orrs	r4, r5
   2454a:	0264      	lsls	r4, r4, #9
   2454c:	0a64      	lsrs	r4, r4, #9
   2454e:	9b00      	ldr	r3, [sp, #0]
   24550:	21ff      	movs	r1, #255	; 0xff
   24552:	e781      	b.n	24458 <__aeabi_fdiv+0x138>
   24554:	9501      	str	r5, [sp, #4]
   24556:	e7c1      	b.n	244dc <__aeabi_fdiv+0x1bc>
   24558:	0023      	movs	r3, r4
   2455a:	2020      	movs	r0, #32
   2455c:	40cb      	lsrs	r3, r1
   2455e:	1a41      	subs	r1, r0, r1
   24560:	408c      	lsls	r4, r1
   24562:	1e61      	subs	r1, r4, #1
   24564:	418c      	sbcs	r4, r1
   24566:	431c      	orrs	r4, r3
   24568:	0763      	lsls	r3, r4, #29
   2456a:	d004      	beq.n	24576 <__aeabi_fdiv+0x256>
   2456c:	230f      	movs	r3, #15
   2456e:	4023      	ands	r3, r4
   24570:	2b04      	cmp	r3, #4
   24572:	d000      	beq.n	24576 <__aeabi_fdiv+0x256>
   24574:	3404      	adds	r4, #4
   24576:	0163      	lsls	r3, r4, #5
   24578:	d505      	bpl.n	24586 <__aeabi_fdiv+0x266>
   2457a:	2301      	movs	r3, #1
   2457c:	9a01      	ldr	r2, [sp, #4]
   2457e:	2101      	movs	r1, #1
   24580:	4013      	ands	r3, r2
   24582:	2400      	movs	r4, #0
   24584:	e768      	b.n	24458 <__aeabi_fdiv+0x138>
   24586:	2301      	movs	r3, #1
   24588:	9a01      	ldr	r2, [sp, #4]
   2458a:	01a4      	lsls	r4, r4, #6
   2458c:	0a64      	lsrs	r4, r4, #9
   2458e:	4013      	ands	r3, r2
   24590:	2100      	movs	r1, #0
   24592:	e761      	b.n	24458 <__aeabi_fdiv+0x138>
   24594:	2380      	movs	r3, #128	; 0x80
   24596:	03db      	lsls	r3, r3, #15
   24598:	431c      	orrs	r4, r3
   2459a:	0264      	lsls	r4, r4, #9
   2459c:	0a64      	lsrs	r4, r4, #9
   2459e:	4653      	mov	r3, sl
   245a0:	21ff      	movs	r1, #255	; 0xff
   245a2:	e759      	b.n	24458 <__aeabi_fdiv+0x138>
   245a4:	0002ada0 	.word	0x0002ada0
   245a8:	0002ade0 	.word	0x0002ade0
   245ac:	f7ffffff 	.word	0xf7ffffff

000245b0 <__aeabi_fmul>:
   245b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245b2:	4657      	mov	r7, sl
   245b4:	464e      	mov	r6, r9
   245b6:	4645      	mov	r5, r8
   245b8:	46de      	mov	lr, fp
   245ba:	b5e0      	push	{r5, r6, r7, lr}
   245bc:	0247      	lsls	r7, r0, #9
   245be:	0046      	lsls	r6, r0, #1
   245c0:	4688      	mov	r8, r1
   245c2:	0a7f      	lsrs	r7, r7, #9
   245c4:	0e36      	lsrs	r6, r6, #24
   245c6:	0fc4      	lsrs	r4, r0, #31
   245c8:	2e00      	cmp	r6, #0
   245ca:	d047      	beq.n	2465c <__aeabi_fmul+0xac>
   245cc:	2eff      	cmp	r6, #255	; 0xff
   245ce:	d024      	beq.n	2461a <__aeabi_fmul+0x6a>
   245d0:	00fb      	lsls	r3, r7, #3
   245d2:	2780      	movs	r7, #128	; 0x80
   245d4:	04ff      	lsls	r7, r7, #19
   245d6:	431f      	orrs	r7, r3
   245d8:	2300      	movs	r3, #0
   245da:	4699      	mov	r9, r3
   245dc:	469a      	mov	sl, r3
   245de:	3e7f      	subs	r6, #127	; 0x7f
   245e0:	4643      	mov	r3, r8
   245e2:	025d      	lsls	r5, r3, #9
   245e4:	0058      	lsls	r0, r3, #1
   245e6:	0fdb      	lsrs	r3, r3, #31
   245e8:	0a6d      	lsrs	r5, r5, #9
   245ea:	0e00      	lsrs	r0, r0, #24
   245ec:	4698      	mov	r8, r3
   245ee:	d043      	beq.n	24678 <__aeabi_fmul+0xc8>
   245f0:	28ff      	cmp	r0, #255	; 0xff
   245f2:	d03b      	beq.n	2466c <__aeabi_fmul+0xbc>
   245f4:	00eb      	lsls	r3, r5, #3
   245f6:	2580      	movs	r5, #128	; 0x80
   245f8:	2200      	movs	r2, #0
   245fa:	04ed      	lsls	r5, r5, #19
   245fc:	431d      	orrs	r5, r3
   245fe:	387f      	subs	r0, #127	; 0x7f
   24600:	1836      	adds	r6, r6, r0
   24602:	1c73      	adds	r3, r6, #1
   24604:	4641      	mov	r1, r8
   24606:	469b      	mov	fp, r3
   24608:	464b      	mov	r3, r9
   2460a:	4061      	eors	r1, r4
   2460c:	4313      	orrs	r3, r2
   2460e:	2b0f      	cmp	r3, #15
   24610:	d864      	bhi.n	246dc <__aeabi_fmul+0x12c>
   24612:	4875      	ldr	r0, [pc, #468]	; (247e8 <__aeabi_fmul+0x238>)
   24614:	009b      	lsls	r3, r3, #2
   24616:	58c3      	ldr	r3, [r0, r3]
   24618:	469f      	mov	pc, r3
   2461a:	2f00      	cmp	r7, #0
   2461c:	d142      	bne.n	246a4 <__aeabi_fmul+0xf4>
   2461e:	2308      	movs	r3, #8
   24620:	4699      	mov	r9, r3
   24622:	3b06      	subs	r3, #6
   24624:	26ff      	movs	r6, #255	; 0xff
   24626:	469a      	mov	sl, r3
   24628:	e7da      	b.n	245e0 <__aeabi_fmul+0x30>
   2462a:	4641      	mov	r1, r8
   2462c:	2a02      	cmp	r2, #2
   2462e:	d028      	beq.n	24682 <__aeabi_fmul+0xd2>
   24630:	2a03      	cmp	r2, #3
   24632:	d100      	bne.n	24636 <__aeabi_fmul+0x86>
   24634:	e0ce      	b.n	247d4 <__aeabi_fmul+0x224>
   24636:	2a01      	cmp	r2, #1
   24638:	d000      	beq.n	2463c <__aeabi_fmul+0x8c>
   2463a:	e0ac      	b.n	24796 <__aeabi_fmul+0x1e6>
   2463c:	4011      	ands	r1, r2
   2463e:	2000      	movs	r0, #0
   24640:	2200      	movs	r2, #0
   24642:	b2cc      	uxtb	r4, r1
   24644:	0240      	lsls	r0, r0, #9
   24646:	05d2      	lsls	r2, r2, #23
   24648:	0a40      	lsrs	r0, r0, #9
   2464a:	07e4      	lsls	r4, r4, #31
   2464c:	4310      	orrs	r0, r2
   2464e:	4320      	orrs	r0, r4
   24650:	bc3c      	pop	{r2, r3, r4, r5}
   24652:	4690      	mov	r8, r2
   24654:	4699      	mov	r9, r3
   24656:	46a2      	mov	sl, r4
   24658:	46ab      	mov	fp, r5
   2465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2465c:	2f00      	cmp	r7, #0
   2465e:	d115      	bne.n	2468c <__aeabi_fmul+0xdc>
   24660:	2304      	movs	r3, #4
   24662:	4699      	mov	r9, r3
   24664:	3b03      	subs	r3, #3
   24666:	2600      	movs	r6, #0
   24668:	469a      	mov	sl, r3
   2466a:	e7b9      	b.n	245e0 <__aeabi_fmul+0x30>
   2466c:	20ff      	movs	r0, #255	; 0xff
   2466e:	2202      	movs	r2, #2
   24670:	2d00      	cmp	r5, #0
   24672:	d0c5      	beq.n	24600 <__aeabi_fmul+0x50>
   24674:	2203      	movs	r2, #3
   24676:	e7c3      	b.n	24600 <__aeabi_fmul+0x50>
   24678:	2d00      	cmp	r5, #0
   2467a:	d119      	bne.n	246b0 <__aeabi_fmul+0x100>
   2467c:	2000      	movs	r0, #0
   2467e:	2201      	movs	r2, #1
   24680:	e7be      	b.n	24600 <__aeabi_fmul+0x50>
   24682:	2401      	movs	r4, #1
   24684:	22ff      	movs	r2, #255	; 0xff
   24686:	400c      	ands	r4, r1
   24688:	2000      	movs	r0, #0
   2468a:	e7db      	b.n	24644 <__aeabi_fmul+0x94>
   2468c:	0038      	movs	r0, r7
   2468e:	f001 fd65 	bl	2615c <__clzsi2>
   24692:	2676      	movs	r6, #118	; 0x76
   24694:	1f43      	subs	r3, r0, #5
   24696:	409f      	lsls	r7, r3
   24698:	2300      	movs	r3, #0
   2469a:	4276      	negs	r6, r6
   2469c:	1a36      	subs	r6, r6, r0
   2469e:	4699      	mov	r9, r3
   246a0:	469a      	mov	sl, r3
   246a2:	e79d      	b.n	245e0 <__aeabi_fmul+0x30>
   246a4:	230c      	movs	r3, #12
   246a6:	4699      	mov	r9, r3
   246a8:	3b09      	subs	r3, #9
   246aa:	26ff      	movs	r6, #255	; 0xff
   246ac:	469a      	mov	sl, r3
   246ae:	e797      	b.n	245e0 <__aeabi_fmul+0x30>
   246b0:	0028      	movs	r0, r5
   246b2:	f001 fd53 	bl	2615c <__clzsi2>
   246b6:	1f43      	subs	r3, r0, #5
   246b8:	409d      	lsls	r5, r3
   246ba:	2376      	movs	r3, #118	; 0x76
   246bc:	425b      	negs	r3, r3
   246be:	1a18      	subs	r0, r3, r0
   246c0:	2200      	movs	r2, #0
   246c2:	e79d      	b.n	24600 <__aeabi_fmul+0x50>
   246c4:	2080      	movs	r0, #128	; 0x80
   246c6:	2400      	movs	r4, #0
   246c8:	03c0      	lsls	r0, r0, #15
   246ca:	22ff      	movs	r2, #255	; 0xff
   246cc:	e7ba      	b.n	24644 <__aeabi_fmul+0x94>
   246ce:	003d      	movs	r5, r7
   246d0:	4652      	mov	r2, sl
   246d2:	e7ab      	b.n	2462c <__aeabi_fmul+0x7c>
   246d4:	003d      	movs	r5, r7
   246d6:	0021      	movs	r1, r4
   246d8:	4652      	mov	r2, sl
   246da:	e7a7      	b.n	2462c <__aeabi_fmul+0x7c>
   246dc:	0c3b      	lsrs	r3, r7, #16
   246de:	469c      	mov	ip, r3
   246e0:	042a      	lsls	r2, r5, #16
   246e2:	0c12      	lsrs	r2, r2, #16
   246e4:	0c2b      	lsrs	r3, r5, #16
   246e6:	0014      	movs	r4, r2
   246e8:	4660      	mov	r0, ip
   246ea:	4665      	mov	r5, ip
   246ec:	043f      	lsls	r7, r7, #16
   246ee:	0c3f      	lsrs	r7, r7, #16
   246f0:	437c      	muls	r4, r7
   246f2:	4342      	muls	r2, r0
   246f4:	435d      	muls	r5, r3
   246f6:	437b      	muls	r3, r7
   246f8:	0c27      	lsrs	r7, r4, #16
   246fa:	189b      	adds	r3, r3, r2
   246fc:	18ff      	adds	r7, r7, r3
   246fe:	42ba      	cmp	r2, r7
   24700:	d903      	bls.n	2470a <__aeabi_fmul+0x15a>
   24702:	2380      	movs	r3, #128	; 0x80
   24704:	025b      	lsls	r3, r3, #9
   24706:	469c      	mov	ip, r3
   24708:	4465      	add	r5, ip
   2470a:	0424      	lsls	r4, r4, #16
   2470c:	043a      	lsls	r2, r7, #16
   2470e:	0c24      	lsrs	r4, r4, #16
   24710:	1912      	adds	r2, r2, r4
   24712:	0193      	lsls	r3, r2, #6
   24714:	1e5c      	subs	r4, r3, #1
   24716:	41a3      	sbcs	r3, r4
   24718:	0c3f      	lsrs	r7, r7, #16
   2471a:	0e92      	lsrs	r2, r2, #26
   2471c:	197d      	adds	r5, r7, r5
   2471e:	431a      	orrs	r2, r3
   24720:	01ad      	lsls	r5, r5, #6
   24722:	4315      	orrs	r5, r2
   24724:	012b      	lsls	r3, r5, #4
   24726:	d504      	bpl.n	24732 <__aeabi_fmul+0x182>
   24728:	2301      	movs	r3, #1
   2472a:	465e      	mov	r6, fp
   2472c:	086a      	lsrs	r2, r5, #1
   2472e:	401d      	ands	r5, r3
   24730:	4315      	orrs	r5, r2
   24732:	0032      	movs	r2, r6
   24734:	327f      	adds	r2, #127	; 0x7f
   24736:	2a00      	cmp	r2, #0
   24738:	dd25      	ble.n	24786 <__aeabi_fmul+0x1d6>
   2473a:	076b      	lsls	r3, r5, #29
   2473c:	d004      	beq.n	24748 <__aeabi_fmul+0x198>
   2473e:	230f      	movs	r3, #15
   24740:	402b      	ands	r3, r5
   24742:	2b04      	cmp	r3, #4
   24744:	d000      	beq.n	24748 <__aeabi_fmul+0x198>
   24746:	3504      	adds	r5, #4
   24748:	012b      	lsls	r3, r5, #4
   2474a:	d503      	bpl.n	24754 <__aeabi_fmul+0x1a4>
   2474c:	0032      	movs	r2, r6
   2474e:	4b27      	ldr	r3, [pc, #156]	; (247ec <__aeabi_fmul+0x23c>)
   24750:	3280      	adds	r2, #128	; 0x80
   24752:	401d      	ands	r5, r3
   24754:	2afe      	cmp	r2, #254	; 0xfe
   24756:	dc94      	bgt.n	24682 <__aeabi_fmul+0xd2>
   24758:	2401      	movs	r4, #1
   2475a:	01a8      	lsls	r0, r5, #6
   2475c:	0a40      	lsrs	r0, r0, #9
   2475e:	b2d2      	uxtb	r2, r2
   24760:	400c      	ands	r4, r1
   24762:	e76f      	b.n	24644 <__aeabi_fmul+0x94>
   24764:	2080      	movs	r0, #128	; 0x80
   24766:	03c0      	lsls	r0, r0, #15
   24768:	4207      	tst	r7, r0
   2476a:	d007      	beq.n	2477c <__aeabi_fmul+0x1cc>
   2476c:	4205      	tst	r5, r0
   2476e:	d105      	bne.n	2477c <__aeabi_fmul+0x1cc>
   24770:	4328      	orrs	r0, r5
   24772:	0240      	lsls	r0, r0, #9
   24774:	0a40      	lsrs	r0, r0, #9
   24776:	4644      	mov	r4, r8
   24778:	22ff      	movs	r2, #255	; 0xff
   2477a:	e763      	b.n	24644 <__aeabi_fmul+0x94>
   2477c:	4338      	orrs	r0, r7
   2477e:	0240      	lsls	r0, r0, #9
   24780:	0a40      	lsrs	r0, r0, #9
   24782:	22ff      	movs	r2, #255	; 0xff
   24784:	e75e      	b.n	24644 <__aeabi_fmul+0x94>
   24786:	2401      	movs	r4, #1
   24788:	1aa3      	subs	r3, r4, r2
   2478a:	2b1b      	cmp	r3, #27
   2478c:	dd05      	ble.n	2479a <__aeabi_fmul+0x1ea>
   2478e:	400c      	ands	r4, r1
   24790:	2200      	movs	r2, #0
   24792:	2000      	movs	r0, #0
   24794:	e756      	b.n	24644 <__aeabi_fmul+0x94>
   24796:	465e      	mov	r6, fp
   24798:	e7cb      	b.n	24732 <__aeabi_fmul+0x182>
   2479a:	002a      	movs	r2, r5
   2479c:	2020      	movs	r0, #32
   2479e:	40da      	lsrs	r2, r3
   247a0:	1ac3      	subs	r3, r0, r3
   247a2:	409d      	lsls	r5, r3
   247a4:	002b      	movs	r3, r5
   247a6:	1e5d      	subs	r5, r3, #1
   247a8:	41ab      	sbcs	r3, r5
   247aa:	4313      	orrs	r3, r2
   247ac:	075a      	lsls	r2, r3, #29
   247ae:	d004      	beq.n	247ba <__aeabi_fmul+0x20a>
   247b0:	220f      	movs	r2, #15
   247b2:	401a      	ands	r2, r3
   247b4:	2a04      	cmp	r2, #4
   247b6:	d000      	beq.n	247ba <__aeabi_fmul+0x20a>
   247b8:	3304      	adds	r3, #4
   247ba:	015a      	lsls	r2, r3, #5
   247bc:	d504      	bpl.n	247c8 <__aeabi_fmul+0x218>
   247be:	2401      	movs	r4, #1
   247c0:	2201      	movs	r2, #1
   247c2:	400c      	ands	r4, r1
   247c4:	2000      	movs	r0, #0
   247c6:	e73d      	b.n	24644 <__aeabi_fmul+0x94>
   247c8:	2401      	movs	r4, #1
   247ca:	019b      	lsls	r3, r3, #6
   247cc:	0a58      	lsrs	r0, r3, #9
   247ce:	400c      	ands	r4, r1
   247d0:	2200      	movs	r2, #0
   247d2:	e737      	b.n	24644 <__aeabi_fmul+0x94>
   247d4:	2080      	movs	r0, #128	; 0x80
   247d6:	2401      	movs	r4, #1
   247d8:	03c0      	lsls	r0, r0, #15
   247da:	4328      	orrs	r0, r5
   247dc:	0240      	lsls	r0, r0, #9
   247de:	0a40      	lsrs	r0, r0, #9
   247e0:	400c      	ands	r4, r1
   247e2:	22ff      	movs	r2, #255	; 0xff
   247e4:	e72e      	b.n	24644 <__aeabi_fmul+0x94>
   247e6:	46c0      	nop			; (mov r8, r8)
   247e8:	0002ae20 	.word	0x0002ae20
   247ec:	f7ffffff 	.word	0xf7ffffff

000247f0 <__aeabi_f2iz>:
   247f0:	0241      	lsls	r1, r0, #9
   247f2:	0043      	lsls	r3, r0, #1
   247f4:	0fc2      	lsrs	r2, r0, #31
   247f6:	0a49      	lsrs	r1, r1, #9
   247f8:	0e1b      	lsrs	r3, r3, #24
   247fa:	2000      	movs	r0, #0
   247fc:	2b7e      	cmp	r3, #126	; 0x7e
   247fe:	dd0d      	ble.n	2481c <__aeabi_f2iz+0x2c>
   24800:	2b9d      	cmp	r3, #157	; 0x9d
   24802:	dc0c      	bgt.n	2481e <__aeabi_f2iz+0x2e>
   24804:	2080      	movs	r0, #128	; 0x80
   24806:	0400      	lsls	r0, r0, #16
   24808:	4301      	orrs	r1, r0
   2480a:	2b95      	cmp	r3, #149	; 0x95
   2480c:	dc0a      	bgt.n	24824 <__aeabi_f2iz+0x34>
   2480e:	2096      	movs	r0, #150	; 0x96
   24810:	1ac3      	subs	r3, r0, r3
   24812:	40d9      	lsrs	r1, r3
   24814:	4248      	negs	r0, r1
   24816:	2a00      	cmp	r2, #0
   24818:	d100      	bne.n	2481c <__aeabi_f2iz+0x2c>
   2481a:	0008      	movs	r0, r1
   2481c:	4770      	bx	lr
   2481e:	4b03      	ldr	r3, [pc, #12]	; (2482c <__aeabi_f2iz+0x3c>)
   24820:	18d0      	adds	r0, r2, r3
   24822:	e7fb      	b.n	2481c <__aeabi_f2iz+0x2c>
   24824:	3b96      	subs	r3, #150	; 0x96
   24826:	4099      	lsls	r1, r3
   24828:	e7f4      	b.n	24814 <__aeabi_f2iz+0x24>
   2482a:	46c0      	nop			; (mov r8, r8)
   2482c:	7fffffff 	.word	0x7fffffff

00024830 <__aeabi_i2f>:
   24830:	b570      	push	{r4, r5, r6, lr}
   24832:	2800      	cmp	r0, #0
   24834:	d030      	beq.n	24898 <__aeabi_i2f+0x68>
   24836:	17c3      	asrs	r3, r0, #31
   24838:	18c4      	adds	r4, r0, r3
   2483a:	405c      	eors	r4, r3
   2483c:	0fc5      	lsrs	r5, r0, #31
   2483e:	0020      	movs	r0, r4
   24840:	f001 fc8c 	bl	2615c <__clzsi2>
   24844:	239e      	movs	r3, #158	; 0x9e
   24846:	1a1b      	subs	r3, r3, r0
   24848:	2b96      	cmp	r3, #150	; 0x96
   2484a:	dc0d      	bgt.n	24868 <__aeabi_i2f+0x38>
   2484c:	2296      	movs	r2, #150	; 0x96
   2484e:	1ad2      	subs	r2, r2, r3
   24850:	4094      	lsls	r4, r2
   24852:	002a      	movs	r2, r5
   24854:	0264      	lsls	r4, r4, #9
   24856:	0a64      	lsrs	r4, r4, #9
   24858:	b2db      	uxtb	r3, r3
   2485a:	0264      	lsls	r4, r4, #9
   2485c:	05db      	lsls	r3, r3, #23
   2485e:	0a60      	lsrs	r0, r4, #9
   24860:	07d2      	lsls	r2, r2, #31
   24862:	4318      	orrs	r0, r3
   24864:	4310      	orrs	r0, r2
   24866:	bd70      	pop	{r4, r5, r6, pc}
   24868:	2b99      	cmp	r3, #153	; 0x99
   2486a:	dc19      	bgt.n	248a0 <__aeabi_i2f+0x70>
   2486c:	2299      	movs	r2, #153	; 0x99
   2486e:	1ad2      	subs	r2, r2, r3
   24870:	2a00      	cmp	r2, #0
   24872:	dd29      	ble.n	248c8 <__aeabi_i2f+0x98>
   24874:	4094      	lsls	r4, r2
   24876:	0022      	movs	r2, r4
   24878:	4c14      	ldr	r4, [pc, #80]	; (248cc <__aeabi_i2f+0x9c>)
   2487a:	4014      	ands	r4, r2
   2487c:	0751      	lsls	r1, r2, #29
   2487e:	d004      	beq.n	2488a <__aeabi_i2f+0x5a>
   24880:	210f      	movs	r1, #15
   24882:	400a      	ands	r2, r1
   24884:	2a04      	cmp	r2, #4
   24886:	d000      	beq.n	2488a <__aeabi_i2f+0x5a>
   24888:	3404      	adds	r4, #4
   2488a:	0162      	lsls	r2, r4, #5
   2488c:	d413      	bmi.n	248b6 <__aeabi_i2f+0x86>
   2488e:	01a4      	lsls	r4, r4, #6
   24890:	0a64      	lsrs	r4, r4, #9
   24892:	b2db      	uxtb	r3, r3
   24894:	002a      	movs	r2, r5
   24896:	e7e0      	b.n	2485a <__aeabi_i2f+0x2a>
   24898:	2200      	movs	r2, #0
   2489a:	2300      	movs	r3, #0
   2489c:	2400      	movs	r4, #0
   2489e:	e7dc      	b.n	2485a <__aeabi_i2f+0x2a>
   248a0:	2205      	movs	r2, #5
   248a2:	0021      	movs	r1, r4
   248a4:	1a12      	subs	r2, r2, r0
   248a6:	40d1      	lsrs	r1, r2
   248a8:	22b9      	movs	r2, #185	; 0xb9
   248aa:	1ad2      	subs	r2, r2, r3
   248ac:	4094      	lsls	r4, r2
   248ae:	1e62      	subs	r2, r4, #1
   248b0:	4194      	sbcs	r4, r2
   248b2:	430c      	orrs	r4, r1
   248b4:	e7da      	b.n	2486c <__aeabi_i2f+0x3c>
   248b6:	4b05      	ldr	r3, [pc, #20]	; (248cc <__aeabi_i2f+0x9c>)
   248b8:	002a      	movs	r2, r5
   248ba:	401c      	ands	r4, r3
   248bc:	239f      	movs	r3, #159	; 0x9f
   248be:	01a4      	lsls	r4, r4, #6
   248c0:	1a1b      	subs	r3, r3, r0
   248c2:	0a64      	lsrs	r4, r4, #9
   248c4:	b2db      	uxtb	r3, r3
   248c6:	e7c8      	b.n	2485a <__aeabi_i2f+0x2a>
   248c8:	0022      	movs	r2, r4
   248ca:	e7d5      	b.n	24878 <__aeabi_i2f+0x48>
   248cc:	fbffffff 	.word	0xfbffffff

000248d0 <__aeabi_dadd>:
   248d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   248d2:	4645      	mov	r5, r8
   248d4:	46de      	mov	lr, fp
   248d6:	4657      	mov	r7, sl
   248d8:	464e      	mov	r6, r9
   248da:	030c      	lsls	r4, r1, #12
   248dc:	b5e0      	push	{r5, r6, r7, lr}
   248de:	004e      	lsls	r6, r1, #1
   248e0:	0fc9      	lsrs	r1, r1, #31
   248e2:	4688      	mov	r8, r1
   248e4:	000d      	movs	r5, r1
   248e6:	0a61      	lsrs	r1, r4, #9
   248e8:	0f44      	lsrs	r4, r0, #29
   248ea:	430c      	orrs	r4, r1
   248ec:	00c7      	lsls	r7, r0, #3
   248ee:	0319      	lsls	r1, r3, #12
   248f0:	0058      	lsls	r0, r3, #1
   248f2:	0fdb      	lsrs	r3, r3, #31
   248f4:	469b      	mov	fp, r3
   248f6:	0a4b      	lsrs	r3, r1, #9
   248f8:	0f51      	lsrs	r1, r2, #29
   248fa:	430b      	orrs	r3, r1
   248fc:	0d76      	lsrs	r6, r6, #21
   248fe:	0d40      	lsrs	r0, r0, #21
   24900:	0019      	movs	r1, r3
   24902:	00d2      	lsls	r2, r2, #3
   24904:	45d8      	cmp	r8, fp
   24906:	d100      	bne.n	2490a <__aeabi_dadd+0x3a>
   24908:	e0ae      	b.n	24a68 <__aeabi_dadd+0x198>
   2490a:	1a35      	subs	r5, r6, r0
   2490c:	2d00      	cmp	r5, #0
   2490e:	dc00      	bgt.n	24912 <__aeabi_dadd+0x42>
   24910:	e0f6      	b.n	24b00 <__aeabi_dadd+0x230>
   24912:	2800      	cmp	r0, #0
   24914:	d10f      	bne.n	24936 <__aeabi_dadd+0x66>
   24916:	4313      	orrs	r3, r2
   24918:	d100      	bne.n	2491c <__aeabi_dadd+0x4c>
   2491a:	e0db      	b.n	24ad4 <__aeabi_dadd+0x204>
   2491c:	1e6b      	subs	r3, r5, #1
   2491e:	2b00      	cmp	r3, #0
   24920:	d000      	beq.n	24924 <__aeabi_dadd+0x54>
   24922:	e137      	b.n	24b94 <__aeabi_dadd+0x2c4>
   24924:	1aba      	subs	r2, r7, r2
   24926:	4297      	cmp	r7, r2
   24928:	41bf      	sbcs	r7, r7
   2492a:	1a64      	subs	r4, r4, r1
   2492c:	427f      	negs	r7, r7
   2492e:	1be4      	subs	r4, r4, r7
   24930:	2601      	movs	r6, #1
   24932:	0017      	movs	r7, r2
   24934:	e024      	b.n	24980 <__aeabi_dadd+0xb0>
   24936:	4bc6      	ldr	r3, [pc, #792]	; (24c50 <__aeabi_dadd+0x380>)
   24938:	429e      	cmp	r6, r3
   2493a:	d04d      	beq.n	249d8 <__aeabi_dadd+0x108>
   2493c:	2380      	movs	r3, #128	; 0x80
   2493e:	041b      	lsls	r3, r3, #16
   24940:	4319      	orrs	r1, r3
   24942:	2d38      	cmp	r5, #56	; 0x38
   24944:	dd00      	ble.n	24948 <__aeabi_dadd+0x78>
   24946:	e107      	b.n	24b58 <__aeabi_dadd+0x288>
   24948:	2d1f      	cmp	r5, #31
   2494a:	dd00      	ble.n	2494e <__aeabi_dadd+0x7e>
   2494c:	e138      	b.n	24bc0 <__aeabi_dadd+0x2f0>
   2494e:	2020      	movs	r0, #32
   24950:	1b43      	subs	r3, r0, r5
   24952:	469a      	mov	sl, r3
   24954:	000b      	movs	r3, r1
   24956:	4650      	mov	r0, sl
   24958:	4083      	lsls	r3, r0
   2495a:	4699      	mov	r9, r3
   2495c:	0013      	movs	r3, r2
   2495e:	4648      	mov	r0, r9
   24960:	40eb      	lsrs	r3, r5
   24962:	4318      	orrs	r0, r3
   24964:	0003      	movs	r3, r0
   24966:	4650      	mov	r0, sl
   24968:	4082      	lsls	r2, r0
   2496a:	1e50      	subs	r0, r2, #1
   2496c:	4182      	sbcs	r2, r0
   2496e:	40e9      	lsrs	r1, r5
   24970:	431a      	orrs	r2, r3
   24972:	1aba      	subs	r2, r7, r2
   24974:	1a61      	subs	r1, r4, r1
   24976:	4297      	cmp	r7, r2
   24978:	41a4      	sbcs	r4, r4
   2497a:	0017      	movs	r7, r2
   2497c:	4264      	negs	r4, r4
   2497e:	1b0c      	subs	r4, r1, r4
   24980:	0223      	lsls	r3, r4, #8
   24982:	d562      	bpl.n	24a4a <__aeabi_dadd+0x17a>
   24984:	0264      	lsls	r4, r4, #9
   24986:	0a65      	lsrs	r5, r4, #9
   24988:	2d00      	cmp	r5, #0
   2498a:	d100      	bne.n	2498e <__aeabi_dadd+0xbe>
   2498c:	e0df      	b.n	24b4e <__aeabi_dadd+0x27e>
   2498e:	0028      	movs	r0, r5
   24990:	f001 fbe4 	bl	2615c <__clzsi2>
   24994:	0003      	movs	r3, r0
   24996:	3b08      	subs	r3, #8
   24998:	2b1f      	cmp	r3, #31
   2499a:	dd00      	ble.n	2499e <__aeabi_dadd+0xce>
   2499c:	e0d2      	b.n	24b44 <__aeabi_dadd+0x274>
   2499e:	2220      	movs	r2, #32
   249a0:	003c      	movs	r4, r7
   249a2:	1ad2      	subs	r2, r2, r3
   249a4:	409d      	lsls	r5, r3
   249a6:	40d4      	lsrs	r4, r2
   249a8:	409f      	lsls	r7, r3
   249aa:	4325      	orrs	r5, r4
   249ac:	429e      	cmp	r6, r3
   249ae:	dd00      	ble.n	249b2 <__aeabi_dadd+0xe2>
   249b0:	e0c4      	b.n	24b3c <__aeabi_dadd+0x26c>
   249b2:	1b9e      	subs	r6, r3, r6
   249b4:	1c73      	adds	r3, r6, #1
   249b6:	2b1f      	cmp	r3, #31
   249b8:	dd00      	ble.n	249bc <__aeabi_dadd+0xec>
   249ba:	e0f1      	b.n	24ba0 <__aeabi_dadd+0x2d0>
   249bc:	2220      	movs	r2, #32
   249be:	0038      	movs	r0, r7
   249c0:	0029      	movs	r1, r5
   249c2:	1ad2      	subs	r2, r2, r3
   249c4:	40d8      	lsrs	r0, r3
   249c6:	4091      	lsls	r1, r2
   249c8:	4097      	lsls	r7, r2
   249ca:	002c      	movs	r4, r5
   249cc:	4301      	orrs	r1, r0
   249ce:	1e78      	subs	r0, r7, #1
   249d0:	4187      	sbcs	r7, r0
   249d2:	40dc      	lsrs	r4, r3
   249d4:	2600      	movs	r6, #0
   249d6:	430f      	orrs	r7, r1
   249d8:	077b      	lsls	r3, r7, #29
   249da:	d009      	beq.n	249f0 <__aeabi_dadd+0x120>
   249dc:	230f      	movs	r3, #15
   249de:	403b      	ands	r3, r7
   249e0:	2b04      	cmp	r3, #4
   249e2:	d005      	beq.n	249f0 <__aeabi_dadd+0x120>
   249e4:	1d3b      	adds	r3, r7, #4
   249e6:	42bb      	cmp	r3, r7
   249e8:	41bf      	sbcs	r7, r7
   249ea:	427f      	negs	r7, r7
   249ec:	19e4      	adds	r4, r4, r7
   249ee:	001f      	movs	r7, r3
   249f0:	0223      	lsls	r3, r4, #8
   249f2:	d52c      	bpl.n	24a4e <__aeabi_dadd+0x17e>
   249f4:	4b96      	ldr	r3, [pc, #600]	; (24c50 <__aeabi_dadd+0x380>)
   249f6:	3601      	adds	r6, #1
   249f8:	429e      	cmp	r6, r3
   249fa:	d100      	bne.n	249fe <__aeabi_dadd+0x12e>
   249fc:	e09a      	b.n	24b34 <__aeabi_dadd+0x264>
   249fe:	4645      	mov	r5, r8
   24a00:	4b94      	ldr	r3, [pc, #592]	; (24c54 <__aeabi_dadd+0x384>)
   24a02:	08ff      	lsrs	r7, r7, #3
   24a04:	401c      	ands	r4, r3
   24a06:	0760      	lsls	r0, r4, #29
   24a08:	0576      	lsls	r6, r6, #21
   24a0a:	0264      	lsls	r4, r4, #9
   24a0c:	4307      	orrs	r7, r0
   24a0e:	0b24      	lsrs	r4, r4, #12
   24a10:	0d76      	lsrs	r6, r6, #21
   24a12:	2100      	movs	r1, #0
   24a14:	0324      	lsls	r4, r4, #12
   24a16:	0b23      	lsrs	r3, r4, #12
   24a18:	0d0c      	lsrs	r4, r1, #20
   24a1a:	4a8f      	ldr	r2, [pc, #572]	; (24c58 <__aeabi_dadd+0x388>)
   24a1c:	0524      	lsls	r4, r4, #20
   24a1e:	431c      	orrs	r4, r3
   24a20:	4014      	ands	r4, r2
   24a22:	0533      	lsls	r3, r6, #20
   24a24:	4323      	orrs	r3, r4
   24a26:	005b      	lsls	r3, r3, #1
   24a28:	07ed      	lsls	r5, r5, #31
   24a2a:	085b      	lsrs	r3, r3, #1
   24a2c:	432b      	orrs	r3, r5
   24a2e:	0038      	movs	r0, r7
   24a30:	0019      	movs	r1, r3
   24a32:	bc3c      	pop	{r2, r3, r4, r5}
   24a34:	4690      	mov	r8, r2
   24a36:	4699      	mov	r9, r3
   24a38:	46a2      	mov	sl, r4
   24a3a:	46ab      	mov	fp, r5
   24a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24a3e:	4664      	mov	r4, ip
   24a40:	4304      	orrs	r4, r0
   24a42:	d100      	bne.n	24a46 <__aeabi_dadd+0x176>
   24a44:	e211      	b.n	24e6a <__aeabi_dadd+0x59a>
   24a46:	0004      	movs	r4, r0
   24a48:	4667      	mov	r7, ip
   24a4a:	077b      	lsls	r3, r7, #29
   24a4c:	d1c6      	bne.n	249dc <__aeabi_dadd+0x10c>
   24a4e:	4645      	mov	r5, r8
   24a50:	0760      	lsls	r0, r4, #29
   24a52:	08ff      	lsrs	r7, r7, #3
   24a54:	4307      	orrs	r7, r0
   24a56:	08e4      	lsrs	r4, r4, #3
   24a58:	4b7d      	ldr	r3, [pc, #500]	; (24c50 <__aeabi_dadd+0x380>)
   24a5a:	429e      	cmp	r6, r3
   24a5c:	d030      	beq.n	24ac0 <__aeabi_dadd+0x1f0>
   24a5e:	0324      	lsls	r4, r4, #12
   24a60:	0576      	lsls	r6, r6, #21
   24a62:	0b24      	lsrs	r4, r4, #12
   24a64:	0d76      	lsrs	r6, r6, #21
   24a66:	e7d4      	b.n	24a12 <__aeabi_dadd+0x142>
   24a68:	1a33      	subs	r3, r6, r0
   24a6a:	469a      	mov	sl, r3
   24a6c:	2b00      	cmp	r3, #0
   24a6e:	dd78      	ble.n	24b62 <__aeabi_dadd+0x292>
   24a70:	2800      	cmp	r0, #0
   24a72:	d031      	beq.n	24ad8 <__aeabi_dadd+0x208>
   24a74:	4876      	ldr	r0, [pc, #472]	; (24c50 <__aeabi_dadd+0x380>)
   24a76:	4286      	cmp	r6, r0
   24a78:	d0ae      	beq.n	249d8 <__aeabi_dadd+0x108>
   24a7a:	2080      	movs	r0, #128	; 0x80
   24a7c:	0400      	lsls	r0, r0, #16
   24a7e:	4301      	orrs	r1, r0
   24a80:	4653      	mov	r3, sl
   24a82:	2b38      	cmp	r3, #56	; 0x38
   24a84:	dc00      	bgt.n	24a88 <__aeabi_dadd+0x1b8>
   24a86:	e0e9      	b.n	24c5c <__aeabi_dadd+0x38c>
   24a88:	430a      	orrs	r2, r1
   24a8a:	1e51      	subs	r1, r2, #1
   24a8c:	418a      	sbcs	r2, r1
   24a8e:	2100      	movs	r1, #0
   24a90:	19d2      	adds	r2, r2, r7
   24a92:	42ba      	cmp	r2, r7
   24a94:	41bf      	sbcs	r7, r7
   24a96:	1909      	adds	r1, r1, r4
   24a98:	427c      	negs	r4, r7
   24a9a:	0017      	movs	r7, r2
   24a9c:	190c      	adds	r4, r1, r4
   24a9e:	0223      	lsls	r3, r4, #8
   24aa0:	d5d3      	bpl.n	24a4a <__aeabi_dadd+0x17a>
   24aa2:	4b6b      	ldr	r3, [pc, #428]	; (24c50 <__aeabi_dadd+0x380>)
   24aa4:	3601      	adds	r6, #1
   24aa6:	429e      	cmp	r6, r3
   24aa8:	d100      	bne.n	24aac <__aeabi_dadd+0x1dc>
   24aaa:	e13a      	b.n	24d22 <__aeabi_dadd+0x452>
   24aac:	2001      	movs	r0, #1
   24aae:	4b69      	ldr	r3, [pc, #420]	; (24c54 <__aeabi_dadd+0x384>)
   24ab0:	401c      	ands	r4, r3
   24ab2:	087b      	lsrs	r3, r7, #1
   24ab4:	4007      	ands	r7, r0
   24ab6:	431f      	orrs	r7, r3
   24ab8:	07e0      	lsls	r0, r4, #31
   24aba:	4307      	orrs	r7, r0
   24abc:	0864      	lsrs	r4, r4, #1
   24abe:	e78b      	b.n	249d8 <__aeabi_dadd+0x108>
   24ac0:	0023      	movs	r3, r4
   24ac2:	433b      	orrs	r3, r7
   24ac4:	d100      	bne.n	24ac8 <__aeabi_dadd+0x1f8>
   24ac6:	e1cb      	b.n	24e60 <__aeabi_dadd+0x590>
   24ac8:	2280      	movs	r2, #128	; 0x80
   24aca:	0312      	lsls	r2, r2, #12
   24acc:	4314      	orrs	r4, r2
   24ace:	0324      	lsls	r4, r4, #12
   24ad0:	0b24      	lsrs	r4, r4, #12
   24ad2:	e79e      	b.n	24a12 <__aeabi_dadd+0x142>
   24ad4:	002e      	movs	r6, r5
   24ad6:	e77f      	b.n	249d8 <__aeabi_dadd+0x108>
   24ad8:	0008      	movs	r0, r1
   24ada:	4310      	orrs	r0, r2
   24adc:	d100      	bne.n	24ae0 <__aeabi_dadd+0x210>
   24ade:	e0b4      	b.n	24c4a <__aeabi_dadd+0x37a>
   24ae0:	1e58      	subs	r0, r3, #1
   24ae2:	2800      	cmp	r0, #0
   24ae4:	d000      	beq.n	24ae8 <__aeabi_dadd+0x218>
   24ae6:	e0de      	b.n	24ca6 <__aeabi_dadd+0x3d6>
   24ae8:	18ba      	adds	r2, r7, r2
   24aea:	42ba      	cmp	r2, r7
   24aec:	419b      	sbcs	r3, r3
   24aee:	1864      	adds	r4, r4, r1
   24af0:	425b      	negs	r3, r3
   24af2:	18e4      	adds	r4, r4, r3
   24af4:	0017      	movs	r7, r2
   24af6:	2601      	movs	r6, #1
   24af8:	0223      	lsls	r3, r4, #8
   24afa:	d5a6      	bpl.n	24a4a <__aeabi_dadd+0x17a>
   24afc:	2602      	movs	r6, #2
   24afe:	e7d5      	b.n	24aac <__aeabi_dadd+0x1dc>
   24b00:	2d00      	cmp	r5, #0
   24b02:	d16e      	bne.n	24be2 <__aeabi_dadd+0x312>
   24b04:	1c70      	adds	r0, r6, #1
   24b06:	0540      	lsls	r0, r0, #21
   24b08:	0d40      	lsrs	r0, r0, #21
   24b0a:	2801      	cmp	r0, #1
   24b0c:	dc00      	bgt.n	24b10 <__aeabi_dadd+0x240>
   24b0e:	e0f9      	b.n	24d04 <__aeabi_dadd+0x434>
   24b10:	1ab8      	subs	r0, r7, r2
   24b12:	4684      	mov	ip, r0
   24b14:	4287      	cmp	r7, r0
   24b16:	4180      	sbcs	r0, r0
   24b18:	1ae5      	subs	r5, r4, r3
   24b1a:	4240      	negs	r0, r0
   24b1c:	1a2d      	subs	r5, r5, r0
   24b1e:	0228      	lsls	r0, r5, #8
   24b20:	d400      	bmi.n	24b24 <__aeabi_dadd+0x254>
   24b22:	e089      	b.n	24c38 <__aeabi_dadd+0x368>
   24b24:	1bd7      	subs	r7, r2, r7
   24b26:	42ba      	cmp	r2, r7
   24b28:	4192      	sbcs	r2, r2
   24b2a:	1b1c      	subs	r4, r3, r4
   24b2c:	4252      	negs	r2, r2
   24b2e:	1aa5      	subs	r5, r4, r2
   24b30:	46d8      	mov	r8, fp
   24b32:	e729      	b.n	24988 <__aeabi_dadd+0xb8>
   24b34:	4645      	mov	r5, r8
   24b36:	2400      	movs	r4, #0
   24b38:	2700      	movs	r7, #0
   24b3a:	e76a      	b.n	24a12 <__aeabi_dadd+0x142>
   24b3c:	4c45      	ldr	r4, [pc, #276]	; (24c54 <__aeabi_dadd+0x384>)
   24b3e:	1af6      	subs	r6, r6, r3
   24b40:	402c      	ands	r4, r5
   24b42:	e749      	b.n	249d8 <__aeabi_dadd+0x108>
   24b44:	003d      	movs	r5, r7
   24b46:	3828      	subs	r0, #40	; 0x28
   24b48:	4085      	lsls	r5, r0
   24b4a:	2700      	movs	r7, #0
   24b4c:	e72e      	b.n	249ac <__aeabi_dadd+0xdc>
   24b4e:	0038      	movs	r0, r7
   24b50:	f001 fb04 	bl	2615c <__clzsi2>
   24b54:	3020      	adds	r0, #32
   24b56:	e71d      	b.n	24994 <__aeabi_dadd+0xc4>
   24b58:	430a      	orrs	r2, r1
   24b5a:	1e51      	subs	r1, r2, #1
   24b5c:	418a      	sbcs	r2, r1
   24b5e:	2100      	movs	r1, #0
   24b60:	e707      	b.n	24972 <__aeabi_dadd+0xa2>
   24b62:	2b00      	cmp	r3, #0
   24b64:	d000      	beq.n	24b68 <__aeabi_dadd+0x298>
   24b66:	e0f3      	b.n	24d50 <__aeabi_dadd+0x480>
   24b68:	1c70      	adds	r0, r6, #1
   24b6a:	0543      	lsls	r3, r0, #21
   24b6c:	0d5b      	lsrs	r3, r3, #21
   24b6e:	2b01      	cmp	r3, #1
   24b70:	dc00      	bgt.n	24b74 <__aeabi_dadd+0x2a4>
   24b72:	e0ad      	b.n	24cd0 <__aeabi_dadd+0x400>
   24b74:	4b36      	ldr	r3, [pc, #216]	; (24c50 <__aeabi_dadd+0x380>)
   24b76:	4298      	cmp	r0, r3
   24b78:	d100      	bne.n	24b7c <__aeabi_dadd+0x2ac>
   24b7a:	e0d1      	b.n	24d20 <__aeabi_dadd+0x450>
   24b7c:	18ba      	adds	r2, r7, r2
   24b7e:	42ba      	cmp	r2, r7
   24b80:	41bf      	sbcs	r7, r7
   24b82:	1864      	adds	r4, r4, r1
   24b84:	427f      	negs	r7, r7
   24b86:	19e4      	adds	r4, r4, r7
   24b88:	07e7      	lsls	r7, r4, #31
   24b8a:	0852      	lsrs	r2, r2, #1
   24b8c:	4317      	orrs	r7, r2
   24b8e:	0864      	lsrs	r4, r4, #1
   24b90:	0006      	movs	r6, r0
   24b92:	e721      	b.n	249d8 <__aeabi_dadd+0x108>
   24b94:	482e      	ldr	r0, [pc, #184]	; (24c50 <__aeabi_dadd+0x380>)
   24b96:	4285      	cmp	r5, r0
   24b98:	d100      	bne.n	24b9c <__aeabi_dadd+0x2cc>
   24b9a:	e093      	b.n	24cc4 <__aeabi_dadd+0x3f4>
   24b9c:	001d      	movs	r5, r3
   24b9e:	e6d0      	b.n	24942 <__aeabi_dadd+0x72>
   24ba0:	0029      	movs	r1, r5
   24ba2:	3e1f      	subs	r6, #31
   24ba4:	40f1      	lsrs	r1, r6
   24ba6:	2b20      	cmp	r3, #32
   24ba8:	d100      	bne.n	24bac <__aeabi_dadd+0x2dc>
   24baa:	e08d      	b.n	24cc8 <__aeabi_dadd+0x3f8>
   24bac:	2240      	movs	r2, #64	; 0x40
   24bae:	1ad3      	subs	r3, r2, r3
   24bb0:	409d      	lsls	r5, r3
   24bb2:	432f      	orrs	r7, r5
   24bb4:	1e7d      	subs	r5, r7, #1
   24bb6:	41af      	sbcs	r7, r5
   24bb8:	2400      	movs	r4, #0
   24bba:	430f      	orrs	r7, r1
   24bbc:	2600      	movs	r6, #0
   24bbe:	e744      	b.n	24a4a <__aeabi_dadd+0x17a>
   24bc0:	002b      	movs	r3, r5
   24bc2:	0008      	movs	r0, r1
   24bc4:	3b20      	subs	r3, #32
   24bc6:	40d8      	lsrs	r0, r3
   24bc8:	0003      	movs	r3, r0
   24bca:	2d20      	cmp	r5, #32
   24bcc:	d100      	bne.n	24bd0 <__aeabi_dadd+0x300>
   24bce:	e07d      	b.n	24ccc <__aeabi_dadd+0x3fc>
   24bd0:	2040      	movs	r0, #64	; 0x40
   24bd2:	1b45      	subs	r5, r0, r5
   24bd4:	40a9      	lsls	r1, r5
   24bd6:	430a      	orrs	r2, r1
   24bd8:	1e51      	subs	r1, r2, #1
   24bda:	418a      	sbcs	r2, r1
   24bdc:	2100      	movs	r1, #0
   24bde:	431a      	orrs	r2, r3
   24be0:	e6c7      	b.n	24972 <__aeabi_dadd+0xa2>
   24be2:	2e00      	cmp	r6, #0
   24be4:	d050      	beq.n	24c88 <__aeabi_dadd+0x3b8>
   24be6:	4e1a      	ldr	r6, [pc, #104]	; (24c50 <__aeabi_dadd+0x380>)
   24be8:	42b0      	cmp	r0, r6
   24bea:	d057      	beq.n	24c9c <__aeabi_dadd+0x3cc>
   24bec:	2680      	movs	r6, #128	; 0x80
   24bee:	426b      	negs	r3, r5
   24bf0:	4699      	mov	r9, r3
   24bf2:	0436      	lsls	r6, r6, #16
   24bf4:	4334      	orrs	r4, r6
   24bf6:	464b      	mov	r3, r9
   24bf8:	2b38      	cmp	r3, #56	; 0x38
   24bfa:	dd00      	ble.n	24bfe <__aeabi_dadd+0x32e>
   24bfc:	e0d6      	b.n	24dac <__aeabi_dadd+0x4dc>
   24bfe:	2b1f      	cmp	r3, #31
   24c00:	dd00      	ble.n	24c04 <__aeabi_dadd+0x334>
   24c02:	e135      	b.n	24e70 <__aeabi_dadd+0x5a0>
   24c04:	2620      	movs	r6, #32
   24c06:	1af5      	subs	r5, r6, r3
   24c08:	0026      	movs	r6, r4
   24c0a:	40ae      	lsls	r6, r5
   24c0c:	46b2      	mov	sl, r6
   24c0e:	003e      	movs	r6, r7
   24c10:	40de      	lsrs	r6, r3
   24c12:	46ac      	mov	ip, r5
   24c14:	0035      	movs	r5, r6
   24c16:	4656      	mov	r6, sl
   24c18:	432e      	orrs	r6, r5
   24c1a:	4665      	mov	r5, ip
   24c1c:	40af      	lsls	r7, r5
   24c1e:	1e7d      	subs	r5, r7, #1
   24c20:	41af      	sbcs	r7, r5
   24c22:	40dc      	lsrs	r4, r3
   24c24:	4337      	orrs	r7, r6
   24c26:	1bd7      	subs	r7, r2, r7
   24c28:	42ba      	cmp	r2, r7
   24c2a:	4192      	sbcs	r2, r2
   24c2c:	1b0c      	subs	r4, r1, r4
   24c2e:	4252      	negs	r2, r2
   24c30:	1aa4      	subs	r4, r4, r2
   24c32:	0006      	movs	r6, r0
   24c34:	46d8      	mov	r8, fp
   24c36:	e6a3      	b.n	24980 <__aeabi_dadd+0xb0>
   24c38:	4664      	mov	r4, ip
   24c3a:	4667      	mov	r7, ip
   24c3c:	432c      	orrs	r4, r5
   24c3e:	d000      	beq.n	24c42 <__aeabi_dadd+0x372>
   24c40:	e6a2      	b.n	24988 <__aeabi_dadd+0xb8>
   24c42:	2500      	movs	r5, #0
   24c44:	2600      	movs	r6, #0
   24c46:	2700      	movs	r7, #0
   24c48:	e706      	b.n	24a58 <__aeabi_dadd+0x188>
   24c4a:	001e      	movs	r6, r3
   24c4c:	e6c4      	b.n	249d8 <__aeabi_dadd+0x108>
   24c4e:	46c0      	nop			; (mov r8, r8)
   24c50:	000007ff 	.word	0x000007ff
   24c54:	ff7fffff 	.word	0xff7fffff
   24c58:	800fffff 	.word	0x800fffff
   24c5c:	2b1f      	cmp	r3, #31
   24c5e:	dc63      	bgt.n	24d28 <__aeabi_dadd+0x458>
   24c60:	2020      	movs	r0, #32
   24c62:	1ac3      	subs	r3, r0, r3
   24c64:	0008      	movs	r0, r1
   24c66:	4098      	lsls	r0, r3
   24c68:	469c      	mov	ip, r3
   24c6a:	4683      	mov	fp, r0
   24c6c:	4653      	mov	r3, sl
   24c6e:	0010      	movs	r0, r2
   24c70:	40d8      	lsrs	r0, r3
   24c72:	0003      	movs	r3, r0
   24c74:	4658      	mov	r0, fp
   24c76:	4318      	orrs	r0, r3
   24c78:	4663      	mov	r3, ip
   24c7a:	409a      	lsls	r2, r3
   24c7c:	1e53      	subs	r3, r2, #1
   24c7e:	419a      	sbcs	r2, r3
   24c80:	4653      	mov	r3, sl
   24c82:	4302      	orrs	r2, r0
   24c84:	40d9      	lsrs	r1, r3
   24c86:	e703      	b.n	24a90 <__aeabi_dadd+0x1c0>
   24c88:	0026      	movs	r6, r4
   24c8a:	433e      	orrs	r6, r7
   24c8c:	d006      	beq.n	24c9c <__aeabi_dadd+0x3cc>
   24c8e:	43eb      	mvns	r3, r5
   24c90:	4699      	mov	r9, r3
   24c92:	2b00      	cmp	r3, #0
   24c94:	d0c7      	beq.n	24c26 <__aeabi_dadd+0x356>
   24c96:	4e94      	ldr	r6, [pc, #592]	; (24ee8 <__aeabi_dadd+0x618>)
   24c98:	42b0      	cmp	r0, r6
   24c9a:	d1ac      	bne.n	24bf6 <__aeabi_dadd+0x326>
   24c9c:	000c      	movs	r4, r1
   24c9e:	0017      	movs	r7, r2
   24ca0:	0006      	movs	r6, r0
   24ca2:	46d8      	mov	r8, fp
   24ca4:	e698      	b.n	249d8 <__aeabi_dadd+0x108>
   24ca6:	4b90      	ldr	r3, [pc, #576]	; (24ee8 <__aeabi_dadd+0x618>)
   24ca8:	459a      	cmp	sl, r3
   24caa:	d00b      	beq.n	24cc4 <__aeabi_dadd+0x3f4>
   24cac:	4682      	mov	sl, r0
   24cae:	e6e7      	b.n	24a80 <__aeabi_dadd+0x1b0>
   24cb0:	2800      	cmp	r0, #0
   24cb2:	d000      	beq.n	24cb6 <__aeabi_dadd+0x3e6>
   24cb4:	e09e      	b.n	24df4 <__aeabi_dadd+0x524>
   24cb6:	0018      	movs	r0, r3
   24cb8:	4310      	orrs	r0, r2
   24cba:	d100      	bne.n	24cbe <__aeabi_dadd+0x3ee>
   24cbc:	e0e9      	b.n	24e92 <__aeabi_dadd+0x5c2>
   24cbe:	001c      	movs	r4, r3
   24cc0:	0017      	movs	r7, r2
   24cc2:	46d8      	mov	r8, fp
   24cc4:	4e88      	ldr	r6, [pc, #544]	; (24ee8 <__aeabi_dadd+0x618>)
   24cc6:	e687      	b.n	249d8 <__aeabi_dadd+0x108>
   24cc8:	2500      	movs	r5, #0
   24cca:	e772      	b.n	24bb2 <__aeabi_dadd+0x2e2>
   24ccc:	2100      	movs	r1, #0
   24cce:	e782      	b.n	24bd6 <__aeabi_dadd+0x306>
   24cd0:	0023      	movs	r3, r4
   24cd2:	433b      	orrs	r3, r7
   24cd4:	2e00      	cmp	r6, #0
   24cd6:	d000      	beq.n	24cda <__aeabi_dadd+0x40a>
   24cd8:	e0ab      	b.n	24e32 <__aeabi_dadd+0x562>
   24cda:	2b00      	cmp	r3, #0
   24cdc:	d100      	bne.n	24ce0 <__aeabi_dadd+0x410>
   24cde:	e0e7      	b.n	24eb0 <__aeabi_dadd+0x5e0>
   24ce0:	000b      	movs	r3, r1
   24ce2:	4313      	orrs	r3, r2
   24ce4:	d100      	bne.n	24ce8 <__aeabi_dadd+0x418>
   24ce6:	e677      	b.n	249d8 <__aeabi_dadd+0x108>
   24ce8:	18ba      	adds	r2, r7, r2
   24cea:	42ba      	cmp	r2, r7
   24cec:	41bf      	sbcs	r7, r7
   24cee:	1864      	adds	r4, r4, r1
   24cf0:	427f      	negs	r7, r7
   24cf2:	19e4      	adds	r4, r4, r7
   24cf4:	0223      	lsls	r3, r4, #8
   24cf6:	d400      	bmi.n	24cfa <__aeabi_dadd+0x42a>
   24cf8:	e0f2      	b.n	24ee0 <__aeabi_dadd+0x610>
   24cfa:	4b7c      	ldr	r3, [pc, #496]	; (24eec <__aeabi_dadd+0x61c>)
   24cfc:	0017      	movs	r7, r2
   24cfe:	401c      	ands	r4, r3
   24d00:	0006      	movs	r6, r0
   24d02:	e669      	b.n	249d8 <__aeabi_dadd+0x108>
   24d04:	0020      	movs	r0, r4
   24d06:	4338      	orrs	r0, r7
   24d08:	2e00      	cmp	r6, #0
   24d0a:	d1d1      	bne.n	24cb0 <__aeabi_dadd+0x3e0>
   24d0c:	2800      	cmp	r0, #0
   24d0e:	d15b      	bne.n	24dc8 <__aeabi_dadd+0x4f8>
   24d10:	001c      	movs	r4, r3
   24d12:	4314      	orrs	r4, r2
   24d14:	d100      	bne.n	24d18 <__aeabi_dadd+0x448>
   24d16:	e0a8      	b.n	24e6a <__aeabi_dadd+0x59a>
   24d18:	001c      	movs	r4, r3
   24d1a:	0017      	movs	r7, r2
   24d1c:	46d8      	mov	r8, fp
   24d1e:	e65b      	b.n	249d8 <__aeabi_dadd+0x108>
   24d20:	0006      	movs	r6, r0
   24d22:	2400      	movs	r4, #0
   24d24:	2700      	movs	r7, #0
   24d26:	e697      	b.n	24a58 <__aeabi_dadd+0x188>
   24d28:	4650      	mov	r0, sl
   24d2a:	000b      	movs	r3, r1
   24d2c:	3820      	subs	r0, #32
   24d2e:	40c3      	lsrs	r3, r0
   24d30:	4699      	mov	r9, r3
   24d32:	4653      	mov	r3, sl
   24d34:	2b20      	cmp	r3, #32
   24d36:	d100      	bne.n	24d3a <__aeabi_dadd+0x46a>
   24d38:	e095      	b.n	24e66 <__aeabi_dadd+0x596>
   24d3a:	2340      	movs	r3, #64	; 0x40
   24d3c:	4650      	mov	r0, sl
   24d3e:	1a1b      	subs	r3, r3, r0
   24d40:	4099      	lsls	r1, r3
   24d42:	430a      	orrs	r2, r1
   24d44:	1e51      	subs	r1, r2, #1
   24d46:	418a      	sbcs	r2, r1
   24d48:	464b      	mov	r3, r9
   24d4a:	2100      	movs	r1, #0
   24d4c:	431a      	orrs	r2, r3
   24d4e:	e69f      	b.n	24a90 <__aeabi_dadd+0x1c0>
   24d50:	2e00      	cmp	r6, #0
   24d52:	d130      	bne.n	24db6 <__aeabi_dadd+0x4e6>
   24d54:	0026      	movs	r6, r4
   24d56:	433e      	orrs	r6, r7
   24d58:	d067      	beq.n	24e2a <__aeabi_dadd+0x55a>
   24d5a:	43db      	mvns	r3, r3
   24d5c:	469a      	mov	sl, r3
   24d5e:	2b00      	cmp	r3, #0
   24d60:	d01c      	beq.n	24d9c <__aeabi_dadd+0x4cc>
   24d62:	4e61      	ldr	r6, [pc, #388]	; (24ee8 <__aeabi_dadd+0x618>)
   24d64:	42b0      	cmp	r0, r6
   24d66:	d060      	beq.n	24e2a <__aeabi_dadd+0x55a>
   24d68:	4653      	mov	r3, sl
   24d6a:	2b38      	cmp	r3, #56	; 0x38
   24d6c:	dd00      	ble.n	24d70 <__aeabi_dadd+0x4a0>
   24d6e:	e096      	b.n	24e9e <__aeabi_dadd+0x5ce>
   24d70:	2b1f      	cmp	r3, #31
   24d72:	dd00      	ble.n	24d76 <__aeabi_dadd+0x4a6>
   24d74:	e09f      	b.n	24eb6 <__aeabi_dadd+0x5e6>
   24d76:	2620      	movs	r6, #32
   24d78:	1af3      	subs	r3, r6, r3
   24d7a:	0026      	movs	r6, r4
   24d7c:	409e      	lsls	r6, r3
   24d7e:	469c      	mov	ip, r3
   24d80:	46b3      	mov	fp, r6
   24d82:	4653      	mov	r3, sl
   24d84:	003e      	movs	r6, r7
   24d86:	40de      	lsrs	r6, r3
   24d88:	0033      	movs	r3, r6
   24d8a:	465e      	mov	r6, fp
   24d8c:	431e      	orrs	r6, r3
   24d8e:	4663      	mov	r3, ip
   24d90:	409f      	lsls	r7, r3
   24d92:	1e7b      	subs	r3, r7, #1
   24d94:	419f      	sbcs	r7, r3
   24d96:	4653      	mov	r3, sl
   24d98:	40dc      	lsrs	r4, r3
   24d9a:	4337      	orrs	r7, r6
   24d9c:	18bf      	adds	r7, r7, r2
   24d9e:	4297      	cmp	r7, r2
   24da0:	4192      	sbcs	r2, r2
   24da2:	1864      	adds	r4, r4, r1
   24da4:	4252      	negs	r2, r2
   24da6:	18a4      	adds	r4, r4, r2
   24da8:	0006      	movs	r6, r0
   24daa:	e678      	b.n	24a9e <__aeabi_dadd+0x1ce>
   24dac:	4327      	orrs	r7, r4
   24dae:	1e7c      	subs	r4, r7, #1
   24db0:	41a7      	sbcs	r7, r4
   24db2:	2400      	movs	r4, #0
   24db4:	e737      	b.n	24c26 <__aeabi_dadd+0x356>
   24db6:	4e4c      	ldr	r6, [pc, #304]	; (24ee8 <__aeabi_dadd+0x618>)
   24db8:	42b0      	cmp	r0, r6
   24dba:	d036      	beq.n	24e2a <__aeabi_dadd+0x55a>
   24dbc:	2680      	movs	r6, #128	; 0x80
   24dbe:	425b      	negs	r3, r3
   24dc0:	0436      	lsls	r6, r6, #16
   24dc2:	469a      	mov	sl, r3
   24dc4:	4334      	orrs	r4, r6
   24dc6:	e7cf      	b.n	24d68 <__aeabi_dadd+0x498>
   24dc8:	0018      	movs	r0, r3
   24dca:	4310      	orrs	r0, r2
   24dcc:	d100      	bne.n	24dd0 <__aeabi_dadd+0x500>
   24dce:	e603      	b.n	249d8 <__aeabi_dadd+0x108>
   24dd0:	1ab8      	subs	r0, r7, r2
   24dd2:	4684      	mov	ip, r0
   24dd4:	4567      	cmp	r7, ip
   24dd6:	41ad      	sbcs	r5, r5
   24dd8:	1ae0      	subs	r0, r4, r3
   24dda:	426d      	negs	r5, r5
   24ddc:	1b40      	subs	r0, r0, r5
   24dde:	0205      	lsls	r5, r0, #8
   24de0:	d400      	bmi.n	24de4 <__aeabi_dadd+0x514>
   24de2:	e62c      	b.n	24a3e <__aeabi_dadd+0x16e>
   24de4:	1bd7      	subs	r7, r2, r7
   24de6:	42ba      	cmp	r2, r7
   24de8:	4192      	sbcs	r2, r2
   24dea:	1b1c      	subs	r4, r3, r4
   24dec:	4252      	negs	r2, r2
   24dee:	1aa4      	subs	r4, r4, r2
   24df0:	46d8      	mov	r8, fp
   24df2:	e5f1      	b.n	249d8 <__aeabi_dadd+0x108>
   24df4:	0018      	movs	r0, r3
   24df6:	4310      	orrs	r0, r2
   24df8:	d100      	bne.n	24dfc <__aeabi_dadd+0x52c>
   24dfa:	e763      	b.n	24cc4 <__aeabi_dadd+0x3f4>
   24dfc:	08f8      	lsrs	r0, r7, #3
   24dfe:	0767      	lsls	r7, r4, #29
   24e00:	4307      	orrs	r7, r0
   24e02:	2080      	movs	r0, #128	; 0x80
   24e04:	08e4      	lsrs	r4, r4, #3
   24e06:	0300      	lsls	r0, r0, #12
   24e08:	4204      	tst	r4, r0
   24e0a:	d008      	beq.n	24e1e <__aeabi_dadd+0x54e>
   24e0c:	08dd      	lsrs	r5, r3, #3
   24e0e:	4205      	tst	r5, r0
   24e10:	d105      	bne.n	24e1e <__aeabi_dadd+0x54e>
   24e12:	08d2      	lsrs	r2, r2, #3
   24e14:	0759      	lsls	r1, r3, #29
   24e16:	4311      	orrs	r1, r2
   24e18:	000f      	movs	r7, r1
   24e1a:	002c      	movs	r4, r5
   24e1c:	46d8      	mov	r8, fp
   24e1e:	0f7b      	lsrs	r3, r7, #29
   24e20:	00e4      	lsls	r4, r4, #3
   24e22:	431c      	orrs	r4, r3
   24e24:	00ff      	lsls	r7, r7, #3
   24e26:	4e30      	ldr	r6, [pc, #192]	; (24ee8 <__aeabi_dadd+0x618>)
   24e28:	e5d6      	b.n	249d8 <__aeabi_dadd+0x108>
   24e2a:	000c      	movs	r4, r1
   24e2c:	0017      	movs	r7, r2
   24e2e:	0006      	movs	r6, r0
   24e30:	e5d2      	b.n	249d8 <__aeabi_dadd+0x108>
   24e32:	2b00      	cmp	r3, #0
   24e34:	d038      	beq.n	24ea8 <__aeabi_dadd+0x5d8>
   24e36:	000b      	movs	r3, r1
   24e38:	4313      	orrs	r3, r2
   24e3a:	d100      	bne.n	24e3e <__aeabi_dadd+0x56e>
   24e3c:	e742      	b.n	24cc4 <__aeabi_dadd+0x3f4>
   24e3e:	08f8      	lsrs	r0, r7, #3
   24e40:	0767      	lsls	r7, r4, #29
   24e42:	4307      	orrs	r7, r0
   24e44:	2080      	movs	r0, #128	; 0x80
   24e46:	08e4      	lsrs	r4, r4, #3
   24e48:	0300      	lsls	r0, r0, #12
   24e4a:	4204      	tst	r4, r0
   24e4c:	d0e7      	beq.n	24e1e <__aeabi_dadd+0x54e>
   24e4e:	08cb      	lsrs	r3, r1, #3
   24e50:	4203      	tst	r3, r0
   24e52:	d1e4      	bne.n	24e1e <__aeabi_dadd+0x54e>
   24e54:	08d2      	lsrs	r2, r2, #3
   24e56:	0749      	lsls	r1, r1, #29
   24e58:	4311      	orrs	r1, r2
   24e5a:	000f      	movs	r7, r1
   24e5c:	001c      	movs	r4, r3
   24e5e:	e7de      	b.n	24e1e <__aeabi_dadd+0x54e>
   24e60:	2700      	movs	r7, #0
   24e62:	2400      	movs	r4, #0
   24e64:	e5d5      	b.n	24a12 <__aeabi_dadd+0x142>
   24e66:	2100      	movs	r1, #0
   24e68:	e76b      	b.n	24d42 <__aeabi_dadd+0x472>
   24e6a:	2500      	movs	r5, #0
   24e6c:	2700      	movs	r7, #0
   24e6e:	e5f3      	b.n	24a58 <__aeabi_dadd+0x188>
   24e70:	464e      	mov	r6, r9
   24e72:	0025      	movs	r5, r4
   24e74:	3e20      	subs	r6, #32
   24e76:	40f5      	lsrs	r5, r6
   24e78:	464b      	mov	r3, r9
   24e7a:	002e      	movs	r6, r5
   24e7c:	2b20      	cmp	r3, #32
   24e7e:	d02d      	beq.n	24edc <__aeabi_dadd+0x60c>
   24e80:	2540      	movs	r5, #64	; 0x40
   24e82:	1aed      	subs	r5, r5, r3
   24e84:	40ac      	lsls	r4, r5
   24e86:	4327      	orrs	r7, r4
   24e88:	1e7c      	subs	r4, r7, #1
   24e8a:	41a7      	sbcs	r7, r4
   24e8c:	2400      	movs	r4, #0
   24e8e:	4337      	orrs	r7, r6
   24e90:	e6c9      	b.n	24c26 <__aeabi_dadd+0x356>
   24e92:	2480      	movs	r4, #128	; 0x80
   24e94:	2500      	movs	r5, #0
   24e96:	0324      	lsls	r4, r4, #12
   24e98:	4e13      	ldr	r6, [pc, #76]	; (24ee8 <__aeabi_dadd+0x618>)
   24e9a:	2700      	movs	r7, #0
   24e9c:	e5dc      	b.n	24a58 <__aeabi_dadd+0x188>
   24e9e:	4327      	orrs	r7, r4
   24ea0:	1e7c      	subs	r4, r7, #1
   24ea2:	41a7      	sbcs	r7, r4
   24ea4:	2400      	movs	r4, #0
   24ea6:	e779      	b.n	24d9c <__aeabi_dadd+0x4cc>
   24ea8:	000c      	movs	r4, r1
   24eaa:	0017      	movs	r7, r2
   24eac:	4e0e      	ldr	r6, [pc, #56]	; (24ee8 <__aeabi_dadd+0x618>)
   24eae:	e593      	b.n	249d8 <__aeabi_dadd+0x108>
   24eb0:	000c      	movs	r4, r1
   24eb2:	0017      	movs	r7, r2
   24eb4:	e590      	b.n	249d8 <__aeabi_dadd+0x108>
   24eb6:	4656      	mov	r6, sl
   24eb8:	0023      	movs	r3, r4
   24eba:	3e20      	subs	r6, #32
   24ebc:	40f3      	lsrs	r3, r6
   24ebe:	4699      	mov	r9, r3
   24ec0:	4653      	mov	r3, sl
   24ec2:	2b20      	cmp	r3, #32
   24ec4:	d00e      	beq.n	24ee4 <__aeabi_dadd+0x614>
   24ec6:	2340      	movs	r3, #64	; 0x40
   24ec8:	4656      	mov	r6, sl
   24eca:	1b9b      	subs	r3, r3, r6
   24ecc:	409c      	lsls	r4, r3
   24ece:	4327      	orrs	r7, r4
   24ed0:	1e7c      	subs	r4, r7, #1
   24ed2:	41a7      	sbcs	r7, r4
   24ed4:	464b      	mov	r3, r9
   24ed6:	2400      	movs	r4, #0
   24ed8:	431f      	orrs	r7, r3
   24eda:	e75f      	b.n	24d9c <__aeabi_dadd+0x4cc>
   24edc:	2400      	movs	r4, #0
   24ede:	e7d2      	b.n	24e86 <__aeabi_dadd+0x5b6>
   24ee0:	0017      	movs	r7, r2
   24ee2:	e5b2      	b.n	24a4a <__aeabi_dadd+0x17a>
   24ee4:	2400      	movs	r4, #0
   24ee6:	e7f2      	b.n	24ece <__aeabi_dadd+0x5fe>
   24ee8:	000007ff 	.word	0x000007ff
   24eec:	ff7fffff 	.word	0xff7fffff

00024ef0 <__aeabi_ddiv>:
   24ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   24ef2:	4657      	mov	r7, sl
   24ef4:	4645      	mov	r5, r8
   24ef6:	46de      	mov	lr, fp
   24ef8:	464e      	mov	r6, r9
   24efa:	b5e0      	push	{r5, r6, r7, lr}
   24efc:	004c      	lsls	r4, r1, #1
   24efe:	030e      	lsls	r6, r1, #12
   24f00:	b087      	sub	sp, #28
   24f02:	4683      	mov	fp, r0
   24f04:	4692      	mov	sl, r2
   24f06:	001d      	movs	r5, r3
   24f08:	4680      	mov	r8, r0
   24f0a:	0b36      	lsrs	r6, r6, #12
   24f0c:	0d64      	lsrs	r4, r4, #21
   24f0e:	0fcf      	lsrs	r7, r1, #31
   24f10:	2c00      	cmp	r4, #0
   24f12:	d04f      	beq.n	24fb4 <__aeabi_ddiv+0xc4>
   24f14:	4b6f      	ldr	r3, [pc, #444]	; (250d4 <__aeabi_ddiv+0x1e4>)
   24f16:	429c      	cmp	r4, r3
   24f18:	d035      	beq.n	24f86 <__aeabi_ddiv+0x96>
   24f1a:	2380      	movs	r3, #128	; 0x80
   24f1c:	0f42      	lsrs	r2, r0, #29
   24f1e:	041b      	lsls	r3, r3, #16
   24f20:	00f6      	lsls	r6, r6, #3
   24f22:	4313      	orrs	r3, r2
   24f24:	4333      	orrs	r3, r6
   24f26:	4699      	mov	r9, r3
   24f28:	00c3      	lsls	r3, r0, #3
   24f2a:	4698      	mov	r8, r3
   24f2c:	4b6a      	ldr	r3, [pc, #424]	; (250d8 <__aeabi_ddiv+0x1e8>)
   24f2e:	2600      	movs	r6, #0
   24f30:	469c      	mov	ip, r3
   24f32:	2300      	movs	r3, #0
   24f34:	4464      	add	r4, ip
   24f36:	9303      	str	r3, [sp, #12]
   24f38:	032b      	lsls	r3, r5, #12
   24f3a:	0b1b      	lsrs	r3, r3, #12
   24f3c:	469b      	mov	fp, r3
   24f3e:	006b      	lsls	r3, r5, #1
   24f40:	0fed      	lsrs	r5, r5, #31
   24f42:	4650      	mov	r0, sl
   24f44:	0d5b      	lsrs	r3, r3, #21
   24f46:	9501      	str	r5, [sp, #4]
   24f48:	d05e      	beq.n	25008 <__aeabi_ddiv+0x118>
   24f4a:	4a62      	ldr	r2, [pc, #392]	; (250d4 <__aeabi_ddiv+0x1e4>)
   24f4c:	4293      	cmp	r3, r2
   24f4e:	d053      	beq.n	24ff8 <__aeabi_ddiv+0x108>
   24f50:	465a      	mov	r2, fp
   24f52:	00d1      	lsls	r1, r2, #3
   24f54:	2280      	movs	r2, #128	; 0x80
   24f56:	0f40      	lsrs	r0, r0, #29
   24f58:	0412      	lsls	r2, r2, #16
   24f5a:	4302      	orrs	r2, r0
   24f5c:	430a      	orrs	r2, r1
   24f5e:	4693      	mov	fp, r2
   24f60:	4652      	mov	r2, sl
   24f62:	00d1      	lsls	r1, r2, #3
   24f64:	4a5c      	ldr	r2, [pc, #368]	; (250d8 <__aeabi_ddiv+0x1e8>)
   24f66:	4694      	mov	ip, r2
   24f68:	2200      	movs	r2, #0
   24f6a:	4463      	add	r3, ip
   24f6c:	0038      	movs	r0, r7
   24f6e:	4068      	eors	r0, r5
   24f70:	4684      	mov	ip, r0
   24f72:	9002      	str	r0, [sp, #8]
   24f74:	1ae4      	subs	r4, r4, r3
   24f76:	4316      	orrs	r6, r2
   24f78:	2e0f      	cmp	r6, #15
   24f7a:	d900      	bls.n	24f7e <__aeabi_ddiv+0x8e>
   24f7c:	e0b4      	b.n	250e8 <__aeabi_ddiv+0x1f8>
   24f7e:	4b57      	ldr	r3, [pc, #348]	; (250dc <__aeabi_ddiv+0x1ec>)
   24f80:	00b6      	lsls	r6, r6, #2
   24f82:	599b      	ldr	r3, [r3, r6]
   24f84:	469f      	mov	pc, r3
   24f86:	0003      	movs	r3, r0
   24f88:	4333      	orrs	r3, r6
   24f8a:	4699      	mov	r9, r3
   24f8c:	d16c      	bne.n	25068 <__aeabi_ddiv+0x178>
   24f8e:	2300      	movs	r3, #0
   24f90:	4698      	mov	r8, r3
   24f92:	3302      	adds	r3, #2
   24f94:	2608      	movs	r6, #8
   24f96:	9303      	str	r3, [sp, #12]
   24f98:	e7ce      	b.n	24f38 <__aeabi_ddiv+0x48>
   24f9a:	46cb      	mov	fp, r9
   24f9c:	4641      	mov	r1, r8
   24f9e:	9a03      	ldr	r2, [sp, #12]
   24fa0:	9701      	str	r7, [sp, #4]
   24fa2:	2a02      	cmp	r2, #2
   24fa4:	d165      	bne.n	25072 <__aeabi_ddiv+0x182>
   24fa6:	9b01      	ldr	r3, [sp, #4]
   24fa8:	4c4a      	ldr	r4, [pc, #296]	; (250d4 <__aeabi_ddiv+0x1e4>)
   24faa:	469c      	mov	ip, r3
   24fac:	2300      	movs	r3, #0
   24fae:	2200      	movs	r2, #0
   24fb0:	4698      	mov	r8, r3
   24fb2:	e06b      	b.n	2508c <__aeabi_ddiv+0x19c>
   24fb4:	0003      	movs	r3, r0
   24fb6:	4333      	orrs	r3, r6
   24fb8:	4699      	mov	r9, r3
   24fba:	d04e      	beq.n	2505a <__aeabi_ddiv+0x16a>
   24fbc:	2e00      	cmp	r6, #0
   24fbe:	d100      	bne.n	24fc2 <__aeabi_ddiv+0xd2>
   24fc0:	e1bc      	b.n	2533c <__aeabi_ddiv+0x44c>
   24fc2:	0030      	movs	r0, r6
   24fc4:	f001 f8ca 	bl	2615c <__clzsi2>
   24fc8:	0003      	movs	r3, r0
   24fca:	3b0b      	subs	r3, #11
   24fcc:	2b1c      	cmp	r3, #28
   24fce:	dd00      	ble.n	24fd2 <__aeabi_ddiv+0xe2>
   24fd0:	e1ac      	b.n	2532c <__aeabi_ddiv+0x43c>
   24fd2:	221d      	movs	r2, #29
   24fd4:	1ad3      	subs	r3, r2, r3
   24fd6:	465a      	mov	r2, fp
   24fd8:	0001      	movs	r1, r0
   24fda:	40da      	lsrs	r2, r3
   24fdc:	3908      	subs	r1, #8
   24fde:	408e      	lsls	r6, r1
   24fe0:	0013      	movs	r3, r2
   24fe2:	4333      	orrs	r3, r6
   24fe4:	4699      	mov	r9, r3
   24fe6:	465b      	mov	r3, fp
   24fe8:	408b      	lsls	r3, r1
   24fea:	4698      	mov	r8, r3
   24fec:	2300      	movs	r3, #0
   24fee:	4c3c      	ldr	r4, [pc, #240]	; (250e0 <__aeabi_ddiv+0x1f0>)
   24ff0:	2600      	movs	r6, #0
   24ff2:	1a24      	subs	r4, r4, r0
   24ff4:	9303      	str	r3, [sp, #12]
   24ff6:	e79f      	b.n	24f38 <__aeabi_ddiv+0x48>
   24ff8:	4651      	mov	r1, sl
   24ffa:	465a      	mov	r2, fp
   24ffc:	4311      	orrs	r1, r2
   24ffe:	d129      	bne.n	25054 <__aeabi_ddiv+0x164>
   25000:	2200      	movs	r2, #0
   25002:	4693      	mov	fp, r2
   25004:	3202      	adds	r2, #2
   25006:	e7b1      	b.n	24f6c <__aeabi_ddiv+0x7c>
   25008:	4659      	mov	r1, fp
   2500a:	4301      	orrs	r1, r0
   2500c:	d01e      	beq.n	2504c <__aeabi_ddiv+0x15c>
   2500e:	465b      	mov	r3, fp
   25010:	2b00      	cmp	r3, #0
   25012:	d100      	bne.n	25016 <__aeabi_ddiv+0x126>
   25014:	e19e      	b.n	25354 <__aeabi_ddiv+0x464>
   25016:	4658      	mov	r0, fp
   25018:	f001 f8a0 	bl	2615c <__clzsi2>
   2501c:	0003      	movs	r3, r0
   2501e:	3b0b      	subs	r3, #11
   25020:	2b1c      	cmp	r3, #28
   25022:	dd00      	ble.n	25026 <__aeabi_ddiv+0x136>
   25024:	e18f      	b.n	25346 <__aeabi_ddiv+0x456>
   25026:	0002      	movs	r2, r0
   25028:	4659      	mov	r1, fp
   2502a:	3a08      	subs	r2, #8
   2502c:	4091      	lsls	r1, r2
   2502e:	468b      	mov	fp, r1
   25030:	211d      	movs	r1, #29
   25032:	1acb      	subs	r3, r1, r3
   25034:	4651      	mov	r1, sl
   25036:	40d9      	lsrs	r1, r3
   25038:	000b      	movs	r3, r1
   2503a:	4659      	mov	r1, fp
   2503c:	430b      	orrs	r3, r1
   2503e:	4651      	mov	r1, sl
   25040:	469b      	mov	fp, r3
   25042:	4091      	lsls	r1, r2
   25044:	4b26      	ldr	r3, [pc, #152]	; (250e0 <__aeabi_ddiv+0x1f0>)
   25046:	2200      	movs	r2, #0
   25048:	1a1b      	subs	r3, r3, r0
   2504a:	e78f      	b.n	24f6c <__aeabi_ddiv+0x7c>
   2504c:	2300      	movs	r3, #0
   2504e:	2201      	movs	r2, #1
   25050:	469b      	mov	fp, r3
   25052:	e78b      	b.n	24f6c <__aeabi_ddiv+0x7c>
   25054:	4651      	mov	r1, sl
   25056:	2203      	movs	r2, #3
   25058:	e788      	b.n	24f6c <__aeabi_ddiv+0x7c>
   2505a:	2300      	movs	r3, #0
   2505c:	4698      	mov	r8, r3
   2505e:	3301      	adds	r3, #1
   25060:	2604      	movs	r6, #4
   25062:	2400      	movs	r4, #0
   25064:	9303      	str	r3, [sp, #12]
   25066:	e767      	b.n	24f38 <__aeabi_ddiv+0x48>
   25068:	2303      	movs	r3, #3
   2506a:	46b1      	mov	r9, r6
   2506c:	9303      	str	r3, [sp, #12]
   2506e:	260c      	movs	r6, #12
   25070:	e762      	b.n	24f38 <__aeabi_ddiv+0x48>
   25072:	2a03      	cmp	r2, #3
   25074:	d100      	bne.n	25078 <__aeabi_ddiv+0x188>
   25076:	e25c      	b.n	25532 <__aeabi_ddiv+0x642>
   25078:	9b01      	ldr	r3, [sp, #4]
   2507a:	2a01      	cmp	r2, #1
   2507c:	d000      	beq.n	25080 <__aeabi_ddiv+0x190>
   2507e:	e1e4      	b.n	2544a <__aeabi_ddiv+0x55a>
   25080:	4013      	ands	r3, r2
   25082:	469c      	mov	ip, r3
   25084:	2300      	movs	r3, #0
   25086:	2400      	movs	r4, #0
   25088:	2200      	movs	r2, #0
   2508a:	4698      	mov	r8, r3
   2508c:	2100      	movs	r1, #0
   2508e:	0312      	lsls	r2, r2, #12
   25090:	0b13      	lsrs	r3, r2, #12
   25092:	0d0a      	lsrs	r2, r1, #20
   25094:	0512      	lsls	r2, r2, #20
   25096:	431a      	orrs	r2, r3
   25098:	0523      	lsls	r3, r4, #20
   2509a:	4c12      	ldr	r4, [pc, #72]	; (250e4 <__aeabi_ddiv+0x1f4>)
   2509c:	4640      	mov	r0, r8
   2509e:	4022      	ands	r2, r4
   250a0:	4313      	orrs	r3, r2
   250a2:	4662      	mov	r2, ip
   250a4:	005b      	lsls	r3, r3, #1
   250a6:	07d2      	lsls	r2, r2, #31
   250a8:	085b      	lsrs	r3, r3, #1
   250aa:	4313      	orrs	r3, r2
   250ac:	0019      	movs	r1, r3
   250ae:	b007      	add	sp, #28
   250b0:	bc3c      	pop	{r2, r3, r4, r5}
   250b2:	4690      	mov	r8, r2
   250b4:	4699      	mov	r9, r3
   250b6:	46a2      	mov	sl, r4
   250b8:	46ab      	mov	fp, r5
   250ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   250bc:	2300      	movs	r3, #0
   250be:	2280      	movs	r2, #128	; 0x80
   250c0:	469c      	mov	ip, r3
   250c2:	0312      	lsls	r2, r2, #12
   250c4:	4698      	mov	r8, r3
   250c6:	4c03      	ldr	r4, [pc, #12]	; (250d4 <__aeabi_ddiv+0x1e4>)
   250c8:	e7e0      	b.n	2508c <__aeabi_ddiv+0x19c>
   250ca:	2300      	movs	r3, #0
   250cc:	4c01      	ldr	r4, [pc, #4]	; (250d4 <__aeabi_ddiv+0x1e4>)
   250ce:	2200      	movs	r2, #0
   250d0:	4698      	mov	r8, r3
   250d2:	e7db      	b.n	2508c <__aeabi_ddiv+0x19c>
   250d4:	000007ff 	.word	0x000007ff
   250d8:	fffffc01 	.word	0xfffffc01
   250dc:	0002ae60 	.word	0x0002ae60
   250e0:	fffffc0d 	.word	0xfffffc0d
   250e4:	800fffff 	.word	0x800fffff
   250e8:	45d9      	cmp	r9, fp
   250ea:	d900      	bls.n	250ee <__aeabi_ddiv+0x1fe>
   250ec:	e139      	b.n	25362 <__aeabi_ddiv+0x472>
   250ee:	d100      	bne.n	250f2 <__aeabi_ddiv+0x202>
   250f0:	e134      	b.n	2535c <__aeabi_ddiv+0x46c>
   250f2:	2300      	movs	r3, #0
   250f4:	4646      	mov	r6, r8
   250f6:	464d      	mov	r5, r9
   250f8:	469a      	mov	sl, r3
   250fa:	3c01      	subs	r4, #1
   250fc:	465b      	mov	r3, fp
   250fe:	0e0a      	lsrs	r2, r1, #24
   25100:	021b      	lsls	r3, r3, #8
   25102:	431a      	orrs	r2, r3
   25104:	020b      	lsls	r3, r1, #8
   25106:	0c17      	lsrs	r7, r2, #16
   25108:	9303      	str	r3, [sp, #12]
   2510a:	0413      	lsls	r3, r2, #16
   2510c:	0c1b      	lsrs	r3, r3, #16
   2510e:	0039      	movs	r1, r7
   25110:	0028      	movs	r0, r5
   25112:	4690      	mov	r8, r2
   25114:	9301      	str	r3, [sp, #4]
   25116:	f7fe ff63 	bl	23fe0 <__udivsi3>
   2511a:	0002      	movs	r2, r0
   2511c:	9b01      	ldr	r3, [sp, #4]
   2511e:	4683      	mov	fp, r0
   25120:	435a      	muls	r2, r3
   25122:	0028      	movs	r0, r5
   25124:	0039      	movs	r1, r7
   25126:	4691      	mov	r9, r2
   25128:	f7fe ffe0 	bl	240ec <__aeabi_uidivmod>
   2512c:	0c35      	lsrs	r5, r6, #16
   2512e:	0409      	lsls	r1, r1, #16
   25130:	430d      	orrs	r5, r1
   25132:	45a9      	cmp	r9, r5
   25134:	d90d      	bls.n	25152 <__aeabi_ddiv+0x262>
   25136:	465b      	mov	r3, fp
   25138:	4445      	add	r5, r8
   2513a:	3b01      	subs	r3, #1
   2513c:	45a8      	cmp	r8, r5
   2513e:	d900      	bls.n	25142 <__aeabi_ddiv+0x252>
   25140:	e13a      	b.n	253b8 <__aeabi_ddiv+0x4c8>
   25142:	45a9      	cmp	r9, r5
   25144:	d800      	bhi.n	25148 <__aeabi_ddiv+0x258>
   25146:	e137      	b.n	253b8 <__aeabi_ddiv+0x4c8>
   25148:	2302      	movs	r3, #2
   2514a:	425b      	negs	r3, r3
   2514c:	469c      	mov	ip, r3
   2514e:	4445      	add	r5, r8
   25150:	44e3      	add	fp, ip
   25152:	464b      	mov	r3, r9
   25154:	1aeb      	subs	r3, r5, r3
   25156:	0039      	movs	r1, r7
   25158:	0018      	movs	r0, r3
   2515a:	9304      	str	r3, [sp, #16]
   2515c:	f7fe ff40 	bl	23fe0 <__udivsi3>
   25160:	9b01      	ldr	r3, [sp, #4]
   25162:	0005      	movs	r5, r0
   25164:	4343      	muls	r3, r0
   25166:	0039      	movs	r1, r7
   25168:	9804      	ldr	r0, [sp, #16]
   2516a:	4699      	mov	r9, r3
   2516c:	f7fe ffbe 	bl	240ec <__aeabi_uidivmod>
   25170:	0433      	lsls	r3, r6, #16
   25172:	0409      	lsls	r1, r1, #16
   25174:	0c1b      	lsrs	r3, r3, #16
   25176:	430b      	orrs	r3, r1
   25178:	4599      	cmp	r9, r3
   2517a:	d909      	bls.n	25190 <__aeabi_ddiv+0x2a0>
   2517c:	4443      	add	r3, r8
   2517e:	1e6a      	subs	r2, r5, #1
   25180:	4598      	cmp	r8, r3
   25182:	d900      	bls.n	25186 <__aeabi_ddiv+0x296>
   25184:	e11a      	b.n	253bc <__aeabi_ddiv+0x4cc>
   25186:	4599      	cmp	r9, r3
   25188:	d800      	bhi.n	2518c <__aeabi_ddiv+0x29c>
   2518a:	e117      	b.n	253bc <__aeabi_ddiv+0x4cc>
   2518c:	3d02      	subs	r5, #2
   2518e:	4443      	add	r3, r8
   25190:	464a      	mov	r2, r9
   25192:	1a9b      	subs	r3, r3, r2
   25194:	465a      	mov	r2, fp
   25196:	0412      	lsls	r2, r2, #16
   25198:	432a      	orrs	r2, r5
   2519a:	9903      	ldr	r1, [sp, #12]
   2519c:	4693      	mov	fp, r2
   2519e:	0c10      	lsrs	r0, r2, #16
   251a0:	0c0a      	lsrs	r2, r1, #16
   251a2:	4691      	mov	r9, r2
   251a4:	0409      	lsls	r1, r1, #16
   251a6:	465a      	mov	r2, fp
   251a8:	0c09      	lsrs	r1, r1, #16
   251aa:	464e      	mov	r6, r9
   251ac:	000d      	movs	r5, r1
   251ae:	0412      	lsls	r2, r2, #16
   251b0:	0c12      	lsrs	r2, r2, #16
   251b2:	4345      	muls	r5, r0
   251b4:	9105      	str	r1, [sp, #20]
   251b6:	4351      	muls	r1, r2
   251b8:	4372      	muls	r2, r6
   251ba:	4370      	muls	r0, r6
   251bc:	1952      	adds	r2, r2, r5
   251be:	0c0e      	lsrs	r6, r1, #16
   251c0:	18b2      	adds	r2, r6, r2
   251c2:	4295      	cmp	r5, r2
   251c4:	d903      	bls.n	251ce <__aeabi_ddiv+0x2de>
   251c6:	2580      	movs	r5, #128	; 0x80
   251c8:	026d      	lsls	r5, r5, #9
   251ca:	46ac      	mov	ip, r5
   251cc:	4460      	add	r0, ip
   251ce:	0c15      	lsrs	r5, r2, #16
   251d0:	0409      	lsls	r1, r1, #16
   251d2:	0412      	lsls	r2, r2, #16
   251d4:	0c09      	lsrs	r1, r1, #16
   251d6:	1828      	adds	r0, r5, r0
   251d8:	1852      	adds	r2, r2, r1
   251da:	4283      	cmp	r3, r0
   251dc:	d200      	bcs.n	251e0 <__aeabi_ddiv+0x2f0>
   251de:	e0ce      	b.n	2537e <__aeabi_ddiv+0x48e>
   251e0:	d100      	bne.n	251e4 <__aeabi_ddiv+0x2f4>
   251e2:	e0c8      	b.n	25376 <__aeabi_ddiv+0x486>
   251e4:	1a1d      	subs	r5, r3, r0
   251e6:	4653      	mov	r3, sl
   251e8:	1a9e      	subs	r6, r3, r2
   251ea:	45b2      	cmp	sl, r6
   251ec:	4192      	sbcs	r2, r2
   251ee:	4252      	negs	r2, r2
   251f0:	1aab      	subs	r3, r5, r2
   251f2:	469a      	mov	sl, r3
   251f4:	4598      	cmp	r8, r3
   251f6:	d100      	bne.n	251fa <__aeabi_ddiv+0x30a>
   251f8:	e117      	b.n	2542a <__aeabi_ddiv+0x53a>
   251fa:	0039      	movs	r1, r7
   251fc:	0018      	movs	r0, r3
   251fe:	f7fe feef 	bl	23fe0 <__udivsi3>
   25202:	9b01      	ldr	r3, [sp, #4]
   25204:	0005      	movs	r5, r0
   25206:	4343      	muls	r3, r0
   25208:	0039      	movs	r1, r7
   2520a:	4650      	mov	r0, sl
   2520c:	9304      	str	r3, [sp, #16]
   2520e:	f7fe ff6d 	bl	240ec <__aeabi_uidivmod>
   25212:	9804      	ldr	r0, [sp, #16]
   25214:	040b      	lsls	r3, r1, #16
   25216:	0c31      	lsrs	r1, r6, #16
   25218:	4319      	orrs	r1, r3
   2521a:	4288      	cmp	r0, r1
   2521c:	d909      	bls.n	25232 <__aeabi_ddiv+0x342>
   2521e:	4441      	add	r1, r8
   25220:	1e6b      	subs	r3, r5, #1
   25222:	4588      	cmp	r8, r1
   25224:	d900      	bls.n	25228 <__aeabi_ddiv+0x338>
   25226:	e107      	b.n	25438 <__aeabi_ddiv+0x548>
   25228:	4288      	cmp	r0, r1
   2522a:	d800      	bhi.n	2522e <__aeabi_ddiv+0x33e>
   2522c:	e104      	b.n	25438 <__aeabi_ddiv+0x548>
   2522e:	3d02      	subs	r5, #2
   25230:	4441      	add	r1, r8
   25232:	9b04      	ldr	r3, [sp, #16]
   25234:	1acb      	subs	r3, r1, r3
   25236:	0018      	movs	r0, r3
   25238:	0039      	movs	r1, r7
   2523a:	9304      	str	r3, [sp, #16]
   2523c:	f7fe fed0 	bl	23fe0 <__udivsi3>
   25240:	9b01      	ldr	r3, [sp, #4]
   25242:	4682      	mov	sl, r0
   25244:	4343      	muls	r3, r0
   25246:	0039      	movs	r1, r7
   25248:	9804      	ldr	r0, [sp, #16]
   2524a:	9301      	str	r3, [sp, #4]
   2524c:	f7fe ff4e 	bl	240ec <__aeabi_uidivmod>
   25250:	9801      	ldr	r0, [sp, #4]
   25252:	040b      	lsls	r3, r1, #16
   25254:	0431      	lsls	r1, r6, #16
   25256:	0c09      	lsrs	r1, r1, #16
   25258:	4319      	orrs	r1, r3
   2525a:	4288      	cmp	r0, r1
   2525c:	d90d      	bls.n	2527a <__aeabi_ddiv+0x38a>
   2525e:	4653      	mov	r3, sl
   25260:	4441      	add	r1, r8
   25262:	3b01      	subs	r3, #1
   25264:	4588      	cmp	r8, r1
   25266:	d900      	bls.n	2526a <__aeabi_ddiv+0x37a>
   25268:	e0e8      	b.n	2543c <__aeabi_ddiv+0x54c>
   2526a:	4288      	cmp	r0, r1
   2526c:	d800      	bhi.n	25270 <__aeabi_ddiv+0x380>
   2526e:	e0e5      	b.n	2543c <__aeabi_ddiv+0x54c>
   25270:	2302      	movs	r3, #2
   25272:	425b      	negs	r3, r3
   25274:	469c      	mov	ip, r3
   25276:	4441      	add	r1, r8
   25278:	44e2      	add	sl, ip
   2527a:	9b01      	ldr	r3, [sp, #4]
   2527c:	042d      	lsls	r5, r5, #16
   2527e:	1ace      	subs	r6, r1, r3
   25280:	4651      	mov	r1, sl
   25282:	4329      	orrs	r1, r5
   25284:	9d05      	ldr	r5, [sp, #20]
   25286:	464f      	mov	r7, r9
   25288:	002a      	movs	r2, r5
   2528a:	040b      	lsls	r3, r1, #16
   2528c:	0c08      	lsrs	r0, r1, #16
   2528e:	0c1b      	lsrs	r3, r3, #16
   25290:	435a      	muls	r2, r3
   25292:	4345      	muls	r5, r0
   25294:	437b      	muls	r3, r7
   25296:	4378      	muls	r0, r7
   25298:	195b      	adds	r3, r3, r5
   2529a:	0c17      	lsrs	r7, r2, #16
   2529c:	18fb      	adds	r3, r7, r3
   2529e:	429d      	cmp	r5, r3
   252a0:	d903      	bls.n	252aa <__aeabi_ddiv+0x3ba>
   252a2:	2580      	movs	r5, #128	; 0x80
   252a4:	026d      	lsls	r5, r5, #9
   252a6:	46ac      	mov	ip, r5
   252a8:	4460      	add	r0, ip
   252aa:	0c1d      	lsrs	r5, r3, #16
   252ac:	0412      	lsls	r2, r2, #16
   252ae:	041b      	lsls	r3, r3, #16
   252b0:	0c12      	lsrs	r2, r2, #16
   252b2:	1828      	adds	r0, r5, r0
   252b4:	189b      	adds	r3, r3, r2
   252b6:	4286      	cmp	r6, r0
   252b8:	d200      	bcs.n	252bc <__aeabi_ddiv+0x3cc>
   252ba:	e093      	b.n	253e4 <__aeabi_ddiv+0x4f4>
   252bc:	d100      	bne.n	252c0 <__aeabi_ddiv+0x3d0>
   252be:	e08e      	b.n	253de <__aeabi_ddiv+0x4ee>
   252c0:	2301      	movs	r3, #1
   252c2:	4319      	orrs	r1, r3
   252c4:	4ba0      	ldr	r3, [pc, #640]	; (25548 <__aeabi_ddiv+0x658>)
   252c6:	18e3      	adds	r3, r4, r3
   252c8:	2b00      	cmp	r3, #0
   252ca:	dc00      	bgt.n	252ce <__aeabi_ddiv+0x3de>
   252cc:	e099      	b.n	25402 <__aeabi_ddiv+0x512>
   252ce:	074a      	lsls	r2, r1, #29
   252d0:	d000      	beq.n	252d4 <__aeabi_ddiv+0x3e4>
   252d2:	e09e      	b.n	25412 <__aeabi_ddiv+0x522>
   252d4:	465a      	mov	r2, fp
   252d6:	01d2      	lsls	r2, r2, #7
   252d8:	d506      	bpl.n	252e8 <__aeabi_ddiv+0x3f8>
   252da:	465a      	mov	r2, fp
   252dc:	4b9b      	ldr	r3, [pc, #620]	; (2554c <__aeabi_ddiv+0x65c>)
   252de:	401a      	ands	r2, r3
   252e0:	2380      	movs	r3, #128	; 0x80
   252e2:	4693      	mov	fp, r2
   252e4:	00db      	lsls	r3, r3, #3
   252e6:	18e3      	adds	r3, r4, r3
   252e8:	4a99      	ldr	r2, [pc, #612]	; (25550 <__aeabi_ddiv+0x660>)
   252ea:	4293      	cmp	r3, r2
   252ec:	dd68      	ble.n	253c0 <__aeabi_ddiv+0x4d0>
   252ee:	2301      	movs	r3, #1
   252f0:	9a02      	ldr	r2, [sp, #8]
   252f2:	4c98      	ldr	r4, [pc, #608]	; (25554 <__aeabi_ddiv+0x664>)
   252f4:	401a      	ands	r2, r3
   252f6:	2300      	movs	r3, #0
   252f8:	4694      	mov	ip, r2
   252fa:	4698      	mov	r8, r3
   252fc:	2200      	movs	r2, #0
   252fe:	e6c5      	b.n	2508c <__aeabi_ddiv+0x19c>
   25300:	2280      	movs	r2, #128	; 0x80
   25302:	464b      	mov	r3, r9
   25304:	0312      	lsls	r2, r2, #12
   25306:	4213      	tst	r3, r2
   25308:	d00a      	beq.n	25320 <__aeabi_ddiv+0x430>
   2530a:	465b      	mov	r3, fp
   2530c:	4213      	tst	r3, r2
   2530e:	d106      	bne.n	2531e <__aeabi_ddiv+0x42e>
   25310:	431a      	orrs	r2, r3
   25312:	0312      	lsls	r2, r2, #12
   25314:	0b12      	lsrs	r2, r2, #12
   25316:	46ac      	mov	ip, r5
   25318:	4688      	mov	r8, r1
   2531a:	4c8e      	ldr	r4, [pc, #568]	; (25554 <__aeabi_ddiv+0x664>)
   2531c:	e6b6      	b.n	2508c <__aeabi_ddiv+0x19c>
   2531e:	464b      	mov	r3, r9
   25320:	431a      	orrs	r2, r3
   25322:	0312      	lsls	r2, r2, #12
   25324:	0b12      	lsrs	r2, r2, #12
   25326:	46bc      	mov	ip, r7
   25328:	4c8a      	ldr	r4, [pc, #552]	; (25554 <__aeabi_ddiv+0x664>)
   2532a:	e6af      	b.n	2508c <__aeabi_ddiv+0x19c>
   2532c:	0003      	movs	r3, r0
   2532e:	465a      	mov	r2, fp
   25330:	3b28      	subs	r3, #40	; 0x28
   25332:	409a      	lsls	r2, r3
   25334:	2300      	movs	r3, #0
   25336:	4691      	mov	r9, r2
   25338:	4698      	mov	r8, r3
   2533a:	e657      	b.n	24fec <__aeabi_ddiv+0xfc>
   2533c:	4658      	mov	r0, fp
   2533e:	f000 ff0d 	bl	2615c <__clzsi2>
   25342:	3020      	adds	r0, #32
   25344:	e640      	b.n	24fc8 <__aeabi_ddiv+0xd8>
   25346:	0003      	movs	r3, r0
   25348:	4652      	mov	r2, sl
   2534a:	3b28      	subs	r3, #40	; 0x28
   2534c:	409a      	lsls	r2, r3
   2534e:	2100      	movs	r1, #0
   25350:	4693      	mov	fp, r2
   25352:	e677      	b.n	25044 <__aeabi_ddiv+0x154>
   25354:	f000 ff02 	bl	2615c <__clzsi2>
   25358:	3020      	adds	r0, #32
   2535a:	e65f      	b.n	2501c <__aeabi_ddiv+0x12c>
   2535c:	4588      	cmp	r8, r1
   2535e:	d200      	bcs.n	25362 <__aeabi_ddiv+0x472>
   25360:	e6c7      	b.n	250f2 <__aeabi_ddiv+0x202>
   25362:	464b      	mov	r3, r9
   25364:	07de      	lsls	r6, r3, #31
   25366:	085d      	lsrs	r5, r3, #1
   25368:	4643      	mov	r3, r8
   2536a:	085b      	lsrs	r3, r3, #1
   2536c:	431e      	orrs	r6, r3
   2536e:	4643      	mov	r3, r8
   25370:	07db      	lsls	r3, r3, #31
   25372:	469a      	mov	sl, r3
   25374:	e6c2      	b.n	250fc <__aeabi_ddiv+0x20c>
   25376:	2500      	movs	r5, #0
   25378:	4592      	cmp	sl, r2
   2537a:	d300      	bcc.n	2537e <__aeabi_ddiv+0x48e>
   2537c:	e733      	b.n	251e6 <__aeabi_ddiv+0x2f6>
   2537e:	9e03      	ldr	r6, [sp, #12]
   25380:	4659      	mov	r1, fp
   25382:	46b4      	mov	ip, r6
   25384:	44e2      	add	sl, ip
   25386:	45b2      	cmp	sl, r6
   25388:	41ad      	sbcs	r5, r5
   2538a:	426d      	negs	r5, r5
   2538c:	4445      	add	r5, r8
   2538e:	18eb      	adds	r3, r5, r3
   25390:	3901      	subs	r1, #1
   25392:	4598      	cmp	r8, r3
   25394:	d207      	bcs.n	253a6 <__aeabi_ddiv+0x4b6>
   25396:	4298      	cmp	r0, r3
   25398:	d900      	bls.n	2539c <__aeabi_ddiv+0x4ac>
   2539a:	e07f      	b.n	2549c <__aeabi_ddiv+0x5ac>
   2539c:	d100      	bne.n	253a0 <__aeabi_ddiv+0x4b0>
   2539e:	e0bc      	b.n	2551a <__aeabi_ddiv+0x62a>
   253a0:	1a1d      	subs	r5, r3, r0
   253a2:	468b      	mov	fp, r1
   253a4:	e71f      	b.n	251e6 <__aeabi_ddiv+0x2f6>
   253a6:	4598      	cmp	r8, r3
   253a8:	d1fa      	bne.n	253a0 <__aeabi_ddiv+0x4b0>
   253aa:	9d03      	ldr	r5, [sp, #12]
   253ac:	4555      	cmp	r5, sl
   253ae:	d9f2      	bls.n	25396 <__aeabi_ddiv+0x4a6>
   253b0:	4643      	mov	r3, r8
   253b2:	468b      	mov	fp, r1
   253b4:	1a1d      	subs	r5, r3, r0
   253b6:	e716      	b.n	251e6 <__aeabi_ddiv+0x2f6>
   253b8:	469b      	mov	fp, r3
   253ba:	e6ca      	b.n	25152 <__aeabi_ddiv+0x262>
   253bc:	0015      	movs	r5, r2
   253be:	e6e7      	b.n	25190 <__aeabi_ddiv+0x2a0>
   253c0:	465a      	mov	r2, fp
   253c2:	08c9      	lsrs	r1, r1, #3
   253c4:	0752      	lsls	r2, r2, #29
   253c6:	430a      	orrs	r2, r1
   253c8:	055b      	lsls	r3, r3, #21
   253ca:	4690      	mov	r8, r2
   253cc:	0d5c      	lsrs	r4, r3, #21
   253ce:	465a      	mov	r2, fp
   253d0:	2301      	movs	r3, #1
   253d2:	9902      	ldr	r1, [sp, #8]
   253d4:	0252      	lsls	r2, r2, #9
   253d6:	4019      	ands	r1, r3
   253d8:	0b12      	lsrs	r2, r2, #12
   253da:	468c      	mov	ip, r1
   253dc:	e656      	b.n	2508c <__aeabi_ddiv+0x19c>
   253de:	2b00      	cmp	r3, #0
   253e0:	d100      	bne.n	253e4 <__aeabi_ddiv+0x4f4>
   253e2:	e76f      	b.n	252c4 <__aeabi_ddiv+0x3d4>
   253e4:	4446      	add	r6, r8
   253e6:	1e4a      	subs	r2, r1, #1
   253e8:	45b0      	cmp	r8, r6
   253ea:	d929      	bls.n	25440 <__aeabi_ddiv+0x550>
   253ec:	0011      	movs	r1, r2
   253ee:	4286      	cmp	r6, r0
   253f0:	d000      	beq.n	253f4 <__aeabi_ddiv+0x504>
   253f2:	e765      	b.n	252c0 <__aeabi_ddiv+0x3d0>
   253f4:	9a03      	ldr	r2, [sp, #12]
   253f6:	4293      	cmp	r3, r2
   253f8:	d000      	beq.n	253fc <__aeabi_ddiv+0x50c>
   253fa:	e761      	b.n	252c0 <__aeabi_ddiv+0x3d0>
   253fc:	e762      	b.n	252c4 <__aeabi_ddiv+0x3d4>
   253fe:	2101      	movs	r1, #1
   25400:	4249      	negs	r1, r1
   25402:	2001      	movs	r0, #1
   25404:	1ac2      	subs	r2, r0, r3
   25406:	2a38      	cmp	r2, #56	; 0x38
   25408:	dd21      	ble.n	2544e <__aeabi_ddiv+0x55e>
   2540a:	9b02      	ldr	r3, [sp, #8]
   2540c:	4003      	ands	r3, r0
   2540e:	469c      	mov	ip, r3
   25410:	e638      	b.n	25084 <__aeabi_ddiv+0x194>
   25412:	220f      	movs	r2, #15
   25414:	400a      	ands	r2, r1
   25416:	2a04      	cmp	r2, #4
   25418:	d100      	bne.n	2541c <__aeabi_ddiv+0x52c>
   2541a:	e75b      	b.n	252d4 <__aeabi_ddiv+0x3e4>
   2541c:	000a      	movs	r2, r1
   2541e:	1d11      	adds	r1, r2, #4
   25420:	4291      	cmp	r1, r2
   25422:	4192      	sbcs	r2, r2
   25424:	4252      	negs	r2, r2
   25426:	4493      	add	fp, r2
   25428:	e754      	b.n	252d4 <__aeabi_ddiv+0x3e4>
   2542a:	4b47      	ldr	r3, [pc, #284]	; (25548 <__aeabi_ddiv+0x658>)
   2542c:	18e3      	adds	r3, r4, r3
   2542e:	2b00      	cmp	r3, #0
   25430:	dde5      	ble.n	253fe <__aeabi_ddiv+0x50e>
   25432:	2201      	movs	r2, #1
   25434:	4252      	negs	r2, r2
   25436:	e7f2      	b.n	2541e <__aeabi_ddiv+0x52e>
   25438:	001d      	movs	r5, r3
   2543a:	e6fa      	b.n	25232 <__aeabi_ddiv+0x342>
   2543c:	469a      	mov	sl, r3
   2543e:	e71c      	b.n	2527a <__aeabi_ddiv+0x38a>
   25440:	42b0      	cmp	r0, r6
   25442:	d839      	bhi.n	254b8 <__aeabi_ddiv+0x5c8>
   25444:	d06e      	beq.n	25524 <__aeabi_ddiv+0x634>
   25446:	0011      	movs	r1, r2
   25448:	e73a      	b.n	252c0 <__aeabi_ddiv+0x3d0>
   2544a:	9302      	str	r3, [sp, #8]
   2544c:	e73a      	b.n	252c4 <__aeabi_ddiv+0x3d4>
   2544e:	2a1f      	cmp	r2, #31
   25450:	dc3c      	bgt.n	254cc <__aeabi_ddiv+0x5dc>
   25452:	2320      	movs	r3, #32
   25454:	1a9b      	subs	r3, r3, r2
   25456:	000c      	movs	r4, r1
   25458:	4658      	mov	r0, fp
   2545a:	4099      	lsls	r1, r3
   2545c:	4098      	lsls	r0, r3
   2545e:	1e4b      	subs	r3, r1, #1
   25460:	4199      	sbcs	r1, r3
   25462:	465b      	mov	r3, fp
   25464:	40d4      	lsrs	r4, r2
   25466:	40d3      	lsrs	r3, r2
   25468:	4320      	orrs	r0, r4
   2546a:	4308      	orrs	r0, r1
   2546c:	001a      	movs	r2, r3
   2546e:	0743      	lsls	r3, r0, #29
   25470:	d009      	beq.n	25486 <__aeabi_ddiv+0x596>
   25472:	230f      	movs	r3, #15
   25474:	4003      	ands	r3, r0
   25476:	2b04      	cmp	r3, #4
   25478:	d005      	beq.n	25486 <__aeabi_ddiv+0x596>
   2547a:	0001      	movs	r1, r0
   2547c:	1d08      	adds	r0, r1, #4
   2547e:	4288      	cmp	r0, r1
   25480:	419b      	sbcs	r3, r3
   25482:	425b      	negs	r3, r3
   25484:	18d2      	adds	r2, r2, r3
   25486:	0213      	lsls	r3, r2, #8
   25488:	d53a      	bpl.n	25500 <__aeabi_ddiv+0x610>
   2548a:	2301      	movs	r3, #1
   2548c:	9a02      	ldr	r2, [sp, #8]
   2548e:	2401      	movs	r4, #1
   25490:	401a      	ands	r2, r3
   25492:	2300      	movs	r3, #0
   25494:	4694      	mov	ip, r2
   25496:	4698      	mov	r8, r3
   25498:	2200      	movs	r2, #0
   2549a:	e5f7      	b.n	2508c <__aeabi_ddiv+0x19c>
   2549c:	2102      	movs	r1, #2
   2549e:	4249      	negs	r1, r1
   254a0:	468c      	mov	ip, r1
   254a2:	9d03      	ldr	r5, [sp, #12]
   254a4:	44e3      	add	fp, ip
   254a6:	46ac      	mov	ip, r5
   254a8:	44e2      	add	sl, ip
   254aa:	45aa      	cmp	sl, r5
   254ac:	41ad      	sbcs	r5, r5
   254ae:	426d      	negs	r5, r5
   254b0:	4445      	add	r5, r8
   254b2:	18ed      	adds	r5, r5, r3
   254b4:	1a2d      	subs	r5, r5, r0
   254b6:	e696      	b.n	251e6 <__aeabi_ddiv+0x2f6>
   254b8:	1e8a      	subs	r2, r1, #2
   254ba:	9903      	ldr	r1, [sp, #12]
   254bc:	004d      	lsls	r5, r1, #1
   254be:	428d      	cmp	r5, r1
   254c0:	4189      	sbcs	r1, r1
   254c2:	4249      	negs	r1, r1
   254c4:	4441      	add	r1, r8
   254c6:	1876      	adds	r6, r6, r1
   254c8:	9503      	str	r5, [sp, #12]
   254ca:	e78f      	b.n	253ec <__aeabi_ddiv+0x4fc>
   254cc:	201f      	movs	r0, #31
   254ce:	4240      	negs	r0, r0
   254d0:	1ac3      	subs	r3, r0, r3
   254d2:	4658      	mov	r0, fp
   254d4:	40d8      	lsrs	r0, r3
   254d6:	0003      	movs	r3, r0
   254d8:	2a20      	cmp	r2, #32
   254da:	d028      	beq.n	2552e <__aeabi_ddiv+0x63e>
   254dc:	2040      	movs	r0, #64	; 0x40
   254de:	465d      	mov	r5, fp
   254e0:	1a82      	subs	r2, r0, r2
   254e2:	4095      	lsls	r5, r2
   254e4:	4329      	orrs	r1, r5
   254e6:	1e4a      	subs	r2, r1, #1
   254e8:	4191      	sbcs	r1, r2
   254ea:	4319      	orrs	r1, r3
   254ec:	2307      	movs	r3, #7
   254ee:	2200      	movs	r2, #0
   254f0:	400b      	ands	r3, r1
   254f2:	d009      	beq.n	25508 <__aeabi_ddiv+0x618>
   254f4:	230f      	movs	r3, #15
   254f6:	2200      	movs	r2, #0
   254f8:	400b      	ands	r3, r1
   254fa:	0008      	movs	r0, r1
   254fc:	2b04      	cmp	r3, #4
   254fe:	d1bd      	bne.n	2547c <__aeabi_ddiv+0x58c>
   25500:	0001      	movs	r1, r0
   25502:	0753      	lsls	r3, r2, #29
   25504:	0252      	lsls	r2, r2, #9
   25506:	0b12      	lsrs	r2, r2, #12
   25508:	08c9      	lsrs	r1, r1, #3
   2550a:	4319      	orrs	r1, r3
   2550c:	2301      	movs	r3, #1
   2550e:	4688      	mov	r8, r1
   25510:	9902      	ldr	r1, [sp, #8]
   25512:	2400      	movs	r4, #0
   25514:	4019      	ands	r1, r3
   25516:	468c      	mov	ip, r1
   25518:	e5b8      	b.n	2508c <__aeabi_ddiv+0x19c>
   2551a:	4552      	cmp	r2, sl
   2551c:	d8be      	bhi.n	2549c <__aeabi_ddiv+0x5ac>
   2551e:	468b      	mov	fp, r1
   25520:	2500      	movs	r5, #0
   25522:	e660      	b.n	251e6 <__aeabi_ddiv+0x2f6>
   25524:	9d03      	ldr	r5, [sp, #12]
   25526:	429d      	cmp	r5, r3
   25528:	d3c6      	bcc.n	254b8 <__aeabi_ddiv+0x5c8>
   2552a:	0011      	movs	r1, r2
   2552c:	e762      	b.n	253f4 <__aeabi_ddiv+0x504>
   2552e:	2500      	movs	r5, #0
   25530:	e7d8      	b.n	254e4 <__aeabi_ddiv+0x5f4>
   25532:	2280      	movs	r2, #128	; 0x80
   25534:	465b      	mov	r3, fp
   25536:	0312      	lsls	r2, r2, #12
   25538:	431a      	orrs	r2, r3
   2553a:	9b01      	ldr	r3, [sp, #4]
   2553c:	0312      	lsls	r2, r2, #12
   2553e:	0b12      	lsrs	r2, r2, #12
   25540:	469c      	mov	ip, r3
   25542:	4688      	mov	r8, r1
   25544:	4c03      	ldr	r4, [pc, #12]	; (25554 <__aeabi_ddiv+0x664>)
   25546:	e5a1      	b.n	2508c <__aeabi_ddiv+0x19c>
   25548:	000003ff 	.word	0x000003ff
   2554c:	feffffff 	.word	0xfeffffff
   25550:	000007fe 	.word	0x000007fe
   25554:	000007ff 	.word	0x000007ff

00025558 <__aeabi_dmul>:
   25558:	b5f0      	push	{r4, r5, r6, r7, lr}
   2555a:	4657      	mov	r7, sl
   2555c:	4645      	mov	r5, r8
   2555e:	46de      	mov	lr, fp
   25560:	464e      	mov	r6, r9
   25562:	b5e0      	push	{r5, r6, r7, lr}
   25564:	030c      	lsls	r4, r1, #12
   25566:	4698      	mov	r8, r3
   25568:	004e      	lsls	r6, r1, #1
   2556a:	0b23      	lsrs	r3, r4, #12
   2556c:	b087      	sub	sp, #28
   2556e:	0007      	movs	r7, r0
   25570:	4692      	mov	sl, r2
   25572:	469b      	mov	fp, r3
   25574:	0d76      	lsrs	r6, r6, #21
   25576:	0fcd      	lsrs	r5, r1, #31
   25578:	2e00      	cmp	r6, #0
   2557a:	d06b      	beq.n	25654 <__aeabi_dmul+0xfc>
   2557c:	4b6d      	ldr	r3, [pc, #436]	; (25734 <__aeabi_dmul+0x1dc>)
   2557e:	429e      	cmp	r6, r3
   25580:	d035      	beq.n	255ee <__aeabi_dmul+0x96>
   25582:	2480      	movs	r4, #128	; 0x80
   25584:	465b      	mov	r3, fp
   25586:	0f42      	lsrs	r2, r0, #29
   25588:	0424      	lsls	r4, r4, #16
   2558a:	00db      	lsls	r3, r3, #3
   2558c:	4314      	orrs	r4, r2
   2558e:	431c      	orrs	r4, r3
   25590:	00c3      	lsls	r3, r0, #3
   25592:	4699      	mov	r9, r3
   25594:	4b68      	ldr	r3, [pc, #416]	; (25738 <__aeabi_dmul+0x1e0>)
   25596:	46a3      	mov	fp, r4
   25598:	469c      	mov	ip, r3
   2559a:	2300      	movs	r3, #0
   2559c:	2700      	movs	r7, #0
   2559e:	4466      	add	r6, ip
   255a0:	9302      	str	r3, [sp, #8]
   255a2:	4643      	mov	r3, r8
   255a4:	031c      	lsls	r4, r3, #12
   255a6:	005a      	lsls	r2, r3, #1
   255a8:	0fdb      	lsrs	r3, r3, #31
   255aa:	4650      	mov	r0, sl
   255ac:	0b24      	lsrs	r4, r4, #12
   255ae:	0d52      	lsrs	r2, r2, #21
   255b0:	4698      	mov	r8, r3
   255b2:	d100      	bne.n	255b6 <__aeabi_dmul+0x5e>
   255b4:	e076      	b.n	256a4 <__aeabi_dmul+0x14c>
   255b6:	4b5f      	ldr	r3, [pc, #380]	; (25734 <__aeabi_dmul+0x1dc>)
   255b8:	429a      	cmp	r2, r3
   255ba:	d06d      	beq.n	25698 <__aeabi_dmul+0x140>
   255bc:	2380      	movs	r3, #128	; 0x80
   255be:	0f41      	lsrs	r1, r0, #29
   255c0:	041b      	lsls	r3, r3, #16
   255c2:	430b      	orrs	r3, r1
   255c4:	495c      	ldr	r1, [pc, #368]	; (25738 <__aeabi_dmul+0x1e0>)
   255c6:	00e4      	lsls	r4, r4, #3
   255c8:	468c      	mov	ip, r1
   255ca:	431c      	orrs	r4, r3
   255cc:	00c3      	lsls	r3, r0, #3
   255ce:	2000      	movs	r0, #0
   255d0:	4462      	add	r2, ip
   255d2:	4641      	mov	r1, r8
   255d4:	18b6      	adds	r6, r6, r2
   255d6:	4069      	eors	r1, r5
   255d8:	1c72      	adds	r2, r6, #1
   255da:	9101      	str	r1, [sp, #4]
   255dc:	4694      	mov	ip, r2
   255de:	4307      	orrs	r7, r0
   255e0:	2f0f      	cmp	r7, #15
   255e2:	d900      	bls.n	255e6 <__aeabi_dmul+0x8e>
   255e4:	e0b0      	b.n	25748 <__aeabi_dmul+0x1f0>
   255e6:	4a55      	ldr	r2, [pc, #340]	; (2573c <__aeabi_dmul+0x1e4>)
   255e8:	00bf      	lsls	r7, r7, #2
   255ea:	59d2      	ldr	r2, [r2, r7]
   255ec:	4697      	mov	pc, r2
   255ee:	465b      	mov	r3, fp
   255f0:	4303      	orrs	r3, r0
   255f2:	4699      	mov	r9, r3
   255f4:	d000      	beq.n	255f8 <__aeabi_dmul+0xa0>
   255f6:	e087      	b.n	25708 <__aeabi_dmul+0x1b0>
   255f8:	2300      	movs	r3, #0
   255fa:	469b      	mov	fp, r3
   255fc:	3302      	adds	r3, #2
   255fe:	2708      	movs	r7, #8
   25600:	9302      	str	r3, [sp, #8]
   25602:	e7ce      	b.n	255a2 <__aeabi_dmul+0x4a>
   25604:	4642      	mov	r2, r8
   25606:	9201      	str	r2, [sp, #4]
   25608:	2802      	cmp	r0, #2
   2560a:	d067      	beq.n	256dc <__aeabi_dmul+0x184>
   2560c:	2803      	cmp	r0, #3
   2560e:	d100      	bne.n	25612 <__aeabi_dmul+0xba>
   25610:	e20e      	b.n	25a30 <__aeabi_dmul+0x4d8>
   25612:	2801      	cmp	r0, #1
   25614:	d000      	beq.n	25618 <__aeabi_dmul+0xc0>
   25616:	e162      	b.n	258de <__aeabi_dmul+0x386>
   25618:	2300      	movs	r3, #0
   2561a:	2400      	movs	r4, #0
   2561c:	2200      	movs	r2, #0
   2561e:	4699      	mov	r9, r3
   25620:	9901      	ldr	r1, [sp, #4]
   25622:	4001      	ands	r1, r0
   25624:	b2cd      	uxtb	r5, r1
   25626:	2100      	movs	r1, #0
   25628:	0312      	lsls	r2, r2, #12
   2562a:	0d0b      	lsrs	r3, r1, #20
   2562c:	0b12      	lsrs	r2, r2, #12
   2562e:	051b      	lsls	r3, r3, #20
   25630:	4313      	orrs	r3, r2
   25632:	4a43      	ldr	r2, [pc, #268]	; (25740 <__aeabi_dmul+0x1e8>)
   25634:	0524      	lsls	r4, r4, #20
   25636:	4013      	ands	r3, r2
   25638:	431c      	orrs	r4, r3
   2563a:	0064      	lsls	r4, r4, #1
   2563c:	07ed      	lsls	r5, r5, #31
   2563e:	0864      	lsrs	r4, r4, #1
   25640:	432c      	orrs	r4, r5
   25642:	4648      	mov	r0, r9
   25644:	0021      	movs	r1, r4
   25646:	b007      	add	sp, #28
   25648:	bc3c      	pop	{r2, r3, r4, r5}
   2564a:	4690      	mov	r8, r2
   2564c:	4699      	mov	r9, r3
   2564e:	46a2      	mov	sl, r4
   25650:	46ab      	mov	fp, r5
   25652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25654:	4303      	orrs	r3, r0
   25656:	4699      	mov	r9, r3
   25658:	d04f      	beq.n	256fa <__aeabi_dmul+0x1a2>
   2565a:	465b      	mov	r3, fp
   2565c:	2b00      	cmp	r3, #0
   2565e:	d100      	bne.n	25662 <__aeabi_dmul+0x10a>
   25660:	e189      	b.n	25976 <__aeabi_dmul+0x41e>
   25662:	4658      	mov	r0, fp
   25664:	f000 fd7a 	bl	2615c <__clzsi2>
   25668:	0003      	movs	r3, r0
   2566a:	3b0b      	subs	r3, #11
   2566c:	2b1c      	cmp	r3, #28
   2566e:	dd00      	ble.n	25672 <__aeabi_dmul+0x11a>
   25670:	e17a      	b.n	25968 <__aeabi_dmul+0x410>
   25672:	221d      	movs	r2, #29
   25674:	1ad3      	subs	r3, r2, r3
   25676:	003a      	movs	r2, r7
   25678:	0001      	movs	r1, r0
   2567a:	465c      	mov	r4, fp
   2567c:	40da      	lsrs	r2, r3
   2567e:	3908      	subs	r1, #8
   25680:	408c      	lsls	r4, r1
   25682:	0013      	movs	r3, r2
   25684:	408f      	lsls	r7, r1
   25686:	4323      	orrs	r3, r4
   25688:	469b      	mov	fp, r3
   2568a:	46b9      	mov	r9, r7
   2568c:	2300      	movs	r3, #0
   2568e:	4e2d      	ldr	r6, [pc, #180]	; (25744 <__aeabi_dmul+0x1ec>)
   25690:	2700      	movs	r7, #0
   25692:	1a36      	subs	r6, r6, r0
   25694:	9302      	str	r3, [sp, #8]
   25696:	e784      	b.n	255a2 <__aeabi_dmul+0x4a>
   25698:	4653      	mov	r3, sl
   2569a:	4323      	orrs	r3, r4
   2569c:	d12a      	bne.n	256f4 <__aeabi_dmul+0x19c>
   2569e:	2400      	movs	r4, #0
   256a0:	2002      	movs	r0, #2
   256a2:	e796      	b.n	255d2 <__aeabi_dmul+0x7a>
   256a4:	4653      	mov	r3, sl
   256a6:	4323      	orrs	r3, r4
   256a8:	d020      	beq.n	256ec <__aeabi_dmul+0x194>
   256aa:	2c00      	cmp	r4, #0
   256ac:	d100      	bne.n	256b0 <__aeabi_dmul+0x158>
   256ae:	e157      	b.n	25960 <__aeabi_dmul+0x408>
   256b0:	0020      	movs	r0, r4
   256b2:	f000 fd53 	bl	2615c <__clzsi2>
   256b6:	0003      	movs	r3, r0
   256b8:	3b0b      	subs	r3, #11
   256ba:	2b1c      	cmp	r3, #28
   256bc:	dd00      	ble.n	256c0 <__aeabi_dmul+0x168>
   256be:	e149      	b.n	25954 <__aeabi_dmul+0x3fc>
   256c0:	211d      	movs	r1, #29
   256c2:	1acb      	subs	r3, r1, r3
   256c4:	4651      	mov	r1, sl
   256c6:	0002      	movs	r2, r0
   256c8:	40d9      	lsrs	r1, r3
   256ca:	4653      	mov	r3, sl
   256cc:	3a08      	subs	r2, #8
   256ce:	4094      	lsls	r4, r2
   256d0:	4093      	lsls	r3, r2
   256d2:	430c      	orrs	r4, r1
   256d4:	4a1b      	ldr	r2, [pc, #108]	; (25744 <__aeabi_dmul+0x1ec>)
   256d6:	1a12      	subs	r2, r2, r0
   256d8:	2000      	movs	r0, #0
   256da:	e77a      	b.n	255d2 <__aeabi_dmul+0x7a>
   256dc:	2501      	movs	r5, #1
   256de:	9b01      	ldr	r3, [sp, #4]
   256e0:	4c14      	ldr	r4, [pc, #80]	; (25734 <__aeabi_dmul+0x1dc>)
   256e2:	401d      	ands	r5, r3
   256e4:	2300      	movs	r3, #0
   256e6:	2200      	movs	r2, #0
   256e8:	4699      	mov	r9, r3
   256ea:	e79c      	b.n	25626 <__aeabi_dmul+0xce>
   256ec:	2400      	movs	r4, #0
   256ee:	2200      	movs	r2, #0
   256f0:	2001      	movs	r0, #1
   256f2:	e76e      	b.n	255d2 <__aeabi_dmul+0x7a>
   256f4:	4653      	mov	r3, sl
   256f6:	2003      	movs	r0, #3
   256f8:	e76b      	b.n	255d2 <__aeabi_dmul+0x7a>
   256fa:	2300      	movs	r3, #0
   256fc:	469b      	mov	fp, r3
   256fe:	3301      	adds	r3, #1
   25700:	2704      	movs	r7, #4
   25702:	2600      	movs	r6, #0
   25704:	9302      	str	r3, [sp, #8]
   25706:	e74c      	b.n	255a2 <__aeabi_dmul+0x4a>
   25708:	2303      	movs	r3, #3
   2570a:	4681      	mov	r9, r0
   2570c:	270c      	movs	r7, #12
   2570e:	9302      	str	r3, [sp, #8]
   25710:	e747      	b.n	255a2 <__aeabi_dmul+0x4a>
   25712:	2280      	movs	r2, #128	; 0x80
   25714:	2300      	movs	r3, #0
   25716:	2500      	movs	r5, #0
   25718:	0312      	lsls	r2, r2, #12
   2571a:	4699      	mov	r9, r3
   2571c:	4c05      	ldr	r4, [pc, #20]	; (25734 <__aeabi_dmul+0x1dc>)
   2571e:	e782      	b.n	25626 <__aeabi_dmul+0xce>
   25720:	465c      	mov	r4, fp
   25722:	464b      	mov	r3, r9
   25724:	9802      	ldr	r0, [sp, #8]
   25726:	e76f      	b.n	25608 <__aeabi_dmul+0xb0>
   25728:	465c      	mov	r4, fp
   2572a:	464b      	mov	r3, r9
   2572c:	9501      	str	r5, [sp, #4]
   2572e:	9802      	ldr	r0, [sp, #8]
   25730:	e76a      	b.n	25608 <__aeabi_dmul+0xb0>
   25732:	46c0      	nop			; (mov r8, r8)
   25734:	000007ff 	.word	0x000007ff
   25738:	fffffc01 	.word	0xfffffc01
   2573c:	0002aea0 	.word	0x0002aea0
   25740:	800fffff 	.word	0x800fffff
   25744:	fffffc0d 	.word	0xfffffc0d
   25748:	464a      	mov	r2, r9
   2574a:	4649      	mov	r1, r9
   2574c:	0c17      	lsrs	r7, r2, #16
   2574e:	0c1a      	lsrs	r2, r3, #16
   25750:	041b      	lsls	r3, r3, #16
   25752:	0c1b      	lsrs	r3, r3, #16
   25754:	0408      	lsls	r0, r1, #16
   25756:	0019      	movs	r1, r3
   25758:	0c00      	lsrs	r0, r0, #16
   2575a:	4341      	muls	r1, r0
   2575c:	0015      	movs	r5, r2
   2575e:	4688      	mov	r8, r1
   25760:	0019      	movs	r1, r3
   25762:	437d      	muls	r5, r7
   25764:	4379      	muls	r1, r7
   25766:	9503      	str	r5, [sp, #12]
   25768:	4689      	mov	r9, r1
   2576a:	0029      	movs	r1, r5
   2576c:	0015      	movs	r5, r2
   2576e:	4345      	muls	r5, r0
   25770:	444d      	add	r5, r9
   25772:	9502      	str	r5, [sp, #8]
   25774:	4645      	mov	r5, r8
   25776:	0c2d      	lsrs	r5, r5, #16
   25778:	46aa      	mov	sl, r5
   2577a:	9d02      	ldr	r5, [sp, #8]
   2577c:	4455      	add	r5, sl
   2577e:	45a9      	cmp	r9, r5
   25780:	d906      	bls.n	25790 <__aeabi_dmul+0x238>
   25782:	468a      	mov	sl, r1
   25784:	2180      	movs	r1, #128	; 0x80
   25786:	0249      	lsls	r1, r1, #9
   25788:	4689      	mov	r9, r1
   2578a:	44ca      	add	sl, r9
   2578c:	4651      	mov	r1, sl
   2578e:	9103      	str	r1, [sp, #12]
   25790:	0c29      	lsrs	r1, r5, #16
   25792:	9104      	str	r1, [sp, #16]
   25794:	4641      	mov	r1, r8
   25796:	0409      	lsls	r1, r1, #16
   25798:	042d      	lsls	r5, r5, #16
   2579a:	0c09      	lsrs	r1, r1, #16
   2579c:	4688      	mov	r8, r1
   2579e:	0029      	movs	r1, r5
   257a0:	0c25      	lsrs	r5, r4, #16
   257a2:	0424      	lsls	r4, r4, #16
   257a4:	4441      	add	r1, r8
   257a6:	0c24      	lsrs	r4, r4, #16
   257a8:	9105      	str	r1, [sp, #20]
   257aa:	0021      	movs	r1, r4
   257ac:	4341      	muls	r1, r0
   257ae:	4688      	mov	r8, r1
   257b0:	0021      	movs	r1, r4
   257b2:	4379      	muls	r1, r7
   257b4:	468a      	mov	sl, r1
   257b6:	4368      	muls	r0, r5
   257b8:	4641      	mov	r1, r8
   257ba:	4450      	add	r0, sl
   257bc:	4681      	mov	r9, r0
   257be:	0c08      	lsrs	r0, r1, #16
   257c0:	4448      	add	r0, r9
   257c2:	436f      	muls	r7, r5
   257c4:	4582      	cmp	sl, r0
   257c6:	d903      	bls.n	257d0 <__aeabi_dmul+0x278>
   257c8:	2180      	movs	r1, #128	; 0x80
   257ca:	0249      	lsls	r1, r1, #9
   257cc:	4689      	mov	r9, r1
   257ce:	444f      	add	r7, r9
   257d0:	0c01      	lsrs	r1, r0, #16
   257d2:	4689      	mov	r9, r1
   257d4:	0039      	movs	r1, r7
   257d6:	4449      	add	r1, r9
   257d8:	9102      	str	r1, [sp, #8]
   257da:	4641      	mov	r1, r8
   257dc:	040f      	lsls	r7, r1, #16
   257de:	9904      	ldr	r1, [sp, #16]
   257e0:	0c3f      	lsrs	r7, r7, #16
   257e2:	4688      	mov	r8, r1
   257e4:	0400      	lsls	r0, r0, #16
   257e6:	19c0      	adds	r0, r0, r7
   257e8:	4480      	add	r8, r0
   257ea:	4641      	mov	r1, r8
   257ec:	9104      	str	r1, [sp, #16]
   257ee:	4659      	mov	r1, fp
   257f0:	0c0f      	lsrs	r7, r1, #16
   257f2:	0409      	lsls	r1, r1, #16
   257f4:	0c09      	lsrs	r1, r1, #16
   257f6:	4688      	mov	r8, r1
   257f8:	4359      	muls	r1, r3
   257fa:	468a      	mov	sl, r1
   257fc:	0039      	movs	r1, r7
   257fe:	4351      	muls	r1, r2
   25800:	4689      	mov	r9, r1
   25802:	4641      	mov	r1, r8
   25804:	434a      	muls	r2, r1
   25806:	4651      	mov	r1, sl
   25808:	0c09      	lsrs	r1, r1, #16
   2580a:	468b      	mov	fp, r1
   2580c:	437b      	muls	r3, r7
   2580e:	18d2      	adds	r2, r2, r3
   25810:	445a      	add	r2, fp
   25812:	4293      	cmp	r3, r2
   25814:	d903      	bls.n	2581e <__aeabi_dmul+0x2c6>
   25816:	2380      	movs	r3, #128	; 0x80
   25818:	025b      	lsls	r3, r3, #9
   2581a:	469b      	mov	fp, r3
   2581c:	44d9      	add	r9, fp
   2581e:	4651      	mov	r1, sl
   25820:	0409      	lsls	r1, r1, #16
   25822:	0c09      	lsrs	r1, r1, #16
   25824:	468a      	mov	sl, r1
   25826:	4641      	mov	r1, r8
   25828:	4361      	muls	r1, r4
   2582a:	437c      	muls	r4, r7
   2582c:	0c13      	lsrs	r3, r2, #16
   2582e:	0412      	lsls	r2, r2, #16
   25830:	444b      	add	r3, r9
   25832:	4452      	add	r2, sl
   25834:	46a1      	mov	r9, r4
   25836:	468a      	mov	sl, r1
   25838:	003c      	movs	r4, r7
   2583a:	4641      	mov	r1, r8
   2583c:	436c      	muls	r4, r5
   2583e:	434d      	muls	r5, r1
   25840:	4651      	mov	r1, sl
   25842:	444d      	add	r5, r9
   25844:	0c0f      	lsrs	r7, r1, #16
   25846:	197d      	adds	r5, r7, r5
   25848:	45a9      	cmp	r9, r5
   2584a:	d903      	bls.n	25854 <__aeabi_dmul+0x2fc>
   2584c:	2180      	movs	r1, #128	; 0x80
   2584e:	0249      	lsls	r1, r1, #9
   25850:	4688      	mov	r8, r1
   25852:	4444      	add	r4, r8
   25854:	9f04      	ldr	r7, [sp, #16]
   25856:	9903      	ldr	r1, [sp, #12]
   25858:	46b8      	mov	r8, r7
   2585a:	4441      	add	r1, r8
   2585c:	468b      	mov	fp, r1
   2585e:	4583      	cmp	fp, r0
   25860:	4180      	sbcs	r0, r0
   25862:	4241      	negs	r1, r0
   25864:	4688      	mov	r8, r1
   25866:	4651      	mov	r1, sl
   25868:	0408      	lsls	r0, r1, #16
   2586a:	042f      	lsls	r7, r5, #16
   2586c:	0c00      	lsrs	r0, r0, #16
   2586e:	183f      	adds	r7, r7, r0
   25870:	4658      	mov	r0, fp
   25872:	9902      	ldr	r1, [sp, #8]
   25874:	1810      	adds	r0, r2, r0
   25876:	4689      	mov	r9, r1
   25878:	4290      	cmp	r0, r2
   2587a:	4192      	sbcs	r2, r2
   2587c:	444f      	add	r7, r9
   2587e:	46ba      	mov	sl, r7
   25880:	4252      	negs	r2, r2
   25882:	4699      	mov	r9, r3
   25884:	4693      	mov	fp, r2
   25886:	44c2      	add	sl, r8
   25888:	44d1      	add	r9, sl
   2588a:	44cb      	add	fp, r9
   2588c:	428f      	cmp	r7, r1
   2588e:	41bf      	sbcs	r7, r7
   25890:	45c2      	cmp	sl, r8
   25892:	4189      	sbcs	r1, r1
   25894:	4599      	cmp	r9, r3
   25896:	419b      	sbcs	r3, r3
   25898:	4593      	cmp	fp, r2
   2589a:	4192      	sbcs	r2, r2
   2589c:	427f      	negs	r7, r7
   2589e:	4249      	negs	r1, r1
   258a0:	0c2d      	lsrs	r5, r5, #16
   258a2:	4252      	negs	r2, r2
   258a4:	430f      	orrs	r7, r1
   258a6:	425b      	negs	r3, r3
   258a8:	4313      	orrs	r3, r2
   258aa:	197f      	adds	r7, r7, r5
   258ac:	18ff      	adds	r7, r7, r3
   258ae:	465b      	mov	r3, fp
   258b0:	193c      	adds	r4, r7, r4
   258b2:	0ddb      	lsrs	r3, r3, #23
   258b4:	9a05      	ldr	r2, [sp, #20]
   258b6:	0264      	lsls	r4, r4, #9
   258b8:	431c      	orrs	r4, r3
   258ba:	0243      	lsls	r3, r0, #9
   258bc:	4313      	orrs	r3, r2
   258be:	1e5d      	subs	r5, r3, #1
   258c0:	41ab      	sbcs	r3, r5
   258c2:	465a      	mov	r2, fp
   258c4:	0dc0      	lsrs	r0, r0, #23
   258c6:	4303      	orrs	r3, r0
   258c8:	0252      	lsls	r2, r2, #9
   258ca:	4313      	orrs	r3, r2
   258cc:	01e2      	lsls	r2, r4, #7
   258ce:	d556      	bpl.n	2597e <__aeabi_dmul+0x426>
   258d0:	2001      	movs	r0, #1
   258d2:	085a      	lsrs	r2, r3, #1
   258d4:	4003      	ands	r3, r0
   258d6:	4313      	orrs	r3, r2
   258d8:	07e2      	lsls	r2, r4, #31
   258da:	4313      	orrs	r3, r2
   258dc:	0864      	lsrs	r4, r4, #1
   258de:	485a      	ldr	r0, [pc, #360]	; (25a48 <__aeabi_dmul+0x4f0>)
   258e0:	4460      	add	r0, ip
   258e2:	2800      	cmp	r0, #0
   258e4:	dd4d      	ble.n	25982 <__aeabi_dmul+0x42a>
   258e6:	075a      	lsls	r2, r3, #29
   258e8:	d009      	beq.n	258fe <__aeabi_dmul+0x3a6>
   258ea:	220f      	movs	r2, #15
   258ec:	401a      	ands	r2, r3
   258ee:	2a04      	cmp	r2, #4
   258f0:	d005      	beq.n	258fe <__aeabi_dmul+0x3a6>
   258f2:	1d1a      	adds	r2, r3, #4
   258f4:	429a      	cmp	r2, r3
   258f6:	419b      	sbcs	r3, r3
   258f8:	425b      	negs	r3, r3
   258fa:	18e4      	adds	r4, r4, r3
   258fc:	0013      	movs	r3, r2
   258fe:	01e2      	lsls	r2, r4, #7
   25900:	d504      	bpl.n	2590c <__aeabi_dmul+0x3b4>
   25902:	2080      	movs	r0, #128	; 0x80
   25904:	4a51      	ldr	r2, [pc, #324]	; (25a4c <__aeabi_dmul+0x4f4>)
   25906:	00c0      	lsls	r0, r0, #3
   25908:	4014      	ands	r4, r2
   2590a:	4460      	add	r0, ip
   2590c:	4a50      	ldr	r2, [pc, #320]	; (25a50 <__aeabi_dmul+0x4f8>)
   2590e:	4290      	cmp	r0, r2
   25910:	dd00      	ble.n	25914 <__aeabi_dmul+0x3bc>
   25912:	e6e3      	b.n	256dc <__aeabi_dmul+0x184>
   25914:	2501      	movs	r5, #1
   25916:	08db      	lsrs	r3, r3, #3
   25918:	0762      	lsls	r2, r4, #29
   2591a:	431a      	orrs	r2, r3
   2591c:	0264      	lsls	r4, r4, #9
   2591e:	9b01      	ldr	r3, [sp, #4]
   25920:	4691      	mov	r9, r2
   25922:	0b22      	lsrs	r2, r4, #12
   25924:	0544      	lsls	r4, r0, #21
   25926:	0d64      	lsrs	r4, r4, #21
   25928:	401d      	ands	r5, r3
   2592a:	e67c      	b.n	25626 <__aeabi_dmul+0xce>
   2592c:	2280      	movs	r2, #128	; 0x80
   2592e:	4659      	mov	r1, fp
   25930:	0312      	lsls	r2, r2, #12
   25932:	4211      	tst	r1, r2
   25934:	d008      	beq.n	25948 <__aeabi_dmul+0x3f0>
   25936:	4214      	tst	r4, r2
   25938:	d106      	bne.n	25948 <__aeabi_dmul+0x3f0>
   2593a:	4322      	orrs	r2, r4
   2593c:	0312      	lsls	r2, r2, #12
   2593e:	0b12      	lsrs	r2, r2, #12
   25940:	4645      	mov	r5, r8
   25942:	4699      	mov	r9, r3
   25944:	4c43      	ldr	r4, [pc, #268]	; (25a54 <__aeabi_dmul+0x4fc>)
   25946:	e66e      	b.n	25626 <__aeabi_dmul+0xce>
   25948:	465b      	mov	r3, fp
   2594a:	431a      	orrs	r2, r3
   2594c:	0312      	lsls	r2, r2, #12
   2594e:	0b12      	lsrs	r2, r2, #12
   25950:	4c40      	ldr	r4, [pc, #256]	; (25a54 <__aeabi_dmul+0x4fc>)
   25952:	e668      	b.n	25626 <__aeabi_dmul+0xce>
   25954:	0003      	movs	r3, r0
   25956:	4654      	mov	r4, sl
   25958:	3b28      	subs	r3, #40	; 0x28
   2595a:	409c      	lsls	r4, r3
   2595c:	2300      	movs	r3, #0
   2595e:	e6b9      	b.n	256d4 <__aeabi_dmul+0x17c>
   25960:	f000 fbfc 	bl	2615c <__clzsi2>
   25964:	3020      	adds	r0, #32
   25966:	e6a6      	b.n	256b6 <__aeabi_dmul+0x15e>
   25968:	0003      	movs	r3, r0
   2596a:	3b28      	subs	r3, #40	; 0x28
   2596c:	409f      	lsls	r7, r3
   2596e:	2300      	movs	r3, #0
   25970:	46bb      	mov	fp, r7
   25972:	4699      	mov	r9, r3
   25974:	e68a      	b.n	2568c <__aeabi_dmul+0x134>
   25976:	f000 fbf1 	bl	2615c <__clzsi2>
   2597a:	3020      	adds	r0, #32
   2597c:	e674      	b.n	25668 <__aeabi_dmul+0x110>
   2597e:	46b4      	mov	ip, r6
   25980:	e7ad      	b.n	258de <__aeabi_dmul+0x386>
   25982:	2501      	movs	r5, #1
   25984:	1a2a      	subs	r2, r5, r0
   25986:	2a38      	cmp	r2, #56	; 0x38
   25988:	dd06      	ble.n	25998 <__aeabi_dmul+0x440>
   2598a:	9b01      	ldr	r3, [sp, #4]
   2598c:	2400      	movs	r4, #0
   2598e:	401d      	ands	r5, r3
   25990:	2300      	movs	r3, #0
   25992:	2200      	movs	r2, #0
   25994:	4699      	mov	r9, r3
   25996:	e646      	b.n	25626 <__aeabi_dmul+0xce>
   25998:	2a1f      	cmp	r2, #31
   2599a:	dc21      	bgt.n	259e0 <__aeabi_dmul+0x488>
   2599c:	2520      	movs	r5, #32
   2599e:	0020      	movs	r0, r4
   259a0:	1aad      	subs	r5, r5, r2
   259a2:	001e      	movs	r6, r3
   259a4:	40ab      	lsls	r3, r5
   259a6:	40a8      	lsls	r0, r5
   259a8:	40d6      	lsrs	r6, r2
   259aa:	1e5d      	subs	r5, r3, #1
   259ac:	41ab      	sbcs	r3, r5
   259ae:	4330      	orrs	r0, r6
   259b0:	4318      	orrs	r0, r3
   259b2:	40d4      	lsrs	r4, r2
   259b4:	0743      	lsls	r3, r0, #29
   259b6:	d009      	beq.n	259cc <__aeabi_dmul+0x474>
   259b8:	230f      	movs	r3, #15
   259ba:	4003      	ands	r3, r0
   259bc:	2b04      	cmp	r3, #4
   259be:	d005      	beq.n	259cc <__aeabi_dmul+0x474>
   259c0:	0003      	movs	r3, r0
   259c2:	1d18      	adds	r0, r3, #4
   259c4:	4298      	cmp	r0, r3
   259c6:	419b      	sbcs	r3, r3
   259c8:	425b      	negs	r3, r3
   259ca:	18e4      	adds	r4, r4, r3
   259cc:	0223      	lsls	r3, r4, #8
   259ce:	d521      	bpl.n	25a14 <__aeabi_dmul+0x4bc>
   259d0:	2501      	movs	r5, #1
   259d2:	9b01      	ldr	r3, [sp, #4]
   259d4:	2401      	movs	r4, #1
   259d6:	401d      	ands	r5, r3
   259d8:	2300      	movs	r3, #0
   259da:	2200      	movs	r2, #0
   259dc:	4699      	mov	r9, r3
   259de:	e622      	b.n	25626 <__aeabi_dmul+0xce>
   259e0:	251f      	movs	r5, #31
   259e2:	0021      	movs	r1, r4
   259e4:	426d      	negs	r5, r5
   259e6:	1a28      	subs	r0, r5, r0
   259e8:	40c1      	lsrs	r1, r0
   259ea:	0008      	movs	r0, r1
   259ec:	2a20      	cmp	r2, #32
   259ee:	d01d      	beq.n	25a2c <__aeabi_dmul+0x4d4>
   259f0:	355f      	adds	r5, #95	; 0x5f
   259f2:	1aaa      	subs	r2, r5, r2
   259f4:	4094      	lsls	r4, r2
   259f6:	4323      	orrs	r3, r4
   259f8:	1e5c      	subs	r4, r3, #1
   259fa:	41a3      	sbcs	r3, r4
   259fc:	2507      	movs	r5, #7
   259fe:	4303      	orrs	r3, r0
   25a00:	401d      	ands	r5, r3
   25a02:	2200      	movs	r2, #0
   25a04:	2d00      	cmp	r5, #0
   25a06:	d009      	beq.n	25a1c <__aeabi_dmul+0x4c4>
   25a08:	220f      	movs	r2, #15
   25a0a:	2400      	movs	r4, #0
   25a0c:	401a      	ands	r2, r3
   25a0e:	0018      	movs	r0, r3
   25a10:	2a04      	cmp	r2, #4
   25a12:	d1d6      	bne.n	259c2 <__aeabi_dmul+0x46a>
   25a14:	0003      	movs	r3, r0
   25a16:	0765      	lsls	r5, r4, #29
   25a18:	0264      	lsls	r4, r4, #9
   25a1a:	0b22      	lsrs	r2, r4, #12
   25a1c:	08db      	lsrs	r3, r3, #3
   25a1e:	432b      	orrs	r3, r5
   25a20:	2501      	movs	r5, #1
   25a22:	4699      	mov	r9, r3
   25a24:	9b01      	ldr	r3, [sp, #4]
   25a26:	2400      	movs	r4, #0
   25a28:	401d      	ands	r5, r3
   25a2a:	e5fc      	b.n	25626 <__aeabi_dmul+0xce>
   25a2c:	2400      	movs	r4, #0
   25a2e:	e7e2      	b.n	259f6 <__aeabi_dmul+0x49e>
   25a30:	2280      	movs	r2, #128	; 0x80
   25a32:	2501      	movs	r5, #1
   25a34:	0312      	lsls	r2, r2, #12
   25a36:	4322      	orrs	r2, r4
   25a38:	9901      	ldr	r1, [sp, #4]
   25a3a:	0312      	lsls	r2, r2, #12
   25a3c:	0b12      	lsrs	r2, r2, #12
   25a3e:	400d      	ands	r5, r1
   25a40:	4699      	mov	r9, r3
   25a42:	4c04      	ldr	r4, [pc, #16]	; (25a54 <__aeabi_dmul+0x4fc>)
   25a44:	e5ef      	b.n	25626 <__aeabi_dmul+0xce>
   25a46:	46c0      	nop			; (mov r8, r8)
   25a48:	000003ff 	.word	0x000003ff
   25a4c:	feffffff 	.word	0xfeffffff
   25a50:	000007fe 	.word	0x000007fe
   25a54:	000007ff 	.word	0x000007ff

00025a58 <__aeabi_dsub>:
   25a58:	b5f0      	push	{r4, r5, r6, r7, lr}
   25a5a:	4646      	mov	r6, r8
   25a5c:	46d6      	mov	lr, sl
   25a5e:	464f      	mov	r7, r9
   25a60:	030c      	lsls	r4, r1, #12
   25a62:	b5c0      	push	{r6, r7, lr}
   25a64:	0fcd      	lsrs	r5, r1, #31
   25a66:	004e      	lsls	r6, r1, #1
   25a68:	0a61      	lsrs	r1, r4, #9
   25a6a:	0f44      	lsrs	r4, r0, #29
   25a6c:	430c      	orrs	r4, r1
   25a6e:	00c1      	lsls	r1, r0, #3
   25a70:	0058      	lsls	r0, r3, #1
   25a72:	0d40      	lsrs	r0, r0, #21
   25a74:	4684      	mov	ip, r0
   25a76:	468a      	mov	sl, r1
   25a78:	000f      	movs	r7, r1
   25a7a:	0319      	lsls	r1, r3, #12
   25a7c:	0f50      	lsrs	r0, r2, #29
   25a7e:	0a49      	lsrs	r1, r1, #9
   25a80:	4301      	orrs	r1, r0
   25a82:	48c6      	ldr	r0, [pc, #792]	; (25d9c <__aeabi_dsub+0x344>)
   25a84:	0d76      	lsrs	r6, r6, #21
   25a86:	46a8      	mov	r8, r5
   25a88:	0fdb      	lsrs	r3, r3, #31
   25a8a:	00d2      	lsls	r2, r2, #3
   25a8c:	4584      	cmp	ip, r0
   25a8e:	d100      	bne.n	25a92 <__aeabi_dsub+0x3a>
   25a90:	e0d8      	b.n	25c44 <__aeabi_dsub+0x1ec>
   25a92:	2001      	movs	r0, #1
   25a94:	4043      	eors	r3, r0
   25a96:	42ab      	cmp	r3, r5
   25a98:	d100      	bne.n	25a9c <__aeabi_dsub+0x44>
   25a9a:	e0a6      	b.n	25bea <__aeabi_dsub+0x192>
   25a9c:	4660      	mov	r0, ip
   25a9e:	1a35      	subs	r5, r6, r0
   25aa0:	2d00      	cmp	r5, #0
   25aa2:	dc00      	bgt.n	25aa6 <__aeabi_dsub+0x4e>
   25aa4:	e105      	b.n	25cb2 <__aeabi_dsub+0x25a>
   25aa6:	2800      	cmp	r0, #0
   25aa8:	d110      	bne.n	25acc <__aeabi_dsub+0x74>
   25aaa:	000b      	movs	r3, r1
   25aac:	4313      	orrs	r3, r2
   25aae:	d100      	bne.n	25ab2 <__aeabi_dsub+0x5a>
   25ab0:	e0d7      	b.n	25c62 <__aeabi_dsub+0x20a>
   25ab2:	1e6b      	subs	r3, r5, #1
   25ab4:	2b00      	cmp	r3, #0
   25ab6:	d000      	beq.n	25aba <__aeabi_dsub+0x62>
   25ab8:	e14b      	b.n	25d52 <__aeabi_dsub+0x2fa>
   25aba:	4653      	mov	r3, sl
   25abc:	1a9f      	subs	r7, r3, r2
   25abe:	45ba      	cmp	sl, r7
   25ac0:	4180      	sbcs	r0, r0
   25ac2:	1a64      	subs	r4, r4, r1
   25ac4:	4240      	negs	r0, r0
   25ac6:	1a24      	subs	r4, r4, r0
   25ac8:	2601      	movs	r6, #1
   25aca:	e01e      	b.n	25b0a <__aeabi_dsub+0xb2>
   25acc:	4bb3      	ldr	r3, [pc, #716]	; (25d9c <__aeabi_dsub+0x344>)
   25ace:	429e      	cmp	r6, r3
   25ad0:	d048      	beq.n	25b64 <__aeabi_dsub+0x10c>
   25ad2:	2380      	movs	r3, #128	; 0x80
   25ad4:	041b      	lsls	r3, r3, #16
   25ad6:	4319      	orrs	r1, r3
   25ad8:	2d38      	cmp	r5, #56	; 0x38
   25ada:	dd00      	ble.n	25ade <__aeabi_dsub+0x86>
   25adc:	e119      	b.n	25d12 <__aeabi_dsub+0x2ba>
   25ade:	2d1f      	cmp	r5, #31
   25ae0:	dd00      	ble.n	25ae4 <__aeabi_dsub+0x8c>
   25ae2:	e14c      	b.n	25d7e <__aeabi_dsub+0x326>
   25ae4:	2320      	movs	r3, #32
   25ae6:	000f      	movs	r7, r1
   25ae8:	1b5b      	subs	r3, r3, r5
   25aea:	0010      	movs	r0, r2
   25aec:	409a      	lsls	r2, r3
   25aee:	409f      	lsls	r7, r3
   25af0:	40e8      	lsrs	r0, r5
   25af2:	1e53      	subs	r3, r2, #1
   25af4:	419a      	sbcs	r2, r3
   25af6:	40e9      	lsrs	r1, r5
   25af8:	4307      	orrs	r7, r0
   25afa:	4317      	orrs	r7, r2
   25afc:	4653      	mov	r3, sl
   25afe:	1bdf      	subs	r7, r3, r7
   25b00:	1a61      	subs	r1, r4, r1
   25b02:	45ba      	cmp	sl, r7
   25b04:	41a4      	sbcs	r4, r4
   25b06:	4264      	negs	r4, r4
   25b08:	1b0c      	subs	r4, r1, r4
   25b0a:	0223      	lsls	r3, r4, #8
   25b0c:	d400      	bmi.n	25b10 <__aeabi_dsub+0xb8>
   25b0e:	e0c5      	b.n	25c9c <__aeabi_dsub+0x244>
   25b10:	0264      	lsls	r4, r4, #9
   25b12:	0a65      	lsrs	r5, r4, #9
   25b14:	2d00      	cmp	r5, #0
   25b16:	d100      	bne.n	25b1a <__aeabi_dsub+0xc2>
   25b18:	e0f6      	b.n	25d08 <__aeabi_dsub+0x2b0>
   25b1a:	0028      	movs	r0, r5
   25b1c:	f000 fb1e 	bl	2615c <__clzsi2>
   25b20:	0003      	movs	r3, r0
   25b22:	3b08      	subs	r3, #8
   25b24:	2b1f      	cmp	r3, #31
   25b26:	dd00      	ble.n	25b2a <__aeabi_dsub+0xd2>
   25b28:	e0e9      	b.n	25cfe <__aeabi_dsub+0x2a6>
   25b2a:	2220      	movs	r2, #32
   25b2c:	003c      	movs	r4, r7
   25b2e:	1ad2      	subs	r2, r2, r3
   25b30:	409d      	lsls	r5, r3
   25b32:	40d4      	lsrs	r4, r2
   25b34:	409f      	lsls	r7, r3
   25b36:	4325      	orrs	r5, r4
   25b38:	429e      	cmp	r6, r3
   25b3a:	dd00      	ble.n	25b3e <__aeabi_dsub+0xe6>
   25b3c:	e0db      	b.n	25cf6 <__aeabi_dsub+0x29e>
   25b3e:	1b9e      	subs	r6, r3, r6
   25b40:	1c73      	adds	r3, r6, #1
   25b42:	2b1f      	cmp	r3, #31
   25b44:	dd00      	ble.n	25b48 <__aeabi_dsub+0xf0>
   25b46:	e10a      	b.n	25d5e <__aeabi_dsub+0x306>
   25b48:	2220      	movs	r2, #32
   25b4a:	0038      	movs	r0, r7
   25b4c:	1ad2      	subs	r2, r2, r3
   25b4e:	0029      	movs	r1, r5
   25b50:	4097      	lsls	r7, r2
   25b52:	002c      	movs	r4, r5
   25b54:	4091      	lsls	r1, r2
   25b56:	40d8      	lsrs	r0, r3
   25b58:	1e7a      	subs	r2, r7, #1
   25b5a:	4197      	sbcs	r7, r2
   25b5c:	40dc      	lsrs	r4, r3
   25b5e:	2600      	movs	r6, #0
   25b60:	4301      	orrs	r1, r0
   25b62:	430f      	orrs	r7, r1
   25b64:	077b      	lsls	r3, r7, #29
   25b66:	d009      	beq.n	25b7c <__aeabi_dsub+0x124>
   25b68:	230f      	movs	r3, #15
   25b6a:	403b      	ands	r3, r7
   25b6c:	2b04      	cmp	r3, #4
   25b6e:	d005      	beq.n	25b7c <__aeabi_dsub+0x124>
   25b70:	1d3b      	adds	r3, r7, #4
   25b72:	42bb      	cmp	r3, r7
   25b74:	41bf      	sbcs	r7, r7
   25b76:	427f      	negs	r7, r7
   25b78:	19e4      	adds	r4, r4, r7
   25b7a:	001f      	movs	r7, r3
   25b7c:	0223      	lsls	r3, r4, #8
   25b7e:	d525      	bpl.n	25bcc <__aeabi_dsub+0x174>
   25b80:	4b86      	ldr	r3, [pc, #536]	; (25d9c <__aeabi_dsub+0x344>)
   25b82:	3601      	adds	r6, #1
   25b84:	429e      	cmp	r6, r3
   25b86:	d100      	bne.n	25b8a <__aeabi_dsub+0x132>
   25b88:	e0af      	b.n	25cea <__aeabi_dsub+0x292>
   25b8a:	4b85      	ldr	r3, [pc, #532]	; (25da0 <__aeabi_dsub+0x348>)
   25b8c:	2501      	movs	r5, #1
   25b8e:	401c      	ands	r4, r3
   25b90:	4643      	mov	r3, r8
   25b92:	0762      	lsls	r2, r4, #29
   25b94:	08ff      	lsrs	r7, r7, #3
   25b96:	0264      	lsls	r4, r4, #9
   25b98:	0576      	lsls	r6, r6, #21
   25b9a:	4317      	orrs	r7, r2
   25b9c:	0b24      	lsrs	r4, r4, #12
   25b9e:	0d76      	lsrs	r6, r6, #21
   25ba0:	401d      	ands	r5, r3
   25ba2:	2100      	movs	r1, #0
   25ba4:	0324      	lsls	r4, r4, #12
   25ba6:	0b23      	lsrs	r3, r4, #12
   25ba8:	0d0c      	lsrs	r4, r1, #20
   25baa:	4a7e      	ldr	r2, [pc, #504]	; (25da4 <__aeabi_dsub+0x34c>)
   25bac:	0524      	lsls	r4, r4, #20
   25bae:	431c      	orrs	r4, r3
   25bb0:	4014      	ands	r4, r2
   25bb2:	0533      	lsls	r3, r6, #20
   25bb4:	4323      	orrs	r3, r4
   25bb6:	005b      	lsls	r3, r3, #1
   25bb8:	07ed      	lsls	r5, r5, #31
   25bba:	085b      	lsrs	r3, r3, #1
   25bbc:	432b      	orrs	r3, r5
   25bbe:	0038      	movs	r0, r7
   25bc0:	0019      	movs	r1, r3
   25bc2:	bc1c      	pop	{r2, r3, r4}
   25bc4:	4690      	mov	r8, r2
   25bc6:	4699      	mov	r9, r3
   25bc8:	46a2      	mov	sl, r4
   25bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25bcc:	2501      	movs	r5, #1
   25bce:	4643      	mov	r3, r8
   25bd0:	0762      	lsls	r2, r4, #29
   25bd2:	08ff      	lsrs	r7, r7, #3
   25bd4:	4317      	orrs	r7, r2
   25bd6:	08e4      	lsrs	r4, r4, #3
   25bd8:	401d      	ands	r5, r3
   25bda:	4b70      	ldr	r3, [pc, #448]	; (25d9c <__aeabi_dsub+0x344>)
   25bdc:	429e      	cmp	r6, r3
   25bde:	d036      	beq.n	25c4e <__aeabi_dsub+0x1f6>
   25be0:	0324      	lsls	r4, r4, #12
   25be2:	0576      	lsls	r6, r6, #21
   25be4:	0b24      	lsrs	r4, r4, #12
   25be6:	0d76      	lsrs	r6, r6, #21
   25be8:	e7db      	b.n	25ba2 <__aeabi_dsub+0x14a>
   25bea:	4663      	mov	r3, ip
   25bec:	1af3      	subs	r3, r6, r3
   25bee:	2b00      	cmp	r3, #0
   25bf0:	dc00      	bgt.n	25bf4 <__aeabi_dsub+0x19c>
   25bf2:	e094      	b.n	25d1e <__aeabi_dsub+0x2c6>
   25bf4:	4660      	mov	r0, ip
   25bf6:	2800      	cmp	r0, #0
   25bf8:	d035      	beq.n	25c66 <__aeabi_dsub+0x20e>
   25bfa:	4868      	ldr	r0, [pc, #416]	; (25d9c <__aeabi_dsub+0x344>)
   25bfc:	4286      	cmp	r6, r0
   25bfe:	d0b1      	beq.n	25b64 <__aeabi_dsub+0x10c>
   25c00:	2780      	movs	r7, #128	; 0x80
   25c02:	043f      	lsls	r7, r7, #16
   25c04:	4339      	orrs	r1, r7
   25c06:	2b38      	cmp	r3, #56	; 0x38
   25c08:	dc00      	bgt.n	25c0c <__aeabi_dsub+0x1b4>
   25c0a:	e0fd      	b.n	25e08 <__aeabi_dsub+0x3b0>
   25c0c:	430a      	orrs	r2, r1
   25c0e:	0017      	movs	r7, r2
   25c10:	2100      	movs	r1, #0
   25c12:	1e7a      	subs	r2, r7, #1
   25c14:	4197      	sbcs	r7, r2
   25c16:	4457      	add	r7, sl
   25c18:	4557      	cmp	r7, sl
   25c1a:	4180      	sbcs	r0, r0
   25c1c:	1909      	adds	r1, r1, r4
   25c1e:	4244      	negs	r4, r0
   25c20:	190c      	adds	r4, r1, r4
   25c22:	0223      	lsls	r3, r4, #8
   25c24:	d53a      	bpl.n	25c9c <__aeabi_dsub+0x244>
   25c26:	4b5d      	ldr	r3, [pc, #372]	; (25d9c <__aeabi_dsub+0x344>)
   25c28:	3601      	adds	r6, #1
   25c2a:	429e      	cmp	r6, r3
   25c2c:	d100      	bne.n	25c30 <__aeabi_dsub+0x1d8>
   25c2e:	e14b      	b.n	25ec8 <__aeabi_dsub+0x470>
   25c30:	2201      	movs	r2, #1
   25c32:	4b5b      	ldr	r3, [pc, #364]	; (25da0 <__aeabi_dsub+0x348>)
   25c34:	401c      	ands	r4, r3
   25c36:	087b      	lsrs	r3, r7, #1
   25c38:	4017      	ands	r7, r2
   25c3a:	431f      	orrs	r7, r3
   25c3c:	07e2      	lsls	r2, r4, #31
   25c3e:	4317      	orrs	r7, r2
   25c40:	0864      	lsrs	r4, r4, #1
   25c42:	e78f      	b.n	25b64 <__aeabi_dsub+0x10c>
   25c44:	0008      	movs	r0, r1
   25c46:	4310      	orrs	r0, r2
   25c48:	d000      	beq.n	25c4c <__aeabi_dsub+0x1f4>
   25c4a:	e724      	b.n	25a96 <__aeabi_dsub+0x3e>
   25c4c:	e721      	b.n	25a92 <__aeabi_dsub+0x3a>
   25c4e:	0023      	movs	r3, r4
   25c50:	433b      	orrs	r3, r7
   25c52:	d100      	bne.n	25c56 <__aeabi_dsub+0x1fe>
   25c54:	e1b9      	b.n	25fca <__aeabi_dsub+0x572>
   25c56:	2280      	movs	r2, #128	; 0x80
   25c58:	0312      	lsls	r2, r2, #12
   25c5a:	4314      	orrs	r4, r2
   25c5c:	0324      	lsls	r4, r4, #12
   25c5e:	0b24      	lsrs	r4, r4, #12
   25c60:	e79f      	b.n	25ba2 <__aeabi_dsub+0x14a>
   25c62:	002e      	movs	r6, r5
   25c64:	e77e      	b.n	25b64 <__aeabi_dsub+0x10c>
   25c66:	0008      	movs	r0, r1
   25c68:	4310      	orrs	r0, r2
   25c6a:	d100      	bne.n	25c6e <__aeabi_dsub+0x216>
   25c6c:	e0ca      	b.n	25e04 <__aeabi_dsub+0x3ac>
   25c6e:	1e58      	subs	r0, r3, #1
   25c70:	4684      	mov	ip, r0
   25c72:	2800      	cmp	r0, #0
   25c74:	d000      	beq.n	25c78 <__aeabi_dsub+0x220>
   25c76:	e0e7      	b.n	25e48 <__aeabi_dsub+0x3f0>
   25c78:	4452      	add	r2, sl
   25c7a:	4552      	cmp	r2, sl
   25c7c:	4180      	sbcs	r0, r0
   25c7e:	1864      	adds	r4, r4, r1
   25c80:	4240      	negs	r0, r0
   25c82:	1824      	adds	r4, r4, r0
   25c84:	0017      	movs	r7, r2
   25c86:	2601      	movs	r6, #1
   25c88:	0223      	lsls	r3, r4, #8
   25c8a:	d507      	bpl.n	25c9c <__aeabi_dsub+0x244>
   25c8c:	2602      	movs	r6, #2
   25c8e:	e7cf      	b.n	25c30 <__aeabi_dsub+0x1d8>
   25c90:	4664      	mov	r4, ip
   25c92:	432c      	orrs	r4, r5
   25c94:	d100      	bne.n	25c98 <__aeabi_dsub+0x240>
   25c96:	e1b3      	b.n	26000 <__aeabi_dsub+0x5a8>
   25c98:	002c      	movs	r4, r5
   25c9a:	4667      	mov	r7, ip
   25c9c:	077b      	lsls	r3, r7, #29
   25c9e:	d000      	beq.n	25ca2 <__aeabi_dsub+0x24a>
   25ca0:	e762      	b.n	25b68 <__aeabi_dsub+0x110>
   25ca2:	0763      	lsls	r3, r4, #29
   25ca4:	08ff      	lsrs	r7, r7, #3
   25ca6:	431f      	orrs	r7, r3
   25ca8:	2501      	movs	r5, #1
   25caa:	4643      	mov	r3, r8
   25cac:	08e4      	lsrs	r4, r4, #3
   25cae:	401d      	ands	r5, r3
   25cb0:	e793      	b.n	25bda <__aeabi_dsub+0x182>
   25cb2:	2d00      	cmp	r5, #0
   25cb4:	d178      	bne.n	25da8 <__aeabi_dsub+0x350>
   25cb6:	1c75      	adds	r5, r6, #1
   25cb8:	056d      	lsls	r5, r5, #21
   25cba:	0d6d      	lsrs	r5, r5, #21
   25cbc:	2d01      	cmp	r5, #1
   25cbe:	dc00      	bgt.n	25cc2 <__aeabi_dsub+0x26a>
   25cc0:	e0f2      	b.n	25ea8 <__aeabi_dsub+0x450>
   25cc2:	4650      	mov	r0, sl
   25cc4:	1a80      	subs	r0, r0, r2
   25cc6:	4582      	cmp	sl, r0
   25cc8:	41bf      	sbcs	r7, r7
   25cca:	1a65      	subs	r5, r4, r1
   25ccc:	427f      	negs	r7, r7
   25cce:	1bed      	subs	r5, r5, r7
   25cd0:	4684      	mov	ip, r0
   25cd2:	0228      	lsls	r0, r5, #8
   25cd4:	d400      	bmi.n	25cd8 <__aeabi_dsub+0x280>
   25cd6:	e08c      	b.n	25df2 <__aeabi_dsub+0x39a>
   25cd8:	4650      	mov	r0, sl
   25cda:	1a17      	subs	r7, r2, r0
   25cdc:	42ba      	cmp	r2, r7
   25cde:	4192      	sbcs	r2, r2
   25ce0:	1b0c      	subs	r4, r1, r4
   25ce2:	4255      	negs	r5, r2
   25ce4:	1b65      	subs	r5, r4, r5
   25ce6:	4698      	mov	r8, r3
   25ce8:	e714      	b.n	25b14 <__aeabi_dsub+0xbc>
   25cea:	2501      	movs	r5, #1
   25cec:	4643      	mov	r3, r8
   25cee:	2400      	movs	r4, #0
   25cf0:	401d      	ands	r5, r3
   25cf2:	2700      	movs	r7, #0
   25cf4:	e755      	b.n	25ba2 <__aeabi_dsub+0x14a>
   25cf6:	4c2a      	ldr	r4, [pc, #168]	; (25da0 <__aeabi_dsub+0x348>)
   25cf8:	1af6      	subs	r6, r6, r3
   25cfa:	402c      	ands	r4, r5
   25cfc:	e732      	b.n	25b64 <__aeabi_dsub+0x10c>
   25cfe:	003d      	movs	r5, r7
   25d00:	3828      	subs	r0, #40	; 0x28
   25d02:	4085      	lsls	r5, r0
   25d04:	2700      	movs	r7, #0
   25d06:	e717      	b.n	25b38 <__aeabi_dsub+0xe0>
   25d08:	0038      	movs	r0, r7
   25d0a:	f000 fa27 	bl	2615c <__clzsi2>
   25d0e:	3020      	adds	r0, #32
   25d10:	e706      	b.n	25b20 <__aeabi_dsub+0xc8>
   25d12:	430a      	orrs	r2, r1
   25d14:	0017      	movs	r7, r2
   25d16:	2100      	movs	r1, #0
   25d18:	1e7a      	subs	r2, r7, #1
   25d1a:	4197      	sbcs	r7, r2
   25d1c:	e6ee      	b.n	25afc <__aeabi_dsub+0xa4>
   25d1e:	2b00      	cmp	r3, #0
   25d20:	d000      	beq.n	25d24 <__aeabi_dsub+0x2cc>
   25d22:	e0e5      	b.n	25ef0 <__aeabi_dsub+0x498>
   25d24:	1c73      	adds	r3, r6, #1
   25d26:	469c      	mov	ip, r3
   25d28:	055b      	lsls	r3, r3, #21
   25d2a:	0d5b      	lsrs	r3, r3, #21
   25d2c:	2b01      	cmp	r3, #1
   25d2e:	dc00      	bgt.n	25d32 <__aeabi_dsub+0x2da>
   25d30:	e09f      	b.n	25e72 <__aeabi_dsub+0x41a>
   25d32:	4b1a      	ldr	r3, [pc, #104]	; (25d9c <__aeabi_dsub+0x344>)
   25d34:	459c      	cmp	ip, r3
   25d36:	d100      	bne.n	25d3a <__aeabi_dsub+0x2e2>
   25d38:	e0c5      	b.n	25ec6 <__aeabi_dsub+0x46e>
   25d3a:	4452      	add	r2, sl
   25d3c:	4552      	cmp	r2, sl
   25d3e:	4180      	sbcs	r0, r0
   25d40:	1864      	adds	r4, r4, r1
   25d42:	4240      	negs	r0, r0
   25d44:	1824      	adds	r4, r4, r0
   25d46:	07e7      	lsls	r7, r4, #31
   25d48:	0852      	lsrs	r2, r2, #1
   25d4a:	4317      	orrs	r7, r2
   25d4c:	0864      	lsrs	r4, r4, #1
   25d4e:	4666      	mov	r6, ip
   25d50:	e708      	b.n	25b64 <__aeabi_dsub+0x10c>
   25d52:	4812      	ldr	r0, [pc, #72]	; (25d9c <__aeabi_dsub+0x344>)
   25d54:	4285      	cmp	r5, r0
   25d56:	d100      	bne.n	25d5a <__aeabi_dsub+0x302>
   25d58:	e085      	b.n	25e66 <__aeabi_dsub+0x40e>
   25d5a:	001d      	movs	r5, r3
   25d5c:	e6bc      	b.n	25ad8 <__aeabi_dsub+0x80>
   25d5e:	0029      	movs	r1, r5
   25d60:	3e1f      	subs	r6, #31
   25d62:	40f1      	lsrs	r1, r6
   25d64:	2b20      	cmp	r3, #32
   25d66:	d100      	bne.n	25d6a <__aeabi_dsub+0x312>
   25d68:	e07f      	b.n	25e6a <__aeabi_dsub+0x412>
   25d6a:	2240      	movs	r2, #64	; 0x40
   25d6c:	1ad3      	subs	r3, r2, r3
   25d6e:	409d      	lsls	r5, r3
   25d70:	432f      	orrs	r7, r5
   25d72:	1e7d      	subs	r5, r7, #1
   25d74:	41af      	sbcs	r7, r5
   25d76:	2400      	movs	r4, #0
   25d78:	430f      	orrs	r7, r1
   25d7a:	2600      	movs	r6, #0
   25d7c:	e78e      	b.n	25c9c <__aeabi_dsub+0x244>
   25d7e:	002b      	movs	r3, r5
   25d80:	000f      	movs	r7, r1
   25d82:	3b20      	subs	r3, #32
   25d84:	40df      	lsrs	r7, r3
   25d86:	2d20      	cmp	r5, #32
   25d88:	d071      	beq.n	25e6e <__aeabi_dsub+0x416>
   25d8a:	2340      	movs	r3, #64	; 0x40
   25d8c:	1b5d      	subs	r5, r3, r5
   25d8e:	40a9      	lsls	r1, r5
   25d90:	430a      	orrs	r2, r1
   25d92:	1e51      	subs	r1, r2, #1
   25d94:	418a      	sbcs	r2, r1
   25d96:	2100      	movs	r1, #0
   25d98:	4317      	orrs	r7, r2
   25d9a:	e6af      	b.n	25afc <__aeabi_dsub+0xa4>
   25d9c:	000007ff 	.word	0x000007ff
   25da0:	ff7fffff 	.word	0xff7fffff
   25da4:	800fffff 	.word	0x800fffff
   25da8:	2e00      	cmp	r6, #0
   25daa:	d03e      	beq.n	25e2a <__aeabi_dsub+0x3d2>
   25dac:	4eb3      	ldr	r6, [pc, #716]	; (2607c <__aeabi_dsub+0x624>)
   25dae:	45b4      	cmp	ip, r6
   25db0:	d045      	beq.n	25e3e <__aeabi_dsub+0x3e6>
   25db2:	2680      	movs	r6, #128	; 0x80
   25db4:	0436      	lsls	r6, r6, #16
   25db6:	426d      	negs	r5, r5
   25db8:	4334      	orrs	r4, r6
   25dba:	2d38      	cmp	r5, #56	; 0x38
   25dbc:	dd00      	ble.n	25dc0 <__aeabi_dsub+0x368>
   25dbe:	e0a8      	b.n	25f12 <__aeabi_dsub+0x4ba>
   25dc0:	2d1f      	cmp	r5, #31
   25dc2:	dd00      	ble.n	25dc6 <__aeabi_dsub+0x36e>
   25dc4:	e11f      	b.n	26006 <__aeabi_dsub+0x5ae>
   25dc6:	2620      	movs	r6, #32
   25dc8:	0027      	movs	r7, r4
   25dca:	4650      	mov	r0, sl
   25dcc:	1b76      	subs	r6, r6, r5
   25dce:	40b7      	lsls	r7, r6
   25dd0:	40e8      	lsrs	r0, r5
   25dd2:	4307      	orrs	r7, r0
   25dd4:	4650      	mov	r0, sl
   25dd6:	40b0      	lsls	r0, r6
   25dd8:	1e46      	subs	r6, r0, #1
   25dda:	41b0      	sbcs	r0, r6
   25ddc:	40ec      	lsrs	r4, r5
   25dde:	4338      	orrs	r0, r7
   25de0:	1a17      	subs	r7, r2, r0
   25de2:	42ba      	cmp	r2, r7
   25de4:	4192      	sbcs	r2, r2
   25de6:	1b0c      	subs	r4, r1, r4
   25de8:	4252      	negs	r2, r2
   25dea:	1aa4      	subs	r4, r4, r2
   25dec:	4666      	mov	r6, ip
   25dee:	4698      	mov	r8, r3
   25df0:	e68b      	b.n	25b0a <__aeabi_dsub+0xb2>
   25df2:	4664      	mov	r4, ip
   25df4:	4667      	mov	r7, ip
   25df6:	432c      	orrs	r4, r5
   25df8:	d000      	beq.n	25dfc <__aeabi_dsub+0x3a4>
   25dfa:	e68b      	b.n	25b14 <__aeabi_dsub+0xbc>
   25dfc:	2500      	movs	r5, #0
   25dfe:	2600      	movs	r6, #0
   25e00:	2700      	movs	r7, #0
   25e02:	e6ea      	b.n	25bda <__aeabi_dsub+0x182>
   25e04:	001e      	movs	r6, r3
   25e06:	e6ad      	b.n	25b64 <__aeabi_dsub+0x10c>
   25e08:	2b1f      	cmp	r3, #31
   25e0a:	dc60      	bgt.n	25ece <__aeabi_dsub+0x476>
   25e0c:	2720      	movs	r7, #32
   25e0e:	1af8      	subs	r0, r7, r3
   25e10:	000f      	movs	r7, r1
   25e12:	4684      	mov	ip, r0
   25e14:	4087      	lsls	r7, r0
   25e16:	0010      	movs	r0, r2
   25e18:	40d8      	lsrs	r0, r3
   25e1a:	4307      	orrs	r7, r0
   25e1c:	4660      	mov	r0, ip
   25e1e:	4082      	lsls	r2, r0
   25e20:	1e50      	subs	r0, r2, #1
   25e22:	4182      	sbcs	r2, r0
   25e24:	40d9      	lsrs	r1, r3
   25e26:	4317      	orrs	r7, r2
   25e28:	e6f5      	b.n	25c16 <__aeabi_dsub+0x1be>
   25e2a:	0026      	movs	r6, r4
   25e2c:	4650      	mov	r0, sl
   25e2e:	4306      	orrs	r6, r0
   25e30:	d005      	beq.n	25e3e <__aeabi_dsub+0x3e6>
   25e32:	43ed      	mvns	r5, r5
   25e34:	2d00      	cmp	r5, #0
   25e36:	d0d3      	beq.n	25de0 <__aeabi_dsub+0x388>
   25e38:	4e90      	ldr	r6, [pc, #576]	; (2607c <__aeabi_dsub+0x624>)
   25e3a:	45b4      	cmp	ip, r6
   25e3c:	d1bd      	bne.n	25dba <__aeabi_dsub+0x362>
   25e3e:	000c      	movs	r4, r1
   25e40:	0017      	movs	r7, r2
   25e42:	4666      	mov	r6, ip
   25e44:	4698      	mov	r8, r3
   25e46:	e68d      	b.n	25b64 <__aeabi_dsub+0x10c>
   25e48:	488c      	ldr	r0, [pc, #560]	; (2607c <__aeabi_dsub+0x624>)
   25e4a:	4283      	cmp	r3, r0
   25e4c:	d00b      	beq.n	25e66 <__aeabi_dsub+0x40e>
   25e4e:	4663      	mov	r3, ip
   25e50:	e6d9      	b.n	25c06 <__aeabi_dsub+0x1ae>
   25e52:	2d00      	cmp	r5, #0
   25e54:	d000      	beq.n	25e58 <__aeabi_dsub+0x400>
   25e56:	e096      	b.n	25f86 <__aeabi_dsub+0x52e>
   25e58:	0008      	movs	r0, r1
   25e5a:	4310      	orrs	r0, r2
   25e5c:	d100      	bne.n	25e60 <__aeabi_dsub+0x408>
   25e5e:	e0e2      	b.n	26026 <__aeabi_dsub+0x5ce>
   25e60:	000c      	movs	r4, r1
   25e62:	0017      	movs	r7, r2
   25e64:	4698      	mov	r8, r3
   25e66:	4e85      	ldr	r6, [pc, #532]	; (2607c <__aeabi_dsub+0x624>)
   25e68:	e67c      	b.n	25b64 <__aeabi_dsub+0x10c>
   25e6a:	2500      	movs	r5, #0
   25e6c:	e780      	b.n	25d70 <__aeabi_dsub+0x318>
   25e6e:	2100      	movs	r1, #0
   25e70:	e78e      	b.n	25d90 <__aeabi_dsub+0x338>
   25e72:	0023      	movs	r3, r4
   25e74:	4650      	mov	r0, sl
   25e76:	4303      	orrs	r3, r0
   25e78:	2e00      	cmp	r6, #0
   25e7a:	d000      	beq.n	25e7e <__aeabi_dsub+0x426>
   25e7c:	e0a8      	b.n	25fd0 <__aeabi_dsub+0x578>
   25e7e:	2b00      	cmp	r3, #0
   25e80:	d100      	bne.n	25e84 <__aeabi_dsub+0x42c>
   25e82:	e0de      	b.n	26042 <__aeabi_dsub+0x5ea>
   25e84:	000b      	movs	r3, r1
   25e86:	4313      	orrs	r3, r2
   25e88:	d100      	bne.n	25e8c <__aeabi_dsub+0x434>
   25e8a:	e66b      	b.n	25b64 <__aeabi_dsub+0x10c>
   25e8c:	4452      	add	r2, sl
   25e8e:	4552      	cmp	r2, sl
   25e90:	4180      	sbcs	r0, r0
   25e92:	1864      	adds	r4, r4, r1
   25e94:	4240      	negs	r0, r0
   25e96:	1824      	adds	r4, r4, r0
   25e98:	0017      	movs	r7, r2
   25e9a:	0223      	lsls	r3, r4, #8
   25e9c:	d400      	bmi.n	25ea0 <__aeabi_dsub+0x448>
   25e9e:	e6fd      	b.n	25c9c <__aeabi_dsub+0x244>
   25ea0:	4b77      	ldr	r3, [pc, #476]	; (26080 <__aeabi_dsub+0x628>)
   25ea2:	4666      	mov	r6, ip
   25ea4:	401c      	ands	r4, r3
   25ea6:	e65d      	b.n	25b64 <__aeabi_dsub+0x10c>
   25ea8:	0025      	movs	r5, r4
   25eaa:	4650      	mov	r0, sl
   25eac:	4305      	orrs	r5, r0
   25eae:	2e00      	cmp	r6, #0
   25eb0:	d1cf      	bne.n	25e52 <__aeabi_dsub+0x3fa>
   25eb2:	2d00      	cmp	r5, #0
   25eb4:	d14f      	bne.n	25f56 <__aeabi_dsub+0x4fe>
   25eb6:	000c      	movs	r4, r1
   25eb8:	4314      	orrs	r4, r2
   25eba:	d100      	bne.n	25ebe <__aeabi_dsub+0x466>
   25ebc:	e0a0      	b.n	26000 <__aeabi_dsub+0x5a8>
   25ebe:	000c      	movs	r4, r1
   25ec0:	0017      	movs	r7, r2
   25ec2:	4698      	mov	r8, r3
   25ec4:	e64e      	b.n	25b64 <__aeabi_dsub+0x10c>
   25ec6:	4666      	mov	r6, ip
   25ec8:	2400      	movs	r4, #0
   25eca:	2700      	movs	r7, #0
   25ecc:	e685      	b.n	25bda <__aeabi_dsub+0x182>
   25ece:	001f      	movs	r7, r3
   25ed0:	0008      	movs	r0, r1
   25ed2:	3f20      	subs	r7, #32
   25ed4:	40f8      	lsrs	r0, r7
   25ed6:	0007      	movs	r7, r0
   25ed8:	2b20      	cmp	r3, #32
   25eda:	d100      	bne.n	25ede <__aeabi_dsub+0x486>
   25edc:	e08e      	b.n	25ffc <__aeabi_dsub+0x5a4>
   25ede:	2040      	movs	r0, #64	; 0x40
   25ee0:	1ac3      	subs	r3, r0, r3
   25ee2:	4099      	lsls	r1, r3
   25ee4:	430a      	orrs	r2, r1
   25ee6:	1e51      	subs	r1, r2, #1
   25ee8:	418a      	sbcs	r2, r1
   25eea:	2100      	movs	r1, #0
   25eec:	4317      	orrs	r7, r2
   25eee:	e692      	b.n	25c16 <__aeabi_dsub+0x1be>
   25ef0:	2e00      	cmp	r6, #0
   25ef2:	d114      	bne.n	25f1e <__aeabi_dsub+0x4c6>
   25ef4:	0026      	movs	r6, r4
   25ef6:	4650      	mov	r0, sl
   25ef8:	4306      	orrs	r6, r0
   25efa:	d062      	beq.n	25fc2 <__aeabi_dsub+0x56a>
   25efc:	43db      	mvns	r3, r3
   25efe:	2b00      	cmp	r3, #0
   25f00:	d15c      	bne.n	25fbc <__aeabi_dsub+0x564>
   25f02:	1887      	adds	r7, r0, r2
   25f04:	4297      	cmp	r7, r2
   25f06:	4192      	sbcs	r2, r2
   25f08:	1864      	adds	r4, r4, r1
   25f0a:	4252      	negs	r2, r2
   25f0c:	18a4      	adds	r4, r4, r2
   25f0e:	4666      	mov	r6, ip
   25f10:	e687      	b.n	25c22 <__aeabi_dsub+0x1ca>
   25f12:	4650      	mov	r0, sl
   25f14:	4320      	orrs	r0, r4
   25f16:	1e44      	subs	r4, r0, #1
   25f18:	41a0      	sbcs	r0, r4
   25f1a:	2400      	movs	r4, #0
   25f1c:	e760      	b.n	25de0 <__aeabi_dsub+0x388>
   25f1e:	4e57      	ldr	r6, [pc, #348]	; (2607c <__aeabi_dsub+0x624>)
   25f20:	45b4      	cmp	ip, r6
   25f22:	d04e      	beq.n	25fc2 <__aeabi_dsub+0x56a>
   25f24:	2680      	movs	r6, #128	; 0x80
   25f26:	0436      	lsls	r6, r6, #16
   25f28:	425b      	negs	r3, r3
   25f2a:	4334      	orrs	r4, r6
   25f2c:	2b38      	cmp	r3, #56	; 0x38
   25f2e:	dd00      	ble.n	25f32 <__aeabi_dsub+0x4da>
   25f30:	e07f      	b.n	26032 <__aeabi_dsub+0x5da>
   25f32:	2b1f      	cmp	r3, #31
   25f34:	dd00      	ble.n	25f38 <__aeabi_dsub+0x4e0>
   25f36:	e08b      	b.n	26050 <__aeabi_dsub+0x5f8>
   25f38:	2620      	movs	r6, #32
   25f3a:	0027      	movs	r7, r4
   25f3c:	4650      	mov	r0, sl
   25f3e:	1af6      	subs	r6, r6, r3
   25f40:	40b7      	lsls	r7, r6
   25f42:	40d8      	lsrs	r0, r3
   25f44:	4307      	orrs	r7, r0
   25f46:	4650      	mov	r0, sl
   25f48:	40b0      	lsls	r0, r6
   25f4a:	1e46      	subs	r6, r0, #1
   25f4c:	41b0      	sbcs	r0, r6
   25f4e:	4307      	orrs	r7, r0
   25f50:	40dc      	lsrs	r4, r3
   25f52:	18bf      	adds	r7, r7, r2
   25f54:	e7d6      	b.n	25f04 <__aeabi_dsub+0x4ac>
   25f56:	000d      	movs	r5, r1
   25f58:	4315      	orrs	r5, r2
   25f5a:	d100      	bne.n	25f5e <__aeabi_dsub+0x506>
   25f5c:	e602      	b.n	25b64 <__aeabi_dsub+0x10c>
   25f5e:	4650      	mov	r0, sl
   25f60:	1a80      	subs	r0, r0, r2
   25f62:	4582      	cmp	sl, r0
   25f64:	41bf      	sbcs	r7, r7
   25f66:	1a65      	subs	r5, r4, r1
   25f68:	427f      	negs	r7, r7
   25f6a:	1bed      	subs	r5, r5, r7
   25f6c:	4684      	mov	ip, r0
   25f6e:	0228      	lsls	r0, r5, #8
   25f70:	d400      	bmi.n	25f74 <__aeabi_dsub+0x51c>
   25f72:	e68d      	b.n	25c90 <__aeabi_dsub+0x238>
   25f74:	4650      	mov	r0, sl
   25f76:	1a17      	subs	r7, r2, r0
   25f78:	42ba      	cmp	r2, r7
   25f7a:	4192      	sbcs	r2, r2
   25f7c:	1b0c      	subs	r4, r1, r4
   25f7e:	4252      	negs	r2, r2
   25f80:	1aa4      	subs	r4, r4, r2
   25f82:	4698      	mov	r8, r3
   25f84:	e5ee      	b.n	25b64 <__aeabi_dsub+0x10c>
   25f86:	000d      	movs	r5, r1
   25f88:	4315      	orrs	r5, r2
   25f8a:	d100      	bne.n	25f8e <__aeabi_dsub+0x536>
   25f8c:	e76b      	b.n	25e66 <__aeabi_dsub+0x40e>
   25f8e:	4650      	mov	r0, sl
   25f90:	0767      	lsls	r7, r4, #29
   25f92:	08c0      	lsrs	r0, r0, #3
   25f94:	4307      	orrs	r7, r0
   25f96:	2080      	movs	r0, #128	; 0x80
   25f98:	08e4      	lsrs	r4, r4, #3
   25f9a:	0300      	lsls	r0, r0, #12
   25f9c:	4204      	tst	r4, r0
   25f9e:	d007      	beq.n	25fb0 <__aeabi_dsub+0x558>
   25fa0:	08cd      	lsrs	r5, r1, #3
   25fa2:	4205      	tst	r5, r0
   25fa4:	d104      	bne.n	25fb0 <__aeabi_dsub+0x558>
   25fa6:	002c      	movs	r4, r5
   25fa8:	4698      	mov	r8, r3
   25faa:	08d7      	lsrs	r7, r2, #3
   25fac:	0749      	lsls	r1, r1, #29
   25fae:	430f      	orrs	r7, r1
   25fb0:	0f7b      	lsrs	r3, r7, #29
   25fb2:	00e4      	lsls	r4, r4, #3
   25fb4:	431c      	orrs	r4, r3
   25fb6:	00ff      	lsls	r7, r7, #3
   25fb8:	4e30      	ldr	r6, [pc, #192]	; (2607c <__aeabi_dsub+0x624>)
   25fba:	e5d3      	b.n	25b64 <__aeabi_dsub+0x10c>
   25fbc:	4e2f      	ldr	r6, [pc, #188]	; (2607c <__aeabi_dsub+0x624>)
   25fbe:	45b4      	cmp	ip, r6
   25fc0:	d1b4      	bne.n	25f2c <__aeabi_dsub+0x4d4>
   25fc2:	000c      	movs	r4, r1
   25fc4:	0017      	movs	r7, r2
   25fc6:	4666      	mov	r6, ip
   25fc8:	e5cc      	b.n	25b64 <__aeabi_dsub+0x10c>
   25fca:	2700      	movs	r7, #0
   25fcc:	2400      	movs	r4, #0
   25fce:	e5e8      	b.n	25ba2 <__aeabi_dsub+0x14a>
   25fd0:	2b00      	cmp	r3, #0
   25fd2:	d039      	beq.n	26048 <__aeabi_dsub+0x5f0>
   25fd4:	000b      	movs	r3, r1
   25fd6:	4313      	orrs	r3, r2
   25fd8:	d100      	bne.n	25fdc <__aeabi_dsub+0x584>
   25fda:	e744      	b.n	25e66 <__aeabi_dsub+0x40e>
   25fdc:	08c0      	lsrs	r0, r0, #3
   25fde:	0767      	lsls	r7, r4, #29
   25fe0:	4307      	orrs	r7, r0
   25fe2:	2080      	movs	r0, #128	; 0x80
   25fe4:	08e4      	lsrs	r4, r4, #3
   25fe6:	0300      	lsls	r0, r0, #12
   25fe8:	4204      	tst	r4, r0
   25fea:	d0e1      	beq.n	25fb0 <__aeabi_dsub+0x558>
   25fec:	08cb      	lsrs	r3, r1, #3
   25fee:	4203      	tst	r3, r0
   25ff0:	d1de      	bne.n	25fb0 <__aeabi_dsub+0x558>
   25ff2:	08d7      	lsrs	r7, r2, #3
   25ff4:	0749      	lsls	r1, r1, #29
   25ff6:	430f      	orrs	r7, r1
   25ff8:	001c      	movs	r4, r3
   25ffa:	e7d9      	b.n	25fb0 <__aeabi_dsub+0x558>
   25ffc:	2100      	movs	r1, #0
   25ffe:	e771      	b.n	25ee4 <__aeabi_dsub+0x48c>
   26000:	2500      	movs	r5, #0
   26002:	2700      	movs	r7, #0
   26004:	e5e9      	b.n	25bda <__aeabi_dsub+0x182>
   26006:	002e      	movs	r6, r5
   26008:	0027      	movs	r7, r4
   2600a:	3e20      	subs	r6, #32
   2600c:	40f7      	lsrs	r7, r6
   2600e:	2d20      	cmp	r5, #32
   26010:	d02f      	beq.n	26072 <__aeabi_dsub+0x61a>
   26012:	2640      	movs	r6, #64	; 0x40
   26014:	1b75      	subs	r5, r6, r5
   26016:	40ac      	lsls	r4, r5
   26018:	4650      	mov	r0, sl
   2601a:	4320      	orrs	r0, r4
   2601c:	1e44      	subs	r4, r0, #1
   2601e:	41a0      	sbcs	r0, r4
   26020:	2400      	movs	r4, #0
   26022:	4338      	orrs	r0, r7
   26024:	e6dc      	b.n	25de0 <__aeabi_dsub+0x388>
   26026:	2480      	movs	r4, #128	; 0x80
   26028:	2500      	movs	r5, #0
   2602a:	0324      	lsls	r4, r4, #12
   2602c:	4e13      	ldr	r6, [pc, #76]	; (2607c <__aeabi_dsub+0x624>)
   2602e:	2700      	movs	r7, #0
   26030:	e5d3      	b.n	25bda <__aeabi_dsub+0x182>
   26032:	4650      	mov	r0, sl
   26034:	4320      	orrs	r0, r4
   26036:	0007      	movs	r7, r0
   26038:	1e78      	subs	r0, r7, #1
   2603a:	4187      	sbcs	r7, r0
   2603c:	2400      	movs	r4, #0
   2603e:	18bf      	adds	r7, r7, r2
   26040:	e760      	b.n	25f04 <__aeabi_dsub+0x4ac>
   26042:	000c      	movs	r4, r1
   26044:	0017      	movs	r7, r2
   26046:	e58d      	b.n	25b64 <__aeabi_dsub+0x10c>
   26048:	000c      	movs	r4, r1
   2604a:	0017      	movs	r7, r2
   2604c:	4e0b      	ldr	r6, [pc, #44]	; (2607c <__aeabi_dsub+0x624>)
   2604e:	e589      	b.n	25b64 <__aeabi_dsub+0x10c>
   26050:	001e      	movs	r6, r3
   26052:	0027      	movs	r7, r4
   26054:	3e20      	subs	r6, #32
   26056:	40f7      	lsrs	r7, r6
   26058:	2b20      	cmp	r3, #32
   2605a:	d00c      	beq.n	26076 <__aeabi_dsub+0x61e>
   2605c:	2640      	movs	r6, #64	; 0x40
   2605e:	1af3      	subs	r3, r6, r3
   26060:	409c      	lsls	r4, r3
   26062:	4650      	mov	r0, sl
   26064:	4320      	orrs	r0, r4
   26066:	1e44      	subs	r4, r0, #1
   26068:	41a0      	sbcs	r0, r4
   2606a:	4307      	orrs	r7, r0
   2606c:	2400      	movs	r4, #0
   2606e:	18bf      	adds	r7, r7, r2
   26070:	e748      	b.n	25f04 <__aeabi_dsub+0x4ac>
   26072:	2400      	movs	r4, #0
   26074:	e7d0      	b.n	26018 <__aeabi_dsub+0x5c0>
   26076:	2400      	movs	r4, #0
   26078:	e7f3      	b.n	26062 <__aeabi_dsub+0x60a>
   2607a:	46c0      	nop			; (mov r8, r8)
   2607c:	000007ff 	.word	0x000007ff
   26080:	ff7fffff 	.word	0xff7fffff

00026084 <__aeabi_d2iz>:
   26084:	b530      	push	{r4, r5, lr}
   26086:	4d13      	ldr	r5, [pc, #76]	; (260d4 <__aeabi_d2iz+0x50>)
   26088:	030a      	lsls	r2, r1, #12
   2608a:	004b      	lsls	r3, r1, #1
   2608c:	0b12      	lsrs	r2, r2, #12
   2608e:	0d5b      	lsrs	r3, r3, #21
   26090:	0fc9      	lsrs	r1, r1, #31
   26092:	2400      	movs	r4, #0
   26094:	42ab      	cmp	r3, r5
   26096:	dd10      	ble.n	260ba <__aeabi_d2iz+0x36>
   26098:	4c0f      	ldr	r4, [pc, #60]	; (260d8 <__aeabi_d2iz+0x54>)
   2609a:	42a3      	cmp	r3, r4
   2609c:	dc0f      	bgt.n	260be <__aeabi_d2iz+0x3a>
   2609e:	2480      	movs	r4, #128	; 0x80
   260a0:	4d0e      	ldr	r5, [pc, #56]	; (260dc <__aeabi_d2iz+0x58>)
   260a2:	0364      	lsls	r4, r4, #13
   260a4:	4322      	orrs	r2, r4
   260a6:	1aed      	subs	r5, r5, r3
   260a8:	2d1f      	cmp	r5, #31
   260aa:	dd0b      	ble.n	260c4 <__aeabi_d2iz+0x40>
   260ac:	480c      	ldr	r0, [pc, #48]	; (260e0 <__aeabi_d2iz+0x5c>)
   260ae:	1ac3      	subs	r3, r0, r3
   260b0:	40da      	lsrs	r2, r3
   260b2:	4254      	negs	r4, r2
   260b4:	2900      	cmp	r1, #0
   260b6:	d100      	bne.n	260ba <__aeabi_d2iz+0x36>
   260b8:	0014      	movs	r4, r2
   260ba:	0020      	movs	r0, r4
   260bc:	bd30      	pop	{r4, r5, pc}
   260be:	4b09      	ldr	r3, [pc, #36]	; (260e4 <__aeabi_d2iz+0x60>)
   260c0:	18cc      	adds	r4, r1, r3
   260c2:	e7fa      	b.n	260ba <__aeabi_d2iz+0x36>
   260c4:	4c08      	ldr	r4, [pc, #32]	; (260e8 <__aeabi_d2iz+0x64>)
   260c6:	40e8      	lsrs	r0, r5
   260c8:	46a4      	mov	ip, r4
   260ca:	4463      	add	r3, ip
   260cc:	409a      	lsls	r2, r3
   260ce:	4302      	orrs	r2, r0
   260d0:	e7ef      	b.n	260b2 <__aeabi_d2iz+0x2e>
   260d2:	46c0      	nop			; (mov r8, r8)
   260d4:	000003fe 	.word	0x000003fe
   260d8:	0000041d 	.word	0x0000041d
   260dc:	00000433 	.word	0x00000433
   260e0:	00000413 	.word	0x00000413
   260e4:	7fffffff 	.word	0x7fffffff
   260e8:	fffffbed 	.word	0xfffffbed

000260ec <__aeabi_ui2d>:
   260ec:	b510      	push	{r4, lr}
   260ee:	1e04      	subs	r4, r0, #0
   260f0:	d028      	beq.n	26144 <__aeabi_ui2d+0x58>
   260f2:	f000 f833 	bl	2615c <__clzsi2>
   260f6:	4b15      	ldr	r3, [pc, #84]	; (2614c <__aeabi_ui2d+0x60>)
   260f8:	4a15      	ldr	r2, [pc, #84]	; (26150 <__aeabi_ui2d+0x64>)
   260fa:	1a1b      	subs	r3, r3, r0
   260fc:	1ad2      	subs	r2, r2, r3
   260fe:	2a1f      	cmp	r2, #31
   26100:	dd15      	ble.n	2612e <__aeabi_ui2d+0x42>
   26102:	4a14      	ldr	r2, [pc, #80]	; (26154 <__aeabi_ui2d+0x68>)
   26104:	1ad2      	subs	r2, r2, r3
   26106:	4094      	lsls	r4, r2
   26108:	2200      	movs	r2, #0
   2610a:	0324      	lsls	r4, r4, #12
   2610c:	055b      	lsls	r3, r3, #21
   2610e:	0b24      	lsrs	r4, r4, #12
   26110:	0d5b      	lsrs	r3, r3, #21
   26112:	2100      	movs	r1, #0
   26114:	0010      	movs	r0, r2
   26116:	0324      	lsls	r4, r4, #12
   26118:	0d0a      	lsrs	r2, r1, #20
   2611a:	0b24      	lsrs	r4, r4, #12
   2611c:	0512      	lsls	r2, r2, #20
   2611e:	4322      	orrs	r2, r4
   26120:	4c0d      	ldr	r4, [pc, #52]	; (26158 <__aeabi_ui2d+0x6c>)
   26122:	051b      	lsls	r3, r3, #20
   26124:	4022      	ands	r2, r4
   26126:	4313      	orrs	r3, r2
   26128:	005b      	lsls	r3, r3, #1
   2612a:	0859      	lsrs	r1, r3, #1
   2612c:	bd10      	pop	{r4, pc}
   2612e:	0021      	movs	r1, r4
   26130:	4091      	lsls	r1, r2
   26132:	000a      	movs	r2, r1
   26134:	210b      	movs	r1, #11
   26136:	1a08      	subs	r0, r1, r0
   26138:	40c4      	lsrs	r4, r0
   2613a:	055b      	lsls	r3, r3, #21
   2613c:	0324      	lsls	r4, r4, #12
   2613e:	0b24      	lsrs	r4, r4, #12
   26140:	0d5b      	lsrs	r3, r3, #21
   26142:	e7e6      	b.n	26112 <__aeabi_ui2d+0x26>
   26144:	2300      	movs	r3, #0
   26146:	2400      	movs	r4, #0
   26148:	2200      	movs	r2, #0
   2614a:	e7e2      	b.n	26112 <__aeabi_ui2d+0x26>
   2614c:	0000041e 	.word	0x0000041e
   26150:	00000433 	.word	0x00000433
   26154:	00000413 	.word	0x00000413
   26158:	800fffff 	.word	0x800fffff

0002615c <__clzsi2>:
   2615c:	211c      	movs	r1, #28
   2615e:	2301      	movs	r3, #1
   26160:	041b      	lsls	r3, r3, #16
   26162:	4298      	cmp	r0, r3
   26164:	d301      	bcc.n	2616a <__clzsi2+0xe>
   26166:	0c00      	lsrs	r0, r0, #16
   26168:	3910      	subs	r1, #16
   2616a:	0a1b      	lsrs	r3, r3, #8
   2616c:	4298      	cmp	r0, r3
   2616e:	d301      	bcc.n	26174 <__clzsi2+0x18>
   26170:	0a00      	lsrs	r0, r0, #8
   26172:	3908      	subs	r1, #8
   26174:	091b      	lsrs	r3, r3, #4
   26176:	4298      	cmp	r0, r3
   26178:	d301      	bcc.n	2617e <__clzsi2+0x22>
   2617a:	0900      	lsrs	r0, r0, #4
   2617c:	3904      	subs	r1, #4
   2617e:	a202      	add	r2, pc, #8	; (adr r2, 26188 <__clzsi2+0x2c>)
   26180:	5c10      	ldrb	r0, [r2, r0]
   26182:	1840      	adds	r0, r0, r1
   26184:	4770      	bx	lr
   26186:	46c0      	nop			; (mov r8, r8)
   26188:	02020304 	.word	0x02020304
   2618c:	01010101 	.word	0x01010101
	...

00026198 <atoi>:
   26198:	b510      	push	{r4, lr}
   2619a:	220a      	movs	r2, #10
   2619c:	2100      	movs	r1, #0
   2619e:	f000 fb0d 	bl	267bc <strtol>
   261a2:	bd10      	pop	{r4, pc}

000261a4 <__libc_init_array>:
   261a4:	b570      	push	{r4, r5, r6, lr}
   261a6:	2600      	movs	r6, #0
   261a8:	4d0c      	ldr	r5, [pc, #48]	; (261dc <__libc_init_array+0x38>)
   261aa:	4c0d      	ldr	r4, [pc, #52]	; (261e0 <__libc_init_array+0x3c>)
   261ac:	1b64      	subs	r4, r4, r5
   261ae:	10a4      	asrs	r4, r4, #2
   261b0:	42a6      	cmp	r6, r4
   261b2:	d109      	bne.n	261c8 <__libc_init_array+0x24>
   261b4:	2600      	movs	r6, #0
   261b6:	f004 ff65 	bl	2b084 <_init>
   261ba:	4d0a      	ldr	r5, [pc, #40]	; (261e4 <__libc_init_array+0x40>)
   261bc:	4c0a      	ldr	r4, [pc, #40]	; (261e8 <__libc_init_array+0x44>)
   261be:	1b64      	subs	r4, r4, r5
   261c0:	10a4      	asrs	r4, r4, #2
   261c2:	42a6      	cmp	r6, r4
   261c4:	d105      	bne.n	261d2 <__libc_init_array+0x2e>
   261c6:	bd70      	pop	{r4, r5, r6, pc}
   261c8:	00b3      	lsls	r3, r6, #2
   261ca:	58eb      	ldr	r3, [r5, r3]
   261cc:	4798      	blx	r3
   261ce:	3601      	adds	r6, #1
   261d0:	e7ee      	b.n	261b0 <__libc_init_array+0xc>
   261d2:	00b3      	lsls	r3, r6, #2
   261d4:	58eb      	ldr	r3, [r5, r3]
   261d6:	4798      	blx	r3
   261d8:	3601      	adds	r6, #1
   261da:	e7f2      	b.n	261c2 <__libc_init_array+0x1e>
   261dc:	0002b090 	.word	0x0002b090
   261e0:	0002b090 	.word	0x0002b090
   261e4:	0002b090 	.word	0x0002b090
   261e8:	0002b094 	.word	0x0002b094

000261ec <malloc>:
   261ec:	b510      	push	{r4, lr}
   261ee:	4b03      	ldr	r3, [pc, #12]	; (261fc <malloc+0x10>)
   261f0:	0001      	movs	r1, r0
   261f2:	6818      	ldr	r0, [r3, #0]
   261f4:	f000 f87c 	bl	262f0 <_malloc_r>
   261f8:	bd10      	pop	{r4, pc}
   261fa:	46c0      	nop			; (mov r8, r8)
   261fc:	200000c8 	.word	0x200000c8

00026200 <free>:
   26200:	b510      	push	{r4, lr}
   26202:	4b03      	ldr	r3, [pc, #12]	; (26210 <free+0x10>)
   26204:	0001      	movs	r1, r0
   26206:	6818      	ldr	r0, [r3, #0]
   26208:	f000 f828 	bl	2625c <_free_r>
   2620c:	bd10      	pop	{r4, pc}
   2620e:	46c0      	nop			; (mov r8, r8)
   26210:	200000c8 	.word	0x200000c8

00026214 <memcpy>:
   26214:	2300      	movs	r3, #0
   26216:	b510      	push	{r4, lr}
   26218:	429a      	cmp	r2, r3
   2621a:	d100      	bne.n	2621e <memcpy+0xa>
   2621c:	bd10      	pop	{r4, pc}
   2621e:	5ccc      	ldrb	r4, [r1, r3]
   26220:	54c4      	strb	r4, [r0, r3]
   26222:	3301      	adds	r3, #1
   26224:	e7f8      	b.n	26218 <memcpy+0x4>

00026226 <memmove>:
   26226:	b510      	push	{r4, lr}
   26228:	4288      	cmp	r0, r1
   2622a:	d902      	bls.n	26232 <memmove+0xc>
   2622c:	188b      	adds	r3, r1, r2
   2622e:	4298      	cmp	r0, r3
   26230:	d308      	bcc.n	26244 <memmove+0x1e>
   26232:	2300      	movs	r3, #0
   26234:	429a      	cmp	r2, r3
   26236:	d007      	beq.n	26248 <memmove+0x22>
   26238:	5ccc      	ldrb	r4, [r1, r3]
   2623a:	54c4      	strb	r4, [r0, r3]
   2623c:	3301      	adds	r3, #1
   2623e:	e7f9      	b.n	26234 <memmove+0xe>
   26240:	5c8b      	ldrb	r3, [r1, r2]
   26242:	5483      	strb	r3, [r0, r2]
   26244:	3a01      	subs	r2, #1
   26246:	d2fb      	bcs.n	26240 <memmove+0x1a>
   26248:	bd10      	pop	{r4, pc}

0002624a <memset>:
   2624a:	0003      	movs	r3, r0
   2624c:	1882      	adds	r2, r0, r2
   2624e:	4293      	cmp	r3, r2
   26250:	d100      	bne.n	26254 <memset+0xa>
   26252:	4770      	bx	lr
   26254:	7019      	strb	r1, [r3, #0]
   26256:	3301      	adds	r3, #1
   26258:	e7f9      	b.n	2624e <memset+0x4>
	...

0002625c <_free_r>:
   2625c:	b570      	push	{r4, r5, r6, lr}
   2625e:	0005      	movs	r5, r0
   26260:	2900      	cmp	r1, #0
   26262:	d010      	beq.n	26286 <_free_r+0x2a>
   26264:	1f0c      	subs	r4, r1, #4
   26266:	6823      	ldr	r3, [r4, #0]
   26268:	2b00      	cmp	r3, #0
   2626a:	da00      	bge.n	2626e <_free_r+0x12>
   2626c:	18e4      	adds	r4, r4, r3
   2626e:	0028      	movs	r0, r5
   26270:	f000 fdd8 	bl	26e24 <__malloc_lock>
   26274:	4a1d      	ldr	r2, [pc, #116]	; (262ec <_free_r+0x90>)
   26276:	6813      	ldr	r3, [r2, #0]
   26278:	2b00      	cmp	r3, #0
   2627a:	d105      	bne.n	26288 <_free_r+0x2c>
   2627c:	6063      	str	r3, [r4, #4]
   2627e:	6014      	str	r4, [r2, #0]
   26280:	0028      	movs	r0, r5
   26282:	f000 fdd0 	bl	26e26 <__malloc_unlock>
   26286:	bd70      	pop	{r4, r5, r6, pc}
   26288:	42a3      	cmp	r3, r4
   2628a:	d909      	bls.n	262a0 <_free_r+0x44>
   2628c:	6821      	ldr	r1, [r4, #0]
   2628e:	1860      	adds	r0, r4, r1
   26290:	4283      	cmp	r3, r0
   26292:	d1f3      	bne.n	2627c <_free_r+0x20>
   26294:	6818      	ldr	r0, [r3, #0]
   26296:	685b      	ldr	r3, [r3, #4]
   26298:	1841      	adds	r1, r0, r1
   2629a:	6021      	str	r1, [r4, #0]
   2629c:	e7ee      	b.n	2627c <_free_r+0x20>
   2629e:	0013      	movs	r3, r2
   262a0:	685a      	ldr	r2, [r3, #4]
   262a2:	2a00      	cmp	r2, #0
   262a4:	d001      	beq.n	262aa <_free_r+0x4e>
   262a6:	42a2      	cmp	r2, r4
   262a8:	d9f9      	bls.n	2629e <_free_r+0x42>
   262aa:	6819      	ldr	r1, [r3, #0]
   262ac:	1858      	adds	r0, r3, r1
   262ae:	42a0      	cmp	r0, r4
   262b0:	d10b      	bne.n	262ca <_free_r+0x6e>
   262b2:	6820      	ldr	r0, [r4, #0]
   262b4:	1809      	adds	r1, r1, r0
   262b6:	1858      	adds	r0, r3, r1
   262b8:	6019      	str	r1, [r3, #0]
   262ba:	4282      	cmp	r2, r0
   262bc:	d1e0      	bne.n	26280 <_free_r+0x24>
   262be:	6810      	ldr	r0, [r2, #0]
   262c0:	6852      	ldr	r2, [r2, #4]
   262c2:	1841      	adds	r1, r0, r1
   262c4:	6019      	str	r1, [r3, #0]
   262c6:	605a      	str	r2, [r3, #4]
   262c8:	e7da      	b.n	26280 <_free_r+0x24>
   262ca:	42a0      	cmp	r0, r4
   262cc:	d902      	bls.n	262d4 <_free_r+0x78>
   262ce:	230c      	movs	r3, #12
   262d0:	602b      	str	r3, [r5, #0]
   262d2:	e7d5      	b.n	26280 <_free_r+0x24>
   262d4:	6821      	ldr	r1, [r4, #0]
   262d6:	1860      	adds	r0, r4, r1
   262d8:	4282      	cmp	r2, r0
   262da:	d103      	bne.n	262e4 <_free_r+0x88>
   262dc:	6810      	ldr	r0, [r2, #0]
   262de:	6852      	ldr	r2, [r2, #4]
   262e0:	1841      	adds	r1, r0, r1
   262e2:	6021      	str	r1, [r4, #0]
   262e4:	6062      	str	r2, [r4, #4]
   262e6:	605c      	str	r4, [r3, #4]
   262e8:	e7ca      	b.n	26280 <_free_r+0x24>
   262ea:	46c0      	nop			; (mov r8, r8)
   262ec:	200041d8 	.word	0x200041d8

000262f0 <_malloc_r>:
   262f0:	2303      	movs	r3, #3
   262f2:	b570      	push	{r4, r5, r6, lr}
   262f4:	1ccd      	adds	r5, r1, #3
   262f6:	439d      	bics	r5, r3
   262f8:	3508      	adds	r5, #8
   262fa:	0006      	movs	r6, r0
   262fc:	2d0c      	cmp	r5, #12
   262fe:	d21e      	bcs.n	2633e <_malloc_r+0x4e>
   26300:	250c      	movs	r5, #12
   26302:	42a9      	cmp	r1, r5
   26304:	d81d      	bhi.n	26342 <_malloc_r+0x52>
   26306:	0030      	movs	r0, r6
   26308:	f000 fd8c 	bl	26e24 <__malloc_lock>
   2630c:	4a25      	ldr	r2, [pc, #148]	; (263a4 <_malloc_r+0xb4>)
   2630e:	6814      	ldr	r4, [r2, #0]
   26310:	0021      	movs	r1, r4
   26312:	2900      	cmp	r1, #0
   26314:	d119      	bne.n	2634a <_malloc_r+0x5a>
   26316:	4c24      	ldr	r4, [pc, #144]	; (263a8 <_malloc_r+0xb8>)
   26318:	6823      	ldr	r3, [r4, #0]
   2631a:	2b00      	cmp	r3, #0
   2631c:	d103      	bne.n	26326 <_malloc_r+0x36>
   2631e:	0030      	movs	r0, r6
   26320:	f000 f8ae 	bl	26480 <_sbrk_r>
   26324:	6020      	str	r0, [r4, #0]
   26326:	0029      	movs	r1, r5
   26328:	0030      	movs	r0, r6
   2632a:	f000 f8a9 	bl	26480 <_sbrk_r>
   2632e:	1c43      	adds	r3, r0, #1
   26330:	d12c      	bne.n	2638c <_malloc_r+0x9c>
   26332:	230c      	movs	r3, #12
   26334:	0030      	movs	r0, r6
   26336:	6033      	str	r3, [r6, #0]
   26338:	f000 fd75 	bl	26e26 <__malloc_unlock>
   2633c:	e003      	b.n	26346 <_malloc_r+0x56>
   2633e:	2d00      	cmp	r5, #0
   26340:	dadf      	bge.n	26302 <_malloc_r+0x12>
   26342:	230c      	movs	r3, #12
   26344:	6033      	str	r3, [r6, #0]
   26346:	2000      	movs	r0, #0
   26348:	bd70      	pop	{r4, r5, r6, pc}
   2634a:	680b      	ldr	r3, [r1, #0]
   2634c:	1b5b      	subs	r3, r3, r5
   2634e:	d41a      	bmi.n	26386 <_malloc_r+0x96>
   26350:	2b0b      	cmp	r3, #11
   26352:	d903      	bls.n	2635c <_malloc_r+0x6c>
   26354:	600b      	str	r3, [r1, #0]
   26356:	18cc      	adds	r4, r1, r3
   26358:	6025      	str	r5, [r4, #0]
   2635a:	e003      	b.n	26364 <_malloc_r+0x74>
   2635c:	428c      	cmp	r4, r1
   2635e:	d10e      	bne.n	2637e <_malloc_r+0x8e>
   26360:	6863      	ldr	r3, [r4, #4]
   26362:	6013      	str	r3, [r2, #0]
   26364:	0030      	movs	r0, r6
   26366:	f000 fd5e 	bl	26e26 <__malloc_unlock>
   2636a:	0020      	movs	r0, r4
   2636c:	2207      	movs	r2, #7
   2636e:	300b      	adds	r0, #11
   26370:	1d23      	adds	r3, r4, #4
   26372:	4390      	bics	r0, r2
   26374:	1ac3      	subs	r3, r0, r3
   26376:	d0e7      	beq.n	26348 <_malloc_r+0x58>
   26378:	425a      	negs	r2, r3
   2637a:	50e2      	str	r2, [r4, r3]
   2637c:	e7e4      	b.n	26348 <_malloc_r+0x58>
   2637e:	684b      	ldr	r3, [r1, #4]
   26380:	6063      	str	r3, [r4, #4]
   26382:	000c      	movs	r4, r1
   26384:	e7ee      	b.n	26364 <_malloc_r+0x74>
   26386:	000c      	movs	r4, r1
   26388:	6849      	ldr	r1, [r1, #4]
   2638a:	e7c2      	b.n	26312 <_malloc_r+0x22>
   2638c:	2303      	movs	r3, #3
   2638e:	1cc4      	adds	r4, r0, #3
   26390:	439c      	bics	r4, r3
   26392:	42a0      	cmp	r0, r4
   26394:	d0e0      	beq.n	26358 <_malloc_r+0x68>
   26396:	1a21      	subs	r1, r4, r0
   26398:	0030      	movs	r0, r6
   2639a:	f000 f871 	bl	26480 <_sbrk_r>
   2639e:	1c43      	adds	r3, r0, #1
   263a0:	d1da      	bne.n	26358 <_malloc_r+0x68>
   263a2:	e7c6      	b.n	26332 <_malloc_r+0x42>
   263a4:	200041d8 	.word	0x200041d8
   263a8:	200041dc 	.word	0x200041dc

000263ac <_puts_r>:
   263ac:	b570      	push	{r4, r5, r6, lr}
   263ae:	0005      	movs	r5, r0
   263b0:	000e      	movs	r6, r1
   263b2:	2800      	cmp	r0, #0
   263b4:	d004      	beq.n	263c0 <_puts_r+0x14>
   263b6:	6983      	ldr	r3, [r0, #24]
   263b8:	2b00      	cmp	r3, #0
   263ba:	d101      	bne.n	263c0 <_puts_r+0x14>
   263bc:	f000 fc0e 	bl	26bdc <__sinit>
   263c0:	69ab      	ldr	r3, [r5, #24]
   263c2:	68ac      	ldr	r4, [r5, #8]
   263c4:	2b00      	cmp	r3, #0
   263c6:	d102      	bne.n	263ce <_puts_r+0x22>
   263c8:	0028      	movs	r0, r5
   263ca:	f000 fc07 	bl	26bdc <__sinit>
   263ce:	4b24      	ldr	r3, [pc, #144]	; (26460 <_puts_r+0xb4>)
   263d0:	429c      	cmp	r4, r3
   263d2:	d10f      	bne.n	263f4 <_puts_r+0x48>
   263d4:	686c      	ldr	r4, [r5, #4]
   263d6:	89a3      	ldrh	r3, [r4, #12]
   263d8:	071b      	lsls	r3, r3, #28
   263da:	d502      	bpl.n	263e2 <_puts_r+0x36>
   263dc:	6923      	ldr	r3, [r4, #16]
   263de:	2b00      	cmp	r3, #0
   263e0:	d120      	bne.n	26424 <_puts_r+0x78>
   263e2:	0021      	movs	r1, r4
   263e4:	0028      	movs	r0, r5
   263e6:	f000 fa8b 	bl	26900 <__swsetup_r>
   263ea:	2800      	cmp	r0, #0
   263ec:	d01a      	beq.n	26424 <_puts_r+0x78>
   263ee:	2001      	movs	r0, #1
   263f0:	4240      	negs	r0, r0
   263f2:	bd70      	pop	{r4, r5, r6, pc}
   263f4:	4b1b      	ldr	r3, [pc, #108]	; (26464 <_puts_r+0xb8>)
   263f6:	429c      	cmp	r4, r3
   263f8:	d101      	bne.n	263fe <_puts_r+0x52>
   263fa:	68ac      	ldr	r4, [r5, #8]
   263fc:	e7eb      	b.n	263d6 <_puts_r+0x2a>
   263fe:	4b1a      	ldr	r3, [pc, #104]	; (26468 <_puts_r+0xbc>)
   26400:	429c      	cmp	r4, r3
   26402:	d1e8      	bne.n	263d6 <_puts_r+0x2a>
   26404:	68ec      	ldr	r4, [r5, #12]
   26406:	e7e6      	b.n	263d6 <_puts_r+0x2a>
   26408:	3b01      	subs	r3, #1
   2640a:	3601      	adds	r6, #1
   2640c:	60a3      	str	r3, [r4, #8]
   2640e:	2b00      	cmp	r3, #0
   26410:	da04      	bge.n	2641c <_puts_r+0x70>
   26412:	69a2      	ldr	r2, [r4, #24]
   26414:	4293      	cmp	r3, r2
   26416:	db16      	blt.n	26446 <_puts_r+0x9a>
   26418:	290a      	cmp	r1, #10
   2641a:	d014      	beq.n	26446 <_puts_r+0x9a>
   2641c:	6823      	ldr	r3, [r4, #0]
   2641e:	1c5a      	adds	r2, r3, #1
   26420:	6022      	str	r2, [r4, #0]
   26422:	7019      	strb	r1, [r3, #0]
   26424:	7831      	ldrb	r1, [r6, #0]
   26426:	68a3      	ldr	r3, [r4, #8]
   26428:	2900      	cmp	r1, #0
   2642a:	d1ed      	bne.n	26408 <_puts_r+0x5c>
   2642c:	3b01      	subs	r3, #1
   2642e:	60a3      	str	r3, [r4, #8]
   26430:	2b00      	cmp	r3, #0
   26432:	da0f      	bge.n	26454 <_puts_r+0xa8>
   26434:	0022      	movs	r2, r4
   26436:	310a      	adds	r1, #10
   26438:	0028      	movs	r0, r5
   2643a:	f000 fa0b 	bl	26854 <__swbuf_r>
   2643e:	1c43      	adds	r3, r0, #1
   26440:	d0d5      	beq.n	263ee <_puts_r+0x42>
   26442:	200a      	movs	r0, #10
   26444:	e7d5      	b.n	263f2 <_puts_r+0x46>
   26446:	0022      	movs	r2, r4
   26448:	0028      	movs	r0, r5
   2644a:	f000 fa03 	bl	26854 <__swbuf_r>
   2644e:	1c43      	adds	r3, r0, #1
   26450:	d1e8      	bne.n	26424 <_puts_r+0x78>
   26452:	e7cc      	b.n	263ee <_puts_r+0x42>
   26454:	200a      	movs	r0, #10
   26456:	6823      	ldr	r3, [r4, #0]
   26458:	1c5a      	adds	r2, r3, #1
   2645a:	6022      	str	r2, [r4, #0]
   2645c:	7018      	strb	r0, [r3, #0]
   2645e:	e7c8      	b.n	263f2 <_puts_r+0x46>
   26460:	0002af04 	.word	0x0002af04
   26464:	0002af24 	.word	0x0002af24
   26468:	0002aee4 	.word	0x0002aee4

0002646c <puts>:
   2646c:	b510      	push	{r4, lr}
   2646e:	4b03      	ldr	r3, [pc, #12]	; (2647c <puts+0x10>)
   26470:	0001      	movs	r1, r0
   26472:	6818      	ldr	r0, [r3, #0]
   26474:	f7ff ff9a 	bl	263ac <_puts_r>
   26478:	bd10      	pop	{r4, pc}
   2647a:	46c0      	nop			; (mov r8, r8)
   2647c:	200000c8 	.word	0x200000c8

00026480 <_sbrk_r>:
   26480:	2300      	movs	r3, #0
   26482:	b570      	push	{r4, r5, r6, lr}
   26484:	4c06      	ldr	r4, [pc, #24]	; (264a0 <_sbrk_r+0x20>)
   26486:	0005      	movs	r5, r0
   26488:	0008      	movs	r0, r1
   2648a:	6023      	str	r3, [r4, #0]
   2648c:	f7f9 fafa 	bl	1fa84 <_sbrk>
   26490:	1c43      	adds	r3, r0, #1
   26492:	d103      	bne.n	2649c <_sbrk_r+0x1c>
   26494:	6823      	ldr	r3, [r4, #0]
   26496:	2b00      	cmp	r3, #0
   26498:	d000      	beq.n	2649c <_sbrk_r+0x1c>
   2649a:	602b      	str	r3, [r5, #0]
   2649c:	bd70      	pop	{r4, r5, r6, pc}
   2649e:	46c0      	nop			; (mov r8, r8)
   264a0:	200055dc 	.word	0x200055dc

000264a4 <sniprintf>:
   264a4:	b40c      	push	{r2, r3}
   264a6:	b530      	push	{r4, r5, lr}
   264a8:	4b16      	ldr	r3, [pc, #88]	; (26504 <sniprintf+0x60>)
   264aa:	b09d      	sub	sp, #116	; 0x74
   264ac:	1e0c      	subs	r4, r1, #0
   264ae:	681d      	ldr	r5, [r3, #0]
   264b0:	da08      	bge.n	264c4 <sniprintf+0x20>
   264b2:	238b      	movs	r3, #139	; 0x8b
   264b4:	2001      	movs	r0, #1
   264b6:	602b      	str	r3, [r5, #0]
   264b8:	4240      	negs	r0, r0
   264ba:	b01d      	add	sp, #116	; 0x74
   264bc:	bc30      	pop	{r4, r5}
   264be:	bc08      	pop	{r3}
   264c0:	b002      	add	sp, #8
   264c2:	4718      	bx	r3
   264c4:	2382      	movs	r3, #130	; 0x82
   264c6:	a902      	add	r1, sp, #8
   264c8:	009b      	lsls	r3, r3, #2
   264ca:	818b      	strh	r3, [r1, #12]
   264cc:	2300      	movs	r3, #0
   264ce:	9002      	str	r0, [sp, #8]
   264d0:	6108      	str	r0, [r1, #16]
   264d2:	429c      	cmp	r4, r3
   264d4:	d000      	beq.n	264d8 <sniprintf+0x34>
   264d6:	1e63      	subs	r3, r4, #1
   264d8:	608b      	str	r3, [r1, #8]
   264da:	614b      	str	r3, [r1, #20]
   264dc:	2301      	movs	r3, #1
   264de:	425b      	negs	r3, r3
   264e0:	81cb      	strh	r3, [r1, #14]
   264e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   264e4:	ab21      	add	r3, sp, #132	; 0x84
   264e6:	0028      	movs	r0, r5
   264e8:	9301      	str	r3, [sp, #4]
   264ea:	f000 fcff 	bl	26eec <_svfiprintf_r>
   264ee:	1c43      	adds	r3, r0, #1
   264f0:	da01      	bge.n	264f6 <sniprintf+0x52>
   264f2:	238b      	movs	r3, #139	; 0x8b
   264f4:	602b      	str	r3, [r5, #0]
   264f6:	2c00      	cmp	r4, #0
   264f8:	d0df      	beq.n	264ba <sniprintf+0x16>
   264fa:	2300      	movs	r3, #0
   264fc:	9a02      	ldr	r2, [sp, #8]
   264fe:	7013      	strb	r3, [r2, #0]
   26500:	e7db      	b.n	264ba <sniprintf+0x16>
   26502:	46c0      	nop			; (mov r8, r8)
   26504:	200000c8 	.word	0x200000c8

00026508 <siprintf>:
   26508:	b40e      	push	{r1, r2, r3}
   2650a:	b510      	push	{r4, lr}
   2650c:	b09d      	sub	sp, #116	; 0x74
   2650e:	a902      	add	r1, sp, #8
   26510:	9002      	str	r0, [sp, #8]
   26512:	6108      	str	r0, [r1, #16]
   26514:	480b      	ldr	r0, [pc, #44]	; (26544 <siprintf+0x3c>)
   26516:	2482      	movs	r4, #130	; 0x82
   26518:	6088      	str	r0, [r1, #8]
   2651a:	6148      	str	r0, [r1, #20]
   2651c:	2001      	movs	r0, #1
   2651e:	4240      	negs	r0, r0
   26520:	ab1f      	add	r3, sp, #124	; 0x7c
   26522:	81c8      	strh	r0, [r1, #14]
   26524:	4808      	ldr	r0, [pc, #32]	; (26548 <siprintf+0x40>)
   26526:	cb04      	ldmia	r3!, {r2}
   26528:	00a4      	lsls	r4, r4, #2
   2652a:	6800      	ldr	r0, [r0, #0]
   2652c:	9301      	str	r3, [sp, #4]
   2652e:	818c      	strh	r4, [r1, #12]
   26530:	f000 fcdc 	bl	26eec <_svfiprintf_r>
   26534:	2300      	movs	r3, #0
   26536:	9a02      	ldr	r2, [sp, #8]
   26538:	7013      	strb	r3, [r2, #0]
   2653a:	b01d      	add	sp, #116	; 0x74
   2653c:	bc10      	pop	{r4}
   2653e:	bc08      	pop	{r3}
   26540:	b003      	add	sp, #12
   26542:	4718      	bx	r3
   26544:	7fffffff 	.word	0x7fffffff
   26548:	200000c8 	.word	0x200000c8

0002654c <strcasecmp>:
   2654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2654e:	0007      	movs	r7, r0
   26550:	000e      	movs	r6, r1
   26552:	783c      	ldrb	r4, [r7, #0]
   26554:	f000 fbda 	bl	26d0c <__locale_ctype_ptr>
   26558:	2203      	movs	r2, #3
   2655a:	1900      	adds	r0, r0, r4
   2655c:	7843      	ldrb	r3, [r0, #1]
   2655e:	4013      	ands	r3, r2
   26560:	2b01      	cmp	r3, #1
   26562:	d100      	bne.n	26566 <strcasecmp+0x1a>
   26564:	3420      	adds	r4, #32
   26566:	7835      	ldrb	r5, [r6, #0]
   26568:	f000 fbd0 	bl	26d0c <__locale_ctype_ptr>
   2656c:	2203      	movs	r2, #3
   2656e:	1940      	adds	r0, r0, r5
   26570:	7843      	ldrb	r3, [r0, #1]
   26572:	4013      	ands	r3, r2
   26574:	2b01      	cmp	r3, #1
   26576:	d100      	bne.n	2657a <strcasecmp+0x2e>
   26578:	3520      	adds	r5, #32
   2657a:	1b60      	subs	r0, r4, r5
   2657c:	d103      	bne.n	26586 <strcasecmp+0x3a>
   2657e:	3701      	adds	r7, #1
   26580:	3601      	adds	r6, #1
   26582:	2d00      	cmp	r5, #0
   26584:	d1e5      	bne.n	26552 <strcasecmp+0x6>
   26586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026588 <strcat>:
   26588:	0002      	movs	r2, r0
   2658a:	b510      	push	{r4, lr}
   2658c:	7813      	ldrb	r3, [r2, #0]
   2658e:	2b00      	cmp	r3, #0
   26590:	d105      	bne.n	2659e <strcat+0x16>
   26592:	5ccc      	ldrb	r4, [r1, r3]
   26594:	54d4      	strb	r4, [r2, r3]
   26596:	3301      	adds	r3, #1
   26598:	2c00      	cmp	r4, #0
   2659a:	d1fa      	bne.n	26592 <strcat+0xa>
   2659c:	bd10      	pop	{r4, pc}
   2659e:	3201      	adds	r2, #1
   265a0:	e7f4      	b.n	2658c <strcat+0x4>

000265a2 <strcmp>:
   265a2:	7802      	ldrb	r2, [r0, #0]
   265a4:	780b      	ldrb	r3, [r1, #0]
   265a6:	2a00      	cmp	r2, #0
   265a8:	d003      	beq.n	265b2 <strcmp+0x10>
   265aa:	3001      	adds	r0, #1
   265ac:	3101      	adds	r1, #1
   265ae:	429a      	cmp	r2, r3
   265b0:	d0f7      	beq.n	265a2 <strcmp>
   265b2:	1ad0      	subs	r0, r2, r3
   265b4:	4770      	bx	lr

000265b6 <strcpy>:
   265b6:	1c03      	adds	r3, r0, #0
   265b8:	780a      	ldrb	r2, [r1, #0]
   265ba:	3101      	adds	r1, #1
   265bc:	701a      	strb	r2, [r3, #0]
   265be:	3301      	adds	r3, #1
   265c0:	2a00      	cmp	r2, #0
   265c2:	d1f9      	bne.n	265b8 <strcpy+0x2>
   265c4:	4770      	bx	lr
	...

000265c8 <strdup>:
   265c8:	b510      	push	{r4, lr}
   265ca:	4b03      	ldr	r3, [pc, #12]	; (265d8 <strdup+0x10>)
   265cc:	0001      	movs	r1, r0
   265ce:	6818      	ldr	r0, [r3, #0]
   265d0:	f000 f804 	bl	265dc <_strdup_r>
   265d4:	bd10      	pop	{r4, pc}
   265d6:	46c0      	nop			; (mov r8, r8)
   265d8:	200000c8 	.word	0x200000c8

000265dc <_strdup_r>:
   265dc:	b570      	push	{r4, r5, r6, lr}
   265de:	0005      	movs	r5, r0
   265e0:	0008      	movs	r0, r1
   265e2:	000e      	movs	r6, r1
   265e4:	f000 f80d 	bl	26602 <strlen>
   265e8:	1c44      	adds	r4, r0, #1
   265ea:	0021      	movs	r1, r4
   265ec:	0028      	movs	r0, r5
   265ee:	f7ff fe7f 	bl	262f0 <_malloc_r>
   265f2:	1e05      	subs	r5, r0, #0
   265f4:	d003      	beq.n	265fe <_strdup_r+0x22>
   265f6:	0022      	movs	r2, r4
   265f8:	0031      	movs	r1, r6
   265fa:	f7ff fe0b 	bl	26214 <memcpy>
   265fe:	0028      	movs	r0, r5
   26600:	bd70      	pop	{r4, r5, r6, pc}

00026602 <strlen>:
   26602:	2300      	movs	r3, #0
   26604:	5cc2      	ldrb	r2, [r0, r3]
   26606:	3301      	adds	r3, #1
   26608:	2a00      	cmp	r2, #0
   2660a:	d1fb      	bne.n	26604 <strlen+0x2>
   2660c:	1e58      	subs	r0, r3, #1
   2660e:	4770      	bx	lr

00026610 <strncmp>:
   26610:	2300      	movs	r3, #0
   26612:	b530      	push	{r4, r5, lr}
   26614:	429a      	cmp	r2, r3
   26616:	d00a      	beq.n	2662e <strncmp+0x1e>
   26618:	3a01      	subs	r2, #1
   2661a:	5cc4      	ldrb	r4, [r0, r3]
   2661c:	5ccd      	ldrb	r5, [r1, r3]
   2661e:	42ac      	cmp	r4, r5
   26620:	d104      	bne.n	2662c <strncmp+0x1c>
   26622:	429a      	cmp	r2, r3
   26624:	d002      	beq.n	2662c <strncmp+0x1c>
   26626:	3301      	adds	r3, #1
   26628:	2c00      	cmp	r4, #0
   2662a:	d1f6      	bne.n	2661a <strncmp+0xa>
   2662c:	1b63      	subs	r3, r4, r5
   2662e:	0018      	movs	r0, r3
   26630:	bd30      	pop	{r4, r5, pc}

00026632 <strncpy>:
   26632:	b570      	push	{r4, r5, r6, lr}
   26634:	0004      	movs	r4, r0
   26636:	2a00      	cmp	r2, #0
   26638:	d100      	bne.n	2663c <strncpy+0xa>
   2663a:	bd70      	pop	{r4, r5, r6, pc}
   2663c:	780d      	ldrb	r5, [r1, #0]
   2663e:	1e56      	subs	r6, r2, #1
   26640:	1c63      	adds	r3, r4, #1
   26642:	7025      	strb	r5, [r4, #0]
   26644:	3101      	adds	r1, #1
   26646:	2d00      	cmp	r5, #0
   26648:	d105      	bne.n	26656 <strncpy+0x24>
   2664a:	18a4      	adds	r4, r4, r2
   2664c:	429c      	cmp	r4, r3
   2664e:	d0f4      	beq.n	2663a <strncpy+0x8>
   26650:	701d      	strb	r5, [r3, #0]
   26652:	3301      	adds	r3, #1
   26654:	e7fa      	b.n	2664c <strncpy+0x1a>
   26656:	001c      	movs	r4, r3
   26658:	0032      	movs	r2, r6
   2665a:	e7ec      	b.n	26636 <strncpy+0x4>

0002665c <strrchr>:
   2665c:	b570      	push	{r4, r5, r6, lr}
   2665e:	000d      	movs	r5, r1
   26660:	2400      	movs	r4, #0
   26662:	2900      	cmp	r1, #0
   26664:	d105      	bne.n	26672 <strrchr+0x16>
   26666:	f000 ff19 	bl	2749c <strchr>
   2666a:	0004      	movs	r4, r0
   2666c:	e006      	b.n	2667c <strrchr+0x20>
   2666e:	001c      	movs	r4, r3
   26670:	1c58      	adds	r0, r3, #1
   26672:	0029      	movs	r1, r5
   26674:	f000 ff12 	bl	2749c <strchr>
   26678:	1e03      	subs	r3, r0, #0
   2667a:	d1f8      	bne.n	2666e <strrchr+0x12>
   2667c:	0020      	movs	r0, r4
   2667e:	bd70      	pop	{r4, r5, r6, pc}

00026680 <strstr>:
   26680:	b510      	push	{r4, lr}
   26682:	0002      	movs	r2, r0
   26684:	7800      	ldrb	r0, [r0, #0]
   26686:	2800      	cmp	r0, #0
   26688:	d104      	bne.n	26694 <strstr+0x14>
   2668a:	7809      	ldrb	r1, [r1, #0]
   2668c:	2900      	cmp	r1, #0
   2668e:	d00d      	beq.n	266ac <strstr+0x2c>
   26690:	bd10      	pop	{r4, pc}
   26692:	3201      	adds	r2, #1
   26694:	7810      	ldrb	r0, [r2, #0]
   26696:	2800      	cmp	r0, #0
   26698:	d0fa      	beq.n	26690 <strstr+0x10>
   2669a:	2300      	movs	r3, #0
   2669c:	5cc8      	ldrb	r0, [r1, r3]
   2669e:	2800      	cmp	r0, #0
   266a0:	d004      	beq.n	266ac <strstr+0x2c>
   266a2:	5cd4      	ldrb	r4, [r2, r3]
   266a4:	4284      	cmp	r4, r0
   266a6:	d1f4      	bne.n	26692 <strstr+0x12>
   266a8:	3301      	adds	r3, #1
   266aa:	e7f7      	b.n	2669c <strstr+0x1c>
   266ac:	0010      	movs	r0, r2
   266ae:	e7ef      	b.n	26690 <strstr+0x10>

000266b0 <_strtol_l.isra.0>:
   266b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   266b2:	001f      	movs	r7, r3
   266b4:	000e      	movs	r6, r1
   266b6:	b087      	sub	sp, #28
   266b8:	9005      	str	r0, [sp, #20]
   266ba:	9103      	str	r1, [sp, #12]
   266bc:	9202      	str	r2, [sp, #8]
   266be:	980c      	ldr	r0, [sp, #48]	; 0x30
   266c0:	7834      	ldrb	r4, [r6, #0]
   266c2:	f000 fb20 	bl	26d06 <__locale_ctype_ptr_l>
   266c6:	2208      	movs	r2, #8
   266c8:	1900      	adds	r0, r0, r4
   266ca:	7843      	ldrb	r3, [r0, #1]
   266cc:	1c75      	adds	r5, r6, #1
   266ce:	4013      	ands	r3, r2
   266d0:	d10c      	bne.n	266ec <_strtol_l.isra.0+0x3c>
   266d2:	2c2d      	cmp	r4, #45	; 0x2d
   266d4:	d10c      	bne.n	266f0 <_strtol_l.isra.0+0x40>
   266d6:	3301      	adds	r3, #1
   266d8:	782c      	ldrb	r4, [r5, #0]
   266da:	9301      	str	r3, [sp, #4]
   266dc:	1cb5      	adds	r5, r6, #2
   266de:	2f00      	cmp	r7, #0
   266e0:	d00c      	beq.n	266fc <_strtol_l.isra.0+0x4c>
   266e2:	2f10      	cmp	r7, #16
   266e4:	d114      	bne.n	26710 <_strtol_l.isra.0+0x60>
   266e6:	2c30      	cmp	r4, #48	; 0x30
   266e8:	d00a      	beq.n	26700 <_strtol_l.isra.0+0x50>
   266ea:	e011      	b.n	26710 <_strtol_l.isra.0+0x60>
   266ec:	002e      	movs	r6, r5
   266ee:	e7e6      	b.n	266be <_strtol_l.isra.0+0xe>
   266f0:	9301      	str	r3, [sp, #4]
   266f2:	2c2b      	cmp	r4, #43	; 0x2b
   266f4:	d1f3      	bne.n	266de <_strtol_l.isra.0+0x2e>
   266f6:	782c      	ldrb	r4, [r5, #0]
   266f8:	1cb5      	adds	r5, r6, #2
   266fa:	e7f0      	b.n	266de <_strtol_l.isra.0+0x2e>
   266fc:	2c30      	cmp	r4, #48	; 0x30
   266fe:	d12f      	bne.n	26760 <_strtol_l.isra.0+0xb0>
   26700:	2220      	movs	r2, #32
   26702:	782b      	ldrb	r3, [r5, #0]
   26704:	4393      	bics	r3, r2
   26706:	2b58      	cmp	r3, #88	; 0x58
   26708:	d151      	bne.n	267ae <_strtol_l.isra.0+0xfe>
   2670a:	2710      	movs	r7, #16
   2670c:	786c      	ldrb	r4, [r5, #1]
   2670e:	3502      	adds	r5, #2
   26710:	9b01      	ldr	r3, [sp, #4]
   26712:	4a29      	ldr	r2, [pc, #164]	; (267b8 <_strtol_l.isra.0+0x108>)
   26714:	0039      	movs	r1, r7
   26716:	189e      	adds	r6, r3, r2
   26718:	0030      	movs	r0, r6
   2671a:	f7fd fce7 	bl	240ec <__aeabi_uidivmod>
   2671e:	0030      	movs	r0, r6
   26720:	9104      	str	r1, [sp, #16]
   26722:	0039      	movs	r1, r7
   26724:	f7fd fc5c 	bl	23fe0 <__udivsi3>
   26728:	2101      	movs	r1, #1
   2672a:	2300      	movs	r3, #0
   2672c:	4249      	negs	r1, r1
   2672e:	0002      	movs	r2, r0
   26730:	468c      	mov	ip, r1
   26732:	0018      	movs	r0, r3
   26734:	0021      	movs	r1, r4
   26736:	3930      	subs	r1, #48	; 0x30
   26738:	2909      	cmp	r1, #9
   2673a:	d813      	bhi.n	26764 <_strtol_l.isra.0+0xb4>
   2673c:	000c      	movs	r4, r1
   2673e:	42a7      	cmp	r7, r4
   26740:	dd1c      	ble.n	2677c <_strtol_l.isra.0+0xcc>
   26742:	1c59      	adds	r1, r3, #1
   26744:	d009      	beq.n	2675a <_strtol_l.isra.0+0xaa>
   26746:	4663      	mov	r3, ip
   26748:	4282      	cmp	r2, r0
   2674a:	d306      	bcc.n	2675a <_strtol_l.isra.0+0xaa>
   2674c:	d102      	bne.n	26754 <_strtol_l.isra.0+0xa4>
   2674e:	9904      	ldr	r1, [sp, #16]
   26750:	42a1      	cmp	r1, r4
   26752:	db02      	blt.n	2675a <_strtol_l.isra.0+0xaa>
   26754:	2301      	movs	r3, #1
   26756:	4378      	muls	r0, r7
   26758:	1820      	adds	r0, r4, r0
   2675a:	782c      	ldrb	r4, [r5, #0]
   2675c:	3501      	adds	r5, #1
   2675e:	e7e9      	b.n	26734 <_strtol_l.isra.0+0x84>
   26760:	270a      	movs	r7, #10
   26762:	e7d5      	b.n	26710 <_strtol_l.isra.0+0x60>
   26764:	0021      	movs	r1, r4
   26766:	3941      	subs	r1, #65	; 0x41
   26768:	2919      	cmp	r1, #25
   2676a:	d801      	bhi.n	26770 <_strtol_l.isra.0+0xc0>
   2676c:	3c37      	subs	r4, #55	; 0x37
   2676e:	e7e6      	b.n	2673e <_strtol_l.isra.0+0x8e>
   26770:	0021      	movs	r1, r4
   26772:	3961      	subs	r1, #97	; 0x61
   26774:	2919      	cmp	r1, #25
   26776:	d801      	bhi.n	2677c <_strtol_l.isra.0+0xcc>
   26778:	3c57      	subs	r4, #87	; 0x57
   2677a:	e7e0      	b.n	2673e <_strtol_l.isra.0+0x8e>
   2677c:	1c5a      	adds	r2, r3, #1
   2677e:	d108      	bne.n	26792 <_strtol_l.isra.0+0xe2>
   26780:	9a05      	ldr	r2, [sp, #20]
   26782:	3323      	adds	r3, #35	; 0x23
   26784:	6013      	str	r3, [r2, #0]
   26786:	9b02      	ldr	r3, [sp, #8]
   26788:	0030      	movs	r0, r6
   2678a:	2b00      	cmp	r3, #0
   2678c:	d10b      	bne.n	267a6 <_strtol_l.isra.0+0xf6>
   2678e:	b007      	add	sp, #28
   26790:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26792:	9a01      	ldr	r2, [sp, #4]
   26794:	2a00      	cmp	r2, #0
   26796:	d000      	beq.n	2679a <_strtol_l.isra.0+0xea>
   26798:	4240      	negs	r0, r0
   2679a:	9a02      	ldr	r2, [sp, #8]
   2679c:	2a00      	cmp	r2, #0
   2679e:	d0f6      	beq.n	2678e <_strtol_l.isra.0+0xde>
   267a0:	9a03      	ldr	r2, [sp, #12]
   267a2:	2b00      	cmp	r3, #0
   267a4:	d000      	beq.n	267a8 <_strtol_l.isra.0+0xf8>
   267a6:	1e6a      	subs	r2, r5, #1
   267a8:	9b02      	ldr	r3, [sp, #8]
   267aa:	601a      	str	r2, [r3, #0]
   267ac:	e7ef      	b.n	2678e <_strtol_l.isra.0+0xde>
   267ae:	2430      	movs	r4, #48	; 0x30
   267b0:	2f00      	cmp	r7, #0
   267b2:	d1ad      	bne.n	26710 <_strtol_l.isra.0+0x60>
   267b4:	3708      	adds	r7, #8
   267b6:	e7ab      	b.n	26710 <_strtol_l.isra.0+0x60>
   267b8:	7fffffff 	.word	0x7fffffff

000267bc <strtol>:
   267bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   267be:	0013      	movs	r3, r2
   267c0:	4a06      	ldr	r2, [pc, #24]	; (267dc <strtol+0x20>)
   267c2:	0005      	movs	r5, r0
   267c4:	6810      	ldr	r0, [r2, #0]
   267c6:	6a04      	ldr	r4, [r0, #32]
   267c8:	2c00      	cmp	r4, #0
   267ca:	d100      	bne.n	267ce <strtol+0x12>
   267cc:	4c04      	ldr	r4, [pc, #16]	; (267e0 <strtol+0x24>)
   267ce:	000a      	movs	r2, r1
   267d0:	9400      	str	r4, [sp, #0]
   267d2:	0029      	movs	r1, r5
   267d4:	f7ff ff6c 	bl	266b0 <_strtol_l.isra.0>
   267d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   267da:	46c0      	nop			; (mov r8, r8)
   267dc:	200000c8 	.word	0x200000c8
   267e0:	2000012c 	.word	0x2000012c

000267e4 <_vsniprintf_r>:
   267e4:	b530      	push	{r4, r5, lr}
   267e6:	0014      	movs	r4, r2
   267e8:	b09b      	sub	sp, #108	; 0x6c
   267ea:	0005      	movs	r5, r0
   267ec:	001a      	movs	r2, r3
   267ee:	2c00      	cmp	r4, #0
   267f0:	da05      	bge.n	267fe <_vsniprintf_r+0x1a>
   267f2:	238b      	movs	r3, #139	; 0x8b
   267f4:	6003      	str	r3, [r0, #0]
   267f6:	2001      	movs	r0, #1
   267f8:	4240      	negs	r0, r0
   267fa:	b01b      	add	sp, #108	; 0x6c
   267fc:	bd30      	pop	{r4, r5, pc}
   267fe:	2382      	movs	r3, #130	; 0x82
   26800:	4668      	mov	r0, sp
   26802:	009b      	lsls	r3, r3, #2
   26804:	8183      	strh	r3, [r0, #12]
   26806:	2300      	movs	r3, #0
   26808:	9100      	str	r1, [sp, #0]
   2680a:	9104      	str	r1, [sp, #16]
   2680c:	429c      	cmp	r4, r3
   2680e:	d000      	beq.n	26812 <_vsniprintf_r+0x2e>
   26810:	1e63      	subs	r3, r4, #1
   26812:	9302      	str	r3, [sp, #8]
   26814:	9305      	str	r3, [sp, #20]
   26816:	2301      	movs	r3, #1
   26818:	4669      	mov	r1, sp
   2681a:	425b      	negs	r3, r3
   2681c:	81cb      	strh	r3, [r1, #14]
   2681e:	0028      	movs	r0, r5
   26820:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   26822:	f000 fb63 	bl	26eec <_svfiprintf_r>
   26826:	1c43      	adds	r3, r0, #1
   26828:	da01      	bge.n	2682e <_vsniprintf_r+0x4a>
   2682a:	238b      	movs	r3, #139	; 0x8b
   2682c:	602b      	str	r3, [r5, #0]
   2682e:	2c00      	cmp	r4, #0
   26830:	d0e3      	beq.n	267fa <_vsniprintf_r+0x16>
   26832:	2300      	movs	r3, #0
   26834:	9a00      	ldr	r2, [sp, #0]
   26836:	7013      	strb	r3, [r2, #0]
   26838:	e7df      	b.n	267fa <_vsniprintf_r+0x16>
	...

0002683c <vsniprintf>:
   2683c:	b507      	push	{r0, r1, r2, lr}
   2683e:	9300      	str	r3, [sp, #0]
   26840:	0013      	movs	r3, r2
   26842:	000a      	movs	r2, r1
   26844:	0001      	movs	r1, r0
   26846:	4802      	ldr	r0, [pc, #8]	; (26850 <vsniprintf+0x14>)
   26848:	6800      	ldr	r0, [r0, #0]
   2684a:	f7ff ffcb 	bl	267e4 <_vsniprintf_r>
   2684e:	bd0e      	pop	{r1, r2, r3, pc}
   26850:	200000c8 	.word	0x200000c8

00026854 <__swbuf_r>:
   26854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26856:	0005      	movs	r5, r0
   26858:	000e      	movs	r6, r1
   2685a:	0014      	movs	r4, r2
   2685c:	2800      	cmp	r0, #0
   2685e:	d004      	beq.n	2686a <__swbuf_r+0x16>
   26860:	6983      	ldr	r3, [r0, #24]
   26862:	2b00      	cmp	r3, #0
   26864:	d101      	bne.n	2686a <__swbuf_r+0x16>
   26866:	f000 f9b9 	bl	26bdc <__sinit>
   2686a:	4b22      	ldr	r3, [pc, #136]	; (268f4 <__swbuf_r+0xa0>)
   2686c:	429c      	cmp	r4, r3
   2686e:	d12d      	bne.n	268cc <__swbuf_r+0x78>
   26870:	686c      	ldr	r4, [r5, #4]
   26872:	69a3      	ldr	r3, [r4, #24]
   26874:	60a3      	str	r3, [r4, #8]
   26876:	89a3      	ldrh	r3, [r4, #12]
   26878:	071b      	lsls	r3, r3, #28
   2687a:	d531      	bpl.n	268e0 <__swbuf_r+0x8c>
   2687c:	6923      	ldr	r3, [r4, #16]
   2687e:	2b00      	cmp	r3, #0
   26880:	d02e      	beq.n	268e0 <__swbuf_r+0x8c>
   26882:	6823      	ldr	r3, [r4, #0]
   26884:	6922      	ldr	r2, [r4, #16]
   26886:	b2f7      	uxtb	r7, r6
   26888:	1a98      	subs	r0, r3, r2
   2688a:	6963      	ldr	r3, [r4, #20]
   2688c:	b2f6      	uxtb	r6, r6
   2688e:	4298      	cmp	r0, r3
   26890:	db05      	blt.n	2689e <__swbuf_r+0x4a>
   26892:	0021      	movs	r1, r4
   26894:	0028      	movs	r0, r5
   26896:	f000 f933 	bl	26b00 <_fflush_r>
   2689a:	2800      	cmp	r0, #0
   2689c:	d126      	bne.n	268ec <__swbuf_r+0x98>
   2689e:	68a3      	ldr	r3, [r4, #8]
   268a0:	3001      	adds	r0, #1
   268a2:	3b01      	subs	r3, #1
   268a4:	60a3      	str	r3, [r4, #8]
   268a6:	6823      	ldr	r3, [r4, #0]
   268a8:	1c5a      	adds	r2, r3, #1
   268aa:	6022      	str	r2, [r4, #0]
   268ac:	701f      	strb	r7, [r3, #0]
   268ae:	6963      	ldr	r3, [r4, #20]
   268b0:	4298      	cmp	r0, r3
   268b2:	d004      	beq.n	268be <__swbuf_r+0x6a>
   268b4:	89a3      	ldrh	r3, [r4, #12]
   268b6:	07db      	lsls	r3, r3, #31
   268b8:	d51a      	bpl.n	268f0 <__swbuf_r+0x9c>
   268ba:	2e0a      	cmp	r6, #10
   268bc:	d118      	bne.n	268f0 <__swbuf_r+0x9c>
   268be:	0021      	movs	r1, r4
   268c0:	0028      	movs	r0, r5
   268c2:	f000 f91d 	bl	26b00 <_fflush_r>
   268c6:	2800      	cmp	r0, #0
   268c8:	d012      	beq.n	268f0 <__swbuf_r+0x9c>
   268ca:	e00f      	b.n	268ec <__swbuf_r+0x98>
   268cc:	4b0a      	ldr	r3, [pc, #40]	; (268f8 <__swbuf_r+0xa4>)
   268ce:	429c      	cmp	r4, r3
   268d0:	d101      	bne.n	268d6 <__swbuf_r+0x82>
   268d2:	68ac      	ldr	r4, [r5, #8]
   268d4:	e7cd      	b.n	26872 <__swbuf_r+0x1e>
   268d6:	4b09      	ldr	r3, [pc, #36]	; (268fc <__swbuf_r+0xa8>)
   268d8:	429c      	cmp	r4, r3
   268da:	d1ca      	bne.n	26872 <__swbuf_r+0x1e>
   268dc:	68ec      	ldr	r4, [r5, #12]
   268de:	e7c8      	b.n	26872 <__swbuf_r+0x1e>
   268e0:	0021      	movs	r1, r4
   268e2:	0028      	movs	r0, r5
   268e4:	f000 f80c 	bl	26900 <__swsetup_r>
   268e8:	2800      	cmp	r0, #0
   268ea:	d0ca      	beq.n	26882 <__swbuf_r+0x2e>
   268ec:	2601      	movs	r6, #1
   268ee:	4276      	negs	r6, r6
   268f0:	0030      	movs	r0, r6
   268f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   268f4:	0002af04 	.word	0x0002af04
   268f8:	0002af24 	.word	0x0002af24
   268fc:	0002aee4 	.word	0x0002aee4

00026900 <__swsetup_r>:
   26900:	4b36      	ldr	r3, [pc, #216]	; (269dc <__swsetup_r+0xdc>)
   26902:	b570      	push	{r4, r5, r6, lr}
   26904:	681d      	ldr	r5, [r3, #0]
   26906:	0006      	movs	r6, r0
   26908:	000c      	movs	r4, r1
   2690a:	2d00      	cmp	r5, #0
   2690c:	d005      	beq.n	2691a <__swsetup_r+0x1a>
   2690e:	69ab      	ldr	r3, [r5, #24]
   26910:	2b00      	cmp	r3, #0
   26912:	d102      	bne.n	2691a <__swsetup_r+0x1a>
   26914:	0028      	movs	r0, r5
   26916:	f000 f961 	bl	26bdc <__sinit>
   2691a:	4b31      	ldr	r3, [pc, #196]	; (269e0 <__swsetup_r+0xe0>)
   2691c:	429c      	cmp	r4, r3
   2691e:	d10f      	bne.n	26940 <__swsetup_r+0x40>
   26920:	686c      	ldr	r4, [r5, #4]
   26922:	230c      	movs	r3, #12
   26924:	5ee2      	ldrsh	r2, [r4, r3]
   26926:	b293      	uxth	r3, r2
   26928:	0719      	lsls	r1, r3, #28
   2692a:	d42d      	bmi.n	26988 <__swsetup_r+0x88>
   2692c:	06d9      	lsls	r1, r3, #27
   2692e:	d411      	bmi.n	26954 <__swsetup_r+0x54>
   26930:	2309      	movs	r3, #9
   26932:	2001      	movs	r0, #1
   26934:	6033      	str	r3, [r6, #0]
   26936:	3337      	adds	r3, #55	; 0x37
   26938:	4313      	orrs	r3, r2
   2693a:	81a3      	strh	r3, [r4, #12]
   2693c:	4240      	negs	r0, r0
   2693e:	bd70      	pop	{r4, r5, r6, pc}
   26940:	4b28      	ldr	r3, [pc, #160]	; (269e4 <__swsetup_r+0xe4>)
   26942:	429c      	cmp	r4, r3
   26944:	d101      	bne.n	2694a <__swsetup_r+0x4a>
   26946:	68ac      	ldr	r4, [r5, #8]
   26948:	e7eb      	b.n	26922 <__swsetup_r+0x22>
   2694a:	4b27      	ldr	r3, [pc, #156]	; (269e8 <__swsetup_r+0xe8>)
   2694c:	429c      	cmp	r4, r3
   2694e:	d1e8      	bne.n	26922 <__swsetup_r+0x22>
   26950:	68ec      	ldr	r4, [r5, #12]
   26952:	e7e6      	b.n	26922 <__swsetup_r+0x22>
   26954:	075b      	lsls	r3, r3, #29
   26956:	d513      	bpl.n	26980 <__swsetup_r+0x80>
   26958:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2695a:	2900      	cmp	r1, #0
   2695c:	d008      	beq.n	26970 <__swsetup_r+0x70>
   2695e:	0023      	movs	r3, r4
   26960:	3344      	adds	r3, #68	; 0x44
   26962:	4299      	cmp	r1, r3
   26964:	d002      	beq.n	2696c <__swsetup_r+0x6c>
   26966:	0030      	movs	r0, r6
   26968:	f7ff fc78 	bl	2625c <_free_r>
   2696c:	2300      	movs	r3, #0
   2696e:	6363      	str	r3, [r4, #52]	; 0x34
   26970:	2224      	movs	r2, #36	; 0x24
   26972:	89a3      	ldrh	r3, [r4, #12]
   26974:	4393      	bics	r3, r2
   26976:	81a3      	strh	r3, [r4, #12]
   26978:	2300      	movs	r3, #0
   2697a:	6063      	str	r3, [r4, #4]
   2697c:	6923      	ldr	r3, [r4, #16]
   2697e:	6023      	str	r3, [r4, #0]
   26980:	2308      	movs	r3, #8
   26982:	89a2      	ldrh	r2, [r4, #12]
   26984:	4313      	orrs	r3, r2
   26986:	81a3      	strh	r3, [r4, #12]
   26988:	6923      	ldr	r3, [r4, #16]
   2698a:	2b00      	cmp	r3, #0
   2698c:	d10b      	bne.n	269a6 <__swsetup_r+0xa6>
   2698e:	21a0      	movs	r1, #160	; 0xa0
   26990:	2280      	movs	r2, #128	; 0x80
   26992:	89a3      	ldrh	r3, [r4, #12]
   26994:	0089      	lsls	r1, r1, #2
   26996:	0092      	lsls	r2, r2, #2
   26998:	400b      	ands	r3, r1
   2699a:	4293      	cmp	r3, r2
   2699c:	d003      	beq.n	269a6 <__swsetup_r+0xa6>
   2699e:	0021      	movs	r1, r4
   269a0:	0030      	movs	r0, r6
   269a2:	f000 f9e9 	bl	26d78 <__smakebuf_r>
   269a6:	2301      	movs	r3, #1
   269a8:	89a2      	ldrh	r2, [r4, #12]
   269aa:	4013      	ands	r3, r2
   269ac:	d011      	beq.n	269d2 <__swsetup_r+0xd2>
   269ae:	2300      	movs	r3, #0
   269b0:	60a3      	str	r3, [r4, #8]
   269b2:	6963      	ldr	r3, [r4, #20]
   269b4:	425b      	negs	r3, r3
   269b6:	61a3      	str	r3, [r4, #24]
   269b8:	2000      	movs	r0, #0
   269ba:	6923      	ldr	r3, [r4, #16]
   269bc:	4283      	cmp	r3, r0
   269be:	d1be      	bne.n	2693e <__swsetup_r+0x3e>
   269c0:	230c      	movs	r3, #12
   269c2:	5ee2      	ldrsh	r2, [r4, r3]
   269c4:	0613      	lsls	r3, r2, #24
   269c6:	d5ba      	bpl.n	2693e <__swsetup_r+0x3e>
   269c8:	2340      	movs	r3, #64	; 0x40
   269ca:	4313      	orrs	r3, r2
   269cc:	81a3      	strh	r3, [r4, #12]
   269ce:	3801      	subs	r0, #1
   269d0:	e7b5      	b.n	2693e <__swsetup_r+0x3e>
   269d2:	0792      	lsls	r2, r2, #30
   269d4:	d400      	bmi.n	269d8 <__swsetup_r+0xd8>
   269d6:	6963      	ldr	r3, [r4, #20]
   269d8:	60a3      	str	r3, [r4, #8]
   269da:	e7ed      	b.n	269b8 <__swsetup_r+0xb8>
   269dc:	200000c8 	.word	0x200000c8
   269e0:	0002af04 	.word	0x0002af04
   269e4:	0002af24 	.word	0x0002af24
   269e8:	0002aee4 	.word	0x0002aee4

000269ec <__sflush_r>:
   269ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   269ee:	898a      	ldrh	r2, [r1, #12]
   269f0:	0005      	movs	r5, r0
   269f2:	000c      	movs	r4, r1
   269f4:	0713      	lsls	r3, r2, #28
   269f6:	d460      	bmi.n	26aba <__sflush_r+0xce>
   269f8:	684b      	ldr	r3, [r1, #4]
   269fa:	2b00      	cmp	r3, #0
   269fc:	dc04      	bgt.n	26a08 <__sflush_r+0x1c>
   269fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   26a00:	2b00      	cmp	r3, #0
   26a02:	dc01      	bgt.n	26a08 <__sflush_r+0x1c>
   26a04:	2000      	movs	r0, #0
   26a06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   26a08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   26a0a:	2f00      	cmp	r7, #0
   26a0c:	d0fa      	beq.n	26a04 <__sflush_r+0x18>
   26a0e:	2300      	movs	r3, #0
   26a10:	682e      	ldr	r6, [r5, #0]
   26a12:	602b      	str	r3, [r5, #0]
   26a14:	2380      	movs	r3, #128	; 0x80
   26a16:	015b      	lsls	r3, r3, #5
   26a18:	401a      	ands	r2, r3
   26a1a:	d034      	beq.n	26a86 <__sflush_r+0x9a>
   26a1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   26a1e:	89a3      	ldrh	r3, [r4, #12]
   26a20:	075b      	lsls	r3, r3, #29
   26a22:	d506      	bpl.n	26a32 <__sflush_r+0x46>
   26a24:	6863      	ldr	r3, [r4, #4]
   26a26:	1ac0      	subs	r0, r0, r3
   26a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26a2a:	2b00      	cmp	r3, #0
   26a2c:	d001      	beq.n	26a32 <__sflush_r+0x46>
   26a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   26a30:	1ac0      	subs	r0, r0, r3
   26a32:	0002      	movs	r2, r0
   26a34:	6a21      	ldr	r1, [r4, #32]
   26a36:	2300      	movs	r3, #0
   26a38:	0028      	movs	r0, r5
   26a3a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   26a3c:	47b8      	blx	r7
   26a3e:	89a1      	ldrh	r1, [r4, #12]
   26a40:	1c43      	adds	r3, r0, #1
   26a42:	d106      	bne.n	26a52 <__sflush_r+0x66>
   26a44:	682b      	ldr	r3, [r5, #0]
   26a46:	2b1d      	cmp	r3, #29
   26a48:	d831      	bhi.n	26aae <__sflush_r+0xc2>
   26a4a:	4a2c      	ldr	r2, [pc, #176]	; (26afc <__sflush_r+0x110>)
   26a4c:	40da      	lsrs	r2, r3
   26a4e:	07d3      	lsls	r3, r2, #31
   26a50:	d52d      	bpl.n	26aae <__sflush_r+0xc2>
   26a52:	2300      	movs	r3, #0
   26a54:	6063      	str	r3, [r4, #4]
   26a56:	6923      	ldr	r3, [r4, #16]
   26a58:	6023      	str	r3, [r4, #0]
   26a5a:	04cb      	lsls	r3, r1, #19
   26a5c:	d505      	bpl.n	26a6a <__sflush_r+0x7e>
   26a5e:	1c43      	adds	r3, r0, #1
   26a60:	d102      	bne.n	26a68 <__sflush_r+0x7c>
   26a62:	682b      	ldr	r3, [r5, #0]
   26a64:	2b00      	cmp	r3, #0
   26a66:	d100      	bne.n	26a6a <__sflush_r+0x7e>
   26a68:	6560      	str	r0, [r4, #84]	; 0x54
   26a6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   26a6c:	602e      	str	r6, [r5, #0]
   26a6e:	2900      	cmp	r1, #0
   26a70:	d0c8      	beq.n	26a04 <__sflush_r+0x18>
   26a72:	0023      	movs	r3, r4
   26a74:	3344      	adds	r3, #68	; 0x44
   26a76:	4299      	cmp	r1, r3
   26a78:	d002      	beq.n	26a80 <__sflush_r+0x94>
   26a7a:	0028      	movs	r0, r5
   26a7c:	f7ff fbee 	bl	2625c <_free_r>
   26a80:	2000      	movs	r0, #0
   26a82:	6360      	str	r0, [r4, #52]	; 0x34
   26a84:	e7bf      	b.n	26a06 <__sflush_r+0x1a>
   26a86:	2301      	movs	r3, #1
   26a88:	6a21      	ldr	r1, [r4, #32]
   26a8a:	0028      	movs	r0, r5
   26a8c:	47b8      	blx	r7
   26a8e:	1c43      	adds	r3, r0, #1
   26a90:	d1c5      	bne.n	26a1e <__sflush_r+0x32>
   26a92:	682b      	ldr	r3, [r5, #0]
   26a94:	2b00      	cmp	r3, #0
   26a96:	d0c2      	beq.n	26a1e <__sflush_r+0x32>
   26a98:	2b1d      	cmp	r3, #29
   26a9a:	d001      	beq.n	26aa0 <__sflush_r+0xb4>
   26a9c:	2b16      	cmp	r3, #22
   26a9e:	d101      	bne.n	26aa4 <__sflush_r+0xb8>
   26aa0:	602e      	str	r6, [r5, #0]
   26aa2:	e7af      	b.n	26a04 <__sflush_r+0x18>
   26aa4:	2340      	movs	r3, #64	; 0x40
   26aa6:	89a2      	ldrh	r2, [r4, #12]
   26aa8:	4313      	orrs	r3, r2
   26aaa:	81a3      	strh	r3, [r4, #12]
   26aac:	e7ab      	b.n	26a06 <__sflush_r+0x1a>
   26aae:	2340      	movs	r3, #64	; 0x40
   26ab0:	430b      	orrs	r3, r1
   26ab2:	2001      	movs	r0, #1
   26ab4:	81a3      	strh	r3, [r4, #12]
   26ab6:	4240      	negs	r0, r0
   26ab8:	e7a5      	b.n	26a06 <__sflush_r+0x1a>
   26aba:	690f      	ldr	r7, [r1, #16]
   26abc:	2f00      	cmp	r7, #0
   26abe:	d0a1      	beq.n	26a04 <__sflush_r+0x18>
   26ac0:	680b      	ldr	r3, [r1, #0]
   26ac2:	600f      	str	r7, [r1, #0]
   26ac4:	1bdb      	subs	r3, r3, r7
   26ac6:	9301      	str	r3, [sp, #4]
   26ac8:	2300      	movs	r3, #0
   26aca:	0792      	lsls	r2, r2, #30
   26acc:	d100      	bne.n	26ad0 <__sflush_r+0xe4>
   26ace:	694b      	ldr	r3, [r1, #20]
   26ad0:	60a3      	str	r3, [r4, #8]
   26ad2:	9b01      	ldr	r3, [sp, #4]
   26ad4:	2b00      	cmp	r3, #0
   26ad6:	dc00      	bgt.n	26ada <__sflush_r+0xee>
   26ad8:	e794      	b.n	26a04 <__sflush_r+0x18>
   26ada:	9b01      	ldr	r3, [sp, #4]
   26adc:	003a      	movs	r2, r7
   26ade:	6a21      	ldr	r1, [r4, #32]
   26ae0:	0028      	movs	r0, r5
   26ae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   26ae4:	47b0      	blx	r6
   26ae6:	2800      	cmp	r0, #0
   26ae8:	dc03      	bgt.n	26af2 <__sflush_r+0x106>
   26aea:	2340      	movs	r3, #64	; 0x40
   26aec:	89a2      	ldrh	r2, [r4, #12]
   26aee:	4313      	orrs	r3, r2
   26af0:	e7df      	b.n	26ab2 <__sflush_r+0xc6>
   26af2:	9b01      	ldr	r3, [sp, #4]
   26af4:	183f      	adds	r7, r7, r0
   26af6:	1a1b      	subs	r3, r3, r0
   26af8:	9301      	str	r3, [sp, #4]
   26afa:	e7ea      	b.n	26ad2 <__sflush_r+0xe6>
   26afc:	20400001 	.word	0x20400001

00026b00 <_fflush_r>:
   26b00:	690b      	ldr	r3, [r1, #16]
   26b02:	b570      	push	{r4, r5, r6, lr}
   26b04:	0005      	movs	r5, r0
   26b06:	000c      	movs	r4, r1
   26b08:	2b00      	cmp	r3, #0
   26b0a:	d101      	bne.n	26b10 <_fflush_r+0x10>
   26b0c:	2000      	movs	r0, #0
   26b0e:	bd70      	pop	{r4, r5, r6, pc}
   26b10:	2800      	cmp	r0, #0
   26b12:	d004      	beq.n	26b1e <_fflush_r+0x1e>
   26b14:	6983      	ldr	r3, [r0, #24]
   26b16:	2b00      	cmp	r3, #0
   26b18:	d101      	bne.n	26b1e <_fflush_r+0x1e>
   26b1a:	f000 f85f 	bl	26bdc <__sinit>
   26b1e:	4b0b      	ldr	r3, [pc, #44]	; (26b4c <_fflush_r+0x4c>)
   26b20:	429c      	cmp	r4, r3
   26b22:	d109      	bne.n	26b38 <_fflush_r+0x38>
   26b24:	686c      	ldr	r4, [r5, #4]
   26b26:	220c      	movs	r2, #12
   26b28:	5ea3      	ldrsh	r3, [r4, r2]
   26b2a:	2b00      	cmp	r3, #0
   26b2c:	d0ee      	beq.n	26b0c <_fflush_r+0xc>
   26b2e:	0021      	movs	r1, r4
   26b30:	0028      	movs	r0, r5
   26b32:	f7ff ff5b 	bl	269ec <__sflush_r>
   26b36:	e7ea      	b.n	26b0e <_fflush_r+0xe>
   26b38:	4b05      	ldr	r3, [pc, #20]	; (26b50 <_fflush_r+0x50>)
   26b3a:	429c      	cmp	r4, r3
   26b3c:	d101      	bne.n	26b42 <_fflush_r+0x42>
   26b3e:	68ac      	ldr	r4, [r5, #8]
   26b40:	e7f1      	b.n	26b26 <_fflush_r+0x26>
   26b42:	4b04      	ldr	r3, [pc, #16]	; (26b54 <_fflush_r+0x54>)
   26b44:	429c      	cmp	r4, r3
   26b46:	d1ee      	bne.n	26b26 <_fflush_r+0x26>
   26b48:	68ec      	ldr	r4, [r5, #12]
   26b4a:	e7ec      	b.n	26b26 <_fflush_r+0x26>
   26b4c:	0002af04 	.word	0x0002af04
   26b50:	0002af24 	.word	0x0002af24
   26b54:	0002aee4 	.word	0x0002aee4

00026b58 <_cleanup_r>:
   26b58:	b510      	push	{r4, lr}
   26b5a:	4902      	ldr	r1, [pc, #8]	; (26b64 <_cleanup_r+0xc>)
   26b5c:	f000 f8b2 	bl	26cc4 <_fwalk_reent>
   26b60:	bd10      	pop	{r4, pc}
   26b62:	46c0      	nop			; (mov r8, r8)
   26b64:	00026b01 	.word	0x00026b01

00026b68 <std.isra.0>:
   26b68:	2300      	movs	r3, #0
   26b6a:	b510      	push	{r4, lr}
   26b6c:	0004      	movs	r4, r0
   26b6e:	6003      	str	r3, [r0, #0]
   26b70:	6043      	str	r3, [r0, #4]
   26b72:	6083      	str	r3, [r0, #8]
   26b74:	8181      	strh	r1, [r0, #12]
   26b76:	6643      	str	r3, [r0, #100]	; 0x64
   26b78:	81c2      	strh	r2, [r0, #14]
   26b7a:	6103      	str	r3, [r0, #16]
   26b7c:	6143      	str	r3, [r0, #20]
   26b7e:	6183      	str	r3, [r0, #24]
   26b80:	0019      	movs	r1, r3
   26b82:	2208      	movs	r2, #8
   26b84:	305c      	adds	r0, #92	; 0x5c
   26b86:	f7ff fb60 	bl	2624a <memset>
   26b8a:	4b05      	ldr	r3, [pc, #20]	; (26ba0 <std.isra.0+0x38>)
   26b8c:	6224      	str	r4, [r4, #32]
   26b8e:	6263      	str	r3, [r4, #36]	; 0x24
   26b90:	4b04      	ldr	r3, [pc, #16]	; (26ba4 <std.isra.0+0x3c>)
   26b92:	62a3      	str	r3, [r4, #40]	; 0x28
   26b94:	4b04      	ldr	r3, [pc, #16]	; (26ba8 <std.isra.0+0x40>)
   26b96:	62e3      	str	r3, [r4, #44]	; 0x2c
   26b98:	4b04      	ldr	r3, [pc, #16]	; (26bac <std.isra.0+0x44>)
   26b9a:	6323      	str	r3, [r4, #48]	; 0x30
   26b9c:	bd10      	pop	{r4, pc}
   26b9e:	46c0      	nop			; (mov r8, r8)
   26ba0:	00027405 	.word	0x00027405
   26ba4:	0002742d 	.word	0x0002742d
   26ba8:	00027465 	.word	0x00027465
   26bac:	00027491 	.word	0x00027491

00026bb0 <__sfmoreglue>:
   26bb0:	b570      	push	{r4, r5, r6, lr}
   26bb2:	2568      	movs	r5, #104	; 0x68
   26bb4:	1e4a      	subs	r2, r1, #1
   26bb6:	4355      	muls	r5, r2
   26bb8:	000e      	movs	r6, r1
   26bba:	0029      	movs	r1, r5
   26bbc:	3174      	adds	r1, #116	; 0x74
   26bbe:	f7ff fb97 	bl	262f0 <_malloc_r>
   26bc2:	1e04      	subs	r4, r0, #0
   26bc4:	d008      	beq.n	26bd8 <__sfmoreglue+0x28>
   26bc6:	2100      	movs	r1, #0
   26bc8:	002a      	movs	r2, r5
   26bca:	6001      	str	r1, [r0, #0]
   26bcc:	6046      	str	r6, [r0, #4]
   26bce:	300c      	adds	r0, #12
   26bd0:	60a0      	str	r0, [r4, #8]
   26bd2:	3268      	adds	r2, #104	; 0x68
   26bd4:	f7ff fb39 	bl	2624a <memset>
   26bd8:	0020      	movs	r0, r4
   26bda:	bd70      	pop	{r4, r5, r6, pc}

00026bdc <__sinit>:
   26bdc:	6983      	ldr	r3, [r0, #24]
   26bde:	b513      	push	{r0, r1, r4, lr}
   26be0:	0004      	movs	r4, r0
   26be2:	2b00      	cmp	r3, #0
   26be4:	d128      	bne.n	26c38 <__sinit+0x5c>
   26be6:	6483      	str	r3, [r0, #72]	; 0x48
   26be8:	64c3      	str	r3, [r0, #76]	; 0x4c
   26bea:	6503      	str	r3, [r0, #80]	; 0x50
   26bec:	4b13      	ldr	r3, [pc, #76]	; (26c3c <__sinit+0x60>)
   26bee:	4a14      	ldr	r2, [pc, #80]	; (26c40 <__sinit+0x64>)
   26bf0:	681b      	ldr	r3, [r3, #0]
   26bf2:	6282      	str	r2, [r0, #40]	; 0x28
   26bf4:	9301      	str	r3, [sp, #4]
   26bf6:	4298      	cmp	r0, r3
   26bf8:	d101      	bne.n	26bfe <__sinit+0x22>
   26bfa:	2301      	movs	r3, #1
   26bfc:	6183      	str	r3, [r0, #24]
   26bfe:	0020      	movs	r0, r4
   26c00:	f000 f820 	bl	26c44 <__sfp>
   26c04:	6060      	str	r0, [r4, #4]
   26c06:	0020      	movs	r0, r4
   26c08:	f000 f81c 	bl	26c44 <__sfp>
   26c0c:	60a0      	str	r0, [r4, #8]
   26c0e:	0020      	movs	r0, r4
   26c10:	f000 f818 	bl	26c44 <__sfp>
   26c14:	2200      	movs	r2, #0
   26c16:	60e0      	str	r0, [r4, #12]
   26c18:	2104      	movs	r1, #4
   26c1a:	6860      	ldr	r0, [r4, #4]
   26c1c:	f7ff ffa4 	bl	26b68 <std.isra.0>
   26c20:	2201      	movs	r2, #1
   26c22:	2109      	movs	r1, #9
   26c24:	68a0      	ldr	r0, [r4, #8]
   26c26:	f7ff ff9f 	bl	26b68 <std.isra.0>
   26c2a:	2202      	movs	r2, #2
   26c2c:	2112      	movs	r1, #18
   26c2e:	68e0      	ldr	r0, [r4, #12]
   26c30:	f7ff ff9a 	bl	26b68 <std.isra.0>
   26c34:	2301      	movs	r3, #1
   26c36:	61a3      	str	r3, [r4, #24]
   26c38:	bd13      	pop	{r0, r1, r4, pc}
   26c3a:	46c0      	nop			; (mov r8, r8)
   26c3c:	0002aee0 	.word	0x0002aee0
   26c40:	00026b59 	.word	0x00026b59

00026c44 <__sfp>:
   26c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c46:	4b1e      	ldr	r3, [pc, #120]	; (26cc0 <__sfp+0x7c>)
   26c48:	0007      	movs	r7, r0
   26c4a:	681e      	ldr	r6, [r3, #0]
   26c4c:	69b3      	ldr	r3, [r6, #24]
   26c4e:	2b00      	cmp	r3, #0
   26c50:	d102      	bne.n	26c58 <__sfp+0x14>
   26c52:	0030      	movs	r0, r6
   26c54:	f7ff ffc2 	bl	26bdc <__sinit>
   26c58:	3648      	adds	r6, #72	; 0x48
   26c5a:	68b4      	ldr	r4, [r6, #8]
   26c5c:	6873      	ldr	r3, [r6, #4]
   26c5e:	3b01      	subs	r3, #1
   26c60:	d504      	bpl.n	26c6c <__sfp+0x28>
   26c62:	6833      	ldr	r3, [r6, #0]
   26c64:	2b00      	cmp	r3, #0
   26c66:	d007      	beq.n	26c78 <__sfp+0x34>
   26c68:	6836      	ldr	r6, [r6, #0]
   26c6a:	e7f6      	b.n	26c5a <__sfp+0x16>
   26c6c:	220c      	movs	r2, #12
   26c6e:	5ea5      	ldrsh	r5, [r4, r2]
   26c70:	2d00      	cmp	r5, #0
   26c72:	d00d      	beq.n	26c90 <__sfp+0x4c>
   26c74:	3468      	adds	r4, #104	; 0x68
   26c76:	e7f2      	b.n	26c5e <__sfp+0x1a>
   26c78:	2104      	movs	r1, #4
   26c7a:	0038      	movs	r0, r7
   26c7c:	f7ff ff98 	bl	26bb0 <__sfmoreglue>
   26c80:	6030      	str	r0, [r6, #0]
   26c82:	2800      	cmp	r0, #0
   26c84:	d1f0      	bne.n	26c68 <__sfp+0x24>
   26c86:	230c      	movs	r3, #12
   26c88:	0004      	movs	r4, r0
   26c8a:	603b      	str	r3, [r7, #0]
   26c8c:	0020      	movs	r0, r4
   26c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26c90:	2301      	movs	r3, #1
   26c92:	0020      	movs	r0, r4
   26c94:	425b      	negs	r3, r3
   26c96:	81e3      	strh	r3, [r4, #14]
   26c98:	3302      	adds	r3, #2
   26c9a:	81a3      	strh	r3, [r4, #12]
   26c9c:	6665      	str	r5, [r4, #100]	; 0x64
   26c9e:	6025      	str	r5, [r4, #0]
   26ca0:	60a5      	str	r5, [r4, #8]
   26ca2:	6065      	str	r5, [r4, #4]
   26ca4:	6125      	str	r5, [r4, #16]
   26ca6:	6165      	str	r5, [r4, #20]
   26ca8:	61a5      	str	r5, [r4, #24]
   26caa:	2208      	movs	r2, #8
   26cac:	0029      	movs	r1, r5
   26cae:	305c      	adds	r0, #92	; 0x5c
   26cb0:	f7ff facb 	bl	2624a <memset>
   26cb4:	6365      	str	r5, [r4, #52]	; 0x34
   26cb6:	63a5      	str	r5, [r4, #56]	; 0x38
   26cb8:	64a5      	str	r5, [r4, #72]	; 0x48
   26cba:	64e5      	str	r5, [r4, #76]	; 0x4c
   26cbc:	e7e6      	b.n	26c8c <__sfp+0x48>
   26cbe:	46c0      	nop			; (mov r8, r8)
   26cc0:	0002aee0 	.word	0x0002aee0

00026cc4 <_fwalk_reent>:
   26cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26cc6:	0004      	movs	r4, r0
   26cc8:	0007      	movs	r7, r0
   26cca:	2600      	movs	r6, #0
   26ccc:	9101      	str	r1, [sp, #4]
   26cce:	3448      	adds	r4, #72	; 0x48
   26cd0:	2c00      	cmp	r4, #0
   26cd2:	d101      	bne.n	26cd8 <_fwalk_reent+0x14>
   26cd4:	0030      	movs	r0, r6
   26cd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   26cd8:	6863      	ldr	r3, [r4, #4]
   26cda:	68a5      	ldr	r5, [r4, #8]
   26cdc:	9300      	str	r3, [sp, #0]
   26cde:	9b00      	ldr	r3, [sp, #0]
   26ce0:	3b01      	subs	r3, #1
   26ce2:	9300      	str	r3, [sp, #0]
   26ce4:	d501      	bpl.n	26cea <_fwalk_reent+0x26>
   26ce6:	6824      	ldr	r4, [r4, #0]
   26ce8:	e7f2      	b.n	26cd0 <_fwalk_reent+0xc>
   26cea:	89ab      	ldrh	r3, [r5, #12]
   26cec:	2b01      	cmp	r3, #1
   26cee:	d908      	bls.n	26d02 <_fwalk_reent+0x3e>
   26cf0:	220e      	movs	r2, #14
   26cf2:	5eab      	ldrsh	r3, [r5, r2]
   26cf4:	3301      	adds	r3, #1
   26cf6:	d004      	beq.n	26d02 <_fwalk_reent+0x3e>
   26cf8:	0029      	movs	r1, r5
   26cfa:	0038      	movs	r0, r7
   26cfc:	9b01      	ldr	r3, [sp, #4]
   26cfe:	4798      	blx	r3
   26d00:	4306      	orrs	r6, r0
   26d02:	3568      	adds	r5, #104	; 0x68
   26d04:	e7eb      	b.n	26cde <_fwalk_reent+0x1a>

00026d06 <__locale_ctype_ptr_l>:
   26d06:	30ec      	adds	r0, #236	; 0xec
   26d08:	6800      	ldr	r0, [r0, #0]
   26d0a:	4770      	bx	lr

00026d0c <__locale_ctype_ptr>:
   26d0c:	4b04      	ldr	r3, [pc, #16]	; (26d20 <__locale_ctype_ptr+0x14>)
   26d0e:	681b      	ldr	r3, [r3, #0]
   26d10:	6a1b      	ldr	r3, [r3, #32]
   26d12:	2b00      	cmp	r3, #0
   26d14:	d100      	bne.n	26d18 <__locale_ctype_ptr+0xc>
   26d16:	4b03      	ldr	r3, [pc, #12]	; (26d24 <__locale_ctype_ptr+0x18>)
   26d18:	33ec      	adds	r3, #236	; 0xec
   26d1a:	6818      	ldr	r0, [r3, #0]
   26d1c:	4770      	bx	lr
   26d1e:	46c0      	nop			; (mov r8, r8)
   26d20:	200000c8 	.word	0x200000c8
   26d24:	2000012c 	.word	0x2000012c

00026d28 <__swhatbuf_r>:
   26d28:	b570      	push	{r4, r5, r6, lr}
   26d2a:	000e      	movs	r6, r1
   26d2c:	001d      	movs	r5, r3
   26d2e:	230e      	movs	r3, #14
   26d30:	5ec9      	ldrsh	r1, [r1, r3]
   26d32:	b090      	sub	sp, #64	; 0x40
   26d34:	0014      	movs	r4, r2
   26d36:	2900      	cmp	r1, #0
   26d38:	da07      	bge.n	26d4a <__swhatbuf_r+0x22>
   26d3a:	2300      	movs	r3, #0
   26d3c:	602b      	str	r3, [r5, #0]
   26d3e:	89b3      	ldrh	r3, [r6, #12]
   26d40:	061b      	lsls	r3, r3, #24
   26d42:	d411      	bmi.n	26d68 <__swhatbuf_r+0x40>
   26d44:	2380      	movs	r3, #128	; 0x80
   26d46:	00db      	lsls	r3, r3, #3
   26d48:	e00f      	b.n	26d6a <__swhatbuf_r+0x42>
   26d4a:	aa01      	add	r2, sp, #4
   26d4c:	f000 fbe6 	bl	2751c <_fstat_r>
   26d50:	2800      	cmp	r0, #0
   26d52:	dbf2      	blt.n	26d3a <__swhatbuf_r+0x12>
   26d54:	22f0      	movs	r2, #240	; 0xf0
   26d56:	9b02      	ldr	r3, [sp, #8]
   26d58:	0212      	lsls	r2, r2, #8
   26d5a:	4013      	ands	r3, r2
   26d5c:	4a05      	ldr	r2, [pc, #20]	; (26d74 <__swhatbuf_r+0x4c>)
   26d5e:	189b      	adds	r3, r3, r2
   26d60:	425a      	negs	r2, r3
   26d62:	4153      	adcs	r3, r2
   26d64:	602b      	str	r3, [r5, #0]
   26d66:	e7ed      	b.n	26d44 <__swhatbuf_r+0x1c>
   26d68:	2340      	movs	r3, #64	; 0x40
   26d6a:	2000      	movs	r0, #0
   26d6c:	6023      	str	r3, [r4, #0]
   26d6e:	b010      	add	sp, #64	; 0x40
   26d70:	bd70      	pop	{r4, r5, r6, pc}
   26d72:	46c0      	nop			; (mov r8, r8)
   26d74:	ffffe000 	.word	0xffffe000

00026d78 <__smakebuf_r>:
   26d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26d7a:	2602      	movs	r6, #2
   26d7c:	898b      	ldrh	r3, [r1, #12]
   26d7e:	0005      	movs	r5, r0
   26d80:	000c      	movs	r4, r1
   26d82:	4233      	tst	r3, r6
   26d84:	d006      	beq.n	26d94 <__smakebuf_r+0x1c>
   26d86:	0023      	movs	r3, r4
   26d88:	3347      	adds	r3, #71	; 0x47
   26d8a:	6023      	str	r3, [r4, #0]
   26d8c:	6123      	str	r3, [r4, #16]
   26d8e:	2301      	movs	r3, #1
   26d90:	6163      	str	r3, [r4, #20]
   26d92:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   26d94:	ab01      	add	r3, sp, #4
   26d96:	466a      	mov	r2, sp
   26d98:	f7ff ffc6 	bl	26d28 <__swhatbuf_r>
   26d9c:	9900      	ldr	r1, [sp, #0]
   26d9e:	0007      	movs	r7, r0
   26da0:	0028      	movs	r0, r5
   26da2:	f7ff faa5 	bl	262f0 <_malloc_r>
   26da6:	2800      	cmp	r0, #0
   26da8:	d108      	bne.n	26dbc <__smakebuf_r+0x44>
   26daa:	220c      	movs	r2, #12
   26dac:	5ea3      	ldrsh	r3, [r4, r2]
   26dae:	059a      	lsls	r2, r3, #22
   26db0:	d4ef      	bmi.n	26d92 <__smakebuf_r+0x1a>
   26db2:	2203      	movs	r2, #3
   26db4:	4393      	bics	r3, r2
   26db6:	431e      	orrs	r6, r3
   26db8:	81a6      	strh	r6, [r4, #12]
   26dba:	e7e4      	b.n	26d86 <__smakebuf_r+0xe>
   26dbc:	4b0f      	ldr	r3, [pc, #60]	; (26dfc <__smakebuf_r+0x84>)
   26dbe:	62ab      	str	r3, [r5, #40]	; 0x28
   26dc0:	2380      	movs	r3, #128	; 0x80
   26dc2:	89a2      	ldrh	r2, [r4, #12]
   26dc4:	6020      	str	r0, [r4, #0]
   26dc6:	4313      	orrs	r3, r2
   26dc8:	81a3      	strh	r3, [r4, #12]
   26dca:	9b00      	ldr	r3, [sp, #0]
   26dcc:	6120      	str	r0, [r4, #16]
   26dce:	6163      	str	r3, [r4, #20]
   26dd0:	9b01      	ldr	r3, [sp, #4]
   26dd2:	2b00      	cmp	r3, #0
   26dd4:	d00d      	beq.n	26df2 <__smakebuf_r+0x7a>
   26dd6:	230e      	movs	r3, #14
   26dd8:	5ee1      	ldrsh	r1, [r4, r3]
   26dda:	0028      	movs	r0, r5
   26ddc:	f000 fbb0 	bl	27540 <_isatty_r>
   26de0:	2800      	cmp	r0, #0
   26de2:	d006      	beq.n	26df2 <__smakebuf_r+0x7a>
   26de4:	2203      	movs	r2, #3
   26de6:	89a3      	ldrh	r3, [r4, #12]
   26de8:	4393      	bics	r3, r2
   26dea:	001a      	movs	r2, r3
   26dec:	2301      	movs	r3, #1
   26dee:	4313      	orrs	r3, r2
   26df0:	81a3      	strh	r3, [r4, #12]
   26df2:	89a0      	ldrh	r0, [r4, #12]
   26df4:	4338      	orrs	r0, r7
   26df6:	81a0      	strh	r0, [r4, #12]
   26df8:	e7cb      	b.n	26d92 <__smakebuf_r+0x1a>
   26dfa:	46c0      	nop			; (mov r8, r8)
   26dfc:	00026b59 	.word	0x00026b59

00026e00 <__ascii_mbtowc>:
   26e00:	b082      	sub	sp, #8
   26e02:	2900      	cmp	r1, #0
   26e04:	d100      	bne.n	26e08 <__ascii_mbtowc+0x8>
   26e06:	a901      	add	r1, sp, #4
   26e08:	1e10      	subs	r0, r2, #0
   26e0a:	d006      	beq.n	26e1a <__ascii_mbtowc+0x1a>
   26e0c:	2b00      	cmp	r3, #0
   26e0e:	d006      	beq.n	26e1e <__ascii_mbtowc+0x1e>
   26e10:	7813      	ldrb	r3, [r2, #0]
   26e12:	600b      	str	r3, [r1, #0]
   26e14:	7810      	ldrb	r0, [r2, #0]
   26e16:	1e43      	subs	r3, r0, #1
   26e18:	4198      	sbcs	r0, r3
   26e1a:	b002      	add	sp, #8
   26e1c:	4770      	bx	lr
   26e1e:	2002      	movs	r0, #2
   26e20:	4240      	negs	r0, r0
   26e22:	e7fa      	b.n	26e1a <__ascii_mbtowc+0x1a>

00026e24 <__malloc_lock>:
   26e24:	4770      	bx	lr

00026e26 <__malloc_unlock>:
   26e26:	4770      	bx	lr

00026e28 <__ssputs_r>:
   26e28:	b5f0      	push	{r4, r5, r6, r7, lr}
   26e2a:	688e      	ldr	r6, [r1, #8]
   26e2c:	b085      	sub	sp, #20
   26e2e:	0007      	movs	r7, r0
   26e30:	000c      	movs	r4, r1
   26e32:	9203      	str	r2, [sp, #12]
   26e34:	9301      	str	r3, [sp, #4]
   26e36:	429e      	cmp	r6, r3
   26e38:	d839      	bhi.n	26eae <__ssputs_r+0x86>
   26e3a:	2390      	movs	r3, #144	; 0x90
   26e3c:	898a      	ldrh	r2, [r1, #12]
   26e3e:	00db      	lsls	r3, r3, #3
   26e40:	421a      	tst	r2, r3
   26e42:	d034      	beq.n	26eae <__ssputs_r+0x86>
   26e44:	2503      	movs	r5, #3
   26e46:	6909      	ldr	r1, [r1, #16]
   26e48:	6823      	ldr	r3, [r4, #0]
   26e4a:	1a5b      	subs	r3, r3, r1
   26e4c:	9302      	str	r3, [sp, #8]
   26e4e:	6963      	ldr	r3, [r4, #20]
   26e50:	9802      	ldr	r0, [sp, #8]
   26e52:	435d      	muls	r5, r3
   26e54:	0feb      	lsrs	r3, r5, #31
   26e56:	195d      	adds	r5, r3, r5
   26e58:	9b01      	ldr	r3, [sp, #4]
   26e5a:	106d      	asrs	r5, r5, #1
   26e5c:	3301      	adds	r3, #1
   26e5e:	181b      	adds	r3, r3, r0
   26e60:	42ab      	cmp	r3, r5
   26e62:	d900      	bls.n	26e66 <__ssputs_r+0x3e>
   26e64:	001d      	movs	r5, r3
   26e66:	0553      	lsls	r3, r2, #21
   26e68:	d532      	bpl.n	26ed0 <__ssputs_r+0xa8>
   26e6a:	0029      	movs	r1, r5
   26e6c:	0038      	movs	r0, r7
   26e6e:	f7ff fa3f 	bl	262f0 <_malloc_r>
   26e72:	1e06      	subs	r6, r0, #0
   26e74:	d109      	bne.n	26e8a <__ssputs_r+0x62>
   26e76:	230c      	movs	r3, #12
   26e78:	603b      	str	r3, [r7, #0]
   26e7a:	2340      	movs	r3, #64	; 0x40
   26e7c:	2001      	movs	r0, #1
   26e7e:	89a2      	ldrh	r2, [r4, #12]
   26e80:	4240      	negs	r0, r0
   26e82:	4313      	orrs	r3, r2
   26e84:	81a3      	strh	r3, [r4, #12]
   26e86:	b005      	add	sp, #20
   26e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26e8a:	9a02      	ldr	r2, [sp, #8]
   26e8c:	6921      	ldr	r1, [r4, #16]
   26e8e:	f7ff f9c1 	bl	26214 <memcpy>
   26e92:	89a3      	ldrh	r3, [r4, #12]
   26e94:	4a14      	ldr	r2, [pc, #80]	; (26ee8 <__ssputs_r+0xc0>)
   26e96:	401a      	ands	r2, r3
   26e98:	2380      	movs	r3, #128	; 0x80
   26e9a:	4313      	orrs	r3, r2
   26e9c:	81a3      	strh	r3, [r4, #12]
   26e9e:	9b02      	ldr	r3, [sp, #8]
   26ea0:	6126      	str	r6, [r4, #16]
   26ea2:	18f6      	adds	r6, r6, r3
   26ea4:	6026      	str	r6, [r4, #0]
   26ea6:	6165      	str	r5, [r4, #20]
   26ea8:	9e01      	ldr	r6, [sp, #4]
   26eaa:	1aed      	subs	r5, r5, r3
   26eac:	60a5      	str	r5, [r4, #8]
   26eae:	9b01      	ldr	r3, [sp, #4]
   26eb0:	42b3      	cmp	r3, r6
   26eb2:	d200      	bcs.n	26eb6 <__ssputs_r+0x8e>
   26eb4:	001e      	movs	r6, r3
   26eb6:	0032      	movs	r2, r6
   26eb8:	9903      	ldr	r1, [sp, #12]
   26eba:	6820      	ldr	r0, [r4, #0]
   26ebc:	f7ff f9b3 	bl	26226 <memmove>
   26ec0:	68a3      	ldr	r3, [r4, #8]
   26ec2:	2000      	movs	r0, #0
   26ec4:	1b9b      	subs	r3, r3, r6
   26ec6:	60a3      	str	r3, [r4, #8]
   26ec8:	6823      	ldr	r3, [r4, #0]
   26eca:	199e      	adds	r6, r3, r6
   26ecc:	6026      	str	r6, [r4, #0]
   26ece:	e7da      	b.n	26e86 <__ssputs_r+0x5e>
   26ed0:	002a      	movs	r2, r5
   26ed2:	0038      	movs	r0, r7
   26ed4:	f000 fb65 	bl	275a2 <_realloc_r>
   26ed8:	1e06      	subs	r6, r0, #0
   26eda:	d1e0      	bne.n	26e9e <__ssputs_r+0x76>
   26edc:	6921      	ldr	r1, [r4, #16]
   26ede:	0038      	movs	r0, r7
   26ee0:	f7ff f9bc 	bl	2625c <_free_r>
   26ee4:	e7c7      	b.n	26e76 <__ssputs_r+0x4e>
   26ee6:	46c0      	nop			; (mov r8, r8)
   26ee8:	fffffb7f 	.word	0xfffffb7f

00026eec <_svfiprintf_r>:
   26eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   26eee:	b09f      	sub	sp, #124	; 0x7c
   26ef0:	9002      	str	r0, [sp, #8]
   26ef2:	9305      	str	r3, [sp, #20]
   26ef4:	898b      	ldrh	r3, [r1, #12]
   26ef6:	000f      	movs	r7, r1
   26ef8:	0016      	movs	r6, r2
   26efa:	061b      	lsls	r3, r3, #24
   26efc:	d511      	bpl.n	26f22 <_svfiprintf_r+0x36>
   26efe:	690b      	ldr	r3, [r1, #16]
   26f00:	2b00      	cmp	r3, #0
   26f02:	d10e      	bne.n	26f22 <_svfiprintf_r+0x36>
   26f04:	2140      	movs	r1, #64	; 0x40
   26f06:	f7ff f9f3 	bl	262f0 <_malloc_r>
   26f0a:	6038      	str	r0, [r7, #0]
   26f0c:	6138      	str	r0, [r7, #16]
   26f0e:	2800      	cmp	r0, #0
   26f10:	d105      	bne.n	26f1e <_svfiprintf_r+0x32>
   26f12:	230c      	movs	r3, #12
   26f14:	9a02      	ldr	r2, [sp, #8]
   26f16:	3801      	subs	r0, #1
   26f18:	6013      	str	r3, [r2, #0]
   26f1a:	b01f      	add	sp, #124	; 0x7c
   26f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26f1e:	2340      	movs	r3, #64	; 0x40
   26f20:	617b      	str	r3, [r7, #20]
   26f22:	2300      	movs	r3, #0
   26f24:	ad06      	add	r5, sp, #24
   26f26:	616b      	str	r3, [r5, #20]
   26f28:	3320      	adds	r3, #32
   26f2a:	766b      	strb	r3, [r5, #25]
   26f2c:	3310      	adds	r3, #16
   26f2e:	76ab      	strb	r3, [r5, #26]
   26f30:	0034      	movs	r4, r6
   26f32:	7823      	ldrb	r3, [r4, #0]
   26f34:	2b00      	cmp	r3, #0
   26f36:	d147      	bne.n	26fc8 <_svfiprintf_r+0xdc>
   26f38:	1ba3      	subs	r3, r4, r6
   26f3a:	9304      	str	r3, [sp, #16]
   26f3c:	d00d      	beq.n	26f5a <_svfiprintf_r+0x6e>
   26f3e:	1ba3      	subs	r3, r4, r6
   26f40:	0032      	movs	r2, r6
   26f42:	0039      	movs	r1, r7
   26f44:	9802      	ldr	r0, [sp, #8]
   26f46:	f7ff ff6f 	bl	26e28 <__ssputs_r>
   26f4a:	1c43      	adds	r3, r0, #1
   26f4c:	d100      	bne.n	26f50 <_svfiprintf_r+0x64>
   26f4e:	e0b5      	b.n	270bc <_svfiprintf_r+0x1d0>
   26f50:	696a      	ldr	r2, [r5, #20]
   26f52:	9b04      	ldr	r3, [sp, #16]
   26f54:	4694      	mov	ip, r2
   26f56:	4463      	add	r3, ip
   26f58:	616b      	str	r3, [r5, #20]
   26f5a:	7823      	ldrb	r3, [r4, #0]
   26f5c:	2b00      	cmp	r3, #0
   26f5e:	d100      	bne.n	26f62 <_svfiprintf_r+0x76>
   26f60:	e0ac      	b.n	270bc <_svfiprintf_r+0x1d0>
   26f62:	2201      	movs	r2, #1
   26f64:	2300      	movs	r3, #0
   26f66:	4252      	negs	r2, r2
   26f68:	606a      	str	r2, [r5, #4]
   26f6a:	a902      	add	r1, sp, #8
   26f6c:	3254      	adds	r2, #84	; 0x54
   26f6e:	1852      	adds	r2, r2, r1
   26f70:	3401      	adds	r4, #1
   26f72:	602b      	str	r3, [r5, #0]
   26f74:	60eb      	str	r3, [r5, #12]
   26f76:	60ab      	str	r3, [r5, #8]
   26f78:	7013      	strb	r3, [r2, #0]
   26f7a:	65ab      	str	r3, [r5, #88]	; 0x58
   26f7c:	4e58      	ldr	r6, [pc, #352]	; (270e0 <_svfiprintf_r+0x1f4>)
   26f7e:	2205      	movs	r2, #5
   26f80:	7821      	ldrb	r1, [r4, #0]
   26f82:	0030      	movs	r0, r6
   26f84:	f000 fb02 	bl	2758c <memchr>
   26f88:	1c62      	adds	r2, r4, #1
   26f8a:	2800      	cmp	r0, #0
   26f8c:	d120      	bne.n	26fd0 <_svfiprintf_r+0xe4>
   26f8e:	6829      	ldr	r1, [r5, #0]
   26f90:	06cb      	lsls	r3, r1, #27
   26f92:	d504      	bpl.n	26f9e <_svfiprintf_r+0xb2>
   26f94:	2353      	movs	r3, #83	; 0x53
   26f96:	ae02      	add	r6, sp, #8
   26f98:	3020      	adds	r0, #32
   26f9a:	199b      	adds	r3, r3, r6
   26f9c:	7018      	strb	r0, [r3, #0]
   26f9e:	070b      	lsls	r3, r1, #28
   26fa0:	d504      	bpl.n	26fac <_svfiprintf_r+0xc0>
   26fa2:	2353      	movs	r3, #83	; 0x53
   26fa4:	202b      	movs	r0, #43	; 0x2b
   26fa6:	ae02      	add	r6, sp, #8
   26fa8:	199b      	adds	r3, r3, r6
   26faa:	7018      	strb	r0, [r3, #0]
   26fac:	7823      	ldrb	r3, [r4, #0]
   26fae:	2b2a      	cmp	r3, #42	; 0x2a
   26fb0:	d016      	beq.n	26fe0 <_svfiprintf_r+0xf4>
   26fb2:	2000      	movs	r0, #0
   26fb4:	210a      	movs	r1, #10
   26fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26fb8:	7822      	ldrb	r2, [r4, #0]
   26fba:	3a30      	subs	r2, #48	; 0x30
   26fbc:	2a09      	cmp	r2, #9
   26fbe:	d955      	bls.n	2706c <_svfiprintf_r+0x180>
   26fc0:	2800      	cmp	r0, #0
   26fc2:	d015      	beq.n	26ff0 <_svfiprintf_r+0x104>
   26fc4:	9309      	str	r3, [sp, #36]	; 0x24
   26fc6:	e013      	b.n	26ff0 <_svfiprintf_r+0x104>
   26fc8:	2b25      	cmp	r3, #37	; 0x25
   26fca:	d0b5      	beq.n	26f38 <_svfiprintf_r+0x4c>
   26fcc:	3401      	adds	r4, #1
   26fce:	e7b0      	b.n	26f32 <_svfiprintf_r+0x46>
   26fd0:	2301      	movs	r3, #1
   26fd2:	1b80      	subs	r0, r0, r6
   26fd4:	4083      	lsls	r3, r0
   26fd6:	6829      	ldr	r1, [r5, #0]
   26fd8:	0014      	movs	r4, r2
   26fda:	430b      	orrs	r3, r1
   26fdc:	602b      	str	r3, [r5, #0]
   26fde:	e7cd      	b.n	26f7c <_svfiprintf_r+0x90>
   26fe0:	9b05      	ldr	r3, [sp, #20]
   26fe2:	1d18      	adds	r0, r3, #4
   26fe4:	681b      	ldr	r3, [r3, #0]
   26fe6:	9005      	str	r0, [sp, #20]
   26fe8:	2b00      	cmp	r3, #0
   26fea:	db39      	blt.n	27060 <_svfiprintf_r+0x174>
   26fec:	9309      	str	r3, [sp, #36]	; 0x24
   26fee:	0014      	movs	r4, r2
   26ff0:	7823      	ldrb	r3, [r4, #0]
   26ff2:	2b2e      	cmp	r3, #46	; 0x2e
   26ff4:	d10b      	bne.n	2700e <_svfiprintf_r+0x122>
   26ff6:	7863      	ldrb	r3, [r4, #1]
   26ff8:	1c62      	adds	r2, r4, #1
   26ffa:	2b2a      	cmp	r3, #42	; 0x2a
   26ffc:	d13e      	bne.n	2707c <_svfiprintf_r+0x190>
   26ffe:	9b05      	ldr	r3, [sp, #20]
   27000:	3402      	adds	r4, #2
   27002:	1d1a      	adds	r2, r3, #4
   27004:	681b      	ldr	r3, [r3, #0]
   27006:	9205      	str	r2, [sp, #20]
   27008:	2b00      	cmp	r3, #0
   2700a:	db34      	blt.n	27076 <_svfiprintf_r+0x18a>
   2700c:	9307      	str	r3, [sp, #28]
   2700e:	4e35      	ldr	r6, [pc, #212]	; (270e4 <_svfiprintf_r+0x1f8>)
   27010:	7821      	ldrb	r1, [r4, #0]
   27012:	2203      	movs	r2, #3
   27014:	0030      	movs	r0, r6
   27016:	f000 fab9 	bl	2758c <memchr>
   2701a:	2800      	cmp	r0, #0
   2701c:	d006      	beq.n	2702c <_svfiprintf_r+0x140>
   2701e:	2340      	movs	r3, #64	; 0x40
   27020:	1b80      	subs	r0, r0, r6
   27022:	4083      	lsls	r3, r0
   27024:	682a      	ldr	r2, [r5, #0]
   27026:	3401      	adds	r4, #1
   27028:	4313      	orrs	r3, r2
   2702a:	602b      	str	r3, [r5, #0]
   2702c:	7821      	ldrb	r1, [r4, #0]
   2702e:	2206      	movs	r2, #6
   27030:	482d      	ldr	r0, [pc, #180]	; (270e8 <_svfiprintf_r+0x1fc>)
   27032:	1c66      	adds	r6, r4, #1
   27034:	7629      	strb	r1, [r5, #24]
   27036:	f000 faa9 	bl	2758c <memchr>
   2703a:	2800      	cmp	r0, #0
   2703c:	d046      	beq.n	270cc <_svfiprintf_r+0x1e0>
   2703e:	4b2b      	ldr	r3, [pc, #172]	; (270ec <_svfiprintf_r+0x200>)
   27040:	2b00      	cmp	r3, #0
   27042:	d12f      	bne.n	270a4 <_svfiprintf_r+0x1b8>
   27044:	6829      	ldr	r1, [r5, #0]
   27046:	9b05      	ldr	r3, [sp, #20]
   27048:	2207      	movs	r2, #7
   2704a:	05c9      	lsls	r1, r1, #23
   2704c:	d528      	bpl.n	270a0 <_svfiprintf_r+0x1b4>
   2704e:	189b      	adds	r3, r3, r2
   27050:	4393      	bics	r3, r2
   27052:	3308      	adds	r3, #8
   27054:	9305      	str	r3, [sp, #20]
   27056:	696b      	ldr	r3, [r5, #20]
   27058:	9a03      	ldr	r2, [sp, #12]
   2705a:	189b      	adds	r3, r3, r2
   2705c:	616b      	str	r3, [r5, #20]
   2705e:	e767      	b.n	26f30 <_svfiprintf_r+0x44>
   27060:	425b      	negs	r3, r3
   27062:	60eb      	str	r3, [r5, #12]
   27064:	2302      	movs	r3, #2
   27066:	430b      	orrs	r3, r1
   27068:	602b      	str	r3, [r5, #0]
   2706a:	e7c0      	b.n	26fee <_svfiprintf_r+0x102>
   2706c:	434b      	muls	r3, r1
   2706e:	3401      	adds	r4, #1
   27070:	189b      	adds	r3, r3, r2
   27072:	2001      	movs	r0, #1
   27074:	e7a0      	b.n	26fb8 <_svfiprintf_r+0xcc>
   27076:	2301      	movs	r3, #1
   27078:	425b      	negs	r3, r3
   2707a:	e7c7      	b.n	2700c <_svfiprintf_r+0x120>
   2707c:	2300      	movs	r3, #0
   2707e:	0014      	movs	r4, r2
   27080:	200a      	movs	r0, #10
   27082:	001a      	movs	r2, r3
   27084:	606b      	str	r3, [r5, #4]
   27086:	7821      	ldrb	r1, [r4, #0]
   27088:	3930      	subs	r1, #48	; 0x30
   2708a:	2909      	cmp	r1, #9
   2708c:	d903      	bls.n	27096 <_svfiprintf_r+0x1aa>
   2708e:	2b00      	cmp	r3, #0
   27090:	d0bd      	beq.n	2700e <_svfiprintf_r+0x122>
   27092:	9207      	str	r2, [sp, #28]
   27094:	e7bb      	b.n	2700e <_svfiprintf_r+0x122>
   27096:	4342      	muls	r2, r0
   27098:	3401      	adds	r4, #1
   2709a:	1852      	adds	r2, r2, r1
   2709c:	2301      	movs	r3, #1
   2709e:	e7f2      	b.n	27086 <_svfiprintf_r+0x19a>
   270a0:	3307      	adds	r3, #7
   270a2:	e7d5      	b.n	27050 <_svfiprintf_r+0x164>
   270a4:	ab05      	add	r3, sp, #20
   270a6:	9300      	str	r3, [sp, #0]
   270a8:	003a      	movs	r2, r7
   270aa:	4b11      	ldr	r3, [pc, #68]	; (270f0 <_svfiprintf_r+0x204>)
   270ac:	0029      	movs	r1, r5
   270ae:	9802      	ldr	r0, [sp, #8]
   270b0:	e000      	b.n	270b4 <_svfiprintf_r+0x1c8>
   270b2:	bf00      	nop
   270b4:	9003      	str	r0, [sp, #12]
   270b6:	9b03      	ldr	r3, [sp, #12]
   270b8:	3301      	adds	r3, #1
   270ba:	d1cc      	bne.n	27056 <_svfiprintf_r+0x16a>
   270bc:	89bb      	ldrh	r3, [r7, #12]
   270be:	980b      	ldr	r0, [sp, #44]	; 0x2c
   270c0:	065b      	lsls	r3, r3, #25
   270c2:	d400      	bmi.n	270c6 <_svfiprintf_r+0x1da>
   270c4:	e729      	b.n	26f1a <_svfiprintf_r+0x2e>
   270c6:	2001      	movs	r0, #1
   270c8:	4240      	negs	r0, r0
   270ca:	e726      	b.n	26f1a <_svfiprintf_r+0x2e>
   270cc:	ab05      	add	r3, sp, #20
   270ce:	9300      	str	r3, [sp, #0]
   270d0:	003a      	movs	r2, r7
   270d2:	4b07      	ldr	r3, [pc, #28]	; (270f0 <_svfiprintf_r+0x204>)
   270d4:	0029      	movs	r1, r5
   270d6:	9802      	ldr	r0, [sp, #8]
   270d8:	f000 f87a 	bl	271d0 <_printf_i>
   270dc:	e7ea      	b.n	270b4 <_svfiprintf_r+0x1c8>
   270de:	46c0      	nop			; (mov r8, r8)
   270e0:	0002af4e 	.word	0x0002af4e
   270e4:	0002af54 	.word	0x0002af54
   270e8:	0002af58 	.word	0x0002af58
   270ec:	00000000 	.word	0x00000000
   270f0:	00026e29 	.word	0x00026e29

000270f4 <_printf_common>:
   270f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   270f6:	0015      	movs	r5, r2
   270f8:	9301      	str	r3, [sp, #4]
   270fa:	688a      	ldr	r2, [r1, #8]
   270fc:	690b      	ldr	r3, [r1, #16]
   270fe:	9000      	str	r0, [sp, #0]
   27100:	000c      	movs	r4, r1
   27102:	4293      	cmp	r3, r2
   27104:	da00      	bge.n	27108 <_printf_common+0x14>
   27106:	0013      	movs	r3, r2
   27108:	0022      	movs	r2, r4
   2710a:	602b      	str	r3, [r5, #0]
   2710c:	3243      	adds	r2, #67	; 0x43
   2710e:	7812      	ldrb	r2, [r2, #0]
   27110:	2a00      	cmp	r2, #0
   27112:	d001      	beq.n	27118 <_printf_common+0x24>
   27114:	3301      	adds	r3, #1
   27116:	602b      	str	r3, [r5, #0]
   27118:	6823      	ldr	r3, [r4, #0]
   2711a:	069b      	lsls	r3, r3, #26
   2711c:	d502      	bpl.n	27124 <_printf_common+0x30>
   2711e:	682b      	ldr	r3, [r5, #0]
   27120:	3302      	adds	r3, #2
   27122:	602b      	str	r3, [r5, #0]
   27124:	2706      	movs	r7, #6
   27126:	6823      	ldr	r3, [r4, #0]
   27128:	401f      	ands	r7, r3
   2712a:	d027      	beq.n	2717c <_printf_common+0x88>
   2712c:	0023      	movs	r3, r4
   2712e:	3343      	adds	r3, #67	; 0x43
   27130:	781b      	ldrb	r3, [r3, #0]
   27132:	1e5a      	subs	r2, r3, #1
   27134:	4193      	sbcs	r3, r2
   27136:	6822      	ldr	r2, [r4, #0]
   27138:	0692      	lsls	r2, r2, #26
   2713a:	d430      	bmi.n	2719e <_printf_common+0xaa>
   2713c:	0022      	movs	r2, r4
   2713e:	9901      	ldr	r1, [sp, #4]
   27140:	3243      	adds	r2, #67	; 0x43
   27142:	9800      	ldr	r0, [sp, #0]
   27144:	9e08      	ldr	r6, [sp, #32]
   27146:	47b0      	blx	r6
   27148:	1c43      	adds	r3, r0, #1
   2714a:	d025      	beq.n	27198 <_printf_common+0xa4>
   2714c:	2306      	movs	r3, #6
   2714e:	6820      	ldr	r0, [r4, #0]
   27150:	682a      	ldr	r2, [r5, #0]
   27152:	68e1      	ldr	r1, [r4, #12]
   27154:	4003      	ands	r3, r0
   27156:	2500      	movs	r5, #0
   27158:	2b04      	cmp	r3, #4
   2715a:	d103      	bne.n	27164 <_printf_common+0x70>
   2715c:	1a8d      	subs	r5, r1, r2
   2715e:	43eb      	mvns	r3, r5
   27160:	17db      	asrs	r3, r3, #31
   27162:	401d      	ands	r5, r3
   27164:	68a3      	ldr	r3, [r4, #8]
   27166:	6922      	ldr	r2, [r4, #16]
   27168:	4293      	cmp	r3, r2
   2716a:	dd01      	ble.n	27170 <_printf_common+0x7c>
   2716c:	1a9b      	subs	r3, r3, r2
   2716e:	18ed      	adds	r5, r5, r3
   27170:	2700      	movs	r7, #0
   27172:	42bd      	cmp	r5, r7
   27174:	d120      	bne.n	271b8 <_printf_common+0xc4>
   27176:	2000      	movs	r0, #0
   27178:	e010      	b.n	2719c <_printf_common+0xa8>
   2717a:	3701      	adds	r7, #1
   2717c:	68e3      	ldr	r3, [r4, #12]
   2717e:	682a      	ldr	r2, [r5, #0]
   27180:	1a9b      	subs	r3, r3, r2
   27182:	429f      	cmp	r7, r3
   27184:	dad2      	bge.n	2712c <_printf_common+0x38>
   27186:	0022      	movs	r2, r4
   27188:	2301      	movs	r3, #1
   2718a:	3219      	adds	r2, #25
   2718c:	9901      	ldr	r1, [sp, #4]
   2718e:	9800      	ldr	r0, [sp, #0]
   27190:	9e08      	ldr	r6, [sp, #32]
   27192:	47b0      	blx	r6
   27194:	1c43      	adds	r3, r0, #1
   27196:	d1f0      	bne.n	2717a <_printf_common+0x86>
   27198:	2001      	movs	r0, #1
   2719a:	4240      	negs	r0, r0
   2719c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   2719e:	2030      	movs	r0, #48	; 0x30
   271a0:	18e1      	adds	r1, r4, r3
   271a2:	3143      	adds	r1, #67	; 0x43
   271a4:	7008      	strb	r0, [r1, #0]
   271a6:	0021      	movs	r1, r4
   271a8:	1c5a      	adds	r2, r3, #1
   271aa:	3145      	adds	r1, #69	; 0x45
   271ac:	7809      	ldrb	r1, [r1, #0]
   271ae:	18a2      	adds	r2, r4, r2
   271b0:	3243      	adds	r2, #67	; 0x43
   271b2:	3302      	adds	r3, #2
   271b4:	7011      	strb	r1, [r2, #0]
   271b6:	e7c1      	b.n	2713c <_printf_common+0x48>
   271b8:	0022      	movs	r2, r4
   271ba:	2301      	movs	r3, #1
   271bc:	321a      	adds	r2, #26
   271be:	9901      	ldr	r1, [sp, #4]
   271c0:	9800      	ldr	r0, [sp, #0]
   271c2:	9e08      	ldr	r6, [sp, #32]
   271c4:	47b0      	blx	r6
   271c6:	1c43      	adds	r3, r0, #1
   271c8:	d0e6      	beq.n	27198 <_printf_common+0xa4>
   271ca:	3701      	adds	r7, #1
   271cc:	e7d1      	b.n	27172 <_printf_common+0x7e>
	...

000271d0 <_printf_i>:
   271d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   271d2:	b08b      	sub	sp, #44	; 0x2c
   271d4:	9206      	str	r2, [sp, #24]
   271d6:	000a      	movs	r2, r1
   271d8:	3243      	adds	r2, #67	; 0x43
   271da:	9307      	str	r3, [sp, #28]
   271dc:	9005      	str	r0, [sp, #20]
   271de:	9204      	str	r2, [sp, #16]
   271e0:	7e0a      	ldrb	r2, [r1, #24]
   271e2:	000c      	movs	r4, r1
   271e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   271e6:	2a6e      	cmp	r2, #110	; 0x6e
   271e8:	d100      	bne.n	271ec <_printf_i+0x1c>
   271ea:	e08f      	b.n	2730c <_printf_i+0x13c>
   271ec:	d817      	bhi.n	2721e <_printf_i+0x4e>
   271ee:	2a63      	cmp	r2, #99	; 0x63
   271f0:	d02c      	beq.n	2724c <_printf_i+0x7c>
   271f2:	d808      	bhi.n	27206 <_printf_i+0x36>
   271f4:	2a00      	cmp	r2, #0
   271f6:	d100      	bne.n	271fa <_printf_i+0x2a>
   271f8:	e099      	b.n	2732e <_printf_i+0x15e>
   271fa:	2a58      	cmp	r2, #88	; 0x58
   271fc:	d054      	beq.n	272a8 <_printf_i+0xd8>
   271fe:	0026      	movs	r6, r4
   27200:	3642      	adds	r6, #66	; 0x42
   27202:	7032      	strb	r2, [r6, #0]
   27204:	e029      	b.n	2725a <_printf_i+0x8a>
   27206:	2a64      	cmp	r2, #100	; 0x64
   27208:	d001      	beq.n	2720e <_printf_i+0x3e>
   2720a:	2a69      	cmp	r2, #105	; 0x69
   2720c:	d1f7      	bne.n	271fe <_printf_i+0x2e>
   2720e:	6821      	ldr	r1, [r4, #0]
   27210:	681a      	ldr	r2, [r3, #0]
   27212:	0608      	lsls	r0, r1, #24
   27214:	d523      	bpl.n	2725e <_printf_i+0x8e>
   27216:	1d11      	adds	r1, r2, #4
   27218:	6019      	str	r1, [r3, #0]
   2721a:	6815      	ldr	r5, [r2, #0]
   2721c:	e025      	b.n	2726a <_printf_i+0x9a>
   2721e:	2a73      	cmp	r2, #115	; 0x73
   27220:	d100      	bne.n	27224 <_printf_i+0x54>
   27222:	e088      	b.n	27336 <_printf_i+0x166>
   27224:	d808      	bhi.n	27238 <_printf_i+0x68>
   27226:	2a6f      	cmp	r2, #111	; 0x6f
   27228:	d029      	beq.n	2727e <_printf_i+0xae>
   2722a:	2a70      	cmp	r2, #112	; 0x70
   2722c:	d1e7      	bne.n	271fe <_printf_i+0x2e>
   2722e:	2220      	movs	r2, #32
   27230:	6809      	ldr	r1, [r1, #0]
   27232:	430a      	orrs	r2, r1
   27234:	6022      	str	r2, [r4, #0]
   27236:	e003      	b.n	27240 <_printf_i+0x70>
   27238:	2a75      	cmp	r2, #117	; 0x75
   2723a:	d020      	beq.n	2727e <_printf_i+0xae>
   2723c:	2a78      	cmp	r2, #120	; 0x78
   2723e:	d1de      	bne.n	271fe <_printf_i+0x2e>
   27240:	0022      	movs	r2, r4
   27242:	2178      	movs	r1, #120	; 0x78
   27244:	3245      	adds	r2, #69	; 0x45
   27246:	7011      	strb	r1, [r2, #0]
   27248:	4a6c      	ldr	r2, [pc, #432]	; (273fc <_printf_i+0x22c>)
   2724a:	e030      	b.n	272ae <_printf_i+0xde>
   2724c:	000e      	movs	r6, r1
   2724e:	681a      	ldr	r2, [r3, #0]
   27250:	3642      	adds	r6, #66	; 0x42
   27252:	1d11      	adds	r1, r2, #4
   27254:	6019      	str	r1, [r3, #0]
   27256:	6813      	ldr	r3, [r2, #0]
   27258:	7033      	strb	r3, [r6, #0]
   2725a:	2301      	movs	r3, #1
   2725c:	e079      	b.n	27352 <_printf_i+0x182>
   2725e:	0649      	lsls	r1, r1, #25
   27260:	d5d9      	bpl.n	27216 <_printf_i+0x46>
   27262:	1d11      	adds	r1, r2, #4
   27264:	6019      	str	r1, [r3, #0]
   27266:	2300      	movs	r3, #0
   27268:	5ed5      	ldrsh	r5, [r2, r3]
   2726a:	2d00      	cmp	r5, #0
   2726c:	da03      	bge.n	27276 <_printf_i+0xa6>
   2726e:	232d      	movs	r3, #45	; 0x2d
   27270:	9a04      	ldr	r2, [sp, #16]
   27272:	426d      	negs	r5, r5
   27274:	7013      	strb	r3, [r2, #0]
   27276:	4b62      	ldr	r3, [pc, #392]	; (27400 <_printf_i+0x230>)
   27278:	270a      	movs	r7, #10
   2727a:	9303      	str	r3, [sp, #12]
   2727c:	e02f      	b.n	272de <_printf_i+0x10e>
   2727e:	6820      	ldr	r0, [r4, #0]
   27280:	6819      	ldr	r1, [r3, #0]
   27282:	0605      	lsls	r5, r0, #24
   27284:	d503      	bpl.n	2728e <_printf_i+0xbe>
   27286:	1d08      	adds	r0, r1, #4
   27288:	6018      	str	r0, [r3, #0]
   2728a:	680d      	ldr	r5, [r1, #0]
   2728c:	e005      	b.n	2729a <_printf_i+0xca>
   2728e:	0640      	lsls	r0, r0, #25
   27290:	d5f9      	bpl.n	27286 <_printf_i+0xb6>
   27292:	680d      	ldr	r5, [r1, #0]
   27294:	1d08      	adds	r0, r1, #4
   27296:	6018      	str	r0, [r3, #0]
   27298:	b2ad      	uxth	r5, r5
   2729a:	4b59      	ldr	r3, [pc, #356]	; (27400 <_printf_i+0x230>)
   2729c:	2708      	movs	r7, #8
   2729e:	9303      	str	r3, [sp, #12]
   272a0:	2a6f      	cmp	r2, #111	; 0x6f
   272a2:	d018      	beq.n	272d6 <_printf_i+0x106>
   272a4:	270a      	movs	r7, #10
   272a6:	e016      	b.n	272d6 <_printf_i+0x106>
   272a8:	3145      	adds	r1, #69	; 0x45
   272aa:	700a      	strb	r2, [r1, #0]
   272ac:	4a54      	ldr	r2, [pc, #336]	; (27400 <_printf_i+0x230>)
   272ae:	9203      	str	r2, [sp, #12]
   272b0:	681a      	ldr	r2, [r3, #0]
   272b2:	6821      	ldr	r1, [r4, #0]
   272b4:	1d10      	adds	r0, r2, #4
   272b6:	6018      	str	r0, [r3, #0]
   272b8:	6815      	ldr	r5, [r2, #0]
   272ba:	0608      	lsls	r0, r1, #24
   272bc:	d522      	bpl.n	27304 <_printf_i+0x134>
   272be:	07cb      	lsls	r3, r1, #31
   272c0:	d502      	bpl.n	272c8 <_printf_i+0xf8>
   272c2:	2320      	movs	r3, #32
   272c4:	4319      	orrs	r1, r3
   272c6:	6021      	str	r1, [r4, #0]
   272c8:	2710      	movs	r7, #16
   272ca:	2d00      	cmp	r5, #0
   272cc:	d103      	bne.n	272d6 <_printf_i+0x106>
   272ce:	2320      	movs	r3, #32
   272d0:	6822      	ldr	r2, [r4, #0]
   272d2:	439a      	bics	r2, r3
   272d4:	6022      	str	r2, [r4, #0]
   272d6:	0023      	movs	r3, r4
   272d8:	2200      	movs	r2, #0
   272da:	3343      	adds	r3, #67	; 0x43
   272dc:	701a      	strb	r2, [r3, #0]
   272de:	6863      	ldr	r3, [r4, #4]
   272e0:	60a3      	str	r3, [r4, #8]
   272e2:	2b00      	cmp	r3, #0
   272e4:	db5c      	blt.n	273a0 <_printf_i+0x1d0>
   272e6:	2204      	movs	r2, #4
   272e8:	6821      	ldr	r1, [r4, #0]
   272ea:	4391      	bics	r1, r2
   272ec:	6021      	str	r1, [r4, #0]
   272ee:	2d00      	cmp	r5, #0
   272f0:	d158      	bne.n	273a4 <_printf_i+0x1d4>
   272f2:	9e04      	ldr	r6, [sp, #16]
   272f4:	2b00      	cmp	r3, #0
   272f6:	d064      	beq.n	273c2 <_printf_i+0x1f2>
   272f8:	0026      	movs	r6, r4
   272fa:	9b03      	ldr	r3, [sp, #12]
   272fc:	3642      	adds	r6, #66	; 0x42
   272fe:	781b      	ldrb	r3, [r3, #0]
   27300:	7033      	strb	r3, [r6, #0]
   27302:	e05e      	b.n	273c2 <_printf_i+0x1f2>
   27304:	0648      	lsls	r0, r1, #25
   27306:	d5da      	bpl.n	272be <_printf_i+0xee>
   27308:	b2ad      	uxth	r5, r5
   2730a:	e7d8      	b.n	272be <_printf_i+0xee>
   2730c:	6809      	ldr	r1, [r1, #0]
   2730e:	681a      	ldr	r2, [r3, #0]
   27310:	0608      	lsls	r0, r1, #24
   27312:	d505      	bpl.n	27320 <_printf_i+0x150>
   27314:	1d11      	adds	r1, r2, #4
   27316:	6019      	str	r1, [r3, #0]
   27318:	6813      	ldr	r3, [r2, #0]
   2731a:	6962      	ldr	r2, [r4, #20]
   2731c:	601a      	str	r2, [r3, #0]
   2731e:	e006      	b.n	2732e <_printf_i+0x15e>
   27320:	0649      	lsls	r1, r1, #25
   27322:	d5f7      	bpl.n	27314 <_printf_i+0x144>
   27324:	1d11      	adds	r1, r2, #4
   27326:	6019      	str	r1, [r3, #0]
   27328:	6813      	ldr	r3, [r2, #0]
   2732a:	8aa2      	ldrh	r2, [r4, #20]
   2732c:	801a      	strh	r2, [r3, #0]
   2732e:	2300      	movs	r3, #0
   27330:	9e04      	ldr	r6, [sp, #16]
   27332:	6123      	str	r3, [r4, #16]
   27334:	e054      	b.n	273e0 <_printf_i+0x210>
   27336:	681a      	ldr	r2, [r3, #0]
   27338:	1d11      	adds	r1, r2, #4
   2733a:	6019      	str	r1, [r3, #0]
   2733c:	6816      	ldr	r6, [r2, #0]
   2733e:	2100      	movs	r1, #0
   27340:	6862      	ldr	r2, [r4, #4]
   27342:	0030      	movs	r0, r6
   27344:	f000 f922 	bl	2758c <memchr>
   27348:	2800      	cmp	r0, #0
   2734a:	d001      	beq.n	27350 <_printf_i+0x180>
   2734c:	1b80      	subs	r0, r0, r6
   2734e:	6060      	str	r0, [r4, #4]
   27350:	6863      	ldr	r3, [r4, #4]
   27352:	6123      	str	r3, [r4, #16]
   27354:	2300      	movs	r3, #0
   27356:	9a04      	ldr	r2, [sp, #16]
   27358:	7013      	strb	r3, [r2, #0]
   2735a:	e041      	b.n	273e0 <_printf_i+0x210>
   2735c:	6923      	ldr	r3, [r4, #16]
   2735e:	0032      	movs	r2, r6
   27360:	9906      	ldr	r1, [sp, #24]
   27362:	9805      	ldr	r0, [sp, #20]
   27364:	9d07      	ldr	r5, [sp, #28]
   27366:	47a8      	blx	r5
   27368:	1c43      	adds	r3, r0, #1
   2736a:	d043      	beq.n	273f4 <_printf_i+0x224>
   2736c:	6823      	ldr	r3, [r4, #0]
   2736e:	2500      	movs	r5, #0
   27370:	079b      	lsls	r3, r3, #30
   27372:	d40f      	bmi.n	27394 <_printf_i+0x1c4>
   27374:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27376:	68e0      	ldr	r0, [r4, #12]
   27378:	4298      	cmp	r0, r3
   2737a:	da3d      	bge.n	273f8 <_printf_i+0x228>
   2737c:	0018      	movs	r0, r3
   2737e:	e03b      	b.n	273f8 <_printf_i+0x228>
   27380:	0022      	movs	r2, r4
   27382:	2301      	movs	r3, #1
   27384:	3219      	adds	r2, #25
   27386:	9906      	ldr	r1, [sp, #24]
   27388:	9805      	ldr	r0, [sp, #20]
   2738a:	9e07      	ldr	r6, [sp, #28]
   2738c:	47b0      	blx	r6
   2738e:	1c43      	adds	r3, r0, #1
   27390:	d030      	beq.n	273f4 <_printf_i+0x224>
   27392:	3501      	adds	r5, #1
   27394:	68e3      	ldr	r3, [r4, #12]
   27396:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27398:	1a9b      	subs	r3, r3, r2
   2739a:	429d      	cmp	r5, r3
   2739c:	dbf0      	blt.n	27380 <_printf_i+0x1b0>
   2739e:	e7e9      	b.n	27374 <_printf_i+0x1a4>
   273a0:	2d00      	cmp	r5, #0
   273a2:	d0a9      	beq.n	272f8 <_printf_i+0x128>
   273a4:	9e04      	ldr	r6, [sp, #16]
   273a6:	0028      	movs	r0, r5
   273a8:	0039      	movs	r1, r7
   273aa:	f7fc fe9f 	bl	240ec <__aeabi_uidivmod>
   273ae:	9b03      	ldr	r3, [sp, #12]
   273b0:	3e01      	subs	r6, #1
   273b2:	5c5b      	ldrb	r3, [r3, r1]
   273b4:	0028      	movs	r0, r5
   273b6:	7033      	strb	r3, [r6, #0]
   273b8:	0039      	movs	r1, r7
   273ba:	f7fc fe11 	bl	23fe0 <__udivsi3>
   273be:	1e05      	subs	r5, r0, #0
   273c0:	d1f1      	bne.n	273a6 <_printf_i+0x1d6>
   273c2:	2f08      	cmp	r7, #8
   273c4:	d109      	bne.n	273da <_printf_i+0x20a>
   273c6:	6823      	ldr	r3, [r4, #0]
   273c8:	07db      	lsls	r3, r3, #31
   273ca:	d506      	bpl.n	273da <_printf_i+0x20a>
   273cc:	6863      	ldr	r3, [r4, #4]
   273ce:	6922      	ldr	r2, [r4, #16]
   273d0:	4293      	cmp	r3, r2
   273d2:	dc02      	bgt.n	273da <_printf_i+0x20a>
   273d4:	2330      	movs	r3, #48	; 0x30
   273d6:	3e01      	subs	r6, #1
   273d8:	7033      	strb	r3, [r6, #0]
   273da:	9b04      	ldr	r3, [sp, #16]
   273dc:	1b9b      	subs	r3, r3, r6
   273de:	6123      	str	r3, [r4, #16]
   273e0:	9b07      	ldr	r3, [sp, #28]
   273e2:	aa09      	add	r2, sp, #36	; 0x24
   273e4:	9300      	str	r3, [sp, #0]
   273e6:	0021      	movs	r1, r4
   273e8:	9b06      	ldr	r3, [sp, #24]
   273ea:	9805      	ldr	r0, [sp, #20]
   273ec:	f7ff fe82 	bl	270f4 <_printf_common>
   273f0:	1c43      	adds	r3, r0, #1
   273f2:	d1b3      	bne.n	2735c <_printf_i+0x18c>
   273f4:	2001      	movs	r0, #1
   273f6:	4240      	negs	r0, r0
   273f8:	b00b      	add	sp, #44	; 0x2c
   273fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   273fc:	0002af70 	.word	0x0002af70
   27400:	0002af5f 	.word	0x0002af5f

00027404 <__sread>:
   27404:	b570      	push	{r4, r5, r6, lr}
   27406:	000c      	movs	r4, r1
   27408:	250e      	movs	r5, #14
   2740a:	5f49      	ldrsh	r1, [r1, r5]
   2740c:	f000 f8f0 	bl	275f0 <_read_r>
   27410:	2800      	cmp	r0, #0
   27412:	db03      	blt.n	2741c <__sread+0x18>
   27414:	6d63      	ldr	r3, [r4, #84]	; 0x54
   27416:	181b      	adds	r3, r3, r0
   27418:	6563      	str	r3, [r4, #84]	; 0x54
   2741a:	bd70      	pop	{r4, r5, r6, pc}
   2741c:	89a3      	ldrh	r3, [r4, #12]
   2741e:	4a02      	ldr	r2, [pc, #8]	; (27428 <__sread+0x24>)
   27420:	4013      	ands	r3, r2
   27422:	81a3      	strh	r3, [r4, #12]
   27424:	e7f9      	b.n	2741a <__sread+0x16>
   27426:	46c0      	nop			; (mov r8, r8)
   27428:	ffffefff 	.word	0xffffefff

0002742c <__swrite>:
   2742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2742e:	001f      	movs	r7, r3
   27430:	898b      	ldrh	r3, [r1, #12]
   27432:	0005      	movs	r5, r0
   27434:	000c      	movs	r4, r1
   27436:	0016      	movs	r6, r2
   27438:	05db      	lsls	r3, r3, #23
   2743a:	d505      	bpl.n	27448 <__swrite+0x1c>
   2743c:	230e      	movs	r3, #14
   2743e:	5ec9      	ldrsh	r1, [r1, r3]
   27440:	2200      	movs	r2, #0
   27442:	2302      	movs	r3, #2
   27444:	f000 f88e 	bl	27564 <_lseek_r>
   27448:	89a3      	ldrh	r3, [r4, #12]
   2744a:	4a05      	ldr	r2, [pc, #20]	; (27460 <__swrite+0x34>)
   2744c:	0028      	movs	r0, r5
   2744e:	4013      	ands	r3, r2
   27450:	81a3      	strh	r3, [r4, #12]
   27452:	0032      	movs	r2, r6
   27454:	230e      	movs	r3, #14
   27456:	5ee1      	ldrsh	r1, [r4, r3]
   27458:	003b      	movs	r3, r7
   2745a:	f000 f839 	bl	274d0 <_write_r>
   2745e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27460:	ffffefff 	.word	0xffffefff

00027464 <__sseek>:
   27464:	b570      	push	{r4, r5, r6, lr}
   27466:	000c      	movs	r4, r1
   27468:	250e      	movs	r5, #14
   2746a:	5f49      	ldrsh	r1, [r1, r5]
   2746c:	f000 f87a 	bl	27564 <_lseek_r>
   27470:	89a3      	ldrh	r3, [r4, #12]
   27472:	1c42      	adds	r2, r0, #1
   27474:	d103      	bne.n	2747e <__sseek+0x1a>
   27476:	4a05      	ldr	r2, [pc, #20]	; (2748c <__sseek+0x28>)
   27478:	4013      	ands	r3, r2
   2747a:	81a3      	strh	r3, [r4, #12]
   2747c:	bd70      	pop	{r4, r5, r6, pc}
   2747e:	2280      	movs	r2, #128	; 0x80
   27480:	0152      	lsls	r2, r2, #5
   27482:	4313      	orrs	r3, r2
   27484:	81a3      	strh	r3, [r4, #12]
   27486:	6560      	str	r0, [r4, #84]	; 0x54
   27488:	e7f8      	b.n	2747c <__sseek+0x18>
   2748a:	46c0      	nop			; (mov r8, r8)
   2748c:	ffffefff 	.word	0xffffefff

00027490 <__sclose>:
   27490:	b510      	push	{r4, lr}
   27492:	230e      	movs	r3, #14
   27494:	5ec9      	ldrsh	r1, [r1, r3]
   27496:	f000 f82f 	bl	274f8 <_close_r>
   2749a:	bd10      	pop	{r4, pc}

0002749c <strchr>:
   2749c:	b2c9      	uxtb	r1, r1
   2749e:	7803      	ldrb	r3, [r0, #0]
   274a0:	2b00      	cmp	r3, #0
   274a2:	d004      	beq.n	274ae <strchr+0x12>
   274a4:	4299      	cmp	r1, r3
   274a6:	d100      	bne.n	274aa <strchr+0xe>
   274a8:	4770      	bx	lr
   274aa:	3001      	adds	r0, #1
   274ac:	e7f7      	b.n	2749e <strchr+0x2>
   274ae:	424b      	negs	r3, r1
   274b0:	4159      	adcs	r1, r3
   274b2:	4249      	negs	r1, r1
   274b4:	4008      	ands	r0, r1
   274b6:	e7f7      	b.n	274a8 <strchr+0xc>

000274b8 <__ascii_wctomb>:
   274b8:	1e0b      	subs	r3, r1, #0
   274ba:	d004      	beq.n	274c6 <__ascii_wctomb+0xe>
   274bc:	2aff      	cmp	r2, #255	; 0xff
   274be:	d904      	bls.n	274ca <__ascii_wctomb+0x12>
   274c0:	238a      	movs	r3, #138	; 0x8a
   274c2:	6003      	str	r3, [r0, #0]
   274c4:	3b8b      	subs	r3, #139	; 0x8b
   274c6:	0018      	movs	r0, r3
   274c8:	4770      	bx	lr
   274ca:	700a      	strb	r2, [r1, #0]
   274cc:	2301      	movs	r3, #1
   274ce:	e7fa      	b.n	274c6 <__ascii_wctomb+0xe>

000274d0 <_write_r>:
   274d0:	b570      	push	{r4, r5, r6, lr}
   274d2:	0005      	movs	r5, r0
   274d4:	0008      	movs	r0, r1
   274d6:	0011      	movs	r1, r2
   274d8:	2200      	movs	r2, #0
   274da:	4c06      	ldr	r4, [pc, #24]	; (274f4 <_write_r+0x24>)
   274dc:	6022      	str	r2, [r4, #0]
   274de:	001a      	movs	r2, r3
   274e0:	f7f8 faa8 	bl	1fa34 <_write>
   274e4:	1c43      	adds	r3, r0, #1
   274e6:	d103      	bne.n	274f0 <_write_r+0x20>
   274e8:	6823      	ldr	r3, [r4, #0]
   274ea:	2b00      	cmp	r3, #0
   274ec:	d000      	beq.n	274f0 <_write_r+0x20>
   274ee:	602b      	str	r3, [r5, #0]
   274f0:	bd70      	pop	{r4, r5, r6, pc}
   274f2:	46c0      	nop			; (mov r8, r8)
   274f4:	200055dc 	.word	0x200055dc

000274f8 <_close_r>:
   274f8:	2300      	movs	r3, #0
   274fa:	b570      	push	{r4, r5, r6, lr}
   274fc:	4c06      	ldr	r4, [pc, #24]	; (27518 <_close_r+0x20>)
   274fe:	0005      	movs	r5, r0
   27500:	0008      	movs	r0, r1
   27502:	6023      	str	r3, [r4, #0]
   27504:	f7f8 fad0 	bl	1faa8 <_close>
   27508:	1c43      	adds	r3, r0, #1
   2750a:	d103      	bne.n	27514 <_close_r+0x1c>
   2750c:	6823      	ldr	r3, [r4, #0]
   2750e:	2b00      	cmp	r3, #0
   27510:	d000      	beq.n	27514 <_close_r+0x1c>
   27512:	602b      	str	r3, [r5, #0]
   27514:	bd70      	pop	{r4, r5, r6, pc}
   27516:	46c0      	nop			; (mov r8, r8)
   27518:	200055dc 	.word	0x200055dc

0002751c <_fstat_r>:
   2751c:	2300      	movs	r3, #0
   2751e:	b570      	push	{r4, r5, r6, lr}
   27520:	4c06      	ldr	r4, [pc, #24]	; (2753c <_fstat_r+0x20>)
   27522:	0005      	movs	r5, r0
   27524:	0008      	movs	r0, r1
   27526:	0011      	movs	r1, r2
   27528:	6023      	str	r3, [r4, #0]
   2752a:	f7f8 fac0 	bl	1faae <_fstat>
   2752e:	1c43      	adds	r3, r0, #1
   27530:	d103      	bne.n	2753a <_fstat_r+0x1e>
   27532:	6823      	ldr	r3, [r4, #0]
   27534:	2b00      	cmp	r3, #0
   27536:	d000      	beq.n	2753a <_fstat_r+0x1e>
   27538:	602b      	str	r3, [r5, #0]
   2753a:	bd70      	pop	{r4, r5, r6, pc}
   2753c:	200055dc 	.word	0x200055dc

00027540 <_isatty_r>:
   27540:	2300      	movs	r3, #0
   27542:	b570      	push	{r4, r5, r6, lr}
   27544:	4c06      	ldr	r4, [pc, #24]	; (27560 <_isatty_r+0x20>)
   27546:	0005      	movs	r5, r0
   27548:	0008      	movs	r0, r1
   2754a:	6023      	str	r3, [r4, #0]
   2754c:	f7f8 fab4 	bl	1fab8 <_isatty>
   27550:	1c43      	adds	r3, r0, #1
   27552:	d103      	bne.n	2755c <_isatty_r+0x1c>
   27554:	6823      	ldr	r3, [r4, #0]
   27556:	2b00      	cmp	r3, #0
   27558:	d000      	beq.n	2755c <_isatty_r+0x1c>
   2755a:	602b      	str	r3, [r5, #0]
   2755c:	bd70      	pop	{r4, r5, r6, pc}
   2755e:	46c0      	nop			; (mov r8, r8)
   27560:	200055dc 	.word	0x200055dc

00027564 <_lseek_r>:
   27564:	b570      	push	{r4, r5, r6, lr}
   27566:	0005      	movs	r5, r0
   27568:	0008      	movs	r0, r1
   2756a:	0011      	movs	r1, r2
   2756c:	2200      	movs	r2, #0
   2756e:	4c06      	ldr	r4, [pc, #24]	; (27588 <_lseek_r+0x24>)
   27570:	6022      	str	r2, [r4, #0]
   27572:	001a      	movs	r2, r3
   27574:	f7f8 faa2 	bl	1fabc <_lseek>
   27578:	1c43      	adds	r3, r0, #1
   2757a:	d103      	bne.n	27584 <_lseek_r+0x20>
   2757c:	6823      	ldr	r3, [r4, #0]
   2757e:	2b00      	cmp	r3, #0
   27580:	d000      	beq.n	27584 <_lseek_r+0x20>
   27582:	602b      	str	r3, [r5, #0]
   27584:	bd70      	pop	{r4, r5, r6, pc}
   27586:	46c0      	nop			; (mov r8, r8)
   27588:	200055dc 	.word	0x200055dc

0002758c <memchr>:
   2758c:	b2c9      	uxtb	r1, r1
   2758e:	1882      	adds	r2, r0, r2
   27590:	4290      	cmp	r0, r2
   27592:	d101      	bne.n	27598 <memchr+0xc>
   27594:	2000      	movs	r0, #0
   27596:	4770      	bx	lr
   27598:	7803      	ldrb	r3, [r0, #0]
   2759a:	428b      	cmp	r3, r1
   2759c:	d0fb      	beq.n	27596 <memchr+0xa>
   2759e:	3001      	adds	r0, #1
   275a0:	e7f6      	b.n	27590 <memchr+0x4>

000275a2 <_realloc_r>:
   275a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   275a4:	0007      	movs	r7, r0
   275a6:	000d      	movs	r5, r1
   275a8:	0016      	movs	r6, r2
   275aa:	2900      	cmp	r1, #0
   275ac:	d105      	bne.n	275ba <_realloc_r+0x18>
   275ae:	0011      	movs	r1, r2
   275b0:	f7fe fe9e 	bl	262f0 <_malloc_r>
   275b4:	0004      	movs	r4, r0
   275b6:	0020      	movs	r0, r4
   275b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   275ba:	2a00      	cmp	r2, #0
   275bc:	d103      	bne.n	275c6 <_realloc_r+0x24>
   275be:	f7fe fe4d 	bl	2625c <_free_r>
   275c2:	0034      	movs	r4, r6
   275c4:	e7f7      	b.n	275b6 <_realloc_r+0x14>
   275c6:	f000 f827 	bl	27618 <_malloc_usable_size_r>
   275ca:	002c      	movs	r4, r5
   275cc:	4286      	cmp	r6, r0
   275ce:	d9f2      	bls.n	275b6 <_realloc_r+0x14>
   275d0:	0031      	movs	r1, r6
   275d2:	0038      	movs	r0, r7
   275d4:	f7fe fe8c 	bl	262f0 <_malloc_r>
   275d8:	1e04      	subs	r4, r0, #0
   275da:	d0ec      	beq.n	275b6 <_realloc_r+0x14>
   275dc:	0029      	movs	r1, r5
   275de:	0032      	movs	r2, r6
   275e0:	f7fe fe18 	bl	26214 <memcpy>
   275e4:	0029      	movs	r1, r5
   275e6:	0038      	movs	r0, r7
   275e8:	f7fe fe38 	bl	2625c <_free_r>
   275ec:	e7e3      	b.n	275b6 <_realloc_r+0x14>
	...

000275f0 <_read_r>:
   275f0:	b570      	push	{r4, r5, r6, lr}
   275f2:	0005      	movs	r5, r0
   275f4:	0008      	movs	r0, r1
   275f6:	0011      	movs	r1, r2
   275f8:	2200      	movs	r2, #0
   275fa:	4c06      	ldr	r4, [pc, #24]	; (27614 <_read_r+0x24>)
   275fc:	6022      	str	r2, [r4, #0]
   275fe:	001a      	movs	r2, r3
   27600:	f7f8 f9f6 	bl	1f9f0 <_read>
   27604:	1c43      	adds	r3, r0, #1
   27606:	d103      	bne.n	27610 <_read_r+0x20>
   27608:	6823      	ldr	r3, [r4, #0]
   2760a:	2b00      	cmp	r3, #0
   2760c:	d000      	beq.n	27610 <_read_r+0x20>
   2760e:	602b      	str	r3, [r5, #0]
   27610:	bd70      	pop	{r4, r5, r6, pc}
   27612:	46c0      	nop			; (mov r8, r8)
   27614:	200055dc 	.word	0x200055dc

00027618 <_malloc_usable_size_r>:
   27618:	1f0b      	subs	r3, r1, #4
   2761a:	681b      	ldr	r3, [r3, #0]
   2761c:	1f18      	subs	r0, r3, #4
   2761e:	2b00      	cmp	r3, #0
   27620:	da01      	bge.n	27626 <_malloc_usable_size_r+0xe>
   27622:	580b      	ldr	r3, [r1, r0]
   27624:	18c0      	adds	r0, r0, r3
   27626:	4770      	bx	lr
   27628:	00082008 	.word	0x00082008
   2762c:	736e6553 	.word	0x736e6553
   27630:	4520726f 	.word	0x4520726f
   27634:	726f7272 	.word	0x726f7272
   27638:	21642520 	.word	0x21642520
   2763c:	00000a0d 	.word	0x00000a0d
   27640:	74736944 	.word	0x74736944
   27644:	65636e61 	.word	0x65636e61
   27648:	6425203a 	.word	0x6425203a
   2764c:	0d6d6d20 	.word	0x0d6d6d20
   27650:	0000000a 	.word	0x0000000a
   27654:	74736944 	.word	0x74736944
   27658:	65636e61 	.word	0x65636e61
   2765c:	74614420 	.word	0x74614420
   27660:	514d2061 	.word	0x514d2061
   27664:	50205454 	.word	0x50205454
   27668:	0d74736f 	.word	0x0d74736f
   2766c:	0000000a 	.word	0x0000000a
   27670:	65636341 	.word	0x65636341
   27674:	6172656c 	.word	0x6172656c
   27678:	6e6f6974 	.word	0x6e6f6974
   2767c:	676d5b20 	.word	0x676d5b20
   27680:	20583a5d 	.word	0x20583a5d
   27684:	59096425 	.word	0x59096425
   27688:	09642520 	.word	0x09642520
   2768c:	25205a25 	.word	0x25205a25
   27690:	000a0d64 	.word	0x000a0d64
   27694:	64206f4e 	.word	0x64206f4e
   27698:	20617461 	.word	0x20617461
   2769c:	64616572 	.word	0x64616572
   276a0:	0d202179 	.word	0x0d202179
   276a4:	0000000a 	.word	0x0000000a
   276a8:	20554d49 	.word	0x20554d49
   276ac:	61746144 	.word	0x61746144
   276b0:	54514d20 	.word	0x54514d20
   276b4:	6f502054 	.word	0x6f502054
   276b8:	0a0d7473 	.word	0x0a0d7473
   276bc:	00000000 	.word	0x00000000
   276c0:	74747542 	.word	0x74747542
   276c4:	23206e6f 	.word	0x23206e6f
   276c8:	69206425 	.word	0x69206425
   276cc:	65722073 	.word	0x65722073
   276d0:	7361656c 	.word	0x7361656c
   276d4:	0a0d6465 	.word	0x0a0d6465
   276d8:	00000000 	.word	0x00000000
   276dc:	74747542 	.word	0x74747542
   276e0:	23206e6f 	.word	0x23206e6f
   276e4:	69206425 	.word	0x69206425
   276e8:	72702073 	.word	0x72702073
   276ec:	65737365 	.word	0x65737365
   276f0:	000a0d64 	.word	0x000a0d64
   276f4:	6f727245 	.word	0x6f727245
   276f8:	202d2072 	.word	0x202d2072
   276fc:	6e79654b 	.word	0x6e79654b
   27700:	6f206d75 	.word	0x6f206d75
   27704:	6f207475 	.word	0x6f207475
   27708:	61722066 	.word	0x61722066
   2770c:	2165676e 	.word	0x2165676e
   27710:	00000a0d 	.word	0x00000a0d
   27714:	6d6d7544 	.word	0x6d6d7544
   27718:	61472079 	.word	0x61472079
   2771c:	4420656d 	.word	0x4420656d
   27720:	20617461 	.word	0x20617461
   27724:	5454514d 	.word	0x5454514d
   27728:	736f5020 	.word	0x736f5020
   2772c:	000a0d74 	.word	0x000a0d74
   27730:	00736c63 	.word	0x00736c63
   27734:	3a736c63 	.word	0x3a736c63
   27738:	656c4320 	.word	0x656c4320
   2773c:	20737261 	.word	0x20737261
   27740:	20656874 	.word	0x20656874
   27744:	6d726574 	.word	0x6d726574
   27748:	6c616e69 	.word	0x6c616e69
   2774c:	72637320 	.word	0x72637320
   27750:	0d6e6565 	.word	0x0d6e6565
   27754:	0000000a 	.word	0x0000000a
   27758:	656d6167 	.word	0x656d6167
   2775c:	00000000 	.word	0x00000000
   27760:	656d6167 	.word	0x656d6167
   27764:	6553203a 	.word	0x6553203a
   27768:	2073646e 	.word	0x2073646e
   2776c:	6d6d7564 	.word	0x6d6d7564
   27770:	61672079 	.word	0x61672079
   27774:	6420656d 	.word	0x6420656d
   27778:	0d617461 	.word	0x0d617461
   2777c:	0000000a 	.word	0x0000000a
   27780:	64746567 	.word	0x64746567
   27784:	61747369 	.word	0x61747369
   27788:	0065636e 	.word	0x0065636e
   2778c:	64746567 	.word	0x64746567
   27790:	61747369 	.word	0x61747369
   27794:	3a65636e 	.word	0x3a65636e
   27798:	74655220 	.word	0x74655220
   2779c:	736e7275 	.word	0x736e7275
   277a0:	65687420 	.word	0x65687420
   277a4:	73696420 	.word	0x73696420
   277a8:	636e6174 	.word	0x636e6174
   277ac:	72662065 	.word	0x72662065
   277b0:	74206d6f 	.word	0x74206d6f
   277b4:	55206568 	.word	0x55206568
   277b8:	30312d53 	.word	0x30312d53
   277bc:	65532030 	.word	0x65532030
   277c0:	726f736e 	.word	0x726f736e
   277c4:	000a0d2e 	.word	0x000a0d2e
   277c8:	62746567 	.word	0x62746567
   277cc:	6f747475 	.word	0x6f747475
   277d0:	0000006e 	.word	0x0000006e
   277d4:	62746567 	.word	0x62746567
   277d8:	6f747475 	.word	0x6f747475
   277dc:	50203a6e 	.word	0x50203a6e
   277e0:	65636f72 	.word	0x65636f72
   277e4:	73657373 	.word	0x73657373
   277e8:	646e6120 	.word	0x646e6120
   277ec:	69727020 	.word	0x69727020
   277f0:	2073746e 	.word	0x2073746e
   277f4:	20656874 	.word	0x20656874
   277f8:	4f464946 	.word	0x4f464946
   277fc:	74756220 	.word	0x74756220
   27800:	206e6f74 	.word	0x206e6f74
   27804:	66667562 	.word	0x66667562
   27808:	66207265 	.word	0x66207265
   2780c:	206d6f72 	.word	0x206d6f72
   27810:	20656874 	.word	0x20656874
   27814:	73656573 	.word	0x73656573
   27818:	0d2e7761 	.word	0x0d2e7761
   2781c:	0000000a 	.word	0x0000000a
   27820:	0064656c 	.word	0x0064656c
   27824:	2064656c 	.word	0x2064656c
   27828:	79656b5b 	.word	0x79656b5b
   2782c:	5d6d756e 	.word	0x5d6d756e
   27830:	5b5d525b 	.word	0x5b5d525b
   27834:	425b5d47 	.word	0x425b5d47
   27838:	53203a5d 	.word	0x53203a5d
   2783c:	20737465 	.word	0x20737465
   27840:	20656874 	.word	0x20656874
   27844:	65766967 	.word	0x65766967
   27848:	454c206e 	.word	0x454c206e
   2784c:	6f742044 	.word	0x6f742044
   27850:	65687420 	.word	0x65687420
   27854:	76696720 	.word	0x76696720
   27858:	52206e65 	.word	0x52206e65
   2785c:	422c472c 	.word	0x422c472c
   27860:	6c617620 	.word	0x6c617620
   27864:	2e736575 	.word	0x2e736575
   27868:	00000a0d 	.word	0x00000a0d
   2786c:	65736572 	.word	0x65736572
   27870:	00000074 	.word	0x00000074
   27874:	65736572 	.word	0x65736572
   27878:	52203a74 	.word	0x52203a74
   2787c:	74657365 	.word	0x74657365
   27880:	68742073 	.word	0x68742073
   27884:	65642065 	.word	0x65642065
   27888:	65636976 	.word	0x65636976
   2788c:	00000a0d 	.word	0x00000a0d
   27890:	00007766 	.word	0x00007766
   27894:	203a7766 	.word	0x203a7766
   27898:	6e776f44 	.word	0x6e776f44
   2789c:	64616f6c 	.word	0x64616f6c
   278a0:	66206120 	.word	0x66206120
   278a4:	20656c69 	.word	0x20656c69
   278a8:	20646e61 	.word	0x20646e61
   278ac:	66726570 	.word	0x66726570
   278b0:	206d726f 	.word	0x206d726f
   278b4:	46206e61 	.word	0x46206e61
   278b8:	70752057 	.word	0x70752057
   278bc:	65746164 	.word	0x65746164
   278c0:	00000a0d 	.word	0x00000a0d
   278c4:	00756d69 	.word	0x00756d69
   278c8:	3a756d69 	.word	0x3a756d69
   278cc:	74655220 	.word	0x74655220
   278d0:	736e7275 	.word	0x736e7275
   278d4:	76206120 	.word	0x76206120
   278d8:	65756c61 	.word	0x65756c61
   278dc:	6f726620 	.word	0x6f726620
   278e0:	6874206d 	.word	0x6874206d
   278e4:	4d492065 	.word	0x4d492065
   278e8:	000a0d55 	.word	0x000a0d55
   278ec:	65657246 	.word	0x65657246
   278f0:	534f5452 	.word	0x534f5452
   278f4:	494c4320 	.word	0x494c4320
   278f8:	540a0d2e 	.word	0x540a0d2e
   278fc:	20657079 	.word	0x20657079
   27900:	706c6548 	.word	0x706c6548
   27904:	206f7420 	.word	0x206f7420
   27908:	77656976 	.word	0x77656976
   2790c:	6c206120 	.word	0x6c206120
   27910:	20747369 	.word	0x20747369
   27914:	7220666f 	.word	0x7220666f
   27918:	73696765 	.word	0x73696765
   2791c:	65726574 	.word	0x65726574
   27920:	6f632064 	.word	0x6f632064
   27924:	6e616d6d 	.word	0x6e616d6d
   27928:	0d2e7364 	.word	0x0d2e7364
   2792c:	0000000a 	.word	0x0000000a
   27930:	0000616f 	.word	0x0000616f
   27934:	325b6325 	.word	0x325b6325
   27938:	003e0d4b 	.word	0x003e0d4b

0002793c <xClearScreen>:
   2793c:	00027730 00027734 00012579 00000000     0w..4w..y%......
   2794c:	325b6325 0000004a                       %c[2J...

00027954 <xDistanceSensorGetDistance>:
   27954:	00027780 0002778c 000127f5 00000000     .w...w...'......

00027964 <xImuGetCommand>:
   27964:	000278c4 000278c8 000125a5 00000000     .x...x...%......

00027974 <xNeotrellisProcessButtonCommand>:
   27974:	000277c8 000277d4 00012751 00000000     .w...w..Q'......

00027984 <xNeotrellisTurnLEDCommand>:
   27984:	00027820 00027824 000126ad 00000004      x..$x...&......

00027994 <xOTAUCommand>:
   27994:	00027890 00027894 0001269d 00000000     .x...x...&......

000279a4 <xResetCommand>:
   279a4:	0002786c 00027874 00012561 00000000     lx..tx..a%......

000279b4 <xSendDummyGameData>:
   279b4:	00027758 00027760 00012871 00000000     Xw..`w..q(......
   279c4:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   279d4:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   279e4:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   279f4:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   27a04:	75657571 0d217365 0000000a 746e6f43     queues!.....Cont
   27a14:	206c6f72 65726854 203a6461 736e6f43     rol Thread: Cons
   27a24:	64656d75 6d616720 61702065 74656b63     umed game packet
   27a34:	000a0d21 746e6f43 206c6f72 65726854     !...Control Thre
   27a44:	203a6461 6c756f43 6f6e2064 65732074     ad: Could not se
   27a54:	6720646e 20656d61 6b636170 0d217465     nd game packet!.
   27a64:	0000000a 6c756f43 6f6e2064 6e692074     ....Could not in
   27a74:	61697469 657a696c 73694420 636e6174     itialize Distanc
   27a84:	65532065 726f736e 00000021 00001010     e Sensor!.......
   27a94:	0000050e 6f727245 6e692072 61697469     ....Error initia
   27aa4:	697a696c 5320676e 61736565 722f2177     lizing Seesaw!/r
   27ab4:	00006e2f 6f727245 2f722f72 0000006e     /n..Error/r/n...
   27ac4:	6e756f46 65532064 77617365 2f722f21     Found Seesaw!/r/
   27ad4:	0000006e 6c756f43 6f6e2064 72772074     n...Could not wr
   27ae4:	20657469 73656553 70207761 2f216e69     ite Seesaw pin!/
   27af4:	006e2f72 6c756f43 6f6e2064 65732074     r/n.Could not se
   27b04:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   27b14:	7073206c 21646565 6e2f722f 00000000     l speed!/r/n....
   27b24:	6c756f43 6f6e2064 65732074 65732074     Could not set se
   27b34:	77617365 6f654e20 65786970 756e206c     esaw Neopixel nu
   27b44:	7265626d 20666f20 69766564 2f736563     mber of devices/
   27b54:	006e2f72 6c756f43 6f6e2064 6e692074     r/n.Could not in
   27b64:	61697469 657a696c 79654b20 21646170     itialize Keypad!
   27b74:	6e2f722f 00000000 6f727245 65722072     /r/n....Error re
   27b84:	6e696461 65532067 77617365 756f6320     ading Seesaw cou
   27b94:	2173746e 6e2f722f 00000000              nts!/r/n....

00027ba0 <msgBaseGetHWID>:
   27ba0:	00000100                                ....

00027ba4 <msgKeypadEnableInt>:
   27ba4:	00010210                                ....

00027ba8 <msgKeypadGetCount>:
   27ba8:	00000410                                ....

00027bac <msgNeopixelBufLength>:
   27bac:	3000030e                                ...0

00027bb0 <msgNeopixelPin>:
   27bb0:	0003010e                                ....

00027bb4 <msgNeopixelSpeed>:
   27bb4:	0001020e 54204955 206b7361 72617453     ....UI Task Star
   27bc4:	21646574 00000000 776f6853 20676e69     ted!....Showing 
   27bd4:	65766f4d 000a0d21 79616c50 20736920     Move!...Play is 
   27be4:	656e6f44 000a0d21 000141d8 000141e2     Done!....A...A..
   27bf4:	000141f2 0001422e 00014244 732a2e25     .A...B..DB..%.*s
   27c04:	00000000 25200a0d 00732a2e 28626772     ...... %.*s.rgb(
   27c14:	00000000 47520a0d 64252042 20642520     ......RGB %d %d 
   27c24:	0a0d6425 00000000 6167227b 3a22656d     %d......{"game":
   27c34:	0000005b 61470a0d 6d20656d 61737365     [.....Game messa
   27c44:	72206567 69656365 21646576 00000a0d     ge received!....
   27c54:	00007325 61500a0d 64657372 6d6f4320     %s....Parsed Com
   27c64:	646e616d 0000203a 002c6425 65530a0d     mand: ..%d,...Se
   27c74:	7020746e 2079616c 63206f74 72746e6f     nt play to contr
   27c84:	0d216c6f 0000000a 61470a0d 6d20656d     ol!.......Game m
   27c94:	61737365 72206567 69656365 20646576     essage received 
   27ca4:	20747562 20746f6e 65646e75 6f747372     but not understo
   27cb4:	0d21646f 0000000a 25200a0d 00000073     od!....... %s...
   27cc4:	5454514d 696e6920 6c616974 74617a69     MQTT initializat
   27cd4:	206e6f69 6c696166 202e6465 6f727245     ion failed. Erro
   27ce4:	6f632072 69206564 25282073 0a0d2964     r code is (%d)..
   27cf4:	00000000 5454514d 67657220 65747369     ....MQTT registe
   27d04:	61632072 61626c6c 66206b63 656c6961     r callback faile
   27d14:	45202e64 726f7272 646f6320 73692065     d. Error code is
   27d24:	64252820 000a0d29 70747468 696c635f      (%d)...http_cli
   27d34:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   27d44:	63205054 6e65696c 6f732074 74656b63     TP client socket
   27d54:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   27d64:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   27d74:	6b636162 6572203a 73657571 6f632074     back: request co
   27d84:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   27d94:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   27da4:	6572203a 76696563 72206465 6f707365     : received respo
   27db4:	2065736e 64207525 20617461 657a6973     nse %u data size
   27dc4:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   27dd4:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   27de4:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   27df4:	253a6e6f 000a0d64 74696e69 6f74735f     on:%d...init_sto
   27e04:	65676172 6c70203a 65736165 756c7020     rage: please plu
   27e14:	6e612067 2f445320 20434d4d 64726163     g an SD/MMC card
   27e24:	206e6920 746f6c73 0d2e2e2e 0000000a      in slot........
   27e34:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   27e44:	72614320 6e692064 6c617473 6166206c      Card install fa
   27e54:	64656c69 000a0d2e 74696e69 6f74735f     iled....init_sto
   27e64:	65676172 7274203a 6e752079 67756c70     rage: try unplug
   27e74:	646e6120 2d657220 67756c70 65687420      and re-plug the
   27e84:	72616320 0a0d2e64 00000000 74696e69      card.......init
   27e94:	6f74735f 65676172 6f6d203a 69746e75     _storage: mounti
   27ea4:	5320676e 61632044 2e2e6472 000a0d2e     ng SD card......
   27eb4:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   27ec4:	72616320 6f6d2064 20746e75 6c696166      card mount fail
   27ed4:	20216465 73657228 29642520 00000a0d     ed! (res %d)....
   27ee4:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   27ef4:	72616320 6f6d2064 20746e75 0d2e4b4f      card mount OK..
   27f04:	0000000a                                ....

00027f08 <main_mqtt_broker>:
   27f08:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   27f18:	0000006d 6f430a0d 63656e6e 676e6974     m.....Connecting
   27f28:	206f7420 6b6f7242 2e2e7265 0000002e      to Broker......
   27f38:	7a617131 40575358 00000000 69786967     1qazXSW@....gixi
   27f48:	00000065 5454514d 72452020 20726f72     e...MQTT  Error 
   27f58:	4f4e202d 6f432054 63656e6e 20646574     - NOT Connected 
   27f68:	62206f74 656b6f72 000a0d72 5454514d     to broker...MQTT
   27f78:	6e6f4320 7463656e 74206465 7262206f      Connected to br
   27f88:	72656b6f 00000a0d 6e6e6f43 20746365     oker....Connect 
   27f98:	6c696166 206f7420 76726573 25287265     fail to server(%
   27fa8:	20212973 72746572 74692079 74756120     s)! retry it aut
   27fb8:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   27fc8:	475f3150 5f454d41 35455345 545f3631     P1_GAME_ESE516_T
   27fd8:	00000033 4c5f3150 455f4445 31354553     3...P1_LED_ESE51
   27fe8:	33545f36 00000000 5454514d 6e6f4320     6_T3....MQTT Con
   27ff8:	7463656e 0a0d6465 00000000 5454514d     nected......MQTT
   28008:	6f726220 2072656b 6c636564 20656e69      broker decline 
   28018:	72756f79 63636120 21737365 72726520     your access! err
   28028:	6320726f 2065646f 0a0d6425 00000000     or code %d......
   28038:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
   28048:	000a0d64 6f736572 5f65766c 203a6263     d...resolve_cb: 
   28058:	49207325 64612050 73657264 73692073     %s IP address is
   28068:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
   28078:	00000000 72617473 6f645f74 6f6c6e77     ....start_downlo
   28088:	203a6461 20434d4d 726f7473 20656761     ad: MMC storage 
   28098:	20746f6e 64616572 0a0d2e79 00000000     not ready.......
   280a8:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   280b8:	462d6957 73692069 746f6e20 6e6f6320     Wi-Fi is not con
   280c8:	7463656e 0d2e6465 0000000a 72617473     nected......star
   280d8:	6f645f74 6f6c6e77 203a6461 75716572     t_download: requ
   280e8:	20747365 73207369 20746e65 65726c61     est is sent alre
   280f8:	2e796461 00000a0d 72617473 6f645f74     ady.....start_do
   28108:	6f6c6e77 203a6461 6e6e7572 20676e69     wnload: running 
   28118:	6e776f64 64616f6c 726c6120 79646165     download already
   28128:	000a0d2e 72617473 6f645f74 6f6c6e77     ....start_downlo
   28138:	203a6461 646e6573 20676e69 50545448     ad: sending HTTP
   28148:	71657220 74736575 0d2e2e2e 0000000a      request........
   28158:	70747468 772f2f3a 6f2e7777 696d6972     http://www.orimi
   28168:	6d6f632e 6664702f 7365742d 64702e74     .com/pdf-test.pd
   28178:	00000066 726f7473 69665f65 705f656c     f...store_file_p
   28188:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   28198:	0a0d2e61 00000000 64333025 00000000     a.......%03d....
   281a8:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   281b8:	63203a74 74616572 20676e69 656c6966     t: creating file
   281c8:	73255b20 000a0d5d 726f7473 69665f65      [%s]...store_fi
   281d8:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   281e8:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   281f8:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   28208:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   28218:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   28228:	61657263 6e6f6974 72726520 2021726f     creation error! 
   28238:	3a746572 0a0d6425 00000000 726f7473     ret:%d......stor
   28248:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   28258:	20656c69 74697277 72652065 2c726f72     ile write error,
   28268:	776f6420 616f6c6e 61632064 6c65636e      download cancel
   28278:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   28288:	705f656c 656b6361 72203a74 69656365     le_packet: recei
   28298:	5b646576 5d756c25 6966202c 7320656c     ved[%lu], file s
   282a8:	5b657a69 5d756c25 00000a0d 726f7473     ize[%lu]....stor
   282b8:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   282c8:	20656c69 6e776f64 64616f6c 73206465     ile downloaded s
   282d8:	65636375 75667373 2e796c6c 00000a0d     uccessfully.....
   282e8:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   282f8:	5720676e 20696669 61746144 65757120     ng Wifi Data que
   28308:	21736575 00000a0d 35455345 2d203631     ues!....ESE516 -
   28318:	66695720 6e492069 43207469 0d65646f      Wifi Init Code.
   28328:	0000000a 666e6f63 72756769 74685f65     ....configure_ht
   28338:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   28348:	65696c63 6920746e 6974696e 7a696c61     client initializ
   28358:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   28368:	25207365 0a0d2964 00000000 6e69616d     es %d)......main
   28378:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   28388:	6c6c6163 72726520 2021726f 73657228     call error! (res
   28398:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   283a8:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   283b8:	20504120 2e2e7325 000a0d2e 6e6e6f43      AP %s......Conn
   283c8:	65746365 6f742064 54514d20 72422054     ected to MQTT Br
   283d8:	72656b6f 000a0d21 6d69227b 3a227875     oker!...{"imux":
   283e8:	202c6425 756d6922 203a2279 202c6425     %d, "imuy": %d, 
   283f8:	756d6922 203a227a 007d6425 495f3150     "imuz": %d}.P1_I
   28408:	455f554d 31354553 33545f36 00000000     MU_ESE516_T3....
   28418:	6964227b 6e617473 3a226563 007d7525     {"distance":%u}.
   28428:	445f3150 41545349 5f45434e 35455345     P1_DISTANCE_ESE5
   28438:	545f3631 00000033 00006425 00007d5d     16_T3...%d..]}..
   28448:	475f3250 5f454d41 35455345 545f3631     P2_GAME_ESE516_T
   28458:	00000033 3d206372 0d642520 0000000a     3...rc = %d.....
   28468:	6e69616d 6c70203a 65736165 706e7520     main: please unp
   28478:	2067756c 20656874 4d2f4453 6320434d     lug the SD/MMC c
   28488:	2e647261 00000a0d 6e69616d 6f64203a     ard.....main: do
   28498:	0d2e656e 0000000a 4941465b 72205d4c     ne......[FAIL] r
   284a8:	25207365 000a0d64 67616c46 78742e42     es %d...FlagB.tx
   284b8:	64612074 21646564 00000a0d 6c463a30     t added!....0:Fl
   284c8:	2e416761 00747874 69666977 3a62635f     agA.txt.wifi_cb:
   284d8:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   284e8:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   284f8:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   28508:	5443454e 0a0d4445 00000000 506f7645     NECTED......EvoP
   28518:	6c6c6968 00000079 69666977 3a62635f     hilly...wifi_cb:
   28528:	20504920 72646461 20737365 25207369      IP address is %
   28538:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
   28548:	6f727245 6f632072 63656e6e 676e6974     Error connecting
   28558:	206f7420 5454514d 6f724220 2172656b      to MQTT Broker!
   28568:	00000a0d 6f636e49 63657272 6f632074     ....Incorrect co
   28578:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   28588:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   28598:	6f742022 65697620 20612077 7473696c     " to view a list
   285a8:	20666f20 69617661 6c62616c 6f632065      of available co
   285b8:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   285c8:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   285d8:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   285e8:	6f742027 65697620 20612077 7473696c     ' to view a list
   285f8:	20666f20 69617661 6c62616c 6f632065      of available co
   28608:	6e616d6d 0d2e7364 000a0d0a 706c6568     mmands......help
   28618:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   28628:	20737473 206c6c61 20656874 69676572     sts all the regi
   28638:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   28648:	000a0d0a                                ....

0002864c <xHelpCommand>:
   2864c:	00028614 0002861c 00015039 00000000     ........9P......
   2865c:	000155dc 000155d4 000155d8 000155f4     .U...U...U...U..
   2866c:	000155d0 000155e0 000155e4 000155e8     .U...U...U...U..
   2867c:	000155ec 20746f4e 756f6e65 54206867     .U..Not enough T
   2868c:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
   2869c:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
   286ac:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
   286bc:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
   286cc:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
   286dc:	2d207365 636e6920 73616572 52542065     es - increase TR
   286ec:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
   286fc:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   2870c:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
   2871c:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
   2872c:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   2873c:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
   2874c:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   2875c:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   2876c:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
   2877c:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   2878c:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
   2879c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   287ac:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
   287bc:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
   287cc:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   287dc:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
   287ec:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   287fc:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
   2880c:	6e616820 73656c64 69202d20 6572636e      handles - incre
   2881c:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
   2882c:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   2883c:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   2884c:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
   2885c:	61682050 656c646e 202d2073 72636e69     P handles - incr
   2886c:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
   2887c:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
   2888c:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   2889c:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
   288ac:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
   288bc:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
   288cc:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
   288dc:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   288ec:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   288fc:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
   2890c:	6e616820 73656c64 69202d20 6572636e      handles - incre
   2891c:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
   2892c:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
   2893c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   2894c:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
   2895c:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
   2896c:	64696c61 6a626f20 63746365 7373616c     alid objectclass
   2897c:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
   2898c:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
   2899c:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
   289ac:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
   289bc:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
   289cc:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
   289dc:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
   289ec:	6f6d2074 00296564 74437a54 00006c72     t mode).TzCtrl..
   289fc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28a0c:	65684376 61446b63 6f546174 764f6542     vCheckDataToBeOv
   28a1c:	72777265 65747469 726f466e 746c754d     erwrittenForMult
   28a2c:	746e4569 76457972 73746e65 6f6e203a     iEntryEvents: no
   28a3c:	746e4566 73656972 68436f54 206b6365     fEntriesToCheck 
   28a4c:	30203d3d 00000000 43415254 53415f45     == 0....TRACE_AS
   28a5c:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   28a6c:	53544474 6e49203a 696c6176 61762064     tDTS: Invalid va
   28a7c:	2065756c 20726f66 61726170 616d5f6d     lue for param_ma
   28a8c:	53544478 00000000 20646142 61726170     xDTS....Bad para
   28a9c:	616d5f6d 53544478 206e6920 54767270     m_maxDTS in prvT
   28aac:	65636172 44746547 00005354 43415254     raceGetDTS..TRAC
   28abc:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28acc:	65476563 6a624f74 48746365 6c646e61     ceGetObjectHandl
   28adc:	49203a65 6c61766e 76206469 65756c61     e: Invalid value
   28aec:	726f6620 6a626f20 63746365 7373616c      for objectclass
   28afc:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   28b0c:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   28b1c:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   28b2c:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   28b3c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28b4c:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   28b5c:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   28b6c:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   28b7c:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   28b8c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28b9c:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   28bac:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   28bbc:	65756c61 726f6620 00646920 63617254     alue for id.Trac
   28bcc:	65522065 64726f63 44207265 006f6d65     e Recorder Demo.
   28bdc:	65747441 2074706d 69206f74 7865646e     Attempt to index
   28bec:	74756f20 65646973 65766520 6220746e      outside event b
   28bfc:	65666675 00002172 43415254 53415f45     uffer!..TRACE_AS
   28c0c:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   28c1c:	6a624f74 4e746365 3a656d61 6d616e20     tObjectName: nam
   28c2c:	3d3d2065 4c554e20 0000004c 656c6c49     e == NULL...Ille
   28c3c:	206c6167 656a626f 63207463 7373616c     gal object class
   28c4c:	206e6920 54767270 65636172 4f746553      in prvTraceSetO
   28c5c:	63656a62 6d614e74 00000065 656c6c49     bjectName...Ille
   28c6c:	206c6167 646e6168 2820656c 69202930     gal handle (0) i
   28c7c:	7270206e 61725476 65536563 6a624f74     n prvTraceSetObj
   28c8c:	4e746365 2e656d61 00000000 43415254     ectName.....TRAC
   28c9c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28cac:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   28cbc:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   28ccc:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   28cdc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28cec:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   28cfc:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   28d0c:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   28d1c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   28d2c:	65536563 69725074 7469726f 6f725079     ceSetPriorityPro
   28d3c:	74726570 6f203a79 63656a62 616c6374     perty: objectcla
   28d4c:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
   28d5c:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
   28d6c:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   28d7c:	69725074 7469726f 6f725079 74726570     tPriorityPropert
   28d8c:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
   28d9c:	726f6620 00646920 43415254 53415f45      for id.TRACE_AS
   28dac:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   28dbc:	73615474 736e496b 636e6174 6e694665     tTaskInstanceFin
   28dcc:	65687369 49203a64 6c61766e 76206469     ished: Invalid v
   28ddc:	65756c61 726f6620 6e616820 00656c64     alue for handle.
   28dec:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28dfc:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   28e0c:	6c61436c 65203a6c 65646f63 203d3e20     lCall: ecode >= 
   28e1c:	46467830 00000000 43415254 53415f45     0xFF....TRACE_AS
   28e2c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   28e3c:	4b65726f 656e7265 6c61436c 6f203a6c     oreKernelCall: o
   28e4c:	63656a62 616c4374 3e207373 5254203d     bjectClass >= TR
   28e5c:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   28e6c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28e7c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   28e8c:	6c61436c 49203a6c 6c61766e 76206469     lCall: Invalid v
   28e9c:	65756c61 726f6620 6a626f20 4e746365     alue for objectN
   28eac:	65626d75 00000072 6f636552 72656472     umber...Recorder
   28ebc:	73756220 202d2079 68676968 69727020      busy - high pri
   28ecc:	7469726f 53492079 73752052 20676e69     ority ISR using 
   28edc:	63737973 3f6c6c61 29322820 00000000     syscall? (2)....
   28eec:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28efc:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   28f0c:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   28f1c:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   28f2c:	76206469 65756c61 726f6620 74766520     id value for evt
   28f3c:	65646f63 00000000 6f636552 72656472     code....Recorder
   28f4c:	73756220 202d2079 68676968 69727020      busy - high pri
   28f5c:	7469726f 53492079 73752052 20676e69     ority ISR using 
   28f6c:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   28f7c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28f8c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   28f9c:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   28fac:	63747665 2065646f 30203d3e 00464678     evtcode >= 0xFF.
   28fbc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   28fcc:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   28fdc:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   28fec:	656a626f 6c437463 20737361 54203d3e     objectClass >= T
   28ffc:	45434152 4c434e5f 45535341 00000053     RACE_NCLASSES...
   2900c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   2901c:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   2902c:	6c61436c 7469576c 72615068 203a6d61     lCallWithParam: 
   2903c:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   2904c:	626f2072 7463656a 626d754e 00007265     r objectNumber..
   2905c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
   2906c:	68676968 69727020 7469726f 53492079     high priority IS
   2907c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
   2908c:	29332820 00000000 43415254 53415f45      (3)....TRACE_AS
   2909c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   290ac:	5465726f 526b7361 79646165 6e49203a     oreTaskReady: In
   290bc:	696c6176 61762064 2065756c 20726f66     valid value for 
   290cc:	646e6168 0000656c 6f636552 72656472     handle..Recorder
   290dc:	73756220 202d2079 68676968 69727020      busy - high pri
   290ec:	7469726f 53492079 73752052 20676e69     ority ISR using 
   290fc:	63737973 3f6c6c61 29312820 00000000     syscall? (1)....
   2910c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   2911c:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   2912c:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   2913c:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   2914c:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   2915c:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   2916c:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
   2917c:	696c6176 61762064 2065756c 20726f66     valid value for 
   2918c:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
   2919c:	6975203a 65646e49 4f664f78 63656a62     : uiIndexOfObjec
   291ac:	49203a74 6c61766e 76206469 65756c61     t: Invalid value
   291bc:	726f6620 6a626f20 63746365 7373616c      for objectclass
   291cc:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   291dc:	6975203a 65646e49 4f664f78 63656a62     : uiIndexOfObjec
   291ec:	49203a74 6c61766e 76206469 65756c61     t: Invalid value
   291fc:	726f6620 6a626f20 68746365 6c646e61      for objecthandl
   2920c:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   2921c:	6552203a 64726f63 6e207265 6920746f     : Recorder not i
   2922c:	6974696e 7a696c61 202e6465 20657355     nitialized. Use 
   2923c:	61725476 6e456563 656c6261 69202928     vTraceEnable() i
   2924c:	6574736e 00216461 61747328 70757472     nstead!.(startup
   2925c:	00000029 43415254 53415f45 54524553     )...TRACE_ASSERT
   2926c:	5478203a 65636172 69676552 72657473     : xTraceRegister
   2927c:	69727453 203a676e 6562616c 3d3d206c     String: label ==
   2928c:	4c554e20 0000004c 43415254 53415f45      NULL...TRACE_AS
   2929c:	54524553 6552203a 64726f63 6e207265     SERT: Recorder n
   292ac:	6920746f 6974696e 7a696c61 202c6465     ot initialized, 
   292bc:	6c6c6163 72547620 45656361 6c62616e     call vTraceEnabl
   292cc:	20292865 73726966 00002174 454c4449     e() first!..IDLE
   292dc:	00000000 00018bac 00018bac 00018bac     ................
   292ec:	00018b24 00018bee 00018c08 00018bac     $...............
   292fc:	00018bac 00018b24 00018bee 20726d54     ....$.......Tmr 
   2930c:	00637653                                Svc.

00029310 <mmc_trans_multipliers>:
   29310:	00000000 0000000a 0000000c 0000000d     ................
   29320:	0000000f 00000014 0000001a 0000001e     ................
   29330:	00000023 00000028 0000002d 00000034     #...(...-...4...
   29340:	00000037 0000003c 00000046 00000050     7...<...F...P...

00029350 <sd_mmc_trans_units>:
   29350:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0002936c <sd_trans_multipliers>:
   2936c:	00000000 0000000a 0000000c 0000000d     ................
   2937c:	0000000f 00000014 00000019 0000001e     ................
   2938c:	00000023 00000028 0000002d 00000032     #...(...-...2...
   2939c:	00000037 0000003c 00000046 00000050     7...<...F...P...

000293ac <__FUNCTION__.16106>:
   293ac:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   293bc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   293cc:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   293dc:	6320746c 000a646d 0000000d 0001acd8     lt cmd..........
   293ec:	0001aca8 0001aca0 0001acb8 0001acb0     ................
   293fc:	0001acd0 0001acc0 0001acc8              ............

00029408 <__FUNCTION__.16974>:
   29408:	5f666968 646e6573 00000000              hif_send....

00029414 <__FUNCTION__.16984>:
   29414:	5f666968 00727369                       hif_isr.

0002941c <__FUNCTION__.16993>:
   2941c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0002942c <__FUNCTION__.17005>:
   2942c:	5f666968 65636572 00657669              hif_receive.

00029438 <__FUNCTION__.17021>:
   29438:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   29448:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   29458:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   29468:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
   29478:	73657264 75622073 61662073 000a6c69     dress bus fail..
   29488:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
   29498:	6b636170 53207465 20657a69 7525203d     packet Size = %u
   294a8:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
   294b8:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
   294c8:	49464957 6c616320 6361626c 7369206b     WIFI callback is
   294d8:	746f6e20 67657220 65747369 0a646572      not registered.
   294e8:	00000000 6b6f6353 63207465 626c6c61     ....Scoket callb
   294f8:	206b6361 6e207369 7220746f 73696765     ack is not regis
   29508:	65726574 00000a64 2061744f 6c6c6163     tered...Ota call
   29518:	6b636162 20736920 20746f6e 69676572     back is not regi
   29528:	72657473 000a6465 70797243 63206f74     stered..Crypto c
   29538:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   29548:	73696765 65726574 00000a64 6d676953     egistered...Sigm
   29558:	61632061 61626c6c 69206b63 6f6e2073     a callback is no
   29568:	65722074 74736967 64657265 0000000a     t registered....
   29578:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
   29588:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
   29598:	61207473 64207070 276e6469 65732074     st app didn't se
   295a8:	58522074 6e6f4420 253c2065 253c3e75     t RX Done <%u><%
   295b8:	000a3e58 66696828 72572029 20676e6f     X>..(hif) Wrong 
   295c8:	657a6953 0000000a 66696828 61462029     Size....(hif) Fa
   295d8:	2065736c 65746e69 70757272 6c252074     lse interrupt %l
   295e8:	00000078 66696828 61462029 74206c69     x...(hif) Fail t
   295f8:	6552206f 69206461 7265746e 74707572     o Read interrupt
   29608:	67657220 0000000a 46494828 61462029      reg....(HIF) Fa
   29618:	74206c69 6168206f 656c646e 746e6920     il to handle int
   29628:	75727265 25207470 72742064 67412079     errupt %d try Ag
   29638:	2e6e6961 00000a2e 66696820 6365725f     ain..... hif_rec
   29648:	65766965 6e49203a 696c6176 72612064     eive: Invalid ar
   29658:	656d7567 000a746e 20505041 75716552     gument..APP Requ
   29668:	65747365 69532064 6920657a 616c2073     ested Size is la
   29678:	72656772 61687420 6874206e 65722065     rger than the re
   29688:	65766963 75622064 72656666 7a697320     cived buffer siz
   29698:	253c2065 253c3e75 0a3e756c 00000000     e <%u><%lu>.....
   296a8:	20505041 75716552 65747365 64412064     APP Requested Ad
   296b8:	73657264 65622073 646e6f79 65687420     dress beyond the
   296c8:	63657220 64657669 66756220 20726566      recived buffer 
   296d8:	72646461 20737365 20646e61 676e656c     address and leng
   296e8:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....
   296f8:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   29708:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   29718:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   29728:	74207075 63206568 0a706968 00000000     up the chip.....

00029738 <__FUNCTION__.16956>:
   29738:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00029744 <__FUNCTION__.16985>:
   29744:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00029754 <__FUNCTION__.17016>:
   29754:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   29764:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   29774:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   29784:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   29794:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   297a4:	7620746f 64696c61 0000000a 61766e49     ot valid....Inva
   297b4:	2064696c 0a79654b 00000000 44495353     lid Key.....SSID
   297c4:	4e454c20 564e4920 44494c41 0000000a      LEN INVALID....
   297d4:	49204843 4c41564e 000a4449 61766e49     CH INVALID..Inva
   297e4:	2064696c 20706557 2079656b 65646e69     lid Wep key inde
   297f4:	64252078 0000000a 61766e49 2064696c     x %d....Invalid 
   29804:	20706557 2079656b 676e656c 25206874     Wep key length %
   29814:	00000a64 6f636e49 63657272 53502074     d...Incorrect PS
   29824:	656b204b 656c2079 6874676e 0000000a     K key length....
   29834:	65646e75 656e6966 65732064 79742063     undefined sec ty
   29844:	000a6570 6d726946 65726177 72657620     pe..Firmware ver
   29854:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   29864:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   29874:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   29884:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   29894:	6e694d20 69726420 20726576 20726576      Min driver ver 
   298a4:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   298b4:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   298c4:	0000000a 353a3030 31313a30 00000000     ....00:50:11....
   298d4:	2079614d 32203320 00303230 76697244     May  3 2020.Driv
   298e4:	62207265 746c6975 20746120 25097325     er built at %s.%
   298f4:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   29904:	7277616d 65562065 6f697372 00000a6e     mawre Version...

00029914 <__FUNCTION__.16813>:
   29914:	70696863 6b61775f 00000065              chip_wake...

00029920 <__FUNCTION__.16862>:
   29920:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   29930:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   29940:	0a657a69 00000000 20737542 6f727265     ize.....Bus erro
   29950:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   29960:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   29970:	20656874 70696863 0000000a 76697244     the chip....Driv
   29980:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   29990:	000a786c                                lx..

00029994 <__FUNCTION__.16860>:
   29994:	645f6d6e 695f7672 0074696e              nm_drv_init.

000299a0 <__FUNCTION__.16867>:
   299a0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   299b0:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   299c0:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
   299d0:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   299e0:	73616c66 69642068 6c626173 61662065     flash disable fa
   299f0:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   29a00:	6c696166 696e6920 75622074 00000a73     fail init bus...
   29a10:	6c696166 74206465 6e65206f 656c6261     failed to enable
   29a20:	746e6920 75727265 2e737470 00000a2e      interrupts.....
   29a30:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   29a40:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
   29a50:	20444920 0a786c25 00000000 0001bc54      ID %lx.....T...
   29a60:	0001bc54 0001bc84 0001bc06 0001bc2a     T...........*...
   29a70:	0001bc38 0001bc6a 0001bc6a 0001bcb2     8...j...j.......
   29a80:	0001bbea 0001bce8 0001bce8 0001bce8     ................
   29a90:	0001bce8 0001bc46 0001bed6 0001bed6     ....F...........
   29aa0:	0001bf0e 0001be80 0001bea6 0001beb6     ................
   29ab0:	0001bef0 0001bef0 0001bf48 0001be5c     ........H...\...
   29ac0:	0001c31c 0001c31c 0001c31c 0001c31c     ................
   29ad0:	0001bec6 cac4c9c3                       ........

00029ad8 <__FUNCTION__.16135>:
   29ad8:	5f697073 00646d63                       spi_cmd.

00029ae0 <__FUNCTION__.16142>:
   29ae0:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00029af0 <__FUNCTION__.16151>:
   29af0:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00029afc <__FUNCTION__.16184>:
   29afc:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   29b0c:	00000000                                ....

00029b10 <__FUNCTION__.16230>:
   29b10:	5f697073 61746164 6972775f 00006574     spi_data_write..

00029b20 <__FUNCTION__.16242>:
   29b20:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00029b30 <__FUNCTION__.16253>:
   29b30:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00029b40 <__FUNCTION__.16265>:
   29b40:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00029b50 <__FUNCTION__.16276>:
   29b50:	735f6d6e 725f6970 00646165              nm_spi_read.

00029b5c <__FUNCTION__.16297>:
   29b5c:	735f6d6e 695f6970 0074696e              nm_spi_init.

00029b68 <crc7_syndrome_table>:
   29b68:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   29b78:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   29b88:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   29b98:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   29ba8:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   29bb8:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   29bc8:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   29bd8:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   29be8:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   29bf8:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   29c08:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   29c18:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   29c28:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   29c38:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   29c48:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   29c58:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   29c68:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29c78:	6e692064 6e726574 72206c61 20646165     d internal read 
   29c88:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   29c98:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   29ca8:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
   29cb8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29cc8:	6e692064 6e726574 72206c61 20646165     d internal read 
   29cd8:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
   29ce8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29cf8:	6e692064 6e726574 77206c61 65746972     d internal write
   29d08:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   29d18:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   29d28:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   29d38:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
   29d48:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   29d58:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   29d68:	29783830 0a2e2e2e 00000000 65736552     08x)........Rese
   29d78:	6e612074 65722064 20797274 25206425     t and retry %d %
   29d88:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   29d98:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   29da8:	65746972 6f6c6220 28206b63 78383025     rite block (%08x
   29db8:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
   29dc8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   29dd8:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   29de8:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   29df8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29e08:	61642064 62206174 6b636f6c 69727720     d data block wri
   29e18:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   29e28:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   29e38:	656c6961 61642064 62206174 6b636f6c     ailed data block
   29e48:	63726320 69727720 202c6574 20737562      crc write, bus 
   29e58:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   29e68:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   29e78:	72652073 2e726f72 000a2e2e 696d6e5b     s error.....[nmi
   29e88:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   29e98:	72206174 6f707365 2065736e 64616572     ta response read
   29ea8:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   29eb8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   29ec8:	206b636f 61746164 69727720 2e2e6574     ock data write..
   29ed8:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   29ee8:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   29ef8:	73756220 72726520 2e2e726f 00000a2e      bus error......
   29f08:	696d6e5b 69707320 73203a5d 62206970     [nmi spi]: spi b
   29f18:	65666675 69732072 7420657a 73206f6f     uffer size too s
   29f28:	6c6c616d 64252820 25282029 000a2964     mall (%d) (%d)..
   29f38:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   29f48:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   29f58:	20646d63 32302528 202c2978 70736572     cmd (%02x), resp
   29f68:	30252820 0a297832 00000000 696d6e5b      (%02x).....[nmi
   29f78:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   29f88:	74732064 20657461 70736572 65736e6f     d state response
   29f98:	61747320 28206574 78323025 00000a29      state (%02x)...
   29fa8:	696d6e5b 69707320 45203a5d 726f7272     [nmi spi]: Error
   29fb8:	6164202c 72206174 20646165 70736572     , data read resp
   29fc8:	65736e6f 30252820 0a297832 00000000     onse (%02x).....
   29fd8:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   29fe8:	766f2072 75727265 6877206e 72206e65     r overrun when r
   29ff8:	69646165 6420676e 2e617461 0000000a     eading data.....
   2a008:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   2a018:	766f2072 75727265 6877206e 72206e65     r overrun when r
   2a028:	69646165 6320676e 0a2e6372 00000000     eading crc......
   2a038:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2a048:	61642064 62206174 6b636f6c 61657220     d data block rea
   2a058:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   2a068:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2a078:	656c6961 61642064 62206174 6b636f6c     ailed data block
   2a088:	63726320 61657220 62202c64 65207375      crc read, bus e
   2a098:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   2a0a8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   2a0b8:	72206174 6f707365 2065736e 64616572     ta response read
   2a0c8:	7562202c 72652073 2e726f72 000a2e2e     , bus error.....
   2a0d8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   2a0e8:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   2a0f8:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   2a108:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   2a118:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   2a128:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   2a138:	65736552 6e612074 65722064 20797274     Reset and retry 
   2a148:	25206425 000a786c 696d6e5b 69707320     %d %lx..[nmi spi
   2a158:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   2a168:	65746972 67657220 30252820 2e297838     rite reg (%08x).
   2a178:	000a2e2e 65736552 6e612074 65722064     ....Reset and re
   2a188:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   2a198:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
   2a1a8:	000a3e64 6b636f53 206f7420 656c6564     d>..Sock to dele
   2a1b8:	3c206574 0a3e6425 00000000 6b636f53     te <%d>.....Sock
   2a1c8:	25207465 65732064 6f697373 4449206e     et %d session ID
   2a1d8:	25203d20 000a0d64 42000800 42000c00      = %d......B...B
   2a1e8:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   2a1f8:	0001eaea 0001eae6 0001eae6 0001eb4c     ............L...
   2a208:	0001eb4c 0001eafe 0001eaf0 0001eb04     L...............
   2a218:	0001eb3a 0001ec78 0001ec58 0001ec58     :...x...X...X...
   2a228:	0001ece4 0001ec6a 0001ec86 0001ec5c     ....j.......\...
   2a238:	0001ec94 0001ecd4                       ........

0002a240 <_tcc_apbcmasks>:
   2a240:	00000100 00000200 00000400              ............

0002a24c <_tcc_cc_nums>:
   2a24c:	00020204                                ....

0002a250 <_tcc_gclk_ids>:
   2a250:	001b1a1a                                ....

0002a254 <_tcc_maxs>:
   2a254:	00ffffff 00ffffff 0000ffff              ............

0002a260 <_tcc_ow_nums>:
   2a260:	00020408                                ....

0002a264 <_tcc_intflag>:
   2a264:	00000001 00000002 00000004 00000008     ................
   2a274:	00001000 00002000 00004000 00008000     ..... ...@......
   2a284:	00010000 00020000 00040000 00080000     ................

0002a294 <tcc_interrupt_vectors.12458>:
   2a294:	0011100f                                ....

0002a298 <LfnOfs>:
   2a298:	07050301 12100e09 1c181614 0000001e     ................

0002a2a8 <excvt.4558>:
   2a2a8:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   2a2b8:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   2a2c8:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   2a2d8:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   2a2e8:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   2a2f8:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   2a308:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   2a318:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   2a328:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   2a338:	00005d5b                                []..

0002a33c <Tbl>:
   2a33c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   2a34c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   2a35c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   2a36c:	00d600ff 00f800dc 00d800a3 019200d7     ................
   2a37c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   2a38c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   2a39c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   2a3ac:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   2a3bc:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   2a3cc:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   2a3dc:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   2a3ec:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   2a3fc:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   2a40c:	00da00de 00d900db 00dd00fd 00b400af     ................
   2a41c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   2a42c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0002a43c <tbl_lower.4308>:
   2a43c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   2a44c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   2a45c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   2a46c:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   2a47c:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   2a48c:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   2a49c:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   2a4ac:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   2a4bc:	01050103 01090107 010d010b 0111010f     ................
   2a4cc:	01150113 01190117 011d011b 0121011f     ..............!.
   2a4dc:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   2a4ec:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   2a4fc:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   2a50c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   2a51c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   2a52c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   2a53c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   2a54c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   2a55c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   2a56c:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   2a57c:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   2a58c:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   2a59c:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   2a5ac:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   2a5bc:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   2a5cc:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   2a5dc:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   2a5ec:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   2a5fc:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   2a60c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0002a61c <tbl_upper.4309>:
   2a61c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   2a62c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   2a63c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   2a64c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   2a65c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   2a66c:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   2a67c:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   2a68c:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   2a69c:	01040102 01080106 010c010a 0110010e     ................
   2a6ac:	01140112 01180116 011c011a 0120011e     .............. .
   2a6bc:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   2a6cc:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   2a6dc:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   2a6ec:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   2a6fc:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   2a70c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   2a71c:	03940393 03960395 03980397 039a0399     ................
   2a72c:	039c039b 039e039d 03a0039f 03a303a1     ................
   2a73c:	03a503a4 03a703a6 03a903a8 041003aa     ................
   2a74c:	04120411 04140413 04160415 04180417     ................
   2a75c:	041a0419 041c041b 041e041d 0420041f     .............. .
   2a76c:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   2a77c:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   2a78c:	04030402 04050404 04070406 04090408     ................
   2a79c:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   2a7ac:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   2a7bc:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   2a7cc:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   2a7dc:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   2a7ec:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   2a7fc:	4354514d 00000000 00000004 00000000     MQTC............
	...
   2a814:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   2a854:	4354514d 00000000 00000004 00000000     MQTC............
	...
   2a86c:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   2a8ac:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   2a8bc:	00023a16 00023a10 00023a0a 00023a04     .:...:...:...:..
   2a8cc:	00023a1c 00023a24 00023a1c 000239fe     .:..$:...:...9..
   2a8dc:	000239f8 00023a1c 000239f2 000239f2     .9...:...9...9..
   2a8ec:	000239ec 000239e6 00023a24 00023a8e     .9...9..$:...:..
   2a8fc:	00023a88 00023a82 00023a7c 00023a94     .:...:..|:...:..
   2a90c:	00023a9c 00023a94 00023a76 00023a70     .:...:..v:..p:..
   2a91c:	00023a94 00023a6a 00023a6a 00023a64     .:..j:..j:..d:..
   2a92c:	00023a5e 00023a9c 00023b08 00023b02     ^:...:...;...;..
   2a93c:	00023afc 00023af6 00023b0e 00023b0e     .:...:...;...;..
   2a94c:	00023b0e 00023af0 00023aea 00023b0e     .;...:...:...;..
   2a95c:	00023ae4 00023ae4 00023ade 00023ad8     .:...:...:...:..
   2a96c:	33323130 37363534 62613938 66656463     0123456789abcdef
   2a97c:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   2a98c:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   2a99c:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   2a9ac:	20544547 00000000 54534f50 00000020     GET ....POST ...
   2a9bc:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   2a9cc:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   2a9dc:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   2a9ec:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   2a9fc:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   2aa0c:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   2aa1c:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   2aa2c:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   2aa3c:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   2aa4c:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   2aa5c:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   2aa6c:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   2aa7c:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   2aa8c:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   2aa9c:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   2aaac:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   2aabc:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   2aacc:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   2aadc:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   2aaec:	6f727245 6e692072 61697469 697a696c     Error initializi
   2aafc:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   2ab0c:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   2ab1c:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   2ab2c:	6f727245 6e692072 61697469 697a696c     Error initializi
   2ab3c:	5320676e 61736565 0a0d2177 00000000     ng Seesaw!......
   2ab4c:	74696e49 696c6169 2064657a 73656553     Initialized Sees
   2ab5c:	0d217761 0000000a 6e6e6143 6620746f     aw!.....Cannot f
   2ab6c:	20646e69 21554d49 00000a0d 20554d49     ind IMU!....IMU 
   2ab7c:	6e756f66 0a0d2164 00000000 20554d49     found!......IMU 
   2ab8c:	74696e69 696c6169 2164657a 00000a0d     initialized!....
   2ab9c:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   2abac:	657a696c 554d4920 00000a0d 70616548     lize IMU....Heap
   2abbc:	66656220 2065726f 72617473 676e6974      before starting
   2abcc:	73617420 203a736b 0a0d6425 00000000      tasks: %d......
   2abdc:	5f494c43 4b534154 00000000 3a525245     CLI_TASK....ERR:
   2abec:	494c4320 73617420 6f63206b 20646c75      CLI task could 
   2abfc:	20746f6e 69206562 6974696e 7a696c61     not be initializ
   2ac0c:	0d216465 0000000a 70616548 74666120     ed!.....Heap aft
   2ac1c:	73207265 74726174 20676e69 3a494c43     er starting CLI:
   2ac2c:	0d642520 0000000a 49464957 5341545f      %d.....WIFI_TAS
   2ac3c:	0000004b 3a525245 46495720 61742049     K...ERR: WIFI ta
   2ac4c:	63206b73 646c756f 746f6e20 20656220     sk could not be 
   2ac5c:	74696e69 696c6169 2164657a 00000a0d     initialized!....
   2ac6c:	70616548 74666120 73207265 74726174     Heap after start
   2ac7c:	20676e69 49464957 6425203a 00000a0d     ing WIFI: %d....
   2ac8c:	54204955 006b7361 3a525245 20495520     UI Task.ERR: UI 
   2ac9c:	6b736174 756f6320 6e20646c 6220746f     task could not b
   2acac:	6e692065 61697469 657a696c 0a0d2164     e initialized!..
   2acbc:	00000000 70616548 74666120 73207265     ....Heap after s
   2accc:	74726174 20676e69 54204955 3a6b7361     tarting UI Task:
   2acdc:	0d642520 0000000a 746e6f43 206c6f72      %d.....Control 
   2acec:	6b736154 00000000 3a525245 6e6f4320     Task....ERR: Con
   2acfc:	6c6f7274 73617420 6f63206b 20646c75     trol task could 
   2ad0c:	20746f6e 69206562 6974696e 7a696c61     not be initializ
   2ad1c:	0d216465 0000000a 70616548 74666120     ed!.....Heap aft
   2ad2c:	73207265 74726174 20676e69 746e6f43     er starting Cont
   2ad3c:	206c6f72 6b736154 6425203a 00000a0d     rol Task: %d....
   2ad4c:	6f727245 6e6f2072 6d656d20 2079726f     Error on memory 
   2ad5c:	6f6c6c61 69746163 6f206e6f 5246206e     allocation on FR
   2ad6c:	54524545 0d21534f 0000000a 6f727245     EERTOS!.....Erro
   2ad7c:	6e6f2072 61747320 6f206b63 66726576     r on stack overf
   2ad8c:	20776f6c 46206e6f 52454552 21534f54     low on FREERTOS!
   2ad9c:	00000a0d 000244ac 0002447c 0002448e     .....D..|D...D..
   2adac:	000243d0 0002448e 00024472 0002448e     .C...D..rD...D..
   2adbc:	000243d0 0002447c 0002447c 00024472     .C..|D..|D..rD..
   2adcc:	000243d0 000243d8 000243d8 000243d8     .C...C...C...C..
   2addc:	00024494 0002447c 0002447c 00024450     .D..|D..|D..PD..
   2adec:	00024534 00024450 00024472 00024450     4E..PD..rD..PD..
   2adfc:	00024534 0002447c 0002447c 00024472     4E..|D..|D..rD..
   2ae0c:	00024534 000243d8 000243d8 000243d8     4E...C...C...C..
   2ae1c:	0002453e 000246dc 0002462c 0002462c     >E...F..,F..,F..
   2ae2c:	0002462a 000246ce 000246ce 000246c4     *F...F...F...F..
   2ae3c:	0002462a 000246ce 000246c4 000246ce     *F...F...F...F..
   2ae4c:	0002462a 000246d4 000246d4 000246d4     *F...F...F...F..
   2ae5c:	00024764 000250e8 000250ca 00025084     dG...P...P...P..
   2ae6c:	00024fa2 00025084 000250bc 00025084     .O...P...P...P..
   2ae7c:	00024fa2 000250ca 000250ca 000250bc     .O...P...P...P..
   2ae8c:	00024fa2 00024f9a 00024f9a 00024f9a     .O...O...O...O..
   2ae9c:	00025300 00025748 00025608 00025608     .S..HW...V...V..
   2aeac:	00025604 00025720 00025720 00025712     .V.. W.. W...W..
   2aebc:	00025604 00025720 00025712 00025720     .V.. W...W.. W..
   2aecc:	00025604 00025728 00025728 00025728     .V..(W..(W..(W..
   2aedc:	0002592c                                ,Y..

0002aee0 <_global_impure_ptr>:
   2aee0:	200000cc                                ... 

0002aee4 <__sf_fake_stderr>:
	...

0002af04 <__sf_fake_stdin>:
	...

0002af24 <__sf_fake_stdout>:
	...
   2af44:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   2af54:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   2af64:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   2af74:	37363534 62613938 66656463 20200000              456789abcdef.

0002af81 <_ctype_>:
   2af81:	20202000 20202020 28282020 20282828     .         ((((( 
   2af91:	20202020 20202020 20202020 20202020                     
   2afa1:	10108820 10101010 10101010 10101010      ...............
   2afb1:	04040410 04040404 10040404 10101010     ................
   2afc1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2afd1:	01010101 01010101 01010101 10101010     ................
   2afe1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2aff1:	02020202 02020202 02020202 10101010     ................
   2b001:	00000020 00000000 00000000 00000000      ...............
	...

0002b084 <_init>:
   2b084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b086:	46c0      	nop			; (mov r8, r8)
   2b088:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b08a:	bc08      	pop	{r3}
   2b08c:	469e      	mov	lr, r3
   2b08e:	4770      	bx	lr

0002b090 <__init_array_start>:
   2b090:	000120dd 	.word	0x000120dd

0002b094 <_fini>:
   2b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b096:	46c0      	nop			; (mov r8, r8)
   2b098:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2b09a:	bc08      	pop	{r3}
   2b09c:	469e      	mov	lr, r3
   2b09e:	4770      	bx	lr

0002b0a0 <__fini_array_start>:
   2b0a0:	000120b5 	.word	0x000120b5
